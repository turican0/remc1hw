#include "sub_main.h"

#define debug1

bool IsHiddenWord = true;

//fix

std::string gameDataPath = "c:/prenos/magic1/cd2/CARPET";
std::string gameDataPath2 = "c:/prenos/magic1/data";

int unk_A9998_A99B0;
int loc_24080;
int unk_110003;
int unk_B0004;
int _no_support_loaded;
int unk_A7325;
int MEMORY[1];
int __CS__;
int __DS__;
int __ES__;
int _ZF;
typedef struct {
    int16 x;
    int16 y;
} Type_9AD90;
Type_9AD90 mouse_9AD90 = { 320, 200 };

void FixPerifery(char* text = nullptr, int a = 0, int b = 0, int c = 0) {
    if (text)
    {
        if (!strcmp(text, "cpuid"))
            printf("external pefifery - CPU identification!!!! - Fix It\n");
        else if (!strcmp(text, "fninit"))
            printf("external pefifery - CPU FPU unit turn on!!!! - Fix It\n");
        else if (!strcmp(text, "port0x3C7"))
            printf("external pefifery - Read VGA palette!!!! - Fix It\n");
        else if (!strcmp(text, "port0x3C8"))
            printf("external pefifery - Write VGA palette!!!! - Fix It\n");
        else if (!strcmp(text, "initVga320"))
            printf("external pefifery - Init VGA - resolution 320x200!!!! - Fix It\n");
        else if (!strcmp(text, "chRes"))
            printf("external pefifery - Change resolution type:%d!!!! - Fix It\n", a);
        else if (!strcmp(text, "mouseRes"))
            printf("external pefifery - Mouse Reset!!!! - Fix It\n");
        else if (!strcmp(text, "mouseSubr"))
            printf("external pefifery - Mouse Install subroutine!!!! - Fix It\n");
        else if (!strcmp(text, "mouseHide"))
            printf("external pefifery - Mouse hide cursor!!!! - Fix It\n");
        else if (!strcmp(text, "mouseSetPix"))
            printf("external pefifery - Mouse set pixel ratio!!!! - Fix It\n");
        else if (!strcmp(text, "blit320"))
            ;// printf("external pefifery - Blit320\n");
        else if (!strcmp(text, "blit640"))
            printf("external pefifery - Blit640\n");
        else
            printf("unknown external pefifery!!!! - Fix It\n");
    }
    else
        printf("unknown external pefifery!!!! - Fix It\n");
};//for devices comutications

//fix

char dataPath[MAX_PATH];
char* FixPath(char* inPath)
{
    if (strlen(inPath) >= 12)
        if (!memcmp(inPath, "C:\\carpet.cd", 12))
        {
            sprintf(dataPath, "%s/%s", gameDataPath2.c_str(), &inPath[3]);
            return dataPath;
        }
    sprintf(dataPath, "%s/%s", gameDataPath.c_str(), inPath);
    return dataPath;
}

//-------------------------------------------------------------------------
// Function declarations

void sub_10000(); // weak
void sub_10010(__int16 a1, __int16 a2);
uint8_t* sub_1002D(uint8_t* a1, uint8_t* a2);
__int16 sub_100B8();
__int16 sub_10166();
int sub_10190();
__int16 sub_101A1();
int sub_10254();
void sub_10300();
unsigned int sub_103C0(void *a1, unsigned int a2);
int sub_103F0();
void sub_104D0();
int sub_107C0(__int16 a1, __int16 a2, int a3);
unsigned int sub_108C0();
__int16 sub_10960();
__int16 sub_10AB0();
__int16 sub_10BD0();
Type_AE3E0* sub_10CB0(unsigned __int16 a1);
void sub_10D40(Type_AE3E0* a1, Type_sub168_2* a2, __int16 a3);
void sub_10EB0(Type_sub_AE3E0* a1);
void sub_10F10(Type_sub_AE3E0* a1);
Type_sub_AE3E0* sub_10FD0(Type_AE3E0* a1, __int16 a2);
void sub_11010(Type_AE3E0* a1);
__int16 sub_11050();
void sub_111B0(int a1, int a2);
int sub_11410(int a1, int a2);
int sub_11490(int a1);
int sub_114B0(int a1, _DWORD *a2, _DWORD *a3);
int sub_11540();
int sub_11640(Type_AE400_29795* a1, axis_3d* a2, char a3);
int sub_11760(axis_3d* a1);
int sub_11810(axis_3d* a1);
bool sub_118C0(axis_3d* a1, axis_4d* a2, axis_3d* a3, axis_4d* a4);
bool sub_11950(Type_AE400_29795* a1, Type_AE400_29795* a2);
int sub_11980(int a1);
int sub_11AC0(_WORD *a1);
int sub_11C00(__int16 *a1);
int sub_11D10(int a1);
int sub_11E50(__int16 *a1, char a2, char a3);
int sub_11F50(axis_3d* position);
int sub_120B0(int a1, unsigned __int8 a2, unsigned __int16 a3);
int sub_124F0(int a1, char a2, unsigned __int16 a3);
int sub_127E0(int a1, char a2, unsigned __int16 a3);
int sub_12B50(Type_AE400_29795* a1, int a2, unsigned __int8 a3, unsigned __int16 a4);
unsigned int sub_12C50(_WORD *a1);
char sub_12D10(_WORD *a1);
_BOOL1 sub_12F70(_WORD *a1);
int sub_13170(int a1);
int sub_132B0(int a1);
int sub_136C0(int a1);
bool sub_13800(int a1);
int sub_138E0();
int sub_138F0(int a1);
bool sub_13990(_WORD *a1);
int sub_13A10(int a1);
bool sub_13A70(int a1);
bool sub_13BA0(int a1);
bool sub_13CA0(int a1);
bool sub_13DC0(int a1);
bool sub_13DD0(int a1);
int sub_13F00(int a1);
int sub_14120(int a1);
unsigned int sub_14230(int a1);
int sub_14310(int a1);
int sub_143A0(int a1);
int sub_145B0(int a1);
int sub_147E0(int a1);
int sub_14B10(int a1);
int sub_14C40(int a1);
int sub_14C80(int a1);
int sub_14CE0(int a1);
int sub_14D00(int a1);
int sub_14D20(int a1);
int sub_14D40(int a1);
int sub_14D60(int a1);
int sub_14DA0(int a1);
int sub_14DC0(int a1);
unsigned int sub_14E60(int a1, unsigned __int8 a2);
int sub_14EB0(int a1);
unsigned int sub_15080(int a1);
unsigned int sub_15260(int a1, unsigned __int8 a2);
unsigned int sub_15340(int a1, int a2);
unsigned int sub_153B0(int a1, int a2);
__int16 sub_15420(int a1);
bool sub_15440(int a1, int a2);
int sub_15470(int a1, int a2, signed int a3, signed int a4);
int sub_155F0(int a1, unsigned __int8 a2);
int sub_15A00(int a1, unsigned __int8 a2);
bool sub_15E60(int a1, unsigned __int8 a2);
bool sub_15E90(int a1, unsigned __int8 a2);
int sub_15EC0(int a1);
unsigned int sub_16000(int a1, unsigned __int8 a2);
char sub_16030(int a1);
char sub_16310(_DWORD *a1);
int sub_16540(int result);
unsigned int sub_16800(unsigned int a1, int a2);
int sub_16870(int a1);
char sub_16890(int a1, int a2);
_BOOL1 sub_16920(int a1);
char sub_16990();
int sub_169E0();
void sub_16B00();
// char sub_17C20(__int16 a1, __int16 a2, __int16 a3);
void MakeControlCommand_188A0(int a1, char a2);
// void sub_192D8(char a1, _BOOL1 a2, char a3, char a4, __int16 a5);
int sub_192F3();
void sub_193EE(__int16 a1);
// int sub_19470(__int16 a1);
int sub_194F0();
__int16 sub_19550(int a1);
signed int sub_19650(axis_3d* a1);
void sub_196E0(Type_AE400_29795* a1);
void sub_19B10(Type_AE400_29795* a1, char a2);
void sub_19D70(Type_AE400_29795* a1, char a2);
int sub_1A120(Type_AE400_29795* a1, char a2, unsigned __int16 (*a3)(Type_AE400_29795*, int));
void sub_1A390(Type_AE400_29795* a1, unsigned __int16 a2);
void sub_1A6C0(Type_AE400_29795* a1, char a2);
void sub_1A800(Type_AE400_29795* a1);
int sub_1A8E0(Type_AE400_29795* a1, Type_AE400_29795* a2);
int sub_1A990(Type_AE400_29795* a1, Type_AE400_29795* a2);
void sub_1AA40(Type_AE400_29795* a1, int a2);
int sub_1AB10(Type_AE400_29795* a1, int a2);
int sub_1AB70(Type_AE400_29795* a1, Type_AE400_29795* a2);
int sub_1AE30(Type_AE400_29795* a1, Type_AE400_29795* a2);
int sub_1AEE0(Type_AE400_29795* a1, Type_AE400_29795* a2);
void sub_1B060(Type_AE400_29795* a1);
void sub_1B070(Type_AE400_29795* a1);
void sub_1B090(Type_AE400_29795* a1);
void sub_1B0E0(Type_AE400_29795* a1);
void sub_1B100(Type_AE400_29795* a1);
void sub_1B110(Type_AE400_29795* a1);
void sub_1B120(Type_AE400_29795* a1);
void sub_1B160(Type_AE400_29795* a1);
void sub_1B200(Type_AE400_29795* a1);
void sub_1B2D0(Type_AE400_29795* a1);
void sub_1B320(Type_AE400_29795* a1);
void sub_1B330(Type_AE400_29795* a1);
void sub_1B340(Type_AE400_29795* a1);
void sub_1B350(Type_AE400_29795* a1);
void sub_1B370(Type_AE400_29795* a1);
void sub_1B3C0(Type_AE400_29795* a1);
void sub_1B4C0(Type_AE400_29795* a1);
void sub_1B4E0(Type_AE400_29795* a1);
void sub_1B4F0(Type_AE400_29795* a1);
void sub_1B500(Type_AE400_29795* a1);
void sub_1B510(Type_AE400_29795* a1);
void sub_1B520(Type_AE400_29795* a1);
void sub_1B570(Type_AE400_29795* a1);
void sub_1B580(Type_AE400_29795* a1);
void sub_1B590(Type_AE400_29795* a1);
void sub_1B5A0(Type_AE400_29795* a1);
void sub_1B5D0(Type_AE400_29795* a1);
void sub_1BB20(Type_AE400_29795* a1);
void sub_1BBE0(Type_AE400_29795* a1);
void sub_1BC10(Type_AE400_29795* a1);
void sub_1BC40(Type_AE400_29795* a1);
void sub_1BC50(Type_AE400_29795* a1);
void sub_1BCE0(Type_AE400_29795* a1);
void sub_1BD10(Type_AE400_29795* a1);
void sub_1BD20(Type_AE400_29795* a1);
void sub_1C110(Type_AE400_29795* a1);
void sub_1C170(Type_AE400_29795* a1);
void sub_1C3C0(Type_AE400_29795* a1);
void sub_1C3D0(Type_AE400_29795* a1);
void sub_1C490(Type_AE400_29795* a1);
void sub_1C4A0(Type_AE400_29795* a1);
void sub_1C4F0(Type_AE400_29795* a1);
void sub_1C880(Type_AE400_29795* a1);
void sub_1C8D0(Type_AE400_29795* a1);
void sub_1C8E0(Type_AE400_29795* a1);
void sub_1C8F0(Type_AE400_29795* a1);
void sub_1C900(Type_AE400_29795* a1);
void sub_1C960(Type_AE400_29795* a1);
void sub_1CA00(Type_AE400_29795* a1);
void sub_1CA20(Type_AE400_29795* a1);
void sub_1CA30(Type_AE400_29795* a1);
void sub_1CA40(Type_AE400_29795* a1);
void sub_1CA50(Type_AE400_29795* a1);
void sub_1CE30(Type_AE400_29795* a1);
void sub_1CF50(Type_AE400_29795* a1);
void sub_1CF60(Type_AE400_29795* a1);
void sub_1CFE0(Type_AE400_29795* a1);
void sub_1CFF0(Type_AE400_29795* a1);
void sub_1D060(Type_AE400_29795* a1);
void sub_1D6D0(Type_AE400_29795* a1);
void sub_1DA60(Type_AE400_29795* a1);
void sub_1DC80(Type_AE400_29795* a1);
void sub_1DCB0(Type_AE400_29795* a1);
void sub_1DCC0(Type_AE400_29795* a1);
void sub_1DCD0(Type_AE400_29795* a1);
void sub_1DD50(Type_AE400_29795* a1);
void sub_1DD90(Type_AE400_29795* a1);
void sub_1DDB0(Type_AE400_29795* a1);
void sub_1DDD0(Type_AE400_29795* a1);
void sub_1DDE0(Type_AE400_29795* a1);
int sub_1DDF0(int a1);
void sub_1DE10(Type_AE400_29795* a1);
int sub_1DE20(int a1);
void sub_1DE30(Type_AE400_29795* a1);
__int16 sub_1DE40(int a1);
void sub_1DFE0(int a1);
void sub_1E380(int a1);
void sub_1E6F0(Type_AE400_29795* a1);
int sub_1E700(int a1);
void sub_1E710(Type_AE400_29795* a1);
void sub_1E720(int a1);
void sub_1E770(_WORD *a1);
void sub_1E810(int a1);
_BOOL1 sub_1E920(_WORD *a1, unsigned __int16 a2, unsigned __int16 a3, unsigned __int16 a4);
_WORD *sub_1E9B0(unsigned __int16 a1, _WORD *a2, _WORD *a3);
char sub_1EA40(int a1);
void sub_1EED0(int a1);
void sub_1F120(int a1);
void sub_1F390(int a1);
int sub_1F5A0(int a1);
void sub_1F5B0(Type_AE400_29795* a1);
char sub_1F640(int a1);
int sub_1FA00(int a1);
void sub_1FAA0(Type_AE400_29795* a1);
char sub_1FAC0(int a1);
int sub_1FE90(int a1);
void sub_1FEC0(Type_AE400_29795* a1);
// void sub_1FF40(char a1, int a2, char a3, int a4, int a5);
void sub_1FF60(Type_AE400_29795* a1);
void sub_201D0(int a1);
char sub_203E0(int a1);
int sub_203F0(int a1);
void sub_20400(Type_AE400_29795* a1);
int sub_20410(int a1);
int sub_20450(int a1);
void sub_20480(Type_AE400_29795* a1);
void sub_20700(int a1);
void sub_20710(Type_AE400_29795* a1);
unsigned __int16 sub_207E0(int a1);
char sub_20B60(int a1);
int sub_20B70(int a1);
void sub_20B80(int a1);
int sub_20BD0();
void sub_20D00(char a1);
void sub_20E60_20E60();
int nullsub_1(_DWORD, _DWORD); // weak
void DrawGameFrame_20FB0();
void sub_22810(int a1, int a2, int a3, int a4, int a5, unsigned __int8 a6);
int sub_22880();
void sub_22E50(Type_AE400_29795* a1x);
char sub_23940(__int16 a1, __int16 a2, TypeTab* a3);
void sub_23AE0(__int16 a1, __int16 a2, int a3, unsigned __int8 a4);
void sub_23CF0(__int16 a1, __int16 a2, int a3);
void sub_23D40(int a1, int a2, Type_AE400_29795* a3x, char a4);
char sub_24230(__int16 a1, __int16 a2, unsigned int a3, char a4);
int sub_247C0(int result, int a2, __int16 a3, __int16 a4, int a5, unsigned __int8 a6);
void sub_24AB0();
unsigned __int8 *sub_24B50(unsigned __int8 *a1);
int sub_24B80();
void sub_24BB0();
unsigned __int8 sub_24BF0(unsigned __int8 a1);
void sub_24C20(int a1, int a2, int a3, int a4, unsigned __int16 a5);
void sub_24CA0(int a1, int a2, int a3, int a4, unsigned __int16 a5);
void sub_24D20(int a1, int a2, int a3, int a4, unsigned __int16 a5);
void sub_24DA0(int a1, int a2, int a3, int a4, unsigned __int16 a5);
int nullsub_2(void); // weak
void sub_24F60(Type_AE400_29795* a1x);
int sub_25130(int a1);
int sub_252B0(int a1);
int sub_252D0(int a1);
int sub_253E0(int a1);
int sub_253F0(int a1);
void sub_25410(int a1);
void sub_25470(int a1);
void sub_25570(Type_AE400_29795* a1);
int sub_255D0(__int16 *a1, __int16 a2, __int16 a3);
void sub_25670(Type_AE400_29795* a1);
int sub_25760(int a1);
int sub_257B0(int a1);
int sub_258A0(int a1);
int nullsub_19(_DWORD); // weak
void sub_25990(Type_AE400_29795* a1);
int sub_25A60(int a1);
__int16 sub_25CE0(int a1);
void sub_25EC0(int a1);
int sub_26140(int a1);
void sub_262D0(int a1);
int sub_26360(int a1);
int sub_263C0(int a1);
_BOOL1 sub_264D0(unsigned __int16 a1);
// int sub_26560(int a1, int a2);
// int sub_26670(int a1, _WORD *a2);
// int sub_26760(int a1, _WORD *a2);
int sub_26890(_WORD *a1);
void sub_26920(int a1);
void sub_269A0(int a1);
void sub_26A60(int a1);
int sub_26C00(int a1);
int sub_26CE0(int a1);
void sub_26D20(int a1);
int sub_26E90(int a1);
void sub_27030(int a1);
__int16 sub_274D0(int a1);
int sub_275C0(__int16 *a1);
void sub_27690(_WORD *result, Type_AE400_29795* a2x);
void sub_277D0(int a1, int a2);
char sub_279D0(int a1);
char sub_27D30(int a1);
unsigned __int16 sub_28200(int a1);
char sub_285C0(int a1);
// int sub_28D10(int a1, int a2);
unsigned int sub_28DC0(int a1);
int sub_28FE0(int a1);
int sub_293D0(int a1);
int sub_29540(int a1);
int sub_29640(int a1);
__int16 sub_296A0(int a1);
int sub_29700(int a1);
__int16 sub_29780(int a1);

int sub_29920_29960(int a1);
void sub_299D0_29A10(int a1);
void sub_29BA0_29BE0(int a1);
void PrepRot_29C30_29C70(__int16 roll);
// char DrawSkyTerrainParticles_2A700_2A740(int a1, __int16 a2, __int16 a3, __int16 a4, int a5, int a6, __int16 a7, int a8);
void sub_2C410_2C450(unsigned int a1);
void DrawSprite_2DCB0_2DCF0(Type_BegBscreen* a2);
void DrawSprite_2F170_2F1B0(Type_BegBscreen* a2);
void DrawSprite_2FC50_2FC90(Type_BegBscreen* a2);
void DrawSky_30730_30770(__int16 a1);
void sub_309D0_30A10(int a1);
void setViewPort_30A70_30AB0(int a1);
void sub_30B30_30B70();
int sub_30D30_30D70(__int16 a1);
void DrawWorld_30D90_30DD0(int a2, int a3, __int16 a4, int a5, int a6, int a7, int a8);
void sub_315C0_31600();
void sub_31600_31640();
void SetPalette_319A0_319E0(TColor* palette);
void sub_31A00_31A40();
void sub_31A60_31AA0();
int sub_31AE0(int a1);
unsigned __int16 sub_31C10(unsigned __int8 a1, unsigned __int8 a2);
unsigned __int16 sub_31FA0();
unsigned __int16 sub_32130();
unsigned __int16 sub_322B0();
unsigned __int16 sub_32390();
unsigned __int16 sub_32490(unsigned __int16 a1);
unsigned __int16 sub_326F0();
char sub_32950();
int sub_32DB0();
int sub_32E40();
unsigned __int16 sub_32ED0(int a1, unsigned __int8 a2);
unsigned __int16 sub_32B90_sub_32F80(int a1, int a2);
unsigned __int8 sub_330F0(unsigned __int8 a1, unsigned __int8 a2);
char sub_332A0(unsigned __int8 a1, unsigned __int8 a2);
unsigned __int16 sub_33570(unsigned __int8 a1);
unsigned __int16 sub_338F0();
// char sub_33A30(char a1, char a2, unsigned __int16 a3);
char sub_33800_33BF0(char a1, char a2, unsigned __int16 a3, unsigned __int8 a4);
unsigned __int16 sub_33ED0(unsigned __int16 a1, char a2);
char sub_33F80(unsigned __int16 a1, __int16 a2);
char sub_34200(unsigned __int16 a1, __int16 a2);
// int TopProcedure_340B0_34470(int a1, __int16 a2, __int16 a3, unsigned __int16 a4, int a5);
int sub_34460_34820();
int sub_348B0();
// void DrawAndEventsInGame_34530_348F0(__int16 a1, __int16 a2, __int16 a3);
void sub_34610_349D0(__int16 a2, __int16 a3);
char sub_34690_34A50();
void sub_34B00_34EC0();
void sub_34B40_34F00();
void sub_34C60_35020();
int sub_34C80_35040();
int ProcessCommandLine_34DD0_35190(int argc, char** argv);
int FlvInitSet_356E0_35AA0();
int sub_35AD0();
int sub_35B60();
// void sub_357C0_35B80(__int16 a1, int a2, unsigned __int16 a3, unsigned __int16 a4);
void sub_358A0_35C60();
int sub_35C90(__int16 a1, __int16 a2, __int16 a3);
int sub_35CC0(__int16 a1, int a2, char a3, char a4);
int sub_35D20(__int16 a1, unsigned __int16 a2, __int16 a3, __int16 a4);
_WORD *sub_35FB0(__int16 a1, __int16 a2, __int16 a3, __int16 a4);
int sub_360F0(unsigned __int16 a1, unsigned __int16 a2, __int16 a3, __int16 a4);
int sub_361A0(unsigned __int16 a1, unsigned __int16 a2, __int16 a3, __int16 a4);
unsigned int sub_36260(char a1, char a2, char a3, char a4);
char sub_35F30_362F0(int a1, char a2, char a3, int a4, int a5, unsigned __int8 a6);
void sub_36440(unsigned __int8 a1, char a2, int a3, int a4);
int sub_36480(int a1);
__int16 sub_36580(char a1, char a2, char a3, char a4);
int sub_36680(int a1, _WORD *a2);
int sub_367F0(int a1);
char sub_36840(int a1, _WORD *a2);
_WORD *sub_36980(int a1);
int sub_369E0();
Type_sub168* sub_36700_36AC0(int a1, unsigned __int16 a2, Type_168* a3);
int sub_36850_36C10(Type_sub168* a1);
// _DWORD ios::failure::cause(_DWORD); weak
Type_sub168_2* sub_369E0_36DA0(Type_sub168* a1, unsigned int a2, __int16 a3);
void sub_36A90_36E50(Type_sub168* a1, Type_sub168_2* a2);
void sub_36850_36C10_36FD0(Type_sub168* a1);
// void sub_37025(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
int sub_37143(int a1, __int16 a2);
int sub_36DC2_37182();
int sub_371A0(int a1);
char sub_371B0(int a1, unsigned __int16 a2);
int sub_37350(int a1);
void sub_36FA0_37360(Type_AE400_29795* event, __int16 a2);
int sub_373F0(_WORD *a1, __int16 a2);
void sub_370A0_37460(Type_AE400_29795* a1, __int16 a2);
__int16 sub_374A0(__int16 *a1, __int16 a2);
_WORD *sub_374F0(_WORD *a1, __int16 a2, __int16 a3);
unsigned int sub_37510(_WORD *a1, __int16 a2);
int sub_37580();
int sub_37220_375E0();
int sub_37680();
Type_AE400_29795* sub_373F0_377B0(axis_3d* a1, int a2, int a3);
int sub_37800(int a1, char a2);
char sub_37920(unsigned __int16 *a1);
int sub_37AD0();
int sub_37AE0(int a1);
int sub_37B00(int a1);
int sub_37B20(int a1);
int sub_37B40(int a1);
int sub_37B60(int a1);
int sub_37B80(int a1);
int sub_37BA0(int a1);
int sub_37BC0(int a1);
int sub_37BE0(int a1);
int sub_37C60(int a1);
int sub_37CE0(int a1);
int sub_37DC0(int a1);
int sub_37E40();
int sub_37E60();
int sub_37E80();
int sub_37EA0();
int sub_37EC0();
int sub_37EE0();
int sub_37F00();
int sub_37F20();
int sub_37F40();
int sub_37F60();
int sub_37F80(int *a1);
int sub_38070(int a1);
int sub_380F0(int a1);
int sub_38180(int a1);
int sub_38200(int a1);
int sub_38270(int a1);
int sub_385F0(int a1);
int sub_386F0(int a1);
int sub_38830(int a1);
int sub_38A60(int a1);
int sub_38BA0(int a1);
_DWORD *sub_38D60(int a1);
int sub_38F80(int a1);
int sub_38FE0(int a1);
int sub_390E0(int a1);
int sub_391F0(int a1);
int sub_39340(int a1);
int sub_39450(int a1);
int sub_39580(int a1);
int sub_39810(int a1);
int sub_39930(int a1);
int sub_39A60(int a1);
int sub_39B80();
int sub_39BA0();
int sub_39BC0();
int sub_39BE0();
int sub_39C00();
int sub_39C20();
int sub_39C40();
int sub_39CC0();
int sub_39CE0();
int sub_39D00();
int sub_39D20();
int sub_39D40();
int sub_39D60();
int sub_39D90(int a1);
int sub_39E10(int a1);
int sub_39EC0(int a1);
int sub_39F40(int a1);
int sub_39FC0(int a1);
int sub_3A040(int a1);
int sub_3A0C0(int a1);
int sub_3A140(int a1);
int sub_3A1C0(int a1);
int sub_3A240(int a1);
int sub_3A2C0(int a1);
int sub_3A340(int a1);
int sub_3A3C0(int a1);
int sub_3A440(int a1);
int sub_3A520(int a1);
int sub_3A590(int a1);
int sub_3A5F0(int a1);
int sub_3A670(int a1);
int sub_3A710(int a1);
int sub_3A790(int a1);
_WORD *sub_3A810(int a1);
int sub_3A890(int a1);
int sub_3A8F0(int a1);
int sub_3A950(int a1);
int sub_3A9C0(int a1);
int sub_3AA30(int a1);
_WORD *sub_3AAB0(__int16 *a1);
int sub_3AB50(__int16 *a1);
int sub_3ABF0(int a1);
_WORD *sub_3AC50(int a1);
_WORD *sub_3ACB0(int a1);
_WORD *sub_3AD20(int a1);
int sub_3AD90(int a1);
int sub_3AE20(int a1);
int sub_3AEC0(int a1);
int sub_3AF60(int a1);
int sub_3AFF0(int a1);
int sub_3B040(__int16 *a1);
int sub_3B130(int a1);
int sub_3B180(int a1);
int sub_3B200(int a1);
_WORD *sub_3B280(int a1);
_WORD *sub_3B300(int a1);
int sub_3B380(int a1);
int sub_3B3E0(int a1);
int sub_3B440(int a1);
int sub_3B4A0(int a1);
int sub_3B500(int a1);
int sub_3B550(int a1);
int sub_3B5B0(int a1);
int sub_3B620(int a1);
int sub_3B680(int a1);
int sub_3B750();
_WORD *sub_3B760(int a1);
int sub_3B7E0(int a1);
_WORD *sub_3B850(int a1);
int sub_3B920(int a1);
int sub_3B9A0(int a1);
int sub_3BA10(int a1);
_WORD *sub_3BA70(int a1);
int sub_3BAE0(int a1);
int sub_3BB30(int a1);
int sub_3BB80(int a1);
int sub_3BBE0(int a1);
int sub_3BC60(int a1);
int sub_3BCB0(int a1);
int sub_3BD40(int a1);
int sub_3BDD0(int a1);
int sub_3BE60(int a1, char a2, char a3);
int sub_3BEB0(int a1);
int sub_3BED0(int a1);
int sub_3BEF0(int a1);
int sub_3BF10(int a1);
int sub_3BF30(int a1);
int sub_3BF50(int a1);
int sub_3BF70(int a1);
int sub_3BF90(int a1);
int sub_3BFB0(int a1);
int sub_3BFD0(int a1);
int sub_3BFF0(int a1);
int sub_3C010(int a1);
int sub_3C030(int a1);
int sub_3C050(int a1);
int sub_3C070(int a1);
int sub_3C090(int a1);
int sub_3C0B0(int a1);
int sub_3C0D0(int a1);
int sub_3C0F0(int a1);
int sub_3C110(int a1);
int sub_3C130(int a1);
int sub_3C150(int a1);
int sub_3C170(int a1);
int sub_3C190(int a1);
int sub_3C1B0(int a1);
int sub_3C1D0(int a1);
int sub_3C1F0(int a1);
int sub_3C210(int a1);
int sub_3C230(int a1);
int sub_3C250(int a1);
int sub_3C270(int a1);
int sub_3C290(int a1);
int sub_3C2B0(int a1, char a2, char a3, int a4, __int16 a5, char a6, char a7, int a8, __int16 a9);
int sub_3C380(int a1);
int sub_3C3A0(int a1);
int sub_3C3D0(int a1);
int sub_3C400(int a1);
int sub_3C430(int a1);
int sub_3C460(int a1);
int sub_3C490(int a1);
int sub_3C4C0(int a1);
int sub_3C4F0(int a1);
int sub_3C520(int a1);
int sub_3C550(int a1);
int sub_3C580(int a1);
int sub_3C5B0(int a1);
int sub_3C5E0(int a1);
int sub_3C610(int a1);
int sub_3C640(int a1);
int sub_3C670(int a1);
int sub_3C6A0(int a1);
int sub_3C6D0(int a1);
int sub_3C700(int a1);
int sub_3C730(int a1);
int sub_3C760(int a1);
int sub_3C790(int a1);
int sub_3C7C0(int a1);
int sub_3C7F0();
int sub_3C820();
int sub_3C850();
int sub_3C880();
char sub_3C8B0();
void sub_3C800_sub_3CB40();
int sub_3C9D0_3CD10();
char sub_3DFD0(int a1, char a2);
char sub_3E050();
int sub_3E090();
char sub_3E440(__int16 a1, void *a2);
char sub_3E690(__int16 a1);
void sub_3E410_3E750(__int16 a1);
char sub_3E7A0(__int16 a1);
char sub_3E7F0(__int16 a1);
char sub_3E8C0(__int16 a1);
char sub_3E980(__int16 a1);
char sub_3E690_3E9D0(__int16 a1);
void sub_3E750_3EA90(__int16 a1);
char sub_3EAE0(__int16 a1);
char sub_3E7F0_3EB30(__int16 a1);
char sub_3E8C0_3EC00(__int16 a1);
char sub_3ECC0(__int16 a1);
void sub_3ED10(_BYTE *a1);
_BYTE *sub_3EF90();
int access_3EC80_3EFC0(char* a1);
void CreateGameDir_3EC90_3EFD0(uint8_t diskChar, char* dir1, char* dir2);
int sub_3EEA0_3F1E0(char* path, uint8_t* buffer);
int sub_3EF20_3F260();
bool access_3EF30_3F270(char* a1);
char sub_3EF50_3F290(char *a1, char *a2, const char *a3);
void sub_3F1D0_3F510();
int sub_3F370_3F6B0();
void sub_3F398_3F6D8();
void sub_3F753(unsigned __int8 a1);
void sub_3F4CE_3F80E();
// void sub_3F54D_3F88D(__int16 a1, __int16 a2, __int16 a3, __int16 a4);
// void sub_3F8C7(__int16 a1, __int16 a2, __int16 a3, __int16 a4);
unsigned __int8 sub_3F76D_sub_3FAAD(int a1);
void InitDigijoy_3F7D0_3FB10(char* textBuffer);
void InitAnojoy_3F820_sub_3FB60(__int16 a2, int a3, int a4, int a5, char a6);
void sub_3FB30_3FE70(__int16 a1, __int16 a2, char* a3);
char sub_3FCA0_3FFE0(char a5, __int16 a6, __int16 a7, __int16 a8, __int16 a9, __int16 a10, __int16 a11);
void sub_40440_40780(Pathstruct* pathstruct);
int sub_main(int argc, const char **argv, const char **envp);
int sub_40890();
int sub_407A0_40AE0();
int sub_408D0_40C10();
_BOOL1 sub_40D20(unsigned __int16 a1);
char sub_40D50(__int16 a1, __int16 a2, __int16 a3, char a4);
int sub_40D30_41070(__int16 *a1, __int16 a2, __int16 a3, __int16 a4, char a5);
int nullsub_3(_DWORD); // weak
int sub_41160(unsigned __int16 a1, unsigned __int16 a2);
char sub_40EDC_4121C(_BYTE *a1, _BYTE *a2, char a3, char a4, char a5, __int16 a6, __int16 a7, __int16 a8);
__int16 sub_40F87_412C7(__int16 a1, __int16 a2);
unsigned int Distance_410CE_4140E(unsigned int a1);
void sub_41484(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4);
int sub_411D7_41517(void *a2, unsigned __int16 a3, char a4);
int sub_411FD_4153D(void *a2, unsigned __int16 a3, char a4);
void sub_41230_41570();
void sub_41490_417D0();
void sub_41540_41880();
unsigned __int16 sub_415C0_41900();
unsigned int sub_419F0();
char sub_41780_41AC0();
char sub_41E60(int a1, int a2);
int sub_41C70_41FB0(Type_AE400_29795* event, axis_3d* position);
// int sub_42000(__int16 a1, int a2, int a3);
void sub_41CF0_42030(Type_AE400_29795* event, axis_3d* position);
void sub_41DD0_42110(Type_AE400_29795* event);
void sub_41E80_421C0(Type_AE400_29795* event);
void sub_41E90_421D0(Type_AE400_29795* event);
void sub_41EC0_42200(axis_3d* a1, unsigned __int16 a2, __int16 a3, __int16 a4);
_WORD *sub_41F50_42290(int a1, _WORD *a2);
int sub_42000_42340(axis_3d* a1, int a2, int a3, int a4, int a5);
int sub_423D0(int a1, int a2, int a3, int a4, int a5);
__int16 sub_42150_42490(axis_3d* a1, axis_3d* a2);
__int16 sub_42180_424C0(axis_3d* a1, axis_3d* a2);
int sub_42210_42550(__int16 a1, __int16 a2);
int sub_42240_42580(int a1, __int16 a2);
int sub_422A0_425E0(unsigned __int16 a1, __int16 a2, int a3, unsigned __int16 a4);
int sub_42640(_WORD *a1, _WORD *a2);
unsigned int sub_42340_42680(axis_3d* a1, axis_3d* a2);
int sub_426D0(_WORD *a1, _WORD *a2);
unsigned int sub_423D0_42710(axis_3d* a1, axis_3d* a2);
int sub_42750(_WORD *a1, _WORD *a2);
void sub_424F0_42830(Type_AE400_29795* a1, unsigned __int8 a2);
int sub_42510_42850(int a1);
char sub_42530_42870(char a1);
void* malloc_42540_42880(size_t size);
void* malloc_425C0_42900(size_t size);
char sub_42990(int a1, int a2);
void free_426E0_42A20(void* buffer);
int sub_42730_42A70(int a1, int a2);
int sub_42AE0(int a1, int a2);
int sub_42BA0(int a1);
void sub_428B0_42BF0();
int sub_42C70(_BYTE *a1, char *a2, unsigned __int8 a3);
int sub_42A00_42D40(__int16 a1);
int sub_42C70_42FB0(__int16 a1);
int NetworkInit_42CF0_43030();
int sub_43080(_BYTE *a1, char *a2);
int sub_43120(_BYTE *a1);
int sub_43150(__int16 a1);
int sub_43270(unsigned int a1, void *a2);
int sub_432F0(unsigned int a1, char *a2, unsigned int a3);
int sub_43350(unsigned int a1, int a2, unsigned __int16 a3);
int sub_433C0(unsigned int a1, const void *a2, unsigned int a3);
int sub_43430(unsigned int a1, char *a2, unsigned int a3);
int sub_43490();
int sub_43170_434B0(__int16 a1);
int SetNetbios_431A0_434E0(myNCB* connection);
void InitNetwork_43270_435B0();
void sub_433C0_43700();
int sub_43430_43770(char *a1, __int16 a2);
int sub_43AA0(__int16 a1);
void sub_43BB0(unsigned __int16 a1, char *a2, unsigned int a3);
void sub_43C10(unsigned __int16 a1, char *a2, unsigned int a3);
void sub_43C70(char *a1, unsigned int a2);
char sub_43B20_sub_43E60(int a1, unsigned int a2);
char *sub_44190(const char *a1);
void sub_43EC0_44200();
void sub_44470_447B0();
void sub_44700_44A40(char *a1, char** a2, int a3);
void sub_44730_44A70();
void sub_44840_44B80();
int sub_448E0_44C20();
__int16 sub_44BE0_44F20(int a1, char a2);
signed int sub_44F50(int a1);
signed int sub_44FD0(int a1);
int sub_45070(int a1, int a2);
int sub_45410_45750(int a1);
void sub_455D0_45910(Type_AE400_29795* a1);
void sub_45C10_45F50(Type_AE400_29795* a1);
void sub_45C90_45FD0(Type_AE400_29795* a1x);
int sub_46300(int a1);
int sub_466F0(int a1);
int sub_467C0(int a1);
int sub_46520_46860(int a1);
int sub_46540_46880(Type_AE400_29795* a1);
void sub_46840_46B80(Type_AE400_29795* a1);
void sub_46B00_46E40(Type_AE400_29795* a1, Type_AE400_29795* a2, int a3, int a4);
unsigned int sub_46FE0(int a1, int a2, int a3);
int sub_47060(int a1, __int16 a2);
__int16 sub_470F0(int a1);
char sub_47250(int a1);
int sub_47360(int a1);
int sub_473C0(int a1);
int sub_47420(int a1);
int sub_47470(int a1);
int sub_47740(int a1);
char sub_47CA0(int a1);
int sub_47DB0(int a1);
int sub_47F10(_DWORD *a1, int a2, int a3, int a4);
int sub_47FA0(int a1);
int sub_48110(int a1);
int sub_48200(int a1);
int sub_482D0(int a1);
int sub_48510(int a1);
int sub_48570(int a1);
int sub_48680(int a1);
void sub_48700(__int16 a1, __int16 a2, __int16 a3, __int16 a4);
void sub_487B0(__int16 a1, __int16 a2, __int16 a3, __int16 a4);
int sub_48860(__int16 a1, __int16 a2, __int16 a3, __int16 a4);
bool sub_488B0(__int16 a1, __int16 a2, __int16 a3, __int16 a4);
char sub_48710_48A50(int a1, int a2, __int16 a3, __int16 a4, int a5, int a6, __int16 a7, int a8);
int DrawMinimap_49300_49640(int a1, int a2, int a3, int a4, int a5, int a6, __int16 a7, int a8, int a9, int a10);
int sub_49BD0(int a1);
int sub_49D00(int a1);
int sub_49D90(_WORD *a1);
int sub_49DE0(int a1);
int sub_49E10(int a1);
int sub_49E90(int a1);
void sub_4A980_4ACC0();
void sub_4AB20_4AE60();
void sub_4AC70_4AFB0();
int sub_4B770();
int sub_4B7C0(int (*a1)(void), int a2);
int sub_4B860();
void sub_4B560_4B8A0();
char **sub_4B9E0();
void sub_4BA30(unsigned __int8 **a1);
void sub_4B8D0_4BC10(__int16 a1);
void sub_4BB20_4BE60();
void sub_4BC90_4BFD0();
void sub_4C0A0();
int sub_4C8C0();
bool sub_4C980();
bool sub_4C9B0();
bool sub_4C9E0();
void sub_4C6F0_4CA30();
void sub_4CB20();
void sub_4CAC0_4CE00();
void sub_4CEB0();
int sub_4CF40(); // weak
int sub_4CCA0_4CFE0(int a1);
bool sub_4D430();
int sub_4D4D0();
void sub_4D640();
void sub_4D6F0();
void sub_4D8A0();
void sub_4D9C0();
char sub_4E000();
char sub_4E420();
void sub_4E5B0();
void sub_4E660();
void sub_4E3D0_4E710(unsigned __int8 a1);
void sub_4E470_4E7B0(unsigned __int8 a1);
void sub_4E850(unsigned __int8 a1);
int sub_4E8F0();
void sub_4F1B0();
void sub_4EFC0_4F300();
void sub_4F120_4F460();
int sub_4F520();
void sub_4F3F0_4F730();
int sub_4F8D0_sub_4FC10(int a1, void (*a2)(int));
// int sub_50060(int a1);
int sub_50140();
// void sub_50270(int a1);
void sub_50320();
void sub_50370();
void sub_50690();
void sub_50720();
_BYTE *sub_507B0();
int sub_507E0();
int sub_505A0_508E0();
void sub_50770_50AB0();
bool sub_51080(int a1, __int16 a2, __int16 a3, char *a4, char *a5, char a6, int a7, void (*a8)(void), char a9, int a10);
char *sub_51610(char *a1, const char *a2);
int sub_51670(int a1, __int16 a2);
int sub_516A0(int a1, int a2, int a3, int a4);
_DWORD *sub_516E0(_DWORD *a1);
void sub_51720();
void sub_51740();
int sub_51760(_DWORD *a1, char *a2);
void sub_51480_517C0(int a1, _DWORD *a2, TColor* colorBuffer);
void sub_518A0(_BYTE *a1, int a2, __int16 a3, unsigned __int8 *a4);
__int16 sub_51990(int a1, int a2, __int16 a3, int a4);
unsigned int *sub_519E0_51D20(int a1);
int sub_51D50();
int sub_51E30(char a1);
int sub_51FD0(char a1);
void sub_52130(char a1);
void sub_521C4(_BYTE *a1, _BYTE *a2, _BYTE *a3, int a4, char a5);
int sub_5220C(int a1, int a2, int a3, int a4, char a5, char a6);
void sub_52300();
void sub_52430(__int16 a1, __int16 a2, char a3, __int16 a4);
void sub_52460(__int16 a1, __int16 a2);
void sub_52620();
void sub_52740(__int16 a1, __int16 a2, __int16 a3);
int sub_52800(int a1);
int sub_52820(int a1);
int sub_52840(_WORD *a1, int a2);
int sub_52890(int a1, int a2);
__int16 sub_52950(int a1, int a2);
char sub_52A00(int a1, unsigned int a2, unsigned int a3);
int sub_52AB0(int a1);
int sub_52E70(int a1);
char sub_53210(int a1);
int sub_533A0(int a1);
int sub_533B0(int a1);
int sub_533F0(int a1);
int sub_53400(int a1);
char sub_53800(int a1);
__int16 sub_53920(unsigned int a1);
char sub_53CC0(int a1);
char sub_53E90(int a1);
int sub_54100(int a1);
int sub_544D0(int a1);
int sub_545E0(int a1);
int sub_54600(int a1);
char sub_54640(int a1);
_WORD *sub_54810(int a1);
int sub_548B0(int a1);
int sub_54FC0(__int16 *a1, int a2, unsigned __int16 a3, unsigned __int16 a4);
int sub_55100(__int16 *a1, int a2, unsigned __int16 a3, unsigned __int16 a4);
int sub_55430();
int sub_554B0(int a1);
int sub_55100_55630();
void sub_55370_558A0(__int16 a1, __int16 a2, __int16 a3);
bool sub_55DA0(int a1, int a2);
void sub_55890_55DC0(int a1, __int16 a2, __int16 a3);
int sub_55E20();
int sub_55E90();
int sub_55ED0();
int sub_55F70(int a1, char a2, char a3);
int sub_56260(int a1);
int sub_562E0(int a1);
int sub_56300(int a1, int *a2);
int sub_563B0(int a1, int a2);
// int sub_56420(__int16 a1, int a2, int a3);
int sub_565C0(int a1);
void sub_567A0(int a1);
void sub_568B0(int a1);
int sub_56A40(int a1);
int sub_56BF0(int a1);
void sub_56C60(int a1);
int sub_56CD0(int a1);
int sub_56E80(int a1);
int sub_57020(int a1);
int sub_571D0(int a1);
void sub_57380(int a1);
int sub_57570(int a1);
void sub_576E0(int a1);
int sub_57780(int a1);
int sub_57920(int a1);
int sub_579A0(int a1);
void sub_57B40(int a1);
void sub_57D30(int a1);
int sub_57F00(int a1);
int sub_580B0(int a1);
int sub_58270(int a1);
void sub_58410(int a1);
int sub_585B0(int a1);
int sub_58750(int a1);
void DrawLetter_58768_58C78(__int16 a1, __int16 a2, TypeTab* a3, unsigned __int8 a4);
char sub_587E0_58CF0();
int sub_58860_58D70(unsigned __int16 a1, uint8_t* a2);
char sub_58910_58E20(unsigned __int16 a1);
char sub_58A00_58F10(unsigned __int16 a1);
int GetSumaSpriteSizes_58AD0_58FE0(unsigned __int16 a1);
void sub_58B30_59040(unsigned __int16 a1);
int sub_58C30_59140(unsigned int a1);
void sub_58E70_59380();
void sub_58F00_59410();
void sub_58F70_59480();
void sub_58F90_594A0();
bool sub_59050_59560(unsigned __int16 a1);
void sub_590D0_595E0();
void sub_59140_59650();
__int16 *sub_59670(unsigned __int16 a1, unsigned __int16 a2, signed __int16 a3);
int sub_596F0(unsigned __int16 a1);
char sub_59740();
void sub_59320_59830();
void sub_59370_59880();
int sub_593B0_598C0();
char sub_59420_59930();
void sub_59500_59A10(uint8_t** a1);
unsigned int sub_59560_59A70(unsigned int **a1);
int sub_59720_59C30();
int sub_59C60(__int16 a1, __int16 a2);
void Blit_599B0_59EC0(__int16 a1);
int sub_59F90(int a1);
int sub_59FC0(int a1);
int sub_59FF0(int a1);
int sub_5A040(int a1);
void sub_5A090(int a1);
int sub_5A150(int a1);
int sub_5A180(int a1);
int sub_5A1B0(int a1);
int sub_5A200(int a1);
int sub_5A250(int a1);
int sub_5A280(int a1);
int sub_5A2B0(int a1);
int sub_5A300(int a1);
int sub_5A350(int a1, int a2);
int sub_5A470(int a1);
int sub_5A480(int a1);
int sub_5A490(int a1);
int sub_5A4A0(int a1);
int sub_5A4B0(int a1);
int sub_5A4C0(int a1);
int sub_5A4D0(int a1);
int sub_5A4E0(int a1);
int sub_5A4F0(int a1);
int sub_5A500(int a1);
int sub_5A510(int a1);
int sub_5A520(int a1);
int sub_5A530(int a1);
int sub_5A540(int a1);
int sub_5A550(int a1);
int sub_5A560(int a1);
int sub_5A570(int a1);
int sub_5A580(int a1);
int sub_5A5A0(int a1, int a2);
int sub_5A630(int a1, int a2);
void DrawText_5A180_5A690(char* a1, int a2, __int16 a3, unsigned __int8 a4);
__int16 GetLetterX_5A3A0_5A8B0();
__int16 GetLetterY_5A3B0_5A8C0();
void sub_5A3C0_5A8D0(int fontIndex);
// void sub_5A8F3(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
int sub_5A459_5A969();
void sub_5A4EA_5A9FA();
int sub_5A560_5AA70();
void DrawStartGameTexts_5ACA0_5B1B0();
void DrawTextLine_5AD10_5B220(char* text);
int sub_5AD30_5B240();
int sub_5ADB0_5B2C0(int a1, int32_t* a2, char* a3);
int sub_5AE30_5B340(int a1, char *a2);
int sub_5AEB0_5B3C0(int a1, int32_t* a2, char* a3);
int InitVfx_5AF50_5B460();
int sub_5B720();
int sub_5B7C0();
unsigned __int8 sub_5B310_5B820(int a1, unsigned __int8 *a2);
int sub_5B3B0_5B8C0();
int sub_5B8F0(int a1);
int sub_5B960(__int16 a1);
int sub_5B480_5B990(int a1, int16_t* a2, int16_t* a3);
void sub_5B500_5BA10();
void sub_5BA70();
int nullsub_11(_DWORD); // weak
void sub_5BAF0();
void sub_5B5F4_5BB04();
void sub_5B650_5BB60();
void sub_5B95C_5BE6C();
void sub_5BB60_5C070();
int sub_5C250();
void sub_5BDF8_5C308();
void sub_5BE50_5C360();
void sub_5C37C(); // weak
void sub_5C05C_5C56C(TypeTab* a1);
int sub_5C214_5C724();
int sub_5C468_5C978();
__int16 sub_5CC7B();
__int16 sub_5CD3E();
int sub_5CDA1();
int sub_5CDBF();
int sub_5CDDD();
void sub_5CE04();
__int16 sub_5CE79();
int sub_5CF50();
char sub_5CFF7();
void sub_5D083(int a1, __int16 a2);
//int DataFileIO::Read(int a1, int a2, int a3);
// _DWORD printf(const char *, ...); weak
// _DWORD memset(_DWORD, _DWORD, _DWORD); weak
void sub_5CC54_5D164();
uint8_t sub_5CC70_5D180(TColor* colors, uint8_t colR, uint8_t colG, uint8_t colB);
int sub_5CD70_5D280();
void Blit_5CDA0_5D2B0();
//int DataFileIO::CreateOrOpenFile(int a1, int a2);
//int DataFileIO::Close(int a1);
// _DWORD dos_getdrive(_DWORD); weak
// _DWORD dos_getdiskfree(_DWORD, _DWORD); weak
int sub_5CEF0_5D400(unsigned __int16 a1);
unsigned int sub_5D4B4();
void sub_5D010_5D520();
int sub_5D070_5D580(unsigned __int8 a1);
unsigned int sub_5D648();
int sub_5D6B0(int a1, int a2, unsigned int a3);
int sub_5D740(int a1, int a2, int a3);
void sub_5D290_5D7A0(__int16 a1);
void sub_5D970(__int16 a1, __int16 a2, __int16 a3);
void sub_5DB20(__int16 a1, __int16 a2);
void sub_5DC60(__int16 a1, __int16 a2);
void sub_5DCEF();
bool sub_5DD00(int a1);
void sub_5DD39();
// int rand(void); weak
void sub_5DD82();
int sub_5D883_5DD93(int a1, unsigned int a2, char a3);
int sub_5DE58();
int sub_5DE8B(unsigned int a1, int a2, __int16 a3, unsigned int a4);
int sub_5E02D(unsigned int a1, unsigned int a2);
int sub_5E1A1(int a1);
int sub_5E350(int a1);
int sub_5E373(int a1);
int sub_5E3A1(int a1, int a2, int a3);
int sub_5E45B(int a1, int a2, int a3);
void sub_5E471();
void sub_5E482();
int sub_5E493(int a1, unsigned int a2, unsigned __int16 a3, int a4, int a5);
int sub_5EED1(int a1);
int sub_5F2B0(int a1, int a2, unsigned __int16 a3, int a4);
int sub_5F2E6(int a1);
void sub_5F310();
void sub_5F321();
int sub_5F332(unsigned int a1, int a2, int a3, __int16 a4, unsigned int a5);
int sub_5F865(unsigned int a1);
int sub_5F8A8(int a1);
int sub_5F930(unsigned int a1);
int sub_5FA39(int a1, unsigned int a2);
int sub_5FCD7(unsigned int a1, int a2, unsigned int a3);
int sub_5FD4E(char a1);
void sub_5FE23();
void sub_5FE34();
__int16 sub_5FE45();
__int16 sub_60277();
int sub_606A9(int a1, unsigned __int16 a2);
int sub_60845();
int sub_6086F(unsigned int a1, unsigned int a2, int a3, int a4, int a5, unsigned int a6);
int sub_60D1C(unsigned int a1, int a2);
int sub_60E2D(int a1);
void sub_60F04();
unsigned __int64 sub_610EC(int a1);
// _DWORD sprintf(_DWORD, _DWORD, ...); weak
void DrawBitmap_60CE0_611F0(__int16 a1, __int16 a2, TypeTab* a3);
int DrawBitmap_60D18_61228(__int16 a1, __int16 a2, TypeTab* a3);
void sub_60D50_61260(__int16 a1, int a2, int a3, uint8_t* sprite, unsigned __int8 a5, char a6);
void sub_60D65_61275(__int16 a1, int a2, int a3, uint8_t* sprite, unsigned __int8 a5, char a6);
int sub_61AA4(unsigned __int16 a1, unsigned __int16 a2, __int16 a3);
int sub_61AE4(unsigned __int16 a1, unsigned __int16 a2, __int16 a3);
void sub_61610_61B20(Pathstruct* pathstruct);
void sub_61B50(unsigned __int16 a1, unsigned __int16 a2, unsigned __int16 a3, unsigned __int16 a4, unsigned __int16 a5);
void sub_61BD0(unsigned __int16 a1, unsigned __int16 a2, unsigned __int16 a3, __int16 a4, unsigned __int16 a5);
int sub_61C50(__int16 a1, __int16 a2, __int16 a3, __int16 a4, unsigned __int16 a5);
int sub_61D20(__int16 a1, __int16 a2, __int16 a3, __int16 a4, unsigned __int16 a5);
int sub_61DF0(__int16 a1);
int sub_619B8_61EC8(__int16 a1);
void sub_61A1C_61F2C(__int16 a1);
int sub_61AB0_61FC0();
void sub_61B90_620A0(unsigned __int8 *a1);
int sub_61C30_62140(unsigned __int8 *a1);
void FadeInOut_61CC0_621D0(TColor* palette, unsigned __int8 a2, char a3);
void sub_623D8();
// _DWORD stricmp(_DWORD, _DWORD); weak
// _DWORD unknown_libname_1(_DWORD); weak
void sub_624A0();
void sub_62530();
void free_62128_62638(void* buffer);
// void exit(int status); idb
// _DWORD inp(_DWORD); weak
// _DWORD outp(_DWORD, char); weak
// _DWORD __far chain_intr(_DWORD); weak
// _DWORD dos_getvect(_DWORD); weak
// _DWORD dos_setvect(_DWORD, _DWORD, _DWORD); weak
// __int64 fopen(_DWORD, _DWORD); weak
// _DWORD fprintf(_DWORD, _DWORD, ...); weak
// _DWORD fclose(_DWORD); weak
// _DWORD fscanf(_DWORD, _DWORD, ...); weak
// _DWORD getenv(_DWORD); weak
// _DWORD sscanf(_DWORD, _DWORD, ...); weak
// _DWORD DataFileIO::FileLengthBytes(_DWORD); weak
int sub_62B30_63040(int a1, int a2, char a3);
int sub_62B60_63070(uint8_t* input, uint8_t* output);
char sub_62CF4_63204(int *a1);
__int16 sub_62CFD_6320D(__int16 *a1, int a2);
__int16 sub_62D40_63250(unsigned __int8 a1, int a2);
char sub_62DC3_632D3(int a1);
void sub_62E60_63370(int a1, int a2, int a3);
size_t FileWrite_62ED0_633E0(FILE* descriptor, uint8_t* buffer, uint32_t count);
// _DWORD access(_DWORD, _DWORD); weak
// _DWORD mkdir(_DWORD); weak
// _DWORD int386(_DWORD, _DWORD, _DWORD); weak
void CopyScreen_62FA8_634B8(const void *a1, void *a2, unsigned __int16 a3);
void CopyScreen_62FC4_634D4(const void *a1, void *a2, unsigned __int16 a3);
int sub_63500(int a1);
void sub_63010_63520();
void sub_63338_63848();
int sub_6342C_6393C(unsigned int a1);
void sub_634A0_639B0(Pathstruct* pathstruct);
int sub_634E0_639F0(Pathstruct* pathstruct);
// _DWORD gets(_DWORD); weak
// _DWORD segread(_DWORD); weak
// _DWORD int386x(_DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD system(_DWORD); weak
void sub_63C8B();
char *sub_63C9C(int a1);
void sub_63CBF();
void sub_63CD0();
int sub_63CE1(int a1, int a2, unsigned __int16 a3, int a4);
int sub_63DF0(int a1, int a2, int a3);
void sub_63E08();
int GetRNCFilesize_63910_63E20(Pathstruct* pathstruct);
// _DWORD strcmp(_DWORD, _DWORD); weak
void sub_63F9C();
int sub_63A9D_63FAD(int a3, __int16 a4);
int sub_64116();
int sub_63C5A_6416A(const void *a1, unsigned int a2, char *a3, __int16 a4, unsigned int a5);
int sub_64758(unsigned int a1, __int16 a2);
void sub_64924();
void sub_64935();
__int16 sub_64946();
__int16 sub_64B0B();
int sub_64CD0(int a1, unsigned __int16 a2);
int sub_64D2C();
int sub_64846_64D56(int a1, int a2, unsigned int a3, unsigned int a4, int a5, unsigned int a6, int a7, unsigned int a8);
int sub_65488(unsigned int a1, int a2, int a3);
int sub_650FF_6560F(__int16 a1, int a2, unsigned int a3, _DWORD *a4);
void sub_656E6();
void sub_656F7();
bool sub_65708(int a1, int a2);
void sub_6584A();
void sub_6585B();
int sub_6586C(int a1, unsigned int a2);
int sub_65E75(int a1, int a2);
void sub_66267();
void sub_65D70_66280(uint8_t* a1, uint8_t* a2, uint8_t* a3);
void sub_65DC0_662D0(uint8_t* a1, uint8_t* a2, uint8_t* a3);
void sub_66310();
// _DWORD strncmp(_DWORD, _DWORD, _DWORD); weak
int sub_65EB0_663C0(__int16 a1, __int16 a2, __int16 a3, __int16 a4);
void sub_66420(__int16 a1, __int16 a2);
// _DWORD memmove(_DWORD, _DWORD, _DWORD); weak
void sub_66617();
int sub_66628(int a1, int a2, unsigned __int16 a3);
int sub_666B4(int a1, int a2);
void sub_6674A();
void sub_66760(__int16 a1, __int16 a2, unsigned __int16 a3);
void sub_66823();
int sub_66834(int a1);
void sub_6688C();
unsigned int sub_668A0(unsigned int a1, unsigned int a2, unsigned int a3);
unsigned int *sub_66920(unsigned int *a1, unsigned int a2, unsigned int a3);
int sub_664AB_669BB(char* vipEnv, char** a2, int a3, int a4);
int sub_6660D_66B1D(char* vipEnv, char** a2, int a3);
int sub_66B22(unsigned __int8 a1);
__int16 sub_66B7C(__int16 result);
// _DWORD open(_DWORD, _DWORD);
// _DWORD sopen(_DWORD, _DWORD, char);
// _DWORD close(_DWORD); weak
// _DWORD read(_DWORD, _DWORD, _DWORD); weak
// _DWORD creat(_DWORD, _DWORD); weak
// _DWORD setmode(_DWORD, _DWORD); weak
// _DWORD _set_errno(_DWORD); weak
void sub_671BD(); // weak
unsigned __int8 sub_67234(__int16 a1);
unsigned __int8 sub_66D6A_6727A(int a1, __int16 a2, int a3, __int16 a4);
unsigned __int8 sub_67305();
unsigned __int8 sub_67331();
unsigned __int8 sub_6735D();
int sub_673B2();
void sub_673F5();
unsigned __int64 sub_67406(unsigned int a1, __int16 a2);
void sub_6742A();
void sub_6743B();
int sub_6744C();
void sub_67974();
void sub_67985();
bool sub_67996(int a1);
void sub_679C9();
__int16 sub_679DD();
__int16 sub_67A0A();
void sub_67A37(int a1, int a2, __int16 a3);
int sub_67557_67A67(__int16 a1, int a2, int a3);
int sub_67A92();
__int16 sub_67AD8(int a1, _DWORD *a2);
int sub_6765C_67B6C(const void *a1, int (*a2)(_DWORD), char a3, __int16 a4, char *a5, __int16 a6);
// int sub_67BC0(int a1, int (*a2)(_DWORD), char a3, __int16 a4, int a5, __int16 a6);
int sub_67BF5(int (*a1)(_DWORD));
int sub_67C20(int (*a1)(_DWORD));
__int16 sub_67C4B(int (*a1)(_DWORD));
int sub_67C90(int (*a1)(_DWORD));
int sub_67CC8(int (*a1)(_DWORD));
__int16 sub_677E3_67CF3(int a1, void (*a2)(_DWORD), char a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
int sub_67D55(int (*a1)(_DWORD));
int sub_67D8E(int (*a1)(_DWORD));
int sub_67DBF(int (*a1)(_DWORD));
int sub_67DEE(int (*a1)(_DWORD));
__int16 sub_67E1D();
__int16 sub_67E54();
void sub_67E8C();
int *sub_67E9D();
int sub_67EBE(int a1, unsigned __int16 a2, int a3, int a4);
int sub_67EEE();
int sub_67F07();
int sub_67F20();
int sub_67F39(int (*a1)(_DWORD, _DWORD, _DWORD, _DWORD), __int16 a2);
void sub_67F63();
void sub_67F74();
int *sub_67F85();
int sub_67FA6(unsigned int a1, int a2, int a3, int a4);
// int sub_682AD(int a1, int a2, unsigned int a3, int a4, int a5);
int sub_6842C(int a1, int a2, int a3);
int sub_684AA();
int sub_684C3(int a1, __int16 a2, int a3, int a4);
int sub_6864F(int a1, int a2, int a3);
void sub_6866E();
void sub_6867F();
int sub_68690(int a1, int a2);
void sub_68706();
int sub_68717(int a1, int a2, __int16 a3);
int sub_687DB(int a1);
int sub_68875(int a1, int a2);
int sub_689A1(int a1, int a2);
void sub_68B10();
void sub_68B21();
int sub_68622_68B32(__int16 a1, int a2, unsigned int a3, unsigned int a4, int *a5, unsigned int a6);
int sub_68D23(unsigned int a1);
void sub_68D8D();
void sub_68D9E();
void sub_68E05();
void sub_68E16();
void sub_68EE1();
void sub_68EF2();
int *sub_68F03();
// int sub_68F24(int a1, int a2, int a3, unsigned int a4);
int sub_690EA(int a1, int a2, int a3, __int16 a4);
int sub_6915B();
int sub_69179();
int sub_69192();
void sub_691AB();
void sub_691BC();
char sub_691CD(int a1, int a2, unsigned int a3);
unsigned int sub_6928F(unsigned int a1, int a2, int a3);
void sub_69425();
void sub_69436();
char sub_69447(int a1, int a2, unsigned int a3);
void sub_6956C();
void sub_6957D();
void sub_6958E(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3);
void sub_69A5C();
void sub_69A6D();
char sub_69A7E(int a1, int a2, unsigned int a3);
int sub_69B7D(unsigned int a1);
int sub_69C26(unsigned int a1);
void sub_69CAE();
void sub_69CBF();
void sub_69CD0(int a1, int a2, unsigned int a3);
void sub_69EAB();
void sub_69EBC();
char sub_69ECD();
void sub_69F93();
void sub_69FA4();
int sub_69FB5(int a1, int a2, int a3, __int16 a4);
int sub_6A10E(int a1);
void sub_6A30E();
void sub_6A31F();
char sub_6A330();
void sub_6A373();
void sub_6A384();
char sub_6A395(int a1, int a2, unsigned int a3);
void sub_6A3DB();
void sub_6A3EC();
int sub_6A3FD(unsigned int a1, __int16 a2, int a3, int a4);
int sub_6A42C(int a1, int a2, int a3, int a4);
int sub_6A467();
int sub_6A485();
int sub_6A4A3(int a1, __int16 a2, int a3, int a4);
void sub_6A4D2();
void sub_6A4E3();
char sub_6A4F4(unsigned int a1);
void sub_6A573();
void sub_6A584();
char sub_6A595(unsigned __int8 a1, __int16 a2);
void sub_6A609();
void sub_6A61A();
char sub_6A62B();
void sub_6A6C3();
void sub_6A6D4();
char sub_6A6E5(unsigned __int8 a1, __int16 a2);
void sub_6A785();
void sub_6A796();
char sub_6A7A7(unsigned __int8 a1);
void sub_6A805();
void sub_6A816();
char sub_6A827();
void sub_6A8F3();
void sub_6A904();
char sub_6A915(int a1, int a2, unsigned __int8 a3);
void sub_6AAFC();
void sub_6AB0D();
char sub_6AB1E();
void sub_6AB3D();
unsigned __int8 sub_6AB50(unsigned __int8 a1, unsigned __int8 a2);
// _DWORD fstrcpy(_DWORD, _DWORD, _DWORD, _DWORD); weak
__int16 sub_6AC47(void (*a1)(_DWORD), unsigned int a2, int a3, int a4, __int16 a5);
int sub_6B770(__int16 a1, __int16 a2, __int16 a3, __int16 a4, unsigned __int16 a5, __int16 a6);
int sub_6B888(__int16 a1, __int16 a2, __int16 a3, __int16 a4, unsigned __int16 a5, __int16 a6);
void sub_6B47C_6B98C(TColor* palette);
// _DWORD tolower(_DWORD); weak
int sub_6BD8A();
// _DWORD lseek(_DWORD, _DWORD, char); weak
// _DWORD free(_DWORD); weak
int sub_6C1B3(int a1, unsigned __int8 *a2, int *a3);
unsigned __int8 *sub_6C3CB(unsigned __int8 *a1, int a2);
int sub_6C4A8(int a1);
int sub_6BFCF_6C4DF(_WORD *a1, int a2, int *a3);
void sub_6C05C_6C56C(_BYTE *a1, int a2, int *a3);
int *sub_6C685(int a1, int *a2, int a3);
_BYTE *sub_6C6F0(_BYTE *a1, int a2);
void sub_6C224_6C734(_BYTE *a1, int a2, int *a3, _BYTE **a4);
void sub_6C83A(int a1, int *a2);
void sub_6CB7D(int a1, int *a2, int a3, int a4);
int sub_6CDA6(int a1);
int sub_6CDD5(int a1);
// _DWORD write(_DWORD, _DWORD, _DWORD); weak
// _DWORD malloc(_DWORD); weak
// _DWORD expand(_DWORD, _DWORD); weak
// _DWORD qsort(_DWORD, _DWORD, _DWORD, _DWORD); weak
int sub_6D35C_6D86C(unsigned __int16 a1);
int sub_6DAFC(int a1, int a2);
// _DWORD strcpy(_DWORD, _DWORD); weak
// _DWORD strcat(_DWORD, _DWORD); weak
void sub_6E27C();
int sub_6E28D(int a1, int a2, __int16 a3);
void sub_6E322();
void sub_6E333();
int sub_6DE34_6E344(__int16 a1, int a2, unsigned int a3, unsigned int a4, int *a5, unsigned int a6);
int sub_6E540(unsigned int a1);
int sub_6E09A_6E5AA(__int16 a1, int a2, unsigned int a3, int *a4, unsigned int a5);
int sub_6E74C(int a1, __int16 a2);
void sub_6E7A5();
void sub_6E7B6();
void sub_6E84D();
void sub_6E85E();
void sub_6E8C9();
void *sub_6EAB0();
void *sub_6EAB6();
int sub_6EAC2();
unsigned int __stdcall sub_6EB6B(unsigned __int16 a1, unsigned __int16 a2);
int __stdcall sub_6EBCF(unsigned __int16 a1);
void __stdcall sub_6EC37(unsigned __int16 a1, unsigned __int16 a2);
int __stdcall sub_6ECB0(unsigned __int16 a1);
void __stdcall sub_6ED32(int a1, __int16 a2, __int16 a3);
int __stdcall sub_6EE86(unsigned __int16 a1, unsigned __int16 a2);
int __stdcall sub_6EEB4(int a1, unsigned __int16 a2, unsigned __int16 a3);
int __stdcall sub_6EF1F(unsigned __int16 a1, unsigned __int16 a2, unsigned __int16 a3, unsigned __int16 a4);
int __stdcall sub_6F257(unsigned __int16 a1);
int __stdcall sub_6F285(__int16 a1);
int sub_6F2E0(int a1, int a2, int a3, int a4, unsigned __int16 a5, int a6, int a7);
void __stdcall sub_6F8C3(int a1, __int16 a2, unsigned __int16 a3);
void sub_6F9DB(int a1, int a2, int a3, int a4, unsigned __int16 a5, unsigned __int16 a6, unsigned __int16 a7);
void __stdcall sub_6FA12(__int16 a1, unsigned __int16 a2);
void __stdcall sub_6FA46(__int16 a1, unsigned __int16 a2);
void __stdcall sub_6FA6F(__int16 a1, unsigned __int16 a2);
void __stdcall sub_6FA98(char a1, unsigned __int16 a2);
int __stdcall sub_6FAB8(unsigned __int8 a1, unsigned __int16 a2);
int __stdcall sub_6FBBF(char a1, unsigned __int16 a2);
int __stdcall sub_6FBE8(unsigned __int16 a1, unsigned __int16 a2);
void __stdcall sub_6FC8A(unsigned __int16 a1, unsigned __int16 a2);
int __stdcall sub_6FD34(unsigned __int8 a1, unsigned __int16 a2);
void __stdcall sub_6FD60(int a1, unsigned __int16 a2);
int __stdcall sub_6FD82(__int16 a1, unsigned __int16 a2);
int __stdcall sub_6FE01(__int16 a1, unsigned __int16 a2);
void __stdcall sub_6FE73(int a1, __int16 a2);
void __stdcall sub_6FF09(int a1, __int16 a2);
int __stdcall sub_6FF63(unsigned __int16 a1, unsigned __int16 a2, unsigned __int16 a3);
void __stdcall sub_70154(unsigned __int16 a1, __int16 a2);
void __stdcall sub_702B4(int a1, int a2, int a3);
void __stdcall sub_702BC(unsigned __int16 a1, __int16 a2);
int __stdcall sub_702FC(unsigned __int8 a1, unsigned __int8 a2, __int16 a3);
int __stdcall sub_703CF(unsigned __int16 a1);
int __stdcall sub_70463(unsigned __int16 a1);
char __stdcall sub_70554(__int16 a1);
_BOOL1 sub_7059A();
unsigned int __stdcall sub_70623(__int16 a1);
unsigned int sub_70658();
void sub_7075E();
unsigned int sub_70806();
void sub_70BDC();
void sub_70D22();
int sub_70FB0();
int sub_7104E();
char sub_7109B(unsigned int a1, unsigned __int8 a2);
unsigned __int8 sub_71265(unsigned __int8 a1);
int sub_7132C(int a1, int a2, unsigned int a3);
char *sub_71522();
void sub_7152B();
// int _FDFS(void); weak
void sub_71A34();
int sub_72063();
void sub_720D9(int a1, const void *a2, void *a3);
int sub_724C0_729D0(uint16_t a1, uint16_t a2);
void sub_72AD8(__int16 a1, unsigned __int16 a2, __int16 a3);
__int16 sub_72652_72B62(__int16 a1, int a2, int a3, __int16 a4);
__int16 sub_726E7_72BF7(__int16 a1, int a2, int a3, __int16 a4);
char sub_72807_72D17(unsigned __int8 *a1, _BYTE *a2);
void DrawTriangle_729A3_72EB3(_DWORD *a1, _DWORD *a2, _DWORD *a3);
void SetViewPort2_79495_799A5(uint8* a1, int a2, int a3, int a4, int a5);
void sub_79E16(int a1);
void sub_79F2B(int a1);
int sub_79A70_79F80(int result, _BYTE *a2, _BYTE *a3, int a4, int a5, int a6);
void sub_7A03D();
// int gettextposition(_DWORD); weak
// _DWORD settextposition(_DWORD, _DWORD); weak
// _DWORD outtext(_DWORD); weak
int sub_7B954();

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN loc_10080; // weak
_UNKNOWN loc_13880; // weak
_UNKNOWN loc_1FFFE; // weak
_UNKNOWN loc_270FA; // weak
_UNKNOWN loc_27FFC; // weak
_UNKNOWN loc_2809F; // weak
_UNKNOWN loc_30D40; // weak
char byte_385D3[] = { '\b' }; // weak
char byte_385D7[] = { '\xC4' }; // weak
__int16 word_385DB[] = { 23390 }; // weak
__int16 word_385DF[] = { -31808 }; // weak
char byte_385E3[] = { ']' }; // weak
_UNKNOWN loc_38646; // weak
char byte_38C93[] = { '\x80' }; // weak
char byte_38C95[] = { '\0' }; // weak
char byte_38C97[8] = { '\0', '\xE0', '.', '\0', '\0', ')', '\xD6', 'f' }; // weak
int dword_38C9F = 2375879; // weak
int dword_38CA3[] = { -1091401472 }; // weak
//char byte_38D03[] = { '$' }; // weak
__int16 word_38D03 = 21642; // weak
int dword_38D05 = -959370922; // weak
char byte_38D09[3] = { 'C', 'B', '\x03' }; // weak  0x034243
_UNKNOWN loc_40000; // weak
__int16 word_41444[] = { 1 }; // weak
_UNKNOWN locret_45900; // weak
int dword_4A46C = 0; // weak
__int16 word_4A470[] = { 0 }; // weak
int dword_4A4BC[6] = { 21037056, -16777216, 255, 1912602624, 138477568, 0 }; // weak
int dword_4A500[2] = { 172032000, 0 }; // weak
int dword_4A524[2] = { 172032000, 0 }; // weak
int dword_4A53C[2] = { 89063424, 0 }; // weak
int dword_4A8A8[2] = { 88145920, 0 }; // weak
int dword_4A918[2] = { 172032000, 0 }; // weak
int dword_4A960[2] = { 172032000, 0 }; // weak
int dword_4A978[2] = { 138477568, 0 }; // weak
char *off_4A9AC[22] =
{
  (char*)"No sound",
  (char*)"NONE",
  (char*)"Soundblaster",
  (char*)"SBLAST",
  (char*)"Soundblaster pro",
  (char*)"SBPRO",
  (char*)"Soundblaster 16",
  (char*)"SB16",
  (char*)"Adlib gold",
  (char*)"ADLIBG",
  (char*)"Microsoft 8",
  (char*)"MICROSOFT8",
  (char*)"Microsoft 16",
  (char*)"MICROSOFT16",
  (char*)"Pro audio spectrum 8",
  (char*)"PAS8",
  (char*)"Pro audio spectrum 16",
  (char*)"PAS16",
  (char*)"Sound master II",
  (char*)"SOUNDMASTERII",
  (char*)"Soundblaster compatible",
  (char*)"COMPATIBLE"
}; // weak
char *off_4A9B0[21] =
{
  (char*)"NONE",
  (char*)"Soundblaster",
  (char*)"SBLAST",
  (char*)"Soundblaster pro",
  (char*)"SBPRO",
  (char*)"Soundblaster 16",
  (char*)"SB16",
  (char*)"Adlib gold",
  (char*)"ADLIBG",
  (char*)"Microsoft 8",
  (char*)"MICROSOFT8",
  (char*)"Microsoft 16",
  (char*)"MICROSOFT16",
  (char*)"Pro audio spectrum 8",
  (char*)"PAS8",
  (char*)"Pro audio spectrum 16",
  (char*)"PAS16",
  (char*)"Sound master II",
  (char*)"SOUNDMASTERII",
  (char*)"Soundblaster compatible",
  (char*)"COMPATIBLE"
}; // weak
char *off_4AA0C[24] =
{
  (char*)"No music",
  (char*)"NONE",
  (char*)"Adlib fm",
  (char*)"ADLIB",
  (char*)"Adlib gold fm",
  (char*)"ADLIBG",
  (char*)"Soundblaster fm",
  (char*)"SBLAST",
  (char*)"Soundblaster pro fm",
  (char*)"SBPRO",
  (char*)"Soundblaster 16 fm",
  (char*)"SB16FM",
  (char*)"Soundblaster AWE 32",
  (char*)"SBAWE32",
  (char*)"Wave blaster",
  (char*)"WBLAST",
  (char*)"Roland mt32",
  (char*)"ROLAND",
  (char*)"General midi",
  (char*)"GENERAL",
  (char*)"Pro audio spectrum fm",
  (char*)"PASFM",
  (char*)"Soundblaster compatible",
  (char*)"COMPATIBLE"
}; // weak
char *off_4AA10[23] =
{
  (char*)"NONE",
  (char*)"Adlib fm",
  (char*)"ADLIB",
  (char*)"Adlib gold fm",
  (char*)"ADLIBG",
  (char*)"Soundblaster fm",
  (char*)"SBLAST",
  (char*)"Soundblaster pro fm",
  (char*)"SBPRO",
  (char*)"Soundblaster 16 fm",
  (char*)"SB16FM",
  (char*)"Soundblaster AWE 32",
  (char*)"SBAWE32",
  (char*)"Wave blaster",
  (char*)"WBLAST",
  (char*)"Roland mt32",
  (char*)"ROLAND",
  (char*)"General midi",
  (char*)"GENERAL",
  (char*)"Pro audio spectrum fm",
  (char*)"PASFM",
  (char*)"Soundblaster compatible",
  (char*)"COMPATIBLE"
}; // weak

__int16 word_A9990_A99A8 = 48; // weak

char *off_4AA74[4] = { (char*)"220", (char*)"220", (char*)"240", (char*)"240" }; // weak
char *off_4AA78[3] = { (char*)"220", (char*)"240", (char*)"240" }; // weak
char *off_4AA8C[2] = { (char*)"2", (char*)"2" }; // weak
char *off_4AA90 = (char*)"2"; // weak
__int16 *off_4AABC[2] = { &word_A9990_A99A8, &word_A9990_A99A8 }; // weak
__int16 *off_4AAC0 = &word_A9990_A99A8; // weak
void *off_4AADC = &unk_A9998_A99B0; // weak
void *off_4AAE0 = &unk_A9998_A99B0; // weak
int *off_4AAF4[2] = { &dword_A99A0_A99B8, &dword_A99A0_A99B8 }; // weak
int *off_4AAF8 = &dword_A99A0_A99B8; // weak
__int16 word_4AB0C[] = { 51 }; // weak
__int16 word_4AB0E[] = { 47 }; // weak
int dword_4AB2C[] = { 170 }; // weak
int dword_4AB30[] = { 0 }; // weak
int dword_4AB34[] = { 150 }; // weak
int dword_4AB38[] = { 36 }; // weak
char byte_4AB8B[] = { '\0' }; // weak
char byte_4ABC4[] = { '\0' }; // weak
__int16 word_4ABFE[] = { 177 }; // weak
__int16 word_4AC00[] = { 48 }; // weak
__int16 word_4AC02[] = { 9 }; // weak
__int16 word_4AC04[] = { 4 }; // weak
//wchar_t asc_4A8F4_4AC34[5] = L"\n=-=_"; // weak
//char asc_4A8F4_4AC34[5] = { '\n','=','-','=','_' };// L"\n=-=_"; // weak
uint16_t asc_4A8F4_4AC34[] = { 0x000A, 0x003D, 0x002D, 0x003D, 0x005F, 0x00B3,
                        0x002D, 0x0B3, 0x005F };// 21B8F4_
char byte_4AC45[] = { '\0' }; // weak
char byte_4AC7E[] = { ' ' }; // weak
_UNKNOWN loc_4AFFB; // weak
_UNKNOWN loc_4E1FC; // weak
// extern _UNKNOWN _GETDS; weak
int dword_74F95_754A5[] = { 0 }; // weak
int dword_80000; // weak
int dword_80010; // weak
int dword_80120; // weak
char byte_90000[4] = { '\x01', '\x01', '\x01', '\0' }; // weak
uint8_t* dword_90004 = nullptr; // weak
uint8_t* dword_90008 = nullptr; // weak
__int16 word_9000C = 0; // weak
__int16 word_9000E = 0; // weak
__int16 word_90010 = 0; // weak
__int32 dword_90012 = 0; // weak
__int16 word_90016 = 0; // weak
int dword_9001C = 0; // weak
__int16 word_90024 = 1; // weak
__int16 word_90026 = 0; // weak
int dword_90028 = 0; // weak
char byte_9002C = '\0'; // weak
__int16 word_90030 = 0; // weak
__int16 word_90034[24] =
{
  2,
  1,
  32,
  10,
  1,
  0,
  0,
  4,
  400,
  0,
  1,
  0,
  1,
  0,
  1,
  1,
  40,
  600,
  0,
  1,
  4,
  2,
  3,
  4
}; // weak
__int16 word_90064 = 0; // weak
int dword_90066 = 0; // weak
int dword_9006A = 0; // weak
int dword_9006E = 0; // weak
int dword_90072 = 0; // weak
char byte_90076 = '\0'; // weak
_UNKNOWN unk_90078; // weak
char cpuVar_90084 = '\0'; // weak
char cpuVar_90085 = '\0'; // weak
char byte_90086 = '\0'; // weak
char byte_90087 = '\0'; // weak
char byte_90088 = '\0'; // weak
char byte_90089 = '\0'; // weak
char byte_9008C = '\0'; // weak
char byte_9008D = '\x01'; // weak
char byte_9008E = '\0'; // weak
char byte_9008F = '\xFE'; // weak
char byte_90090 = '\0'; // weak
char byte_90091 = '\0'; // weak
char byte_90094 = 'c'; // weak
char byte_90096 = '('; // weak
int dword_90098 = 0; // weak
char byte_9009E = '\0'; // weak
int dword_900A0 = 0; // weak
int dword_900A4[8] = { 256, 512, 1024, 2048, 4096, 9192, 18384, 36768 }; // weak
char byte_900C4[164] =
{
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
char byte_90168[] = { '\0' }; // weak
char byte_9020C[164] =
{
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\x01',
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
int dword_902B0 = 0; // weak
_UNKNOWN unk_902B4; // weak
uint32_t unk_902DC[] = {
0x00000000,0x00000000,0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,
0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,0x00000000,0x00000000,
0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,0x00000000,0x00000000,0x001FFFFF,0x00000000,
0x00000000,0x001FFFFF,0x00000000,0x00000000,0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,
0x001FFFFF,0x00000000,0x00000000,0x00000000,0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,
0x00000000,0x00000000,0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,
0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,0x00000000,0x00000000,
0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,0x00000000,0x00000000,0x00000000,0x001FFFFF,
0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,0x00000000,0x00000000,
0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,0x00000000,0x00000000,0x00000000,0x001FFFFF,
0x001FFFFF,0x00000000,0x00000000,0x00000000,0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,
0x00000000,0x00000000,0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,
0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,0x00000000,0x00000000,0x001FFFFF,0x00000000,
0x00000000,0x001FFFFF,0x00000000,0x00000000,0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,
0x00000000,0x00000000,0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,
0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,
0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,0x00000000,0x00000000,
0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,0x00000000,0x00000000,0x00000000,0x001FFFFF,
0x001FFFFF,0x00000000,0x00000000,0x00000000,0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,
0x00000000,0x001FFFFF,0x00000000,0x00000000,0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,
0x00000000,0x00000000,0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,
0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,0x00000000,0x00000000,
0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,0x00000000,0x00000000,0x001FFFFF,0x00000000,
0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,0x00000000,0x00000000,
0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,0x00000000,0x00000000,0x001FFFFF,0x00000000,
0x00000000,0x001FFFFF,0x00000000,0x00000000,0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,
0x00000000,0x00000000,0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,
0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,0x00000000,0x00000000,0x00000000,0x001FFFFF,
0x001FFFFF,0x00000000,0x00000000,0x00000000,0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,
0x00000000,0x00000000,0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,
0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,0x00000000,0x00000000
}; // weak
char byte_906DC[] = { '\0' }; // weak
char byte_906E2[] = { '\x01' }; // weak
char byte_906E8[16] =
{
  '\0',
  '\x01',
  '\x01',
  '\x02',
  '\x02',
  '\x03',
  '\x03',
  '\x04',
  '\x04',
  '\x03',
  '\x03',
  '\x02',
  '\x02',
  '\x01',
  '\x01',
  '\0'
}; // weak
char byte_906F8[16] =
{
  '\0',
  '\0',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\0'
}; // weak
char byte_90708 = '\0'; // weak
int dword_9070C = 20; // weak
int fixPosX_90710 = 0; // weak
int fixPosY_90714 = 0; // weak
uint32 dword_9074C[] = {
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x01010101,0x02020202,0x03030303,
0x04040404,0x05050505,0x06060606,0xFFFFFFFF,
0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,
0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,
0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,
0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,
0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,
0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,
0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0x04010006,
0x00000101,0x00000001,0x00010001,0x01010100,
0x04040606,0x04060406,0x06060406,0x04040604,
0x00000404,0x00000004,0x04040400,0x04000400,
0x03030301,0x03010301,0x01010103,0x03030101,
0x01010105,0x05050101,0x05010501,0x05050501,
0x05020502,0x02020205,0x05050502,0x02020505,
0x03030404,0x03030304,0x04030403,0x04040403,
0x05050504,0x04040405,0x04050405,0x05050404,
0x02010201,0x01010102,0x02020201,0x02020101,
0x01010104,0x04010401,0x04040401,0x04040101,
0x01010601,0x01010606,0x01060106,0x06060106,
0x00000606,0x00060006,0x06060006,0x00000600,
0x01050102,0x02050101,0x02050105,0x05020102,
0x05010202,0x02010505,0x01040303,0x01040304,
0x03040101,0x03040401,0x01030403,0x04010301,
0x06040601,0x04010601,0x04060601,0x04060401,
0x01040601,0x04040601,0x04000406,0x06060400,
0x06000400,0x06040000,0x04040600,0x04060006,
0x01060006,0x00060001,0x00000601,0x00060601,
0x00010601,0x06000101,0x00040001,0x04000401,
0x00000401,0x00040101,0x04000104,0x00010401,
0x04050501,0x01040504,0x05040101,0x05040501,
0x05010401,0x05040401,0x04000601,0x04000106,
0x05050606,0x05060506,0x06060506,0x05050605,
0x03030606,0x03060306,0x06060306,0x03030603,
0x06050501,0x01060506,0x05060101,0x05060501,
0x05010601,0x05060601,0x06030301,0x01060306,
0x03060101,0x03060301,0x03010601,0x03060601,
0x501B001B,0x601B301B,0x501A001A,0x601A301A,
0x500A000A,0x600A300A,0x500A000A,0x600A300A,
0x500B000B,0x600B300B,0x500B000B,0x600B300B,
0x500C000C,0x600C300C,0x500C000C,0x600C300C,
0x50150015,0x60153015,0x50160016,0x60163016,
0x00000000,0x00000000,0x50180018,0x60183018,
0x00000000,0x00000000,0x50170017,0x60173017,
0x00000000,0x00000000,0x50190019,0x60193019,
0x50100010,0x60103010,0x500F000F,0x600F300F,
0x50100010,0x60103010,0x500F000F,0x600F300F,
0x501E001E,0x601D301E,0x501D001F,0x601D301D,
0x501E001E,0x601E301E,0x501D001D,0x601D301D,
0x50210021,0x60213021,0x50200022,0x60203020,
0x50210021,0x60213021,0x50200020,0x60203020,
0x50130013,0x60133013,0x50120014,0x60123012,
0x50130013,0x60133013,0x50120012,0x60123012,
0x50130013,0x60133013,0x50120014,0x60123012,
0x50210021,0x60213021,0x50200020,0x60203020,
0xFC010300,0x00000000,0x00000001,0x03020101,
0x07060504,0x0B0A0908,0x0F0E0D0C,0x01010110,
0x03020101,0x07060504,0x0B0A0908,0x0F0E0D0C,
0x00000010,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00E2018A,0x0000000A,
0x00E0018A,0x00000005,0x00E4018A,0x00000006,
0x00000BB8,0x00000F3C,0x00C80140,0x00000000,
0x00000000,0x000000C9,0x00000192,0x0000025B,
0x00000324,0x000003ED,0x000004B6,0x0000057F,
0x00000648,0x00000711,0x000007DA,0x000008A3,
0x0000096C,0x00000A35,0x00000AFE,0x00000BC7,
0x00000C90,0x00000D59,0x00000E21,0x00000EEA,
0x00000FB3,0x0000107B,0x00001144,0x0000120D,
0x000012D5,0x0000139E,0x00001466,0x0000152E,
0x000015F7,0x000016BF,0x00001787,0x00001850,
0x00001918,0x000019E0,0x00001AA8,0x00001B70,
0x00001C38,0x00001CFF,0x00001DC7,0x00001E8F,
0x00001F56,0x0000201E,0x000020E5,0x000021AD,
0x00002274,0x0000233B,0x00002402,0x000024C9,
0x00002590,0x00002657,0x0000271E,0x000027E4,
0x000028AB,0x00002971,0x00002A38,0x00002AFE,
0x00002BC4,0x00002C8A,0x00002D50,0x00002E16,
0x00002EDC,0x00002FA1,0x00003067,0x0000312C,
0x000031F1,0x000032B7,0x0000337C,0x00003440,
0x00003505,0x000035CA,0x0000368E,0x00003753,
0x00003817,0x000038DB,0x0000399F,0x00003A63,
0x00003B27,0x00003BEA,0x00003CAE,0x00003D71,
0x00003E34,0x00003EF7,0x00003FBA,0x0000407C,
0x0000413F,0x00004201,0x000042C3,0x00004385,
0x00004447,0x00004509,0x000045CB,0x0000468C,
0x0000474D,0x0000480E,0x000048CF,0x00004990,
0x00004A50,0x00004B10,0x00004BD1,0x00004C90,
0x00004D50,0x00004E10,0x00004ECF,0x00004F8E,
0x0000504D,0x0000510C,0x000051CB,0x00005289,
0x00005348,0x00005406,0x000054C3,0x00005581,
0x0000563E,0x000056FC,0x000057B9,0x00005875,
0x00005932,0x000059EE,0x00005AAA,0x00005B66,
0x00005C22,0x00005CDE,0x00005D99,0x00005E54,
0x00005F0F,0x00005FC9,0x00006084,0x0000613E,
0x000061F8,0x000062B1,0x0000636B,0x00006424,
0x000064DD,0x00006595,0x0000664E,0x00006706,
0x000067BE,0x00006876,0x0000692D,0x000069E4,
0x00006A9B,0x00006B52,0x00006C08,0x00006CBE,
0x00006D74,0x00006E2A,0x00006EDF,0x00006F94,
0x00007049,0x000070FE,0x000071B2,0x00007266,
0x0000731A,0x000073CD,0x00007480,0x00007533,
0x000075E6,0x00007698,0x0000774A,0x000077FC,
0x000078AD,0x0000795F,0x00007A10,0x00007AC0,
0x00007B70,0x00007C20,0x00007CD0,0x00007D7F,
0x00007E2F,0x00007EDD,0x00007F8C,0x0000803A,
0x000080E8,0x00008195,0x00008243,0x000082F0,
0x0000839C,0x00008449,0x000084F5,0x000085A0,
0x0000864C,0x000086F7,0x000087A1,0x0000884C,
0x000088F6,0x0000899F,0x00008A49,0x00008AF2,
0x00008B9A,0x00008C43,0x00008CEB,0x00008D93,
0x00008E3A,0x00008EE1,0x00008F88,0x0000902E,
0x000090D4,0x00009179,0x0000921F,0x000092C4,
0x00009368,0x0000940C,0x000094B0,0x00009554,
0x000095F7,0x0000969A,0x0000973C,0x000097DE,
0x00009880,0x00009921,0x000099C2,0x00009A63,
0x00009B03,0x00009BA3,0x00009C42,0x00009CE1,
0x00009D80,0x00009E1E,0x00009EBC,0x00009F5A,
0x00009FF7,0x0000A094,0x0000A130,0x0000A1CC,
0x0000A268,0x0000A303,0x0000A39E,0x0000A438,
0x0000A4D2,0x0000A56C,0x0000A605,0x0000A69E,
0x0000A736,0x0000A7CE,0x0000A866,0x0000A8FD,
0x0000A994,0x0000AA2A,0x0000AAC1,0x0000AB56,
0x0000ABEB,0x0000AC80,0x0000AD14,0x0000ADA8,
0x0000AE3C,0x0000AECF,0x0000AF62,0x0000AFF4,
0x0000B086,0x0000B117,0x0000B1A8,0x0000B239,
0x0000B2C9,0x0000B358,0x0000B3E8,0x0000B477,
0x0000B505,0x0000B593,0x0000B620,0x0000B6AD,
0x0000B73A,0x0000B7C6,0x0000B852,0x0000B8DD,
0x0000B968,0x0000B9F3,0x0000BA7D,0x0000BB06,
0x0000BB8F,0x0000BC18,0x0000BCA0,0x0000BD28,
0x0000BDAF,0x0000BE36,0x0000BEBC,0x0000BF42,
0x0000BFC7,0x0000C04C,0x0000C0D1,0x0000C155,
0x0000C1D8,0x0000C25C,0x0000C2DE,0x0000C360,
0x0000C3E2,0x0000C463,0x0000C4E4,0x0000C564,
0x0000C5E4,0x0000C663,0x0000C6E2,0x0000C761,
0x0000C7DE,0x0000C85C,0x0000C8D9,0x0000C955,
0x0000C9D1,0x0000CA4D,0x0000CAC7,0x0000CB42,
0x0000CBBC,0x0000CC35,0x0000CCAE,0x0000CD27,
0x0000CD9F,0x0000CE17,0x0000CE8E,0x0000CF04,
0x0000CF7A,0x0000CFF0,0x0000D065,0x0000D0D9,
0x0000D14D,0x0000D1C1,0x0000D234,0x0000D2A6,
0x0000D318,0x0000D38A,0x0000D3FB,0x0000D46B
}; // weak
char byte_90754 = '\0'; // weak
int dword_90758 = 1; // weak
_UNKNOWN unk_9075C; // weak
_UNKNOWN unk_909AC; // weak
_UNKNOWN unk_909BC; // weak
_UNKNOWN unk_909EC; // weak
_UNKNOWN unk_909FC; // weak
_UNKNOWN unk_90A2C; // weak
char byte_90AD4 = '\0'; // weak
char byte_90AD5 = '\0'; // weak
char byte_90AD8[42] =
{
  '\x01',
  '\x01',
  '\x02',
  '\x03',
  '\x04',
  '\x05',
  '\x06',
  '\a',
  '\b',
  '\t',
  '\n',
  '\v',
  '\f',
  '\r',
  '\x0E',
  '\x0F',
  '\x10',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x02',
  '\x03',
  '\x04',
  '\x05',
  '\x06',
  '\a',
  '\b',
  '\t',
  '\n',
  '\v',
  '\f',
  '\r',
  '\x0E',
  '\x0F',
  '\x10',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
__int16 word_90B02[] = { 0 }; // weak
_UNKNOWN unk_90B04; // weak
__int16 word_90B0C[4] = { 0, 0, 0, 0 }; // weak
int dword_90B14 = 0; // weak
int dword_90B18 = 0; // weak
__int16 word_90B1C = 0; // weak
__int16 word_90B1E = 0; // weak
char byte_90B20 = '\0'; // weak
char byte_90B21 = '\0'; // weak
char byte_90B22 = '\0'; // weak
char byte_90B23 = '\0'; // weak
__int16 word_90B24 = 394; // weak
__int16 word_90B26 = 226; // weak
__int16 word_90B2C = 394; // weak
__int16 word_90B2E = 224; // weak
__int16 word_90B34 = 394; // weak
__int16 word_90B36 = 228; // weak
char byte_90B48 = '\0'; // weak
int32 cos_90B4C[(256 + 256 + 256 + 256) * 2] = {
0x00000000,0x000000C9,0x00000192,0x0000025B,
0x00000324,0x000003ED,0x000004B6,0x0000057F,
0x00000648,0x00000711,0x000007DA,0x000008A3,
0x0000096C,0x00000A35,0x00000AFE,0x00000BC7,
0x00000C90,0x00000D59,0x00000E21,0x00000EEA,
0x00000FB3,0x0000107B,0x00001144,0x0000120D,
0x000012D5,0x0000139E,0x00001466,0x0000152E,
0x000015F7,0x000016BF,0x00001787,0x00001850,
0x00001918,0x000019E0,0x00001AA8,0x00001B70,
0x00001C38,0x00001CFF,0x00001DC7,0x00001E8F,
0x00001F56,0x0000201E,0x000020E5,0x000021AD,
0x00002274,0x0000233B,0x00002402,0x000024C9,
0x00002590,0x00002657,0x0000271E,0x000027E4,
0x000028AB,0x00002971,0x00002A38,0x00002AFE,
0x00002BC4,0x00002C8A,0x00002D50,0x00002E16,
0x00002EDC,0x00002FA1,0x00003067,0x0000312C,
0x000031F1,0x000032B7,0x0000337C,0x00003440,
0x00003505,0x000035CA,0x0000368E,0x00003753,
0x00003817,0x000038DB,0x0000399F,0x00003A63,
0x00003B27,0x00003BEA,0x00003CAE,0x00003D71,
0x00003E34,0x00003EF7,0x00003FBA,0x0000407C,
0x0000413F,0x00004201,0x000042C3,0x00004385,
0x00004447,0x00004509,0x000045CB,0x0000468C,
0x0000474D,0x0000480E,0x000048CF,0x00004990,
0x00004A50,0x00004B10,0x00004BD1,0x00004C90,
0x00004D50,0x00004E10,0x00004ECF,0x00004F8E,
0x0000504D,0x0000510C,0x000051CB,0x00005289,
0x00005348,0x00005406,0x000054C3,0x00005581,
0x0000563E,0x000056FC,0x000057B9,0x00005875,
0x00005932,0x000059EE,0x00005AAA,0x00005B66,
0x00005C22,0x00005CDE,0x00005D99,0x00005E54,
0x00005F0F,0x00005FC9,0x00006084,0x0000613E,
0x000061F8,0x000062B1,0x0000636B,0x00006424,
0x000064DD,0x00006595,0x0000664E,0x00006706,
0x000067BE,0x00006876,0x0000692D,0x000069E4,
0x00006A9B,0x00006B52,0x00006C08,0x00006CBE,
0x00006D74,0x00006E2A,0x00006EDF,0x00006F94,
0x00007049,0x000070FE,0x000071B2,0x00007266,
0x0000731A,0x000073CD,0x00007480,0x00007533,
0x000075E6,0x00007698,0x0000774A,0x000077FC,
0x000078AD,0x0000795F,0x00007A10,0x00007AC0,
0x00007B70,0x00007C20,0x00007CD0,0x00007D7F,
0x00007E2F,0x00007EDD,0x00007F8C,0x0000803A,
0x000080E8,0x00008195,0x00008243,0x000082F0,
0x0000839C,0x00008449,0x000084F5,0x000085A0,
0x0000864C,0x000086F7,0x000087A1,0x0000884C,
0x000088F6,0x0000899F,0x00008A49,0x00008AF2,
0x00008B9A,0x00008C43,0x00008CEB,0x00008D93,
0x00008E3A,0x00008EE1,0x00008F88,0x0000902E,
0x000090D4,0x00009179,0x0000921F,0x000092C4,
0x00009368,0x0000940C,0x000094B0,0x00009554,
0x000095F7,0x0000969A,0x0000973C,0x000097DE,
0x00009880,0x00009921,0x000099C2,0x00009A63,
0x00009B03,0x00009BA3,0x00009C42,0x00009CE1,
0x00009D80,0x00009E1E,0x00009EBC,0x00009F5A,
0x00009FF7,0x0000A094,0x0000A130,0x0000A1CC,
0x0000A268,0x0000A303,0x0000A39E,0x0000A438,
0x0000A4D2,0x0000A56C,0x0000A605,0x0000A69E,
0x0000A736,0x0000A7CE,0x0000A866,0x0000A8FD,
0x0000A994,0x0000AA2A,0x0000AAC1,0x0000AB56,
0x0000ABEB,0x0000AC80,0x0000AD14,0x0000ADA8,
0x0000AE3C,0x0000AECF,0x0000AF62,0x0000AFF4,
0x0000B086,0x0000B117,0x0000B1A8,0x0000B239,
0x0000B2C9,0x0000B358,0x0000B3E8,0x0000B477,
0x0000B505,0x0000B593,0x0000B620,0x0000B6AD,
0x0000B73A,0x0000B7C6,0x0000B852,0x0000B8DD,
0x0000B968,0x0000B9F3,0x0000BA7D,0x0000BB06,
0x0000BB8F,0x0000BC18,0x0000BCA0,0x0000BD28,
0x0000BDAF,0x0000BE36,0x0000BEBC,0x0000BF42,
0x0000BFC7,0x0000C04C,0x0000C0D1,0x0000C155,
0x0000C1D8,0x0000C25C,0x0000C2DE,0x0000C360,
0x0000C3E2,0x0000C463,0x0000C4E4,0x0000C564,
0x0000C5E4,0x0000C663,0x0000C6E2,0x0000C761,
0x0000C7DE,0x0000C85C,0x0000C8D9,0x0000C955,
0x0000C9D1,0x0000CA4D,0x0000CAC7,0x0000CB42,
0x0000CBBC,0x0000CC35,0x0000CCAE,0x0000CD27,
0x0000CD9F,0x0000CE17,0x0000CE8E,0x0000CF04,
0x0000CF7A,0x0000CFF0,0x0000D065,0x0000D0D9,
0x0000D14D,0x0000D1C1,0x0000D234,0x0000D2A6,
0x0000D318,0x0000D38A,0x0000D3FB,0x0000D46B,
0x0000D4DB,0x0000D54B,0x0000D5BA,0x0000D628,
0x0000D696,0x0000D703,0x0000D770,0x0000D7DC,
0x0000D848,0x0000D8B4,0x0000D91E,0x0000D989,
0x0000D9F2,0x0000DA5C,0x0000DAC4,0x0000DB2C,
0x0000DB94,0x0000DBFB,0x0000DC62,0x0000DCC8,
0x0000DD2D,0x0000DD92,0x0000DDF7,0x0000DE5B,
0x0000DEBE,0x0000DF21,0x0000DF83,0x0000DFE5,
0x0000E046,0x0000E0A7,0x0000E107,0x0000E167,
0x0000E1C6,0x0000E224,0x0000E282,0x0000E2DF,
0x0000E33C,0x0000E399,0x0000E3F4,0x0000E450,
0x0000E4AA,0x0000E504,0x0000E55E,0x0000E5B7,
0x0000E610,0x0000E667,0x0000E6BF,0x0000E716,
0x0000E76C,0x0000E7C2,0x0000E817,0x0000E86B,
0x0000E8BF,0x0000E913,0x0000E966,0x0000E9B8,
0x0000EA0A,0x0000EA5B,0x0000EAAB,0x0000EAFC,
0x0000EB4B,0x0000EB9A,0x0000EBE8,0x0000EC36,
0x0000EC83,0x0000ECD0,0x0000ED1C,0x0000ED68,
0x0000EDB3,0x0000EDFD,0x0000EE47,0x0000EE90,
0x0000EED9,0x0000EF21,0x0000EF68,0x0000EFAF,
0x0000EFF5,0x0000F03B,0x0000F080,0x0000F0C5,
0x0000F109,0x0000F14C,0x0000F18F,0x0000F1D2,
0x0000F213,0x0000F254,0x0000F295,0x0000F2D5,
0x0000F314,0x0000F353,0x0000F391,0x0000F3CF,
0x0000F40C,0x0000F448,0x0000F484,0x0000F4BF,
0x0000F4FA,0x0000F534,0x0000F56E,0x0000F5A6,
0x0000F5DF,0x0000F616,0x0000F64E,0x0000F684,
0x0000F6BA,0x0000F6EF,0x0000F724,0x0000F758,
0x0000F78C,0x0000F7BF,0x0000F7F1,0x0000F823,
0x0000F854,0x0000F885,0x0000F8B4,0x0000F8E4,
0x0000F913,0x0000F941,0x0000F96E,0x0000F99B,
0x0000F9C8,0x0000F9F3,0x0000FA1F,0x0000FA49,
0x0000FA73,0x0000FA9C,0x0000FAC5,0x0000FAED,
0x0000FB15,0x0000FB3C,0x0000FB62,0x0000FB88,
0x0000FBAD,0x0000FBD1,0x0000FBF5,0x0000FC18,
0x0000FC3B,0x0000FC5D,0x0000FC7F,0x0000FCA0,
0x0000FCC0,0x0000FCDF,0x0000FCFE,0x0000FD1D,
0x0000FD3B,0x0000FD58,0x0000FD74,0x0000FD90,
0x0000FDAC,0x0000FDC7,0x0000FDE1,0x0000FDFA,
0x0000FE13,0x0000FE2B,0x0000FE43,0x0000FE5A,
0x0000FE71,0x0000FE87,0x0000FE9C,0x0000FEB0,
0x0000FEC4,0x0000FED8,0x0000FEEB,0x0000FEFD,
0x0000FF0E,0x0000FF1F,0x0000FF30,0x0000FF3F,
0x0000FF4E,0x0000FF5D,0x0000FF6B,0x0000FF78,
0x0000FF85,0x0000FF91,0x0000FF9C,0x0000FFA7,
0x0000FFB1,0x0000FFBB,0x0000FFC4,0x0000FFCC,
0x0000FFD4,0x0000FFDB,0x0000FFE1,0x0000FFE7,
0x0000FFEC,0x0000FFF1,0x0000FFF5,0x0000FFF8,
0x0000FFFB,0x0000FFFD,0x0000FFFF,0x00010000,
0x00010000,0x00010000,0x0000FFFF,0x0000FFFD,
0x0000FFFB,0x0000FFF8,0x0000FFF5,0x0000FFF1,
0x0000FFEC,0x0000FFE7,0x0000FFE1,0x0000FFDB,
0x0000FFD4,0x0000FFCC,0x0000FFC4,0x0000FFBB,
0x0000FFB1,0x0000FFA7,0x0000FF9C,0x0000FF91,
0x0000FF85,0x0000FF78,0x0000FF6B,0x0000FF5D,
0x0000FF4E,0x0000FF3F,0x0000FF30,0x0000FF1F,
0x0000FF0E,0x0000FEFD,0x0000FEEB,0x0000FED8,
0x0000FEC4,0x0000FEB0,0x0000FE9C,0x0000FE87,
0x0000FE71,0x0000FE5A,0x0000FE43,0x0000FE2B,
0x0000FE13,0x0000FDFA,0x0000FDE1,0x0000FDC7,
0x0000FDAC,0x0000FD90,0x0000FD74,0x0000FD58,
0x0000FD3B,0x0000FD1D,0x0000FCFE,0x0000FCDF,
0x0000FCC0,0x0000FCA0,0x0000FC7F,0x0000FC5D,
0x0000FC3B,0x0000FC18,0x0000FBF5,0x0000FBD1,
0x0000FBAD,0x0000FB88,0x0000FB62,0x0000FB3C,
0x0000FB15,0x0000FAED,0x0000FAC5,0x0000FA9C,
0x0000FA73,0x0000FA49,0x0000FA1F,0x0000F9F3,
0x0000F9C8,0x0000F99B,0x0000F96E,0x0000F941,
0x0000F913,0x0000F8E4,0x0000F8B4,0x0000F885,
0x0000F854,0x0000F823,0x0000F7F1,0x0000F7BF,
0x0000F78C,0x0000F758,0x0000F724,0x0000F6EF,
0x0000F6BA,0x0000F684,0x0000F64E,0x0000F616,
0x0000F5DF,0x0000F5A6,0x0000F56E,0x0000F534,
0x0000F4FA,0x0000F4BF,0x0000F484,0x0000F448,
0x0000F40C,0x0000F3CF,0x0000F391,0x0000F353,
0x0000F314,0x0000F2D5,0x0000F295,0x0000F254,
0x0000F213,0x0000F1D2,0x0000F18F,0x0000F14C,
0x0000F109,0x0000F0C5,0x0000F080,0x0000F03B,
0x0000EFF5,0x0000EFAF,0x0000EF68,0x0000EF21,
0x0000EED9,0x0000EE90,0x0000EE47,0x0000EDFD,
0x0000EDB3,0x0000ED68,0x0000ED1C,0x0000ECD0,
0x0000EC83,0x0000EC36,0x0000EBE8,0x0000EB9A,
0x0000EB4B,0x0000EAFC,0x0000EAAB,0x0000EA5B,
0x0000EA0A,0x0000E9B8,0x0000E966,0x0000E913,
0x0000E8BF,0x0000E86B,0x0000E817,0x0000E7C2,
0x0000E76C,0x0000E716,0x0000E6BF,0x0000E667,
0x0000E610,0x0000E5B7,0x0000E55E,0x0000E504,
0x0000E4AA,0x0000E450,0x0000E3F4,0x0000E399,
0x0000E33C,0x0000E2DF,0x0000E282,0x0000E224,
0x0000E1C6,0x0000E167,0x0000E107,0x0000E0A7,
0x0000E046,0x0000DFE5,0x0000DF83,0x0000DF21,
0x0000DEBE,0x0000DE5B,0x0000DDF7,0x0000DD92,
0x0000DD2D,0x0000DCC8,0x0000DC62,0x0000DBFB,
0x0000DB94,0x0000DB2C,0x0000DAC4,0x0000DA5C,
0x0000D9F2,0x0000D989,0x0000D91E,0x0000D8B4,
0x0000D848,0x0000D7DC,0x0000D770,0x0000D703,
0x0000D696,0x0000D628,0x0000D5BA,0x0000D54B,
0x0000D4DB,0x0000D46B,0x0000D3FB,0x0000D38A,
0x0000D318,0x0000D2A6,0x0000D234,0x0000D1C1,
0x0000D14D,0x0000D0D9,0x0000D065,0x0000CFF0,
0x0000CF7A,0x0000CF04,0x0000CE8E,0x0000CE17,
0x0000CD9F,0x0000CD27,0x0000CCAE,0x0000CC35,
0x0000CBBC,0x0000CB42,0x0000CAC7,0x0000CA4D,
0x0000C9D1,0x0000C955,0x0000C8D9,0x0000C85C,
0x0000C7DE,0x0000C761,0x0000C6E2,0x0000C663,
0x0000C5E4,0x0000C564,0x0000C4E4,0x0000C463,
0x0000C3E2,0x0000C360,0x0000C2DE,0x0000C25C,
0x0000C1D8,0x0000C155,0x0000C0D1,0x0000C04C,
0x0000BFC7,0x0000BF42,0x0000BEBC,0x0000BE36,
0x0000BDAF,0x0000BD28,0x0000BCA0,0x0000BC18,
0x0000BB8F,0x0000BB06,0x0000BA7D,0x0000B9F3,
0x0000B968,0x0000B8DD,0x0000B852,0x0000B7C6,
0x0000B73A,0x0000B6AD,0x0000B620,0x0000B593,
0x0000B505,0x0000B477,0x0000B3E8,0x0000B358,
0x0000B2C9,0x0000B239,0x0000B1A8,0x0000B117,
0x0000B086,0x0000AFF4,0x0000AF62,0x0000AECF,
0x0000AE3C,0x0000ADA8,0x0000AD14,0x0000AC80,
0x0000ABEB,0x0000AB56,0x0000AAC1,0x0000AA2A,
0x0000A994,0x0000A8FD,0x0000A866,0x0000A7CE,
0x0000A736,0x0000A69E,0x0000A605,0x0000A56C,
0x0000A4D2,0x0000A438,0x0000A39E,0x0000A303,
0x0000A268,0x0000A1CC,0x0000A130,0x0000A094,
0x00009FF7,0x00009F5A,0x00009EBC,0x00009E1E,
0x00009D80,0x00009CE1,0x00009C42,0x00009BA3,
0x00009B03,0x00009A63,0x000099C2,0x00009921,
0x00009880,0x000097DE,0x0000973C,0x0000969A,
0x000095F7,0x00009554,0x000094B0,0x0000940C,
0x00009368,0x000092C4,0x0000921F,0x00009179,
0x000090D4,0x0000902E,0x00008F88,0x00008EE1,
0x00008E3A,0x00008D93,0x00008CEB,0x00008C43,
0x00008B9A,0x00008AF2,0x00008A49,0x0000899F,
0x000088F6,0x0000884C,0x000087A1,0x000086F7,
0x0000864C,0x000085A0,0x000084F5,0x00008449,
0x0000839C,0x000082F0,0x00008243,0x00008195,
0x000080E8,0x0000803A,0x00007F8C,0x00007EDD,
0x00007E2F,0x00007D7F,0x00007CD0,0x00007C20,
0x00007B70,0x00007AC0,0x00007A10,0x0000795F,
0x000078AD,0x000077FC,0x0000774A,0x00007698,
0x000075E6,0x00007533,0x00007480,0x000073CD,
0x0000731A,0x00007266,0x000071B2,0x000070FE,
0x00007049,0x00006F94,0x00006EDF,0x00006E2A,
0x00006D74,0x00006CBE,0x00006C08,0x00006B52,
0x00006A9B,0x000069E4,0x0000692D,0x00006876,
0x000067BE,0x00006706,0x0000664E,0x00006595,
0x000064DD,0x00006424,0x0000636B,0x000062B1,
0x000061F8,0x0000613E,0x00006084,0x00005FC9,
0x00005F0F,0x00005E54,0x00005D99,0x00005CDE,
0x00005C22,0x00005B66,0x00005AAA,0x000059EE,
0x00005932,0x00005875,0x000057B9,0x000056FC,
0x0000563E,0x00005581,0x000054C3,0x00005406,
0x00005348,0x00005289,0x000051CB,0x0000510C,
0x0000504D,0x00004F8E,0x00004ECF,0x00004E10,
0x00004D50,0x00004C90,0x00004BD1,0x00004B10,
0x00004A50,0x00004990,0x000048CF,0x0000480E,
0x0000474D,0x0000468C,0x000045CB,0x00004509,
0x00004447,0x00004385,0x000042C3,0x00004201,
0x0000413F,0x0000407C,0x00003FBA,0x00003EF7,
0x00003E34,0x00003D71,0x00003CAE,0x00003BEA,
0x00003B27,0x00003A63,0x0000399F,0x000038DB,
0x00003817,0x00003753,0x0000368E,0x000035CA,
0x00003505,0x00003440,0x0000337C,0x000032B7,
0x000031F1,0x0000312C,0x00003067,0x00002FA1,
0x00002EDC,0x00002E16,0x00002D50,0x00002C8A,
0x00002BC4,0x00002AFE,0x00002A38,0x00002971,
0x000028AB,0x000027E4,0x0000271E,0x00002657,
0x00002590,0x000024C9,0x00002402,0x0000233B,
0x00002274,0x000021AD,0x000020E5,0x0000201E,
0x00001F56,0x00001E8F,0x00001DC7,0x00001CFF,
0x00001C38,0x00001B70,0x00001AA8,0x000019E0,
0x00001918,0x00001850,0x00001787,0x000016BF,
0x000015F7,0x0000152E,0x00001466,0x0000139E,
0x000012D5,0x0000120D,0x00001144,0x0000107B,
0x00000FB3,0x00000EEA,0x00000E21,0x00000D59,
0x00000C90,0x00000BC7,0x00000AFE,0x00000A35,
0x0000096C,0x000008A3,0x000007DA,0x00000711,
0x00000648,0x0000057F,0x000004B6,0x000003ED,
0x00000324, 0x0000025B, 0x00000192, 0x000000C9,

0x00000000,0xFFFFFF37,0xFFFFFE6E,0xFFFFFDA5,
0xFFFFFCDC,0xFFFFFC13,0xFFFFFB4A,0xFFFFFA81,
0xFFFFF9B8,0xFFFFF8EF,0xFFFFF826,0xFFFFF75D,
0xFFFFF694,0xFFFFF5CB,0xFFFFF502,0xFFFFF439,
0xFFFFF370,0xFFFFF2A7,0xFFFFF1DF,0xFFFFF116,
0xFFFFF04D,0xFFFFEF85,0xFFFFEEBC,0xFFFFEDF3,
0xFFFFED2B,0xFFFFEC62,0xFFFFEB9A,0xFFFFEAD2,
0xFFFFEA09,0xFFFFE941,0xFFFFE879,0xFFFFE7B0,
0xFFFFE6E8,0xFFFFE620,0xFFFFE558,0xFFFFE490,
0xFFFFE3C8,0xFFFFE301,0xFFFFE239,0xFFFFE171,
0xFFFFE0AA,0xFFFFDFE2,0xFFFFDF1B,0xFFFFDE53,
0xFFFFDD8C,0xFFFFDCC5,0xFFFFDBFE,0xFFFFDB37,
0xFFFFDA70,0xFFFFD9A9,0xFFFFD8E2,0xFFFFD81C,
0xFFFFD755,0xFFFFD68F,0xFFFFD5C8,0xFFFFD502,
0xFFFFD43C,0xFFFFD376,0xFFFFD2B0,0xFFFFD1EA,
0xFFFFD124,0xFFFFD05F,0xFFFFCF99,0xFFFFCED4,
0xFFFFCE0F,0xFFFFCD49,0xFFFFCC84,0xFFFFCBC0,
0xFFFFCAFB,0xFFFFCA36,0xFFFFC972,0xFFFFC8AD,
0xFFFFC7E9,0xFFFFC725,0xFFFFC661,0xFFFFC59D,
0xFFFFC4D9,0xFFFFC416,0xFFFFC352,0xFFFFC28F,
0xFFFFC1CC,0xFFFFC109,0xFFFFC046,0xFFFFBF84,
0xFFFFBEC1,0xFFFFBDFF,0xFFFFBD3D,0xFFFFBC7B,
0xFFFFBBB9,0xFFFFBAF7,0xFFFFBA35,0xFFFFB974,
0xFFFFB8B3,0xFFFFB7F2,0xFFFFB731,0xFFFFB670,
0xFFFFB5B0,0xFFFFB4F0,0xFFFFB42F,0xFFFFB370,
0xFFFFB2B0,0xFFFFB1F0,0xFFFFB131,0xFFFFB072,
0xFFFFAFB3,0xFFFFAEF4,0xFFFFAE35,0xFFFFAD77,
0xFFFFACB8,0xFFFFABFA,0xFFFFAB3D,0xFFFFAA7F,
0xFFFFA9C2,0xFFFFA904,0xFFFFA847,0xFFFFA78B,
0xFFFFA6CE,0xFFFFA612,0xFFFFA556,0xFFFFA49A,
0xFFFFA3DE,0xFFFFA322,0xFFFFA267,0xFFFFA1AC,
0xFFFFA0F1,0xFFFFA037,0xFFFF9F7C,0xFFFF9EC2,
0xFFFF9E08,0xFFFF9D4F,0xFFFF9C95,0xFFFF9BDC,
0xFFFF9B23,0xFFFF9A6B,0xFFFF99B2,0xFFFF98FA,
0xFFFF9842,0xFFFF978A,0xFFFF96D3,0xFFFF961C,
0xFFFF9565,0xFFFF94AE,0xFFFF93F8,0xFFFF9342,
0xFFFF928C,0xFFFF91D6,0xFFFF9121,0xFFFF906C,
0xFFFF8FB7,0xFFFF8F02,0xFFFF8E4E,0xFFFF8D9A,
0xFFFF8CE6,0xFFFF8C33,0xFFFF8B80,0xFFFF8ACD,
0xFFFF8A1A,0xFFFF8968,0xFFFF88B6,0xFFFF8804,
0xFFFF8753,0xFFFF86A1,0xFFFF85F0,0xFFFF8540,
0xFFFF8490,0xFFFF83E0,0xFFFF8330,0xFFFF8281,
0xFFFF81D1,0xFFFF8123,0xFFFF8074,0xFFFF7FC6,
0xFFFF7F18,0xFFFF7E6B,0xFFFF7DBD,0xFFFF7D10,
0xFFFF7C64,0xFFFF7BB7,0xFFFF7B0B,0xFFFF7A60,
0xFFFF79B4,0xFFFF7909,0xFFFF785F,0xFFFF77B4,
0xFFFF770A,0xFFFF7661,0xFFFF75B7,0xFFFF750E,
0xFFFF7466,0xFFFF73BD,0xFFFF7315,0xFFFF726D,
0xFFFF71C6,0xFFFF711F,0xFFFF7078,0xFFFF6FD2,
0xFFFF6F2C,0xFFFF6E87,0xFFFF6DE1,0xFFFF6D3C,
0xFFFF6C98,0xFFFF6BF4,0xFFFF6B50,0xFFFF6AAC,
0xFFFF6A09,0xFFFF6966,0xFFFF68C4,0xFFFF6822,
0xFFFF6780,0xFFFF66DF,0xFFFF663E,0xFFFF659D,
0xFFFF64FD,0xFFFF645D,0xFFFF63BE,0xFFFF631F,
0xFFFF6280,0xFFFF61E2,0xFFFF6144,0xFFFF60A6,
0xFFFF6009,0xFFFF5F6C,0xFFFF5ED0,0xFFFF5E34,
0xFFFF5D98,0xFFFF5CFD,0xFFFF5C62,0xFFFF5BC8,
0xFFFF5B2E,0xFFFF5A94,0xFFFF59FB,0xFFFF5962,
0xFFFF58CA,0xFFFF5832,0xFFFF579A,0xFFFF5703,
0xFFFF566C,0xFFFF55D6,0xFFFF553F,0xFFFF54AA,
0xFFFF5415,0xFFFF5380,0xFFFF52EC,0xFFFF5258,
0xFFFF51C4,0xFFFF5131,0xFFFF509E,0xFFFF500C,
0xFFFF4F7A,0xFFFF4EE9,0xFFFF4E58,0xFFFF4DC7,
0xFFFF4D37,0xFFFF4CA8,0xFFFF4C18,0xFFFF4B89,
0xFFFF4AFB,0xFFFF4A6D,0xFFFF49E0,0xFFFF4953,
0xFFFF48C6,0xFFFF483A,0xFFFF47AE,0xFFFF4723,
0xFFFF4698,0xFFFF460D,0xFFFF4583,0xFFFF44FA,
0xFFFF4471,0xFFFF43E8,0xFFFF4360,0xFFFF42D8,
0xFFFF4251,0xFFFF41CA,0xFFFF4144,0xFFFF40BE,
0xFFFF4039,0xFFFF3FB4,0xFFFF3F2F,0xFFFF3EAB,
0xFFFF3E28,0xFFFF3DA4,0xFFFF3D22,0xFFFF3CA0,
0xFFFF3C1E,0xFFFF3B9D,0xFFFF3B1C,0xFFFF3A9C,
0xFFFF3A1C,0xFFFF399D,0xFFFF391E,0xFFFF389F,
0xFFFF3822,0xFFFF37A4,0xFFFF3727,0xFFFF36AB,
0xFFFF362F,0xFFFF35B3,0xFFFF3539,0xFFFF34BE,
0xFFFF3444,0xFFFF33CB,0xFFFF3352,0xFFFF32D9,
0xFFFF3261,0xFFFF31E9,0xFFFF3172,0xFFFF30FC,
0xFFFF3086,0xFFFF3010,0xFFFF2F9B,0xFFFF2F27,
0xFFFF2EB3,0xFFFF2E3F,0xFFFF2DCC,0xFFFF2D5A,
0xFFFF2CE8,0xFFFF2C76,0xFFFF2C05,0xFFFF2B95,
0xFFFF2B25,0xFFFF2AB5,0xFFFF2A46,0xFFFF29D8,
0xFFFF296A,0xFFFF28FD,0xFFFF2890,0xFFFF2824,
0xFFFF27B8,0xFFFF274C,0xFFFF26E2,0xFFFF2677,
0xFFFF260E,0xFFFF25A4,0xFFFF253C,0xFFFF24D4,
0xFFFF246C,0xFFFF2405,0xFFFF239E,0xFFFF2338,
0xFFFF22D3,0xFFFF226E,0xFFFF2209,0xFFFF21A5,
0xFFFF2142,0xFFFF20DF,0xFFFF207D,0xFFFF201B,
0xFFFF1FBA,0xFFFF1F59,0xFFFF1EF9,0xFFFF1E99,
0xFFFF1E3A,0xFFFF1DDC,0xFFFF1D7E,0xFFFF1D21,
0xFFFF1CC4,0xFFFF1C67,0xFFFF1C0C,0xFFFF1BB0,
0xFFFF1B56,0xFFFF1AFC,0xFFFF1AA2,0xFFFF1A49,
0xFFFF19F0,0xFFFF1999,0xFFFF1941,0xFFFF18EA,
0xFFFF1894,0xFFFF183E,0xFFFF17E9,0xFFFF1795,
0xFFFF1741,0xFFFF16ED,0xFFFF169A,0xFFFF1648,
0xFFFF15F6,0xFFFF15A5,0xFFFF1555,0xFFFF1504,
0xFFFF14B5,0xFFFF1466,0xFFFF1418,0xFFFF13CA,
0xFFFF137D,0xFFFF1330,0xFFFF12E4,0xFFFF1298,
0xFFFF124D,0xFFFF1203,0xFFFF11B9,0xFFFF1170,
0xFFFF1127,0xFFFF10DF,0xFFFF1098,0xFFFF1051,
0xFFFF100B,0xFFFF0FC5,0xFFFF0F80,0xFFFF0F3B,
0xFFFF0EF7,0xFFFF0EB4,0xFFFF0E71,0xFFFF0E2E,
0xFFFF0DED,0xFFFF0DAC,0xFFFF0D6B,0xFFFF0D2B,
0xFFFF0CEC,0xFFFF0CAD,0xFFFF0C6F,0xFFFF0C31,
0xFFFF0BF4,0xFFFF0BB8,0xFFFF0B7C,0xFFFF0B41,
0xFFFF0B06,0xFFFF0ACC,0xFFFF0A92,0xFFFF0A5A,
0xFFFF0A21,0xFFFF09EA,0xFFFF09B2,0xFFFF097C,
0xFFFF0946,0xFFFF0911,0xFFFF08DC,0xFFFF08A8,
0xFFFF0874,0xFFFF0841,0xFFFF080F,0xFFFF07DD,
0xFFFF07AC,0xFFFF077B,0xFFFF074C,0xFFFF071C,
0xFFFF06ED,0xFFFF06BF,0xFFFF0692,0xFFFF0665,
0xFFFF0638,0xFFFF060D,0xFFFF05E1,0xFFFF05B7,
0xFFFF058D,0xFFFF0564,0xFFFF053B,0xFFFF0513,
0xFFFF04EB,0xFFFF04C4,0xFFFF049E,0xFFFF0478,
0xFFFF0453,0xFFFF042F,0xFFFF040B,0xFFFF03E8,
0xFFFF03C5,0xFFFF03A3,0xFFFF0381,0xFFFF0360,
0xFFFF0340,0xFFFF0321,0xFFFF0302,0xFFFF02E3,
0xFFFF02C5,0xFFFF02A8,0xFFFF028C,0xFFFF0270,
0xFFFF0254,0xFFFF0239,0xFFFF021F,0xFFFF0206,
0xFFFF01ED,0xFFFF01D5,0xFFFF01BD,0xFFFF01A6,
0xFFFF018F,0xFFFF0179,0xFFFF0164,0xFFFF0150,
0xFFFF013C,0xFFFF0128,0xFFFF0115,0xFFFF0103,
0xFFFF00F2,0xFFFF00E1,0xFFFF00D0,0xFFFF00C1,
0xFFFF00B2,0xFFFF00A3,0xFFFF0095,0xFFFF0088,
0xFFFF007B,0xFFFF006F,0xFFFF0064,0xFFFF0059,
0xFFFF004F,0xFFFF0045,0xFFFF003C,0xFFFF0034,
0xFFFF002C,0xFFFF0025,0xFFFF001F,0xFFFF0019,
0xFFFF0014,0xFFFF000F,0xFFFF000B,0xFFFF0008,
0xFFFF0005,0xFFFF0003,0xFFFF0001,0xFFFF0000,
0xFFFF0000,0xFFFF0000,0xFFFF0001,0xFFFF0003,
0xFFFF0005,0xFFFF0008,0xFFFF000B,0xFFFF000F,
0xFFFF0014,0xFFFF0019,0xFFFF001F,0xFFFF0025,
0xFFFF002C,0xFFFF0034,0xFFFF003C,0xFFFF0045,
0xFFFF004F,0xFFFF0059,0xFFFF0064,0xFFFF006F,
0xFFFF007B,0xFFFF0088,0xFFFF0095,0xFFFF00A3,
0xFFFF00B2,0xFFFF00C1,0xFFFF00D0,0xFFFF00E1,
0xFFFF00F2,0xFFFF0103,0xFFFF0115,0xFFFF0128,
0xFFFF013C,0xFFFF0150,0xFFFF0164,0xFFFF0179,
0xFFFF018F,0xFFFF01A6,0xFFFF01BD,0xFFFF01D5,
0xFFFF01ED,0xFFFF0206,0xFFFF021F,0xFFFF0239,
0xFFFF0254,0xFFFF0270,0xFFFF028C,0xFFFF02A8,
0xFFFF02C5,0xFFFF02E3,0xFFFF0302,0xFFFF0321,
0xFFFF0340,0xFFFF0360,0xFFFF0381,0xFFFF03A3,
0xFFFF03C5,0xFFFF03E8,0xFFFF040B,0xFFFF042F,
0xFFFF0453,0xFFFF0478,0xFFFF049E,0xFFFF04C4,
0xFFFF04EB,0xFFFF0513,0xFFFF053B,0xFFFF0564,
0xFFFF058D,0xFFFF05B7,0xFFFF05E1,0xFFFF060D,
0xFFFF0638,0xFFFF0665,0xFFFF0692,0xFFFF06BF,
0xFFFF06ED,0xFFFF071C,0xFFFF074C,0xFFFF077B,
0xFFFF07AC,0xFFFF07DD,0xFFFF080F,0xFFFF0841,
0xFFFF0874,0xFFFF08A8,0xFFFF08DC,0xFFFF0911,
0xFFFF0946,0xFFFF097C,0xFFFF09B2,0xFFFF09EA,
0xFFFF0A21,0xFFFF0A5A,0xFFFF0A92,0xFFFF0ACC,
0xFFFF0B06,0xFFFF0B41,0xFFFF0B7C,0xFFFF0BB8,
0xFFFF0BF4,0xFFFF0C31,0xFFFF0C6F,0xFFFF0CAD,
0xFFFF0CEC,0xFFFF0D2B,0xFFFF0D6B,0xFFFF0DAC,
0xFFFF0DED,0xFFFF0E2E,0xFFFF0E71,0xFFFF0EB4,
0xFFFF0EF7,0xFFFF0F3B,0xFFFF0F80,0xFFFF0FC5,
0xFFFF100B,0xFFFF1051,0xFFFF1098,0xFFFF10DF,
0xFFFF1127,0xFFFF1170,0xFFFF11B9,0xFFFF1203,
0xFFFF124D,0xFFFF1298,0xFFFF12E4,0xFFFF1330,
0xFFFF137D,0xFFFF13CA,0xFFFF1418,0xFFFF1466,
0xFFFF14B5,0xFFFF1504,0xFFFF1555,0xFFFF15A5,
0xFFFF15F6,0xFFFF1648,0xFFFF169A,0xFFFF16ED,
0xFFFF1741,0xFFFF1795,0xFFFF17E9,0xFFFF183E,
0xFFFF1894,0xFFFF18EA,0xFFFF1941,0xFFFF1999,
0xFFFF19F0,0xFFFF1A49,0xFFFF1AA2,0xFFFF1AFC,
0xFFFF1B56,0xFFFF1BB0,0xFFFF1C0C,0xFFFF1C67,
0xFFFF1CC4,0xFFFF1D21,0xFFFF1D7E,0xFFFF1DDC,
0xFFFF1E3A,0xFFFF1E99,0xFFFF1EF9,0xFFFF1F59,
0xFFFF1FBA,0xFFFF201B,0xFFFF207D,0xFFFF20DF,
0xFFFF2142,0xFFFF21A5,0xFFFF2209,0xFFFF226E,
0xFFFF22D3,0xFFFF2338,0xFFFF239E,0xFFFF2405,
0xFFFF246C,0xFFFF24D4,0xFFFF253C,0xFFFF25A4,
0xFFFF260E,0xFFFF2677,0xFFFF26E2,0xFFFF274C,
0xFFFF27B8,0xFFFF2824,0xFFFF2890,0xFFFF28FD,
0xFFFF296A,0xFFFF29D8,0xFFFF2A46,0xFFFF2AB5,
0xFFFF2B25,0xFFFF2B95,0xFFFF2C05,0xFFFF2C76,
0xFFFF2CE8,0xFFFF2D5A,0xFFFF2DCC,0xFFFF2E3F,
0xFFFF2EB3,0xFFFF2F27,0xFFFF2F9B,0xFFFF3010,
0xFFFF3086,0xFFFF30FC,0xFFFF3172,0xFFFF31E9,
0xFFFF3261,0xFFFF32D9,0xFFFF3352,0xFFFF33CB,
0xFFFF3444,0xFFFF34BE,0xFFFF3539,0xFFFF35B3,
0xFFFF362F,0xFFFF36AB,0xFFFF3727,0xFFFF37A4,
0xFFFF3822,0xFFFF389F,0xFFFF391E,0xFFFF399D,
0xFFFF3A1C,0xFFFF3A9C,0xFFFF3B1C,0xFFFF3B9D,
0xFFFF3C1E,0xFFFF3CA0,0xFFFF3D22,0xFFFF3DA4,
0xFFFF3E28,0xFFFF3EAB,0xFFFF3F2F,0xFFFF3FB4,
0xFFFF4039,0xFFFF40BE,0xFFFF4144,0xFFFF41CA,
0xFFFF4251,0xFFFF42D8,0xFFFF4360,0xFFFF43E8,
0xFFFF4471,0xFFFF44FA,0xFFFF4583,0xFFFF460D,
0xFFFF4698,0xFFFF4723,0xFFFF47AE,0xFFFF483A,
0xFFFF48C6,0xFFFF4953,0xFFFF49E0,0xFFFF4A6D,
0xFFFF4AFB,0xFFFF4B89,0xFFFF4C18,0xFFFF4CA8,
0xFFFF4D37,0xFFFF4DC7,0xFFFF4E58,0xFFFF4EE9,
0xFFFF4F7A,0xFFFF500C,0xFFFF509E,0xFFFF5131,
0xFFFF51C4,0xFFFF5258,0xFFFF52EC,0xFFFF5380,
0xFFFF5415,0xFFFF54AA,0xFFFF553F,0xFFFF55D6,
0xFFFF566C,0xFFFF5703,0xFFFF579A,0xFFFF5832,
0xFFFF58CA,0xFFFF5962,0xFFFF59FB,0xFFFF5A94,
0xFFFF5B2E,0xFFFF5BC8,0xFFFF5C62,0xFFFF5CFD,
0xFFFF5D98,0xFFFF5E34,0xFFFF5ED0,0xFFFF5F6C,
0xFFFF6009,0xFFFF60A6,0xFFFF6144,0xFFFF61E2,
0xFFFF6280,0xFFFF631F,0xFFFF63BE,0xFFFF645D,
0xFFFF64FD,0xFFFF659D,0xFFFF663E,0xFFFF66DF,
0xFFFF6780,0xFFFF6822,0xFFFF68C4,0xFFFF6966,
0xFFFF6A09,0xFFFF6AAC,0xFFFF6B50,0xFFFF6BF4,
0xFFFF6C98,0xFFFF6D3C,0xFFFF6DE1,0xFFFF6E87,
0xFFFF6F2C,0xFFFF6FD2,0xFFFF7078,0xFFFF711F,
0xFFFF71C6,0xFFFF726D,0xFFFF7315,0xFFFF73BD,
0xFFFF7466,0xFFFF750E,0xFFFF75B7,0xFFFF7661,
0xFFFF770A,0xFFFF77B4,0xFFFF785F,0xFFFF7909,
0xFFFF79B4,0xFFFF7A60,0xFFFF7B0B,0xFFFF7BB7,
0xFFFF7C64,0xFFFF7D10,0xFFFF7DBD,0xFFFF7E6B,
0xFFFF7F18,0xFFFF7FC6,0xFFFF8074,0xFFFF8123,
0xFFFF81D1,0xFFFF8281,0xFFFF8330,0xFFFF83E0,
0xFFFF8490,0xFFFF8540,0xFFFF85F0,0xFFFF86A1,
0xFFFF8753,0xFFFF8804,0xFFFF88B6,0xFFFF8968,
0xFFFF8A1A,0xFFFF8ACD,0xFFFF8B80,0xFFFF8C33,
0xFFFF8CE6,0xFFFF8D9A,0xFFFF8E4E,0xFFFF8F02,
0xFFFF8FB7,0xFFFF906C,0xFFFF9121,0xFFFF91D6,
0xFFFF928C,0xFFFF9342,0xFFFF93F8,0xFFFF94AE,
0xFFFF9565,0xFFFF961C,0xFFFF96D3,0xFFFF978A,
0xFFFF9842,0xFFFF98FA,0xFFFF99B2,0xFFFF9A6B,
0xFFFF9B23,0xFFFF9BDC,0xFFFF9C95,0xFFFF9D4F,
0xFFFF9E08,0xFFFF9EC2,0xFFFF9F7C,0xFFFFA037,
0xFFFFA0F1,0xFFFFA1AC,0xFFFFA267,0xFFFFA322,
0xFFFFA3DE,0xFFFFA49A,0xFFFFA556,0xFFFFA612,
0xFFFFA6CE,0xFFFFA78B,0xFFFFA847,0xFFFFA904,
0xFFFFA9C2,0xFFFFAA7F,0xFFFFAB3D,0xFFFFABFA,
0xFFFFACB8,0xFFFFAD77,0xFFFFAE35,0xFFFFAEF4,
0xFFFFAFB3,0xFFFFB072,0xFFFFB131,0xFFFFB1F0,
0xFFFFB2B0,0xFFFFB370,0xFFFFB42F,0xFFFFB4F0,
0xFFFFB5B0,0xFFFFB670,0xFFFFB731,0xFFFFB7F2,
0xFFFFB8B3,0xFFFFB974,0xFFFFBA35,0xFFFFBAF7,
0xFFFFBBB9,0xFFFFBC7B,0xFFFFBD3D,0xFFFFBDFF,
0xFFFFBEC1,0xFFFFBF84,0xFFFFC046,0xFFFFC109,
0xFFFFC1CC,0xFFFFC28F,0xFFFFC352,0xFFFFC416,
0xFFFFC4D9,0xFFFFC59D,0xFFFFC661,0xFFFFC725,
0xFFFFC7E9,0xFFFFC8AD,0xFFFFC972,0xFFFFCA36,
0xFFFFCAFB,0xFFFFCBC0,0xFFFFCC84,0xFFFFCD49,
0xFFFFCE0F,0xFFFFCED4,0xFFFFCF99,0xFFFFD05F,
0xFFFFD124,0xFFFFD1EA,0xFFFFD2B0,0xFFFFD376,
0xFFFFD43C,0xFFFFD502,0xFFFFD5C8,0xFFFFD68F,
0xFFFFD755,0xFFFFD81C,0xFFFFD8E2,0xFFFFD9A9,
0xFFFFDA70,0xFFFFDB37,0xFFFFDBFE,0xFFFFDCC5,
0xFFFFDD8C,0xFFFFDE53,0xFFFFDF1B,0xFFFFDFE2,
0xFFFFE0AA,0xFFFFE171,0xFFFFE239,0xFFFFE301,
0xFFFFE3C8,0xFFFFE490,0xFFFFE558,0xFFFFE620,
0xFFFFE6E8,0xFFFFE7B0,0xFFFFE879,0xFFFFE941,
0xFFFFEA09,0xFFFFEAD2,0xFFFFEB9A,0xFFFFEC62,
0xFFFFED2B,0xFFFFEDF3,0xFFFFEEBC,0xFFFFEF85,
0xFFFFF04D,0xFFFFF116,0xFFFFF1DF,0xFFFFF2A7,
0xFFFFF370,0xFFFFF439,0xFFFFF502,0xFFFFF5CB,
0xFFFFF694,0xFFFFF75D,0xFFFFF826,0xFFFFF8EF,
0xFFFFF9B8,0xFFFFFA81,0xFFFFFB4A,0xFFFFFC13,
0xFFFFFCDC, 0xFFFFFDA5, 0xFFFFFE6E, 0xFFFFFF37 };

int32 sin_9134C[(256 + 256 + 256 + 256) * 2] = {
0x00010000,0x00010000,0x0000FFFF,0x0000FFFD,
0x0000FFFB,0x0000FFF8,0x0000FFF5,0x0000FFF1,
0x0000FFEC,0x0000FFE7,0x0000FFE1,0x0000FFDB,
0x0000FFD4,0x0000FFCC,0x0000FFC4,0x0000FFBB,
0x0000FFB1,0x0000FFA7,0x0000FF9C,0x0000FF91,
0x0000FF85,0x0000FF78,0x0000FF6B,0x0000FF5D,
0x0000FF4E,0x0000FF3F,0x0000FF30,0x0000FF1F,
0x0000FF0E,0x0000FEFD,0x0000FEEB,0x0000FED8,
0x0000FEC4,0x0000FEB0,0x0000FE9C,0x0000FE87,
0x0000FE71,0x0000FE5A,0x0000FE43,0x0000FE2B,
0x0000FE13,0x0000FDFA,0x0000FDE1,0x0000FDC7,
0x0000FDAC,0x0000FD90,0x0000FD74,0x0000FD58,
0x0000FD3B,0x0000FD1D,0x0000FCFE,0x0000FCDF,
0x0000FCC0,0x0000FCA0,0x0000FC7F,0x0000FC5D,
0x0000FC3B,0x0000FC18,0x0000FBF5,0x0000FBD1,
0x0000FBAD,0x0000FB88,0x0000FB62,0x0000FB3C,
0x0000FB15,0x0000FAED,0x0000FAC5,0x0000FA9C,
0x0000FA73,0x0000FA49,0x0000FA1F,0x0000F9F3,
0x0000F9C8,0x0000F99B,0x0000F96E,0x0000F941,
0x0000F913,0x0000F8E4,0x0000F8B4,0x0000F885,
0x0000F854,0x0000F823,0x0000F7F1,0x0000F7BF,
0x0000F78C,0x0000F758,0x0000F724,0x0000F6EF,
0x0000F6BA,0x0000F684,0x0000F64E,0x0000F616,
0x0000F5DF,0x0000F5A6,0x0000F56E,0x0000F534,
0x0000F4FA,0x0000F4BF,0x0000F484,0x0000F448,
0x0000F40C,0x0000F3CF,0x0000F391,0x0000F353,
0x0000F314,0x0000F2D5,0x0000F295,0x0000F254,
0x0000F213,0x0000F1D2,0x0000F18F,0x0000F14C,
0x0000F109,0x0000F0C5,0x0000F080,0x0000F03B,
0x0000EFF5,0x0000EFAF,0x0000EF68,0x0000EF21,
0x0000EED9,0x0000EE90,0x0000EE47,0x0000EDFD,
0x0000EDB3,0x0000ED68,0x0000ED1C,0x0000ECD0,
0x0000EC83,0x0000EC36,0x0000EBE8,0x0000EB9A,
0x0000EB4B,0x0000EAFC,0x0000EAAB,0x0000EA5B,
0x0000EA0A,0x0000E9B8,0x0000E966,0x0000E913,
0x0000E8BF,0x0000E86B,0x0000E817,0x0000E7C2,
0x0000E76C,0x0000E716,0x0000E6BF,0x0000E667,
0x0000E610,0x0000E5B7,0x0000E55E,0x0000E504,
0x0000E4AA,0x0000E450,0x0000E3F4,0x0000E399,
0x0000E33C,0x0000E2DF,0x0000E282,0x0000E224,
0x0000E1C6,0x0000E167,0x0000E107,0x0000E0A7,
0x0000E046,0x0000DFE5,0x0000DF83,0x0000DF21,
0x0000DEBE,0x0000DE5B,0x0000DDF7,0x0000DD92,
0x0000DD2D,0x0000DCC8,0x0000DC62,0x0000DBFB,
0x0000DB94,0x0000DB2C,0x0000DAC4,0x0000DA5C,
0x0000D9F2,0x0000D989,0x0000D91E,0x0000D8B4,
0x0000D848,0x0000D7DC,0x0000D770,0x0000D703,
0x0000D696,0x0000D628,0x0000D5BA,0x0000D54B,
0x0000D4DB,0x0000D46B,0x0000D3FB,0x0000D38A,
0x0000D318,0x0000D2A6,0x0000D234,0x0000D1C1,
0x0000D14D,0x0000D0D9,0x0000D065,0x0000CFF0,
0x0000CF7A,0x0000CF04,0x0000CE8E,0x0000CE17,
0x0000CD9F,0x0000CD27,0x0000CCAE,0x0000CC35,
0x0000CBBC,0x0000CB42,0x0000CAC7,0x0000CA4D,
0x0000C9D1,0x0000C955,0x0000C8D9,0x0000C85C,
0x0000C7DE,0x0000C761,0x0000C6E2,0x0000C663,
0x0000C5E4,0x0000C564,0x0000C4E4,0x0000C463,
0x0000C3E2,0x0000C360,0x0000C2DE,0x0000C25C,
0x0000C1D8,0x0000C155,0x0000C0D1,0x0000C04C,
0x0000BFC7,0x0000BF42,0x0000BEBC,0x0000BE36,
0x0000BDAF,0x0000BD28,0x0000BCA0,0x0000BC18,
0x0000BB8F,0x0000BB06,0x0000BA7D,0x0000B9F3,
0x0000B968,0x0000B8DD,0x0000B852,0x0000B7C6,
0x0000B73A,0x0000B6AD,0x0000B620,0x0000B593,
0x0000B505,0x0000B477,0x0000B3E8,0x0000B358,
0x0000B2C9,0x0000B239,0x0000B1A8,0x0000B117,
0x0000B086,0x0000AFF4,0x0000AF62,0x0000AECF,
0x0000AE3C,0x0000ADA8,0x0000AD14,0x0000AC80,
0x0000ABEB,0x0000AB56,0x0000AAC1,0x0000AA2A,
0x0000A994,0x0000A8FD,0x0000A866,0x0000A7CE,
0x0000A736,0x0000A69E,0x0000A605,0x0000A56C,
0x0000A4D2,0x0000A438,0x0000A39E,0x0000A303,
0x0000A268,0x0000A1CC,0x0000A130,0x0000A094,
0x00009FF7,0x00009F5A,0x00009EBC,0x00009E1E,
0x00009D80,0x00009CE1,0x00009C42,0x00009BA3,
0x00009B03,0x00009A63,0x000099C2,0x00009921,
0x00009880,0x000097DE,0x0000973C,0x0000969A,
0x000095F7,0x00009554,0x000094B0,0x0000940C,
0x00009368,0x000092C4,0x0000921F,0x00009179,
0x000090D4,0x0000902E,0x00008F88,0x00008EE1,
0x00008E3A,0x00008D93,0x00008CEB,0x00008C43,
0x00008B9A,0x00008AF2,0x00008A49,0x0000899F,
0x000088F6,0x0000884C,0x000087A1,0x000086F7,
0x0000864C,0x000085A0,0x000084F5,0x00008449,
0x0000839C,0x000082F0,0x00008243,0x00008195,
0x000080E8,0x0000803A,0x00007F8C,0x00007EDD,
0x00007E2F,0x00007D7F,0x00007CD0,0x00007C20,
0x00007B70,0x00007AC0,0x00007A10,0x0000795F,
0x000078AD,0x000077FC,0x0000774A,0x00007698,
0x000075E6,0x00007533,0x00007480,0x000073CD,
0x0000731A,0x00007266,0x000071B2,0x000070FE,
0x00007049,0x00006F94,0x00006EDF,0x00006E2A,
0x00006D74,0x00006CBE,0x00006C08,0x00006B52,
0x00006A9B,0x000069E4,0x0000692D,0x00006876,
0x000067BE,0x00006706,0x0000664E,0x00006595,
0x000064DD,0x00006424,0x0000636B,0x000062B1,
0x000061F8,0x0000613E,0x00006084,0x00005FC9,
0x00005F0F,0x00005E54,0x00005D99,0x00005CDE,
0x00005C22,0x00005B66,0x00005AAA,0x000059EE,
0x00005932,0x00005875,0x000057B9,0x000056FC,
0x0000563E,0x00005581,0x000054C3,0x00005406,
0x00005348,0x00005289,0x000051CB,0x0000510C,
0x0000504D,0x00004F8E,0x00004ECF,0x00004E10,
0x00004D50,0x00004C90,0x00004BD1,0x00004B10,
0x00004A50,0x00004990,0x000048CF,0x0000480E,
0x0000474D,0x0000468C,0x000045CB,0x00004509,
0x00004447,0x00004385,0x000042C3,0x00004201,
0x0000413F,0x0000407C,0x00003FBA,0x00003EF7,
0x00003E34,0x00003D71,0x00003CAE,0x00003BEA,
0x00003B27,0x00003A63,0x0000399F,0x000038DB,
0x00003817,0x00003753,0x0000368E,0x000035CA,
0x00003505,0x00003440,0x0000337C,0x000032B7,
0x000031F1,0x0000312C,0x00003067,0x00002FA1,
0x00002EDC,0x00002E16,0x00002D50,0x00002C8A,
0x00002BC4,0x00002AFE,0x00002A38,0x00002971,
0x000028AB,0x000027E4,0x0000271E,0x00002657,
0x00002590,0x000024C9,0x00002402,0x0000233B,
0x00002274,0x000021AD,0x000020E5,0x0000201E,
0x00001F56,0x00001E8F,0x00001DC7,0x00001CFF,
0x00001C38,0x00001B70,0x00001AA8,0x000019E0,
0x00001918,0x00001850,0x00001787,0x000016BF,
0x000015F7,0x0000152E,0x00001466,0x0000139E,
0x000012D5,0x0000120D,0x00001144,0x0000107B,
0x00000FB3,0x00000EEA,0x00000E21,0x00000D59,
0x00000C90,0x00000BC7,0x00000AFE,0x00000A35,
0x0000096C,0x000008A3,0x000007DA,0x00000711,
0x00000648,0x0000057F,0x000004B6,0x000003ED,
0x00000324,0x0000025B,0x00000192,0x000000C9,
0x00000000,0xFFFFFF37,0xFFFFFE6E,0xFFFFFDA5,
0xFFFFFCDC,0xFFFFFC13,0xFFFFFB4A,0xFFFFFA81,
0xFFFFF9B8,0xFFFFF8EF,0xFFFFF826,0xFFFFF75D,
0xFFFFF694,0xFFFFF5CB,0xFFFFF502,0xFFFFF439,
0xFFFFF370,0xFFFFF2A7,0xFFFFF1DF,0xFFFFF116,
0xFFFFF04D,0xFFFFEF85,0xFFFFEEBC,0xFFFFEDF3,
0xFFFFED2B,0xFFFFEC62,0xFFFFEB9A,0xFFFFEAD2,
0xFFFFEA09,0xFFFFE941,0xFFFFE879,0xFFFFE7B0,
0xFFFFE6E8,0xFFFFE620,0xFFFFE558,0xFFFFE490,
0xFFFFE3C8,0xFFFFE301,0xFFFFE239,0xFFFFE171,
0xFFFFE0AA,0xFFFFDFE2,0xFFFFDF1B,0xFFFFDE53,
0xFFFFDD8C,0xFFFFDCC5,0xFFFFDBFE,0xFFFFDB37,
0xFFFFDA70,0xFFFFD9A9,0xFFFFD8E2,0xFFFFD81C,
0xFFFFD755,0xFFFFD68F,0xFFFFD5C8,0xFFFFD502,
0xFFFFD43C,0xFFFFD376,0xFFFFD2B0,0xFFFFD1EA,
0xFFFFD124,0xFFFFD05F,0xFFFFCF99,0xFFFFCED4,
0xFFFFCE0F,0xFFFFCD49,0xFFFFCC84,0xFFFFCBC0,
0xFFFFCAFB,0xFFFFCA36,0xFFFFC972,0xFFFFC8AD,
0xFFFFC7E9,0xFFFFC725,0xFFFFC661,0xFFFFC59D,
0xFFFFC4D9,0xFFFFC416,0xFFFFC352,0xFFFFC28F,
0xFFFFC1CC,0xFFFFC109,0xFFFFC046,0xFFFFBF84,
0xFFFFBEC1,0xFFFFBDFF,0xFFFFBD3D,0xFFFFBC7B,
0xFFFFBBB9,0xFFFFBAF7,0xFFFFBA35,0xFFFFB974,
0xFFFFB8B3,0xFFFFB7F2,0xFFFFB731,0xFFFFB670,
0xFFFFB5B0,0xFFFFB4F0,0xFFFFB42F,0xFFFFB370,
0xFFFFB2B0,0xFFFFB1F0,0xFFFFB131,0xFFFFB072,
0xFFFFAFB3,0xFFFFAEF4,0xFFFFAE35,0xFFFFAD77,
0xFFFFACB8,0xFFFFABFA,0xFFFFAB3D,0xFFFFAA7F,
0xFFFFA9C2,0xFFFFA904,0xFFFFA847,0xFFFFA78B,
0xFFFFA6CE,0xFFFFA612,0xFFFFA556,0xFFFFA49A,
0xFFFFA3DE,0xFFFFA322,0xFFFFA267,0xFFFFA1AC,
0xFFFFA0F1,0xFFFFA037,0xFFFF9F7C,0xFFFF9EC2,
0xFFFF9E08,0xFFFF9D4F,0xFFFF9C95,0xFFFF9BDC,
0xFFFF9B23,0xFFFF9A6B,0xFFFF99B2,0xFFFF98FA,
0xFFFF9842,0xFFFF978A,0xFFFF96D3,0xFFFF961C,
0xFFFF9565,0xFFFF94AE,0xFFFF93F8,0xFFFF9342,
0xFFFF928C,0xFFFF91D6,0xFFFF9121,0xFFFF906C,
0xFFFF8FB7,0xFFFF8F02,0xFFFF8E4E,0xFFFF8D9A,
0xFFFF8CE6,0xFFFF8C33,0xFFFF8B80,0xFFFF8ACD,
0xFFFF8A1A,0xFFFF8968,0xFFFF88B6,0xFFFF8804,
0xFFFF8753,0xFFFF86A1,0xFFFF85F0,0xFFFF8540,
0xFFFF8490,0xFFFF83E0,0xFFFF8330,0xFFFF8281,
0xFFFF81D1,0xFFFF8123,0xFFFF8074,0xFFFF7FC6,
0xFFFF7F18,0xFFFF7E6B,0xFFFF7DBD,0xFFFF7D10,
0xFFFF7C64,0xFFFF7BB7,0xFFFF7B0B,0xFFFF7A60,
0xFFFF79B4,0xFFFF7909,0xFFFF785F,0xFFFF77B4,
0xFFFF770A,0xFFFF7661,0xFFFF75B7,0xFFFF750E,
0xFFFF7466,0xFFFF73BD,0xFFFF7315,0xFFFF726D,
0xFFFF71C6,0xFFFF711F,0xFFFF7078,0xFFFF6FD2,
0xFFFF6F2C,0xFFFF6E87,0xFFFF6DE1,0xFFFF6D3C,
0xFFFF6C98,0xFFFF6BF4,0xFFFF6B50,0xFFFF6AAC,
0xFFFF6A09,0xFFFF6966,0xFFFF68C4,0xFFFF6822,
0xFFFF6780,0xFFFF66DF,0xFFFF663E,0xFFFF659D,
0xFFFF64FD,0xFFFF645D,0xFFFF63BE,0xFFFF631F,
0xFFFF6280,0xFFFF61E2,0xFFFF6144,0xFFFF60A6,
0xFFFF6009,0xFFFF5F6C,0xFFFF5ED0,0xFFFF5E34,
0xFFFF5D98,0xFFFF5CFD,0xFFFF5C62,0xFFFF5BC8,
0xFFFF5B2E,0xFFFF5A94,0xFFFF59FB,0xFFFF5962,
0xFFFF58CA,0xFFFF5832,0xFFFF579A,0xFFFF5703,
0xFFFF566C,0xFFFF55D6,0xFFFF553F,0xFFFF54AA,
0xFFFF5415,0xFFFF5380,0xFFFF52EC,0xFFFF5258,
0xFFFF51C4,0xFFFF5131,0xFFFF509E,0xFFFF500C,
0xFFFF4F7A,0xFFFF4EE9,0xFFFF4E58,0xFFFF4DC7,
0xFFFF4D37,0xFFFF4CA8,0xFFFF4C18,0xFFFF4B89,
0xFFFF4AFB,0xFFFF4A6D,0xFFFF49E0,0xFFFF4953,
0xFFFF48C6,0xFFFF483A,0xFFFF47AE,0xFFFF4723,
0xFFFF4698,0xFFFF460D,0xFFFF4583,0xFFFF44FA,
0xFFFF4471,0xFFFF43E8,0xFFFF4360,0xFFFF42D8,
0xFFFF4251,0xFFFF41CA,0xFFFF4144,0xFFFF40BE,
0xFFFF4039,0xFFFF3FB4,0xFFFF3F2F,0xFFFF3EAB,
0xFFFF3E28,0xFFFF3DA4,0xFFFF3D22,0xFFFF3CA0,
0xFFFF3C1E,0xFFFF3B9D,0xFFFF3B1C,0xFFFF3A9C,
0xFFFF3A1C,0xFFFF399D,0xFFFF391E,0xFFFF389F,
0xFFFF3822,0xFFFF37A4,0xFFFF3727,0xFFFF36AB,
0xFFFF362F,0xFFFF35B3,0xFFFF3539,0xFFFF34BE,
0xFFFF3444,0xFFFF33CB,0xFFFF3352,0xFFFF32D9,
0xFFFF3261,0xFFFF31E9,0xFFFF3172,0xFFFF30FC,
0xFFFF3086,0xFFFF3010,0xFFFF2F9B,0xFFFF2F27,
0xFFFF2EB3,0xFFFF2E3F,0xFFFF2DCC,0xFFFF2D5A,
0xFFFF2CE8,0xFFFF2C76,0xFFFF2C05,0xFFFF2B95,
0xFFFF2B25,0xFFFF2AB5,0xFFFF2A46,0xFFFF29D8,
0xFFFF296A,0xFFFF28FD,0xFFFF2890,0xFFFF2824,
0xFFFF27B8,0xFFFF274C,0xFFFF26E2,0xFFFF2677,
0xFFFF260E,0xFFFF25A4,0xFFFF253C,0xFFFF24D4,
0xFFFF246C,0xFFFF2405,0xFFFF239E,0xFFFF2338,
0xFFFF22D3,0xFFFF226E,0xFFFF2209,0xFFFF21A5,
0xFFFF2142,0xFFFF20DF,0xFFFF207D,0xFFFF201B,
0xFFFF1FBA,0xFFFF1F59,0xFFFF1EF9,0xFFFF1E99,
0xFFFF1E3A,0xFFFF1DDC,0xFFFF1D7E,0xFFFF1D21,
0xFFFF1CC4,0xFFFF1C67,0xFFFF1C0C,0xFFFF1BB0,
0xFFFF1B56,0xFFFF1AFC,0xFFFF1AA2,0xFFFF1A49,
0xFFFF19F0,0xFFFF1999,0xFFFF1941,0xFFFF18EA,
0xFFFF1894,0xFFFF183E,0xFFFF17E9,0xFFFF1795,
0xFFFF1741,0xFFFF16ED,0xFFFF169A,0xFFFF1648,
0xFFFF15F6,0xFFFF15A5,0xFFFF1555,0xFFFF1504,
0xFFFF14B5,0xFFFF1466,0xFFFF1418,0xFFFF13CA,
0xFFFF137D,0xFFFF1330,0xFFFF12E4,0xFFFF1298,
0xFFFF124D,0xFFFF1203,0xFFFF11B9,0xFFFF1170,
0xFFFF1127,0xFFFF10DF,0xFFFF1098,0xFFFF1051,
0xFFFF100B,0xFFFF0FC5,0xFFFF0F80,0xFFFF0F3B,
0xFFFF0EF7,0xFFFF0EB4,0xFFFF0E71,0xFFFF0E2E,
0xFFFF0DED,0xFFFF0DAC,0xFFFF0D6B,0xFFFF0D2B,
0xFFFF0CEC,0xFFFF0CAD,0xFFFF0C6F,0xFFFF0C31,
0xFFFF0BF4,0xFFFF0BB8,0xFFFF0B7C,0xFFFF0B41,
0xFFFF0B06,0xFFFF0ACC,0xFFFF0A92,0xFFFF0A5A,
0xFFFF0A21,0xFFFF09EA,0xFFFF09B2,0xFFFF097C,
0xFFFF0946,0xFFFF0911,0xFFFF08DC,0xFFFF08A8,
0xFFFF0874,0xFFFF0841,0xFFFF080F,0xFFFF07DD,
0xFFFF07AC,0xFFFF077B,0xFFFF074C,0xFFFF071C,
0xFFFF06ED,0xFFFF06BF,0xFFFF0692,0xFFFF0665,
0xFFFF0638,0xFFFF060D,0xFFFF05E1,0xFFFF05B7,
0xFFFF058D,0xFFFF0564,0xFFFF053B,0xFFFF0513,
0xFFFF04EB,0xFFFF04C4,0xFFFF049E,0xFFFF0478,
0xFFFF0453,0xFFFF042F,0xFFFF040B,0xFFFF03E8,
0xFFFF03C5,0xFFFF03A3,0xFFFF0381,0xFFFF0360,
0xFFFF0340,0xFFFF0321,0xFFFF0302,0xFFFF02E3,
0xFFFF02C5,0xFFFF02A8,0xFFFF028C,0xFFFF0270,
0xFFFF0254,0xFFFF0239,0xFFFF021F,0xFFFF0206,
0xFFFF01ED,0xFFFF01D5,0xFFFF01BD,0xFFFF01A6,
0xFFFF018F,0xFFFF0179,0xFFFF0164,0xFFFF0150,
0xFFFF013C,0xFFFF0128,0xFFFF0115,0xFFFF0103,
0xFFFF00F2,0xFFFF00E1,0xFFFF00D0,0xFFFF00C1,
0xFFFF00B2,0xFFFF00A3,0xFFFF0095,0xFFFF0088,
0xFFFF007B,0xFFFF006F,0xFFFF0064,0xFFFF0059,
0xFFFF004F,0xFFFF0045,0xFFFF003C,0xFFFF0034,
0xFFFF002C,0xFFFF0025,0xFFFF001F,0xFFFF0019,
0xFFFF0014,0xFFFF000F,0xFFFF000B,0xFFFF0008,
0xFFFF0005,0xFFFF0003,0xFFFF0001,0xFFFF0000,
0xFFFF0000,0xFFFF0000,0xFFFF0001,0xFFFF0003,
0xFFFF0005,0xFFFF0008,0xFFFF000B,0xFFFF000F,
0xFFFF0014,0xFFFF0019,0xFFFF001F,0xFFFF0025,
0xFFFF002C,0xFFFF0034,0xFFFF003C,0xFFFF0045,
0xFFFF004F,0xFFFF0059,0xFFFF0064,0xFFFF006F,
0xFFFF007B,0xFFFF0088,0xFFFF0095,0xFFFF00A3,
0xFFFF00B2,0xFFFF00C1,0xFFFF00D0,0xFFFF00E1,
0xFFFF00F2,0xFFFF0103,0xFFFF0115,0xFFFF0128,
0xFFFF013C,0xFFFF0150,0xFFFF0164,0xFFFF0179,
0xFFFF018F,0xFFFF01A6,0xFFFF01BD,0xFFFF01D5,
0xFFFF01ED,0xFFFF0206,0xFFFF021F,0xFFFF0239,
0xFFFF0254,0xFFFF0270,0xFFFF028C,0xFFFF02A8,
0xFFFF02C5,0xFFFF02E3,0xFFFF0302,0xFFFF0321,
0xFFFF0340,0xFFFF0360,0xFFFF0381,0xFFFF03A3,
0xFFFF03C5,0xFFFF03E8,0xFFFF040B,0xFFFF042F,
0xFFFF0453,0xFFFF0478,0xFFFF049E,0xFFFF04C4,
0xFFFF04EB,0xFFFF0513,0xFFFF053B,0xFFFF0564,
0xFFFF058D,0xFFFF05B7,0xFFFF05E1,0xFFFF060D,
0xFFFF0638,0xFFFF0665,0xFFFF0692,0xFFFF06BF,
0xFFFF06ED,0xFFFF071C,0xFFFF074C,0xFFFF077B,
0xFFFF07AC,0xFFFF07DD,0xFFFF080F,0xFFFF0841,
0xFFFF0874,0xFFFF08A8,0xFFFF08DC,0xFFFF0911,
0xFFFF0946,0xFFFF097C,0xFFFF09B2,0xFFFF09EA,
0xFFFF0A21,0xFFFF0A5A,0xFFFF0A92,0xFFFF0ACC,
0xFFFF0B06,0xFFFF0B41,0xFFFF0B7C,0xFFFF0BB8,
0xFFFF0BF4,0xFFFF0C31,0xFFFF0C6F,0xFFFF0CAD,
0xFFFF0CEC,0xFFFF0D2B,0xFFFF0D6B,0xFFFF0DAC,
0xFFFF0DED,0xFFFF0E2E,0xFFFF0E71,0xFFFF0EB4,
0xFFFF0EF7,0xFFFF0F3B,0xFFFF0F80,0xFFFF0FC5,
0xFFFF100B,0xFFFF1051,0xFFFF1098,0xFFFF10DF,
0xFFFF1127,0xFFFF1170,0xFFFF11B9,0xFFFF1203,
0xFFFF124D,0xFFFF1298,0xFFFF12E4,0xFFFF1330,
0xFFFF137D,0xFFFF13CA,0xFFFF1418,0xFFFF1466,
0xFFFF14B5,0xFFFF1504,0xFFFF1555,0xFFFF15A5,
0xFFFF15F6,0xFFFF1648,0xFFFF169A,0xFFFF16ED,
0xFFFF1741,0xFFFF1795,0xFFFF17E9,0xFFFF183E,
0xFFFF1894,0xFFFF18EA,0xFFFF1941,0xFFFF1999,
0xFFFF19F0,0xFFFF1A49,0xFFFF1AA2,0xFFFF1AFC,
0xFFFF1B56,0xFFFF1BB0,0xFFFF1C0C,0xFFFF1C67,
0xFFFF1CC4,0xFFFF1D21,0xFFFF1D7E,0xFFFF1DDC,
0xFFFF1E3A,0xFFFF1E99,0xFFFF1EF9,0xFFFF1F59,
0xFFFF1FBA,0xFFFF201B,0xFFFF207D,0xFFFF20DF,
0xFFFF2142,0xFFFF21A5,0xFFFF2209,0xFFFF226E,
0xFFFF22D3,0xFFFF2338,0xFFFF239E,0xFFFF2405,
0xFFFF246C,0xFFFF24D4,0xFFFF253C,0xFFFF25A4,
0xFFFF260E,0xFFFF2677,0xFFFF26E2,0xFFFF274C,
0xFFFF27B8,0xFFFF2824,0xFFFF2890,0xFFFF28FD,
0xFFFF296A,0xFFFF29D8,0xFFFF2A46,0xFFFF2AB5,
0xFFFF2B25,0xFFFF2B95,0xFFFF2C05,0xFFFF2C76,
0xFFFF2CE8,0xFFFF2D5A,0xFFFF2DCC,0xFFFF2E3F,
0xFFFF2EB3,0xFFFF2F27,0xFFFF2F9B,0xFFFF3010,
0xFFFF3086,0xFFFF30FC,0xFFFF3172,0xFFFF31E9,
0xFFFF3261,0xFFFF32D9,0xFFFF3352,0xFFFF33CB,
0xFFFF3444,0xFFFF34BE,0xFFFF3539,0xFFFF35B3,
0xFFFF362F,0xFFFF36AB,0xFFFF3727,0xFFFF37A4,
0xFFFF3822,0xFFFF389F,0xFFFF391E,0xFFFF399D,
0xFFFF3A1C,0xFFFF3A9C,0xFFFF3B1C,0xFFFF3B9D,
0xFFFF3C1E,0xFFFF3CA0,0xFFFF3D22,0xFFFF3DA4,
0xFFFF3E28,0xFFFF3EAB,0xFFFF3F2F,0xFFFF3FB4,
0xFFFF4039,0xFFFF40BE,0xFFFF4144,0xFFFF41CA,
0xFFFF4251,0xFFFF42D8,0xFFFF4360,0xFFFF43E8,
0xFFFF4471,0xFFFF44FA,0xFFFF4583,0xFFFF460D,
0xFFFF4698,0xFFFF4723,0xFFFF47AE,0xFFFF483A,
0xFFFF48C6,0xFFFF4953,0xFFFF49E0,0xFFFF4A6D,
0xFFFF4AFB,0xFFFF4B89,0xFFFF4C18,0xFFFF4CA8,
0xFFFF4D37,0xFFFF4DC7,0xFFFF4E58,0xFFFF4EE9,
0xFFFF4F7A,0xFFFF500C,0xFFFF509E,0xFFFF5131,
0xFFFF51C4,0xFFFF5258,0xFFFF52EC,0xFFFF5380,
0xFFFF5415,0xFFFF54AA,0xFFFF553F,0xFFFF55D6,
0xFFFF566C,0xFFFF5703,0xFFFF579A,0xFFFF5832,
0xFFFF58CA,0xFFFF5962,0xFFFF59FB,0xFFFF5A94,
0xFFFF5B2E,0xFFFF5BC8,0xFFFF5C62,0xFFFF5CFD,
0xFFFF5D98,0xFFFF5E34,0xFFFF5ED0,0xFFFF5F6C,
0xFFFF6009,0xFFFF60A6,0xFFFF6144,0xFFFF61E2,
0xFFFF6280,0xFFFF631F,0xFFFF63BE,0xFFFF645D,
0xFFFF64FD,0xFFFF659D,0xFFFF663E,0xFFFF66DF,
0xFFFF6780,0xFFFF6822,0xFFFF68C4,0xFFFF6966,
0xFFFF6A09,0xFFFF6AAC,0xFFFF6B50,0xFFFF6BF4,
0xFFFF6C98,0xFFFF6D3C,0xFFFF6DE1,0xFFFF6E87,
0xFFFF6F2C,0xFFFF6FD2,0xFFFF7078,0xFFFF711F,
0xFFFF71C6,0xFFFF726D,0xFFFF7315,0xFFFF73BD,
0xFFFF7466,0xFFFF750E,0xFFFF75B7,0xFFFF7661,
0xFFFF770A,0xFFFF77B4,0xFFFF785F,0xFFFF7909,
0xFFFF79B4,0xFFFF7A60,0xFFFF7B0B,0xFFFF7BB7,
0xFFFF7C64,0xFFFF7D10,0xFFFF7DBD,0xFFFF7E6B,
0xFFFF7F18,0xFFFF7FC6,0xFFFF8074,0xFFFF8123,
0xFFFF81D1,0xFFFF8281,0xFFFF8330,0xFFFF83E0,
0xFFFF8490,0xFFFF8540,0xFFFF85F0,0xFFFF86A1,
0xFFFF8753,0xFFFF8804,0xFFFF88B6,0xFFFF8968,
0xFFFF8A1A,0xFFFF8ACD,0xFFFF8B80,0xFFFF8C33,
0xFFFF8CE6,0xFFFF8D9A,0xFFFF8E4E,0xFFFF8F02,
0xFFFF8FB7,0xFFFF906C,0xFFFF9121,0xFFFF91D6,
0xFFFF928C,0xFFFF9342,0xFFFF93F8,0xFFFF94AE,
0xFFFF9565,0xFFFF961C,0xFFFF96D3,0xFFFF978A,
0xFFFF9842,0xFFFF98FA,0xFFFF99B2,0xFFFF9A6B,
0xFFFF9B23,0xFFFF9BDC,0xFFFF9C95,0xFFFF9D4F,
0xFFFF9E08,0xFFFF9EC2,0xFFFF9F7C,0xFFFFA037,
0xFFFFA0F1,0xFFFFA1AC,0xFFFFA267,0xFFFFA322,
0xFFFFA3DE,0xFFFFA49A,0xFFFFA556,0xFFFFA612,
0xFFFFA6CE,0xFFFFA78B,0xFFFFA847,0xFFFFA904,
0xFFFFA9C2,0xFFFFAA7F,0xFFFFAB3D,0xFFFFABFA,
0xFFFFACB8,0xFFFFAD77,0xFFFFAE35,0xFFFFAEF4,
0xFFFFAFB3,0xFFFFB072,0xFFFFB131,0xFFFFB1F0,
0xFFFFB2B0,0xFFFFB370,0xFFFFB42F,0xFFFFB4F0,
0xFFFFB5B0,0xFFFFB670,0xFFFFB731,0xFFFFB7F2,
0xFFFFB8B3,0xFFFFB974,0xFFFFBA35,0xFFFFBAF7,
0xFFFFBBB9,0xFFFFBC7B,0xFFFFBD3D,0xFFFFBDFF,
0xFFFFBEC1,0xFFFFBF84,0xFFFFC046,0xFFFFC109,
0xFFFFC1CC,0xFFFFC28F,0xFFFFC352,0xFFFFC416,
0xFFFFC4D9,0xFFFFC59D,0xFFFFC661,0xFFFFC725,
0xFFFFC7E9,0xFFFFC8AD,0xFFFFC972,0xFFFFCA36,
0xFFFFCAFB,0xFFFFCBC0,0xFFFFCC84,0xFFFFCD49,
0xFFFFCE0F,0xFFFFCED4,0xFFFFCF99,0xFFFFD05F,
0xFFFFD124,0xFFFFD1EA,0xFFFFD2B0,0xFFFFD376,
0xFFFFD43C,0xFFFFD502,0xFFFFD5C8,0xFFFFD68F,
0xFFFFD755,0xFFFFD81C,0xFFFFD8E2,0xFFFFD9A9,
0xFFFFDA70,0xFFFFDB37,0xFFFFDBFE,0xFFFFDCC5,
0xFFFFDD8C,0xFFFFDE53,0xFFFFDF1B,0xFFFFDFE2,
0xFFFFE0AA,0xFFFFE171,0xFFFFE239,0xFFFFE301,
0xFFFFE3C8,0xFFFFE490,0xFFFFE558,0xFFFFE620,
0xFFFFE6E8,0xFFFFE7B0,0xFFFFE879,0xFFFFE941,
0xFFFFEA09,0xFFFFEAD2,0xFFFFEB9A,0xFFFFEC62,
0xFFFFED2B,0xFFFFEDF3,0xFFFFEEBC,0xFFFFEF85,
0xFFFFF04D,0xFFFFF116,0xFFFFF1DF,0xFFFFF2A7,
0xFFFFF370,0xFFFFF439,0xFFFFF502,0xFFFFF5CB,
0xFFFFF694,0xFFFFF75D,0xFFFFF826,0xFFFFF8EF,
0xFFFFF9B8,0xFFFFFA81,0xFFFFFB4A,0xFFFFFC13,
0xFFFFFCDC,0xFFFFFDA5,0xFFFFFE6E,0xFFFFFF37,
0x00000000,0x000000C9,0x00000192,0x0000025B,
0x00000324,0x000003ED,0x000004B6,0x0000057F,
0x00000648,0x00000711,0x000007DA,0x000008A3,
0x0000096C,0x00000A35,0x00000AFE,0x00000BC7,
0x00000C90,0x00000D59,0x00000E21,0x00000EEA,
0x00000FB3,0x0000107B,0x00001144,0x0000120D,
0x000012D5,0x0000139E,0x00001466,0x0000152E,
0x000015F7,0x000016BF,0x00001787,0x00001850,
0x00001918,0x000019E0,0x00001AA8,0x00001B70,
0x00001C38,0x00001CFF,0x00001DC7,0x00001E8F,
0x00001F56,0x0000201E,0x000020E5,0x000021AD,
0x00002274,0x0000233B,0x00002402,0x000024C9,
0x00002590,0x00002657,0x0000271E,0x000027E4,
0x000028AB,0x00002971,0x00002A38,0x00002AFE,
0x00002BC4,0x00002C8A,0x00002D50,0x00002E16,
0x00002EDC,0x00002FA1,0x00003067,0x0000312C,
0x000031F1,0x000032B7,0x0000337C,0x00003440,
0x00003505,0x000035CA,0x0000368E,0x00003753,
0x00003817,0x000038DB,0x0000399F,0x00003A63,
0x00003B27,0x00003BEA,0x00003CAE,0x00003D71,
0x00003E34,0x00003EF7,0x00003FBA,0x0000407C,
0x0000413F,0x00004201,0x000042C3,0x00004385,
0x00004447,0x00004509,0x000045CB,0x0000468C,
0x0000474D,0x0000480E,0x000048CF,0x00004990,
0x00004A50,0x00004B10,0x00004BD1,0x00004C90,
0x00004D50,0x00004E10,0x00004ECF,0x00004F8E,
0x0000504D,0x0000510C,0x000051CB,0x00005289,
0x00005348,0x00005406,0x000054C3,0x00005581,
0x0000563E,0x000056FC,0x000057B9,0x00005875,
0x00005932,0x000059EE,0x00005AAA,0x00005B66,
0x00005C22,0x00005CDE,0x00005D99,0x00005E54,
0x00005F0F,0x00005FC9,0x00006084,0x0000613E,
0x000061F8,0x000062B1,0x0000636B,0x00006424,
0x000064DD,0x00006595,0x0000664E,0x00006706,
0x000067BE,0x00006876,0x0000692D,0x000069E4,
0x00006A9B,0x00006B52,0x00006C08,0x00006CBE,
0x00006D74,0x00006E2A,0x00006EDF,0x00006F94,
0x00007049,0x000070FE,0x000071B2,0x00007266,
0x0000731A,0x000073CD,0x00007480,0x00007533,
0x000075E6,0x00007698,0x0000774A,0x000077FC,
0x000078AD,0x0000795F,0x00007A10,0x00007AC0,
0x00007B70,0x00007C20,0x00007CD0,0x00007D7F,
0x00007E2F,0x00007EDD,0x00007F8C,0x0000803A,
0x000080E8,0x00008195,0x00008243,0x000082F0,
0x0000839C,0x00008449,0x000084F5,0x000085A0,
0x0000864C,0x000086F7,0x000087A1,0x0000884C,
0x000088F6,0x0000899F,0x00008A49,0x00008AF2,
0x00008B9A,0x00008C43,0x00008CEB,0x00008D93,
0x00008E3A,0x00008EE1,0x00008F88,0x0000902E,
0x000090D4,0x00009179,0x0000921F,0x000092C4,
0x00009368,0x0000940C,0x000094B0,0x00009554,
0x000095F7,0x0000969A,0x0000973C,0x000097DE,
0x00009880,0x00009921,0x000099C2,0x00009A63,
0x00009B03,0x00009BA3,0x00009C42,0x00009CE1,
0x00009D80,0x00009E1E,0x00009EBC,0x00009F5A,
0x00009FF7,0x0000A094,0x0000A130,0x0000A1CC,
0x0000A268,0x0000A303,0x0000A39E,0x0000A438,
0x0000A4D2,0x0000A56C,0x0000A605,0x0000A69E,
0x0000A736,0x0000A7CE,0x0000A866,0x0000A8FD,
0x0000A994,0x0000AA2A,0x0000AAC1,0x0000AB56,
0x0000ABEB,0x0000AC80,0x0000AD14,0x0000ADA8,
0x0000AE3C,0x0000AECF,0x0000AF62,0x0000AFF4,
0x0000B086,0x0000B117,0x0000B1A8,0x0000B239,
0x0000B2C9,0x0000B358,0x0000B3E8,0x0000B477,
0x0000B505,0x0000B593,0x0000B620,0x0000B6AD,
0x0000B73A,0x0000B7C6,0x0000B852,0x0000B8DD,
0x0000B968,0x0000B9F3,0x0000BA7D,0x0000BB06,
0x0000BB8F,0x0000BC18,0x0000BCA0,0x0000BD28,
0x0000BDAF,0x0000BE36,0x0000BEBC,0x0000BF42,
0x0000BFC7,0x0000C04C,0x0000C0D1,0x0000C155,
0x0000C1D8,0x0000C25C,0x0000C2DE,0x0000C360,
0x0000C3E2,0x0000C463,0x0000C4E4,0x0000C564,
0x0000C5E4,0x0000C663,0x0000C6E2,0x0000C761,
0x0000C7DE,0x0000C85C,0x0000C8D9,0x0000C955,
0x0000C9D1,0x0000CA4D,0x0000CAC7,0x0000CB42,
0x0000CBBC,0x0000CC35,0x0000CCAE,0x0000CD27,
0x0000CD9F,0x0000CE17,0x0000CE8E,0x0000CF04,
0x0000CF7A,0x0000CFF0,0x0000D065,0x0000D0D9,
0x0000D14D,0x0000D1C1,0x0000D234,0x0000D2A6,
0x0000D318,0x0000D38A,0x0000D3FB,0x0000D46B,
0x0000D4DB,0x0000D54B,0x0000D5BA,0x0000D628,
0x0000D696,0x0000D703,0x0000D770,0x0000D7DC,
0x0000D848,0x0000D8B4,0x0000D91E,0x0000D989,
0x0000D9F2,0x0000DA5C,0x0000DAC4,0x0000DB2C,
0x0000DB94,0x0000DBFB,0x0000DC62,0x0000DCC8,
0x0000DD2D,0x0000DD92,0x0000DDF7,0x0000DE5B,
0x0000DEBE,0x0000DF21,0x0000DF83,0x0000DFE5,
0x0000E046,0x0000E0A7,0x0000E107,0x0000E167,
0x0000E1C6,0x0000E224,0x0000E282,0x0000E2DF,
0x0000E33C,0x0000E399,0x0000E3F4,0x0000E450,
0x0000E4AA,0x0000E504,0x0000E55E,0x0000E5B7,
0x0000E610,0x0000E667,0x0000E6BF,0x0000E716,
0x0000E76C,0x0000E7C2,0x0000E817,0x0000E86B,
0x0000E8BF,0x0000E913,0x0000E966,0x0000E9B8,
0x0000EA0A,0x0000EA5B,0x0000EAAB,0x0000EAFC,
0x0000EB4B,0x0000EB9A,0x0000EBE8,0x0000EC36,
0x0000EC83,0x0000ECD0,0x0000ED1C,0x0000ED68,
0x0000EDB3,0x0000EDFD,0x0000EE47,0x0000EE90,
0x0000EED9,0x0000EF21,0x0000EF68,0x0000EFAF,
0x0000EFF5,0x0000F03B,0x0000F080,0x0000F0C5,
0x0000F109,0x0000F14C,0x0000F18F,0x0000F1D2,
0x0000F213,0x0000F254,0x0000F295,0x0000F2D5,
0x0000F314,0x0000F353,0x0000F391,0x0000F3CF,
0x0000F40C,0x0000F448,0x0000F484,0x0000F4BF,
0x0000F4FA,0x0000F534,0x0000F56E,0x0000F5A6,
0x0000F5DF,0x0000F616,0x0000F64E,0x0000F684,
0x0000F6BA,0x0000F6EF,0x0000F724,0x0000F758,
0x0000F78C,0x0000F7BF,0x0000F7F1,0x0000F823,
0x0000F854,0x0000F885,0x0000F8B4,0x0000F8E4,
0x0000F913,0x0000F941,0x0000F96E,0x0000F99B,
0x0000F9C8,0x0000F9F3,0x0000FA1F,0x0000FA49,
0x0000FA73,0x0000FA9C,0x0000FAC5,0x0000FAED,
0x0000FB15,0x0000FB3C,0x0000FB62,0x0000FB88,
0x0000FBAD,0x0000FBD1,0x0000FBF5,0x0000FC18,
0x0000FC3B,0x0000FC5D,0x0000FC7F,0x0000FCA0,
0x0000FCC0,0x0000FCDF,0x0000FCFE,0x0000FD1D,
0x0000FD3B,0x0000FD58,0x0000FD74,0x0000FD90,
0x0000FDAC,0x0000FDC7,0x0000FDE1,0x0000FDFA,
0x0000FE13,0x0000FE2B,0x0000FE43,0x0000FE5A,
0x0000FE71,0x0000FE87,0x0000FE9C,0x0000FEB0,
0x0000FEC4,0x0000FED8,0x0000FEEB,0x0000FEFD,
0x0000FF0E,0x0000FF1F,0x0000FF30,0x0000FF3F,
0x0000FF4E,0x0000FF5D,0x0000FF6B,0x0000FF78,
0x0000FF85,0x0000FF91,0x0000FF9C,0x0000FFA7,
0x0000FFB1,0x0000FFBB,0x0000FFC4,0x0000FFCC,
0x0000FFD4,0x0000FFDB,0x0000FFE1,0x0000FFE7,
0x0000FFEC,0x0000FFF1,0x0000FFF5,0x0000FFF8,
0x0000FFFB,0x0000FFFD,0x0000FFFF,0x00010000
};
//void (*dword_9134C[2])() = { &sub_10000, &sub_10000 }; // weak
uint32 dword_9334C[256 + 256] =
{
0x00000000,0x00000020,0x00000040,0x00000060,
0x00000080,0x000000A0,0x000000C0,0x000000E0,
0x00002000,0x00002020,0x00002040,0x00002060,
0x00002080,0x000020A0,0x000020C0,0x000020E0,
0x00004000,0x00004020,0x00004040,0x00004060,
0x00004080,0x000040A0,0x000040C0,0x000040E0,
0x00006000,0x00006020,0x00006040,0x00006060,
0x00006080,0x000060A0,0x000060C0,0x000060E0,
0x00008000,0x00008020,0x00008040,0x00008060,
0x00008080,0x000080A0,0x000080C0,0x000080E0,
0x0000A000,0x0000A020,0x0000A040,0x0000A060,
0x0000A080,0x0000A0A0,0x0000A0C0,0x0000A0E0,
0x0000C000,0x0000C020,0x0000C040,0x0000C060,
0x0000C080,0x0000C0A0,0x0000C0C0,0x0000C0E0,
0x0000E000,0x0000E020,0x0000E040,0x0000E060,
0x0000E080,0x0000E0A0,0x0000E0C0,0x0000E0E0,
0x00010000,0x00010020,0x00010040,0x00010060,
0x00010080,0x000100A0,0x000100C0,0x000100E0,
0x00012000,0x00012020,0x00012040,0x00012060,
0x00012080,0x000120A0,0x000120C0,0x000120E0,
0x00014000,0x00014020,0x00014040,0x00014060,
0x00014080,0x000140A0,0x000140C0,0x000140E0,
0x00016000,0x00016020,0x00016040,0x00016060,
0x00016080,0x000160A0,0x000160C0,0x000160E0,
0x00018000,0x00018020,0x00018040,0x00018060,
0x00018080,0x000180A0,0x000180C0,0x000180E0,
0x0001A000,0x0001A020,0x0001A040,0x0001A060,
0x0001A080,0x0001A0A0,0x0001A0C0,0x0001A0E0,
0x0001C000,0x0001C020,0x0001C040,0x0001C060,
0x0001C080,0x0001C0A0,0x0001C0C0,0x0001C0E0,
0x0001E000,0x0001E020,0x0001E040,0x0001E060,
0x0001E080,0x0001E0A0,0x0001E0C0,0x0001E0E0,
0x00020000,0x00020020,0x00020040,0x00020060,
0x00020080,0x000200A0,0x000200C0,0x000200E0,
0x00022000,0x00022020,0x00022040,0x00022060,
0x00022080,0x000220A0,0x000220C0,0x000220E0,
0x00024000,0x00024020,0x00024040,0x00024060,
0x00024080,0x000240A0,0x000240C0,0x000240E0,
0x00026000,0x00026020,0x00026040,0x00026060,
0x00026080,0x000260A0,0x000260C0,0x000260E0,
0x00028000,0x00028020,0x00028040,0x00028060,
0x00028080,0x000280A0,0x000280C0,0x000280E0,
0x0002A000,0x0002A020,0x0002A040,0x0002A060,
0x0002A080,0x0002A0A0,0x0002A0C0,0x0002A0E0,
0x0002C000,0x0002C020,0x0002C040,0x0002C060,
0x0002C080,0x0002C0A0,0x0002C0C0,0x0002C0E0,
0x0002E000,0x0002E020,0x0002E040,0x0002E060,
0x0002E080,0x0002E0A0,0x0002E0C0,0x0002E0E0,
0x00030000,0x00030020,0x00030040,0x00030060,
0x00030080,0x000300A0,0x000300C0,0x000300E0,
0x00032000,0x00032020,0x00032040,0x00032060,
0x00032080,0x000320A0,0x000320C0,0x000320E0,
0x00034000,0x00034020,0x00034040,0x00034060,
0x00034080,0x000340A0,0x000340C0,0x000340E0,
0x00036000,0x00036020,0x00036040,0x00036060,
0x00036080,0x000360A0,0x000360C0,0x000360E0,
0x00038000,0x00038020,0x00038040,0x00038060,
0x00038080,0x000380A0,0x000380C0,0x000380E0,
0x0003A000,0x0003A020,0x0003A040,0x0003A060,
0x0003A080,0x0003A0A0,0x0003A0C0,0x0003A0E0,
0x0003C000,0x0003C020,0x0003C040,0x0003C060,
0x0003C080,0x0003C0A0,0x0003C0C0,0x0003C0E0,
0x0003E000,0x0003E020,0x0003E040,0x0003E060,
0x0003E080,0x0003E0A0,0x0003E0C0,0x0003E0E0,
0x00030000,0x00030020,0x00030040,0x00030060,
0x00030080,0x000300A0,0x000300C0,0x000300E0,
0x00032000,0x00032020,0x00032040,0x00032060,
0x00032080,0x000320A0,0x000320C0,0x000320E0,
0x00034000,0x00034020,0x00034040,0x00034060,
0x00034080,0x000340A0,0x000340C0,0x000340E0,
0x00036000,0x00036020,0x00036040,0x00036060,
0x00036080,0x000360A0,0x000360C0,0x000360E0,
0x00038000,0x00038020,0x00038040,0x00038060,
0x00038080,0x000380A0,0x000380C0,0x000380E0,
0x0003A000,0x0003A020,0x0003A040,0x0003A060,
0x0003A080,0x0003A0A0,0x0003A0C0,0x0003A0E0,
0x0003C000,0x0003C020,0x0003C040,0x0003C060,
0x0003C080,0x0003C0A0,0x0003C0C0,0x0003C0E0,
0x0003E000,0x0003E020,0x0003E040,0x0003E060,
0x0003E080,0x0003E0A0,0x0003E0C0,0x0003E0E0,
0x00010000,0x00030002,0x00060005,0x00080007,
0x000B000A,0x000D000C,0x0010000F,0x00130011,
0x00150014,0x00180016,0x001A0019,0x001D001B,
0x001F001E,0x00220020,0x00240023,0x00270026,
0x00290028,0x002C002B,0x002E002D,0x00310030,
0x00330032,0x00360035,0x00380037,0x003B0039,
0x003D003C,0x0040003E,0x00420041,0x00440043,
0x00470046,0x00490048,0x004C004B,0x004E004D,
0x0051004F,0x00530052,0x00550054,0x00580057,
0x005A0059,0x005C005B,0x005F005E,0x00610060,
0x00630062,0x00660065,0x00680067,0x006A0069,
0x006D006B,0x006F006E,0x00710070,0x00730072,
0x00760074,0x00780077,0x007A0079,0x007C007B,
0x007E007D,0x0081007F,0x00830082,0x00850084,
0x00870086,0x00890088,0x008B008A,0x008D008C,
0x008F008E,0x00910090,0x00940093,0x00960095,
0x00980097,0x009A0099,0x009C009B,0x009E009D,
0x00A0009F,0x00A200A1,0x00A400A3,0x00A600A5,
0x00A700A7,0x00A900A8,0x00AB00AA,0x00AD00AC,
0x00AF00AE,0x00B100B0,0x00B300B2,0x00B500B4,
0x00B600B6,0x00B800B7,0x00BA00B9,0x00BC00BB,
0x00BE00BD,0x00BF00BF,0x00C100C0,0x00C300C2,
0x00C500C4,0x00C600C6,0x00C800C7,0x00CA00C9,
0x00CB00CB,0x00CD00CC,0x00CF00CE,0x00D000D0,
0x00D200D1,0x00D400D3,0x00D500D4,0x00D700D6,
0x00D800D8,0x00DA00D9,0x00DC00DB,0x00DD00DC,
0x00DF00DE,0x00E000DF,0x00E200E1,0x00E300E2,
0x00E500E4,0x00E600E5,0x00E800E7,0x00E900E8,
0x00EB00EA,0x00EC00EB,0x00ED00ED,0x00EF00EE,
0x00F000EF,0x00F200F1,0x00F300F2,0x00F400F4,
0x00F600F5,0x00F700F6,0x00F800F8,0x00FA00F9,
0x00FB00FA,0x00FC00FC,0x00FE00FD,0x00FF00FE,
0x00000100,0x00000000,0x00000001,0xFFFF0000,
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x54534554,
0x00005245,0x00000000,0x00000000,0x00000000,
0x00000101,0x00000000,0x00000900,0x00000000,
0x00000000,0x00000000,0xFC010101,0x00000000,
0xFC000000,0x00000000,0x00000000,0x00000000,
0x00020000,0x10007FFF,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00001F40,0x00000000
};
//void *off_9359C = &loc_24080; // weak
__int16 word_9374C[258] =
{
  0,
  1,
  2,
  3,
  5,
  6,
  7,
  8,
  10,
  11,
  12,
  13,
  15,
  16,
  17,
  19,
  20,
  21,
  22,
  24,
  25,
  26,
  27,
  29,
  30,
  31,
  32,
  34,
  35,
  36,
  38,
  39,
  40,
  41,
  43,
  44,
  45,
  46,
  48,
  49,
  50,
  51,
  53,
  54,
  55,
  56,
  57,
  59,
  60,
  61,
  62,
  64,
  65,
  66,
  67,
  68,
  70,
  71,
  72,
  73,
  75,
  76,
  77,
  78,
  79,
  81,
  82,
  83,
  84,
  85,
  87,
  88,
  89,
  90,
  91,
  92,
  94,
  95,
  96,
  97,
  98,
  99,
  101,
  102,
  103,
  104,
  105,
  106,
  107,
  109,
  110,
  111,
  112,
  113,
  114,
  115,
  116,
  118,
  119,
  120,
  121,
  122,
  123,
  124,
  125,
  126,
  127,
  129,
  130,
  131,
  132,
  133,
  134,
  135,
  136,
  137,
  138,
  139,
  140,
  141,
  142,
  143,
  144,
  145,
  147,
  148,
  149,
  150,
  151,
  152,
  153,
  154,
  155,
  156,
  157,
  158,
  159,
  160,
  161,
  162,
  163,
  164,
  165,
  166,
  167,
  167,
  168,
  169,
  170,
  171,
  172,
  173,
  174,
  175,
  176,
  177,
  178,
  179,
  180,
  181,
  182,
  182,
  183,
  184,
  185,
  186,
  187,
  188,
  189,
  190,
  191,
  191,
  192,
  193,
  194,
  195,
  196,
  197,
  198,
  198,
  199,
  200,
  201,
  202,
  203,
  203,
  204,
  205,
  206,
  207,
  208,
  208,
  209,
  210,
  211,
  212,
  212,
  213,
  214,
  215,
  216,
  216,
  217,
  218,
  219,
  220,
  220,
  221,
  222,
  223,
  223,
  224,
  225,
  226,
  226,
  227,
  228,
  229,
  229,
  230,
  231,
  232,
  232,
  233,
  234,
  235,
  235,
  236,
  237,
  237,
  238,
  239,
  239,
  240,
  241,
  242,
  242,
  243,
  244,
  244,
  245,
  246,
  246,
  247,
  248,
  248,
  249,
  250,
  250,
  251,
  252,
  252,
  253,
  254,
  254,
  255,
  256,
  0
}; // weak
char byte_93950 = '\0'; // weak
char byte_93954 = '\x01'; // weak
char byte_93958 = '\0'; // weak
char byte_93959 = '\0'; // weak
__int16 word_9395A = -1; // weak
__int16 word_9395C = 0; // weak
uint8_t* packet_93960 = 0; // weak
uint8_t* packet_93964 = 0; // weak
uint8_t* packet_93968[8] = { 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
__int16 word_93988 = 0; // weak
__int16 word_9398A = 0; // weak
myNCB* mainconnection_9398C = 0; // weak
myNCB* connection_93990[8] = { 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
char byte_939AF[] = { '\0' }; // weak
char byte_939B0[] = { '\0' }; // weak
char aTester[7] = "TESTER"; // weak
char byte_939CC = '\x01'; // weak
char byte_939CD = '\x01'; // weak
__int16 word_939D0 = 0; // weak
__int16 word_939D2 = 0; // weak
char byte_939D4 = '\0'; // weak
__int16 word_939D6 = 0; // weak
char byte_939E4 = '\x01'; // weak
char byte_939E5 = '\x01'; // weak
char byte_939E6 = '\x01'; // weak
char byte_939EC = '\0'; // weak
char byte_939ED = '\0'; // weak
int dword_939F0 = 0; // weak
__int16 word_939F4 = 0; // weak
int dword_939F8 = 0; // weak
__int16 word_939FC = 0; // weak
__int16 word_93A00 = 32767; // weak
__int16 word_93A02 = 4096; // weak
__int16 word_93A0C = 0; // weak
__int16 word_93A22 = 0; // weak
_UNKNOWN unk_93A44; // weak
int dword_93A54 = 0; // weak
int dword_93A60 = 0; // weak
__int16 word_93A64 = 0; // weak
char byte_93A84 = '\0'; // weak
int dword_93A88 = 16; // weak
int dword_93A8C = -80; // weak
int dword_93A90 = 80; // weak
int dword_93A94 = -4; // weak
__int16 word_93AA8 = 16; // weak
int dword_93AAC = -80; // weak
int dword_93AB0 = 80; // weak
__int16 word_93AB4 = -4; // weak
uint8* beginPrevLineFrame_93AC8 = nullptr; // weak
uint8* beginFrame_93ACC = nullptr; // weak
int dword_93AD0 = 0; // weak
int pitchViewPort_93AD4 = 0; // weak
int widthViewPort_93AD8 = 0; // weak
int heightViewPort_93ADC = 0; // weak
_UNKNOWN unk_93AE0; // weak
_UNKNOWN unk_96000; // weak
char byte_967E0 = 'p'; // weak
char byte_967E1 = '\0'; // weak
char byte_967E4 = '\0'; // weak
int dword_96860[] = { 83894304 }; // weak
char *off_96864[5] =
{
  (char*)"Game One            ",
  (char*)"Game Two            ",
  (char*)"Game Three          ",
  (char*)"Game Four           ",
  (char*)"Game Five           "
}; // weak
char byte_9687C = '\x01'; // weak
bool bool_96880 = false; // weak

Type_dword_96884 str_96884;
//int dword_96884 = 0; // weak
//char byte_96888 = '\x01'; // weak
//char byte_9688A = '\0'; // weak

Type_dword_96884 str_9688C;
//int dword_9688C = 0; // weak
//char byte_96890 = '\x01'; // weak
//char byte_96892 = '\0'; // weak

int dword_96894 = 0; // weak
__int16 word_96898 = 16; // weak
char byte_9689C[] = { '\x01' }; // weak
char byte_9689D[] = { '\0' }; // weak
char byte_9689E[22] =
{
  '\x03',
  '\x01',
  '\0',
  '\x03',
  '\0',
  '\0',
  '\x03',
  '\0',
  '\0',
  '\x03',
  '\0',
  '\0',
  '\x03',
  '\0',
  '\0',
  '\x03',
  '\0',
  '\0',
  '\x03',
  '\0',
  '\0',
  '\x03'
}; // weak
__int16 word_968B4[8] = { 17, 18, 23, 24, 25, 26, 28, 25970 }; // weak
int dword_968C4 = 0; // weak
int dword_968C8 = 0; // weak
int dword_968CC = 0; // weak
int dword_968D0 = 0; // weak
int dword_968D4 = 0; // weak
__int16 word_968D8 = 0; // weak
char byte_968E0 = '\x7F'; // weak
char byte_968E1 = '\0'; // weak
char byte_968E4 = '\0'; // weak
char byte_968E8 = '\0'; // weak
FILE* dword_968EC = nullptr; // weak
char byte_968F0 = '\x01'; // weak

//int dword_96902 = 0; // remove it
int dword_96906 = 0; // remove it

#pragma pack (1)
typedef struct {//size 14
    uint32_t data0;
    uint16_t data4;
    //uint32_t data6;
    //int (*data6)(int);
    void (*data6)(Type_AE400_29795*);
    //*(int (**)(int))(v3 + 6))
    uint16_t data10;
    uint16_t data12;
}
Type_254A34x;
typedef struct {//size 14
    uint32_t data0;
    uint16_t data4;
    //uint32_t data6;
    //int (*data6)(int);
    Type_AE400_29795* (*data6)(axis_3d*);
    //*(int (**)(int))(v3 + 6))
    uint16_t data10;
    uint16_t data12;
}
Type_254A34;

typedef struct {//size 18
    Type_254A34x* str_0;//0
    Type_254A34* str_4;//4
    uint32_t data4x;//4
    uint16_t data8x;//8
    uint32_t data14x;//14
}
Type_96902;

#pragma pack (16)

Type_96902 dword_96902[1];//fix it

int (*off_97D12)(int) = (int(*)(int)) &sub_3A810; // weak
int (*off_987DE)(int) = &sub_3C3D0; // weak
__int16 word_989C6 = 5; // weak

Type_156 unk_98F38[1];//fix it

//_UNKNOWN unk_98F38; // weak
_UNKNOWN unk_98F58; // weak
_UNKNOWN unk_98F78; // weak
void *off_98F98 = &unk_110003; // weak
void *off_98FB8 = &unk_B0004; // weak
_UNKNOWN unk_98FD8; // weak
_UNKNOWN unk_98FF8; // weak
_UNKNOWN unk_99018; // weak
_UNKNOWN unk_99038; // weak
_UNKNOWN unk_99058; // weak
_UNKNOWN unk_99078; // weak
_UNKNOWN unk_990D8; // weak
_UNKNOWN unk_990F8; // weak
_UNKNOWN unk_99118; // weak
_UNKNOWN unk_99138; // weak
_UNKNOWN unk_99178; // weak
_UNKNOWN unk_99198; // weak
_UNKNOWN unk_991B8; // weak
_UNKNOWN unk_991D8; // weak
_UNKNOWN unk_991F8; // weak
_UNKNOWN unk_99218; // weak
_UNKNOWN unk_99238; // weak
_UNKNOWN unk_99258; // weak

const int PSSearchD = 0;
const int PSdatabuild10dat = 1;
const int PSdatabuild10tab = 2;
const int PSdatafont0dat = 3;
const int PSdatafont0tab = 4;
const int PSdatafont1dat = 5;
const int PSdatafont1tab = 6;
const int PSdatatmaps10tab = 7;
const int PSPalData = 8;
const int PSPalMem = 9;
const int PSdatapointersdat = 10;
const int PSdatapointerstab = 11;
const int PSdatapal10dat = 12;
//const int PS = 13;
const int PSdataetextdat = 14;
//const int PS = 15;
const int PSdataftextdat = 16;
//const int PS = 17;
const int PSdatagtextdat = 18;
//const int PS = 19;
const int PSdataitextdat = 20;
//const int PS = 21;
const int PSdatablk0dat = 22;
//const int PS = 23;
const int PSdatablk1dat = 24;
const int PSdataskydat = 25;
//const int PS = 26;
const int PSWScreen = 27;
const int PSBScreen = 28;
const int PSdatamspr10dat = 29;
const int PSdatamspr10tab = 30;
//const int PS = 31;
const int PSWScreen2 = 32;
const int PSBScreen2 = 33;
const int PSdatahspr10dat = 34;
const int PSdatahspr10tab = 35;

uint8_t* test_AE414_AE404;
uint8_t* begBuildDat_AE430_26C430_26C420;
uint8_t* test_AE438_26C428;
uint8_t* test_AE40C_AE3FC;
uint8_t* begFont0Dat_AE378_26C378_26C368;
uint8_t* test_AE398_AE388;
uint8_t* begFont1Dat_AE37C_26C37C_26C36C;
uint8_t* begFont1Tab_AE3BC_26C3BC_26C3AC;
uint8_t* test_AE39C_26C38C;
Tmaps_str* begTmapsTab_12D744_12D734_2EB744_2EB734x;
uint8_t* begPointersDat_AE448_26C448_26C438;
uint8_t* test_AE43C_AE42C;
uint8_t* begWscreen_2ECFF4_2ECFE4;
uint8_t* begSprDat_26C444_26C434;
uint8_t* test_AE434_26C424;

Pathstruct pathStrArray[] =
{
    { "*SearchD", &begSearch_AE3F4_26C3F4_26C3E4,&test_AE414_AE404,4096,0 },
    { "data/build1-0.dat", &begBuildDat_AE430_26C430_26C420,&test_AE438_26C428,0,0 },
    { "data/build1-0.tab", (uint8_t**)&begBuildTab_AE440_AE430_26C440_26C430,&test_AE40C_AE3FC,0,0 },
    { "data/font0.dat", &begFont0Dat_AE378_26C378_26C368,0,0,0 },
    { "data/font0.tab", (uint8_t**)&begFont0Tab_AE3B8_AE3A8_26C3B8_26C3A8,&test_AE398_AE388,0,0 },
    { "data/font1.dat", &begFont1Dat_AE37C_26C37C_26C36C,0,0,0 },
    { "data/font1.tab", &begFont1Tab_AE3BC_26C3BC_26C3AC,&test_AE39C_26C38C,0,0 },
    { "data/tmaps1-0.tab", (uint8_t**)&begTmapsTab_12D744_12D734_2EB744_2EB734x,0,0,0 },
    { "*PalData", &begPalData_AE424_AE414_26C424_26C414,0,1024,0 },
    { "*PalMem", (uint8_t**)&begPalMem_AE418_AE408_26C418_26C408,0,1024,0 },
    { "data/pointers.dat", &begPointersDat_AE448_26C448_26C438,0,0,0 },
    { "data/pointers.tab", (uint8_t**)&begPointersTab_AE450_AE440_26C450_26C440,&test_AE43C_AE42C,0,0 },
    { "data/pal1-0.dat", (uint8_t**)&begPalDat_AE428_AE418_26C428_26C418,0,0,0 },
    { "", 0,0,0,0 },
    { "data/etext.dat", &begTextDat_AE41C_AE40C_26C41C_26C40C,0,0,0 },
    { "", 0,0,0,0 },
    { "data/ftext.dat", &begTextDat_AE41C_AE40C_26C41C_26C40C,0,0,0 },
    { "", 0,0,0,0 },
    { "data/gtext.dat", &begTextDat_AE41C_AE40C_26C41C_26C40C,0,0,0 },
    { "", 0,0,0,0 },
    { "data/itext.dat", &begTextDat_AE41C_AE40C_26C41C_26C40C,0,0,0 },
    { "", 0,0,0,0 },
    { "data/blk1-0.dat", &begBlkDat_AE3F0_26C3F0_26C3E0,0,0,0 },
    { "", 0,0,0,0 },
    { "data/blk1-1.dat", &begBlkDat_AE3F0_26C3F0_26C3E0,0,0,0 },
    { "data/sky1-0.dat", &begSky_AE3D8_AE3C8_26C3D8_26C3C8,0,0,0 },
    { "", 0,0,0,0 },
    { "*WScreen", &begWscreen_2ECFF4_2ECFE4,0,71040,0 },
    { "*BScreen", &begBscreen_AE3FC_AE3EC_26C3FC_26C3EC,0,70000,0 },
    { "data/mspr1-0.dat", &begSprDat_26C444_26C434,0,0,0 },
    { "data/mspr1-0.tab", (uint8_t**)&begSprTab_AE42C_AE41C_26C42C_26C41C,&test_AE434_26C424,0,0 },
    { "", 0,0,0,0 },
    { "*WScreen", &begWscreen_2ECFF4_2ECFE4,0,307200,0 },
    { "*BScreen", &begBscreen_AE3FC_AE3EC_26C3FC_26C3EC,0,70000,0 },
    { "data/hspr1-0.dat", &begSprDat_26C444_26C434,0,0,0 },
    { "data/hspr1-0.tab", (uint8_t**)&begSprTab_AE42C_AE41C_26C42C_26C41C,&test_AE434_26C424,0,0 },
    { "", 0,0,0,0 }
};

const int PSdatascreenssptrsdat = 0;
const int PSdatascreenssptrstab = 1;
const int PSPALETTE = 2;
const int PSSCREENBACKUP = 3;
const int PSSCREENBACKUP2 = 4;
//const int PS = 5;
const int PSdatascreenssfont0dat = 6;
const int PSdatascreenssfont0tab = 7;
const int PSdatascreensgcsprdat = 8;
const int PSdatascreensgcsprtab = 9;
//const int PS = 10;
const int PSdatascreensmmsprdat = 11;
const int PSdatascreensmmsprtab = 12;
const int PSdatascreensmmmaskdat = 13;
const int PSdatascreenssfont1dat = 14;
const int PSdatascreenssfont1tab = 15;
const int PSdatascreensglobedat = 16;
const int PSdatascreenstimerdat = 17;
const int PSBRIGHTTABLE = 18;
//const int PS = 19;
const int PSdatascreenspmultsprdat = 20;
const int PSdatascreenspmultsprtab = 21;
const int PSdatascreenssfont1dat2 = 22;
const int PSdatascreenssfont1tab2 = 23;
//const int PS = 24;
const int PSdatascreenssfont2dat = 25;
const int PSdatascreenssfont2tab = 26;
//const int PS = 27;
const int PSdatascreenslangsprdat = 28;
const int PSdatascreenslangsprtab = 29;
//const int PS = 30;
const int PSintrotitle02dat = 31;

uint8_t* begSptrsDat_12CB64_2EAB64_2EAAE4;//begSptrsDat_12CB64_2EAB64_2EAAE4
TypeTab* begSptrsTab_12CAEC_2EAAEC_2EAADC;//begSptrsTab_12CAEC_2EAAEC_2EAADC
uint8_t* test_12CAF0_2EAAF0_2EAAE0;//text_12CAF0_2EAAF0_2EAAE0

TColor* begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C;//TColor begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C[256]; // weak
uint8_t* begScreenBackup_12CBA4_2EABA4_2EAB94;//begScreenBackup_12CBA4_2EABA4_2EAB94
uint8_t* begScreenBackup2_12CBA8_2EABA8_2EAB98;//begScreenBackup2_12CBA8_2EABA8_2EAB98

TypeStrFont sFont0Tab_12CB28_2EAB28_2EAB18;//fix with REMC1
TypeStrFont sFont1Tab_12CB34_2EAB34_2EAB24;//fix with REMC1
TypeStrFont* dword_AE3B8_2[2] = { &sFont0Tab_12CB28_2EAB28_2EAB18, &sFont1Tab_12CB34_2EAB34_2EAB24 };//fix with REMC1

uint8_t* begSFont0Dat_12CB30_2EAB30_2EAB20;
uint8_t* begSFont0Tab_12CB28_2EAB28_2EAB18;//begSFont0Tab_12CB28_2EAB28_2EAB18
uint8_t* test_12CB2C_2EAB2C_2EAB1C;
uint8_t* begGcSprDat_12CB00_2EAB00_2EAAF0;//begGcSprDat_12CB00_2EAB00_2EAAF0
uint8_t* begGcSprTab_12CAF8_2EAAF8_2EAAE8;//begGcSprTab_12CAF8_2EAAF8_2EAAE8
uint8_t* test_12CAFC_2EAAFC_2EAAEC;//text_12CAFC_2EAAFC_2EAAEC

uint8_t* begMmSprDat_12CB0C_2EAB0C_2EAAFC;//begMmSprDat_12CB0C_2EAB0C_2EAAFC
uint8_t* begMmSprTab_12CB04_2EAB04_2EAAF4;//begMmSprTab_12CB04_2EAB04_2EAAF4
uint8_t* test_12CB08_2EAB08_2EAAF8;//test_12CB08_2EAB08_2EAAF8
uint8_t* begMmMaskDat_12CBA0_2EABA0_2EAB90;//begMmMaskDat_12CBA0_2EABA0_2EAB90
uint8_t* begSFont1Dat_12CB3C_2EAB3C_2EAB2C;
uint8_t* begSFont1Tab_12CB34_2EAB34_2EAB24;//begSFont1Tab_12CB34_2EAB34_2EAB24
uint8_t* test_12CB38_2EAB38_2EAB28;
uint8_t* begGlobeDat_12CB72_2EAB72_2EAB62;//begGlobeDat_12CB72_2EAB72_2EAB62
uint8_t* begTimerDat_12CB80_2EAB80_2EAB70;//begTimerDat_12CB80_2EAB80_2EAB70
uint8_t* begBrightTable_12CBAC_2EABAC_2EAB9C;//begBrightTable_12CBAC_2EABAC_2EAB9C

uint8_t* begPMultSprDat_12CB18_2EAB18_2EAB08;//begPMultSprDat_12CB18_2EAB18_2EAB08
uint8_t* begPMultSprTab_12CB10_2EAB10_2EAB00;//begPMultSprTab_12CB10_2EAB10_2EAB00
uint8_t* test_12CB14_2EAB14_2EAB04;//test_12CB14_2EAB14_2EAB04

uint8_t* begSFont2Dat_12CB48_2EAB48_2EAB38;//begSFont2Dat_12CB48_2EAB48_2EAB38
uint8_t* begSFont2Tab_12CB40_2EAB40_2EAB30;//begSFont2Tab_12CB40_2EAB40_2EAB30
uint8_t* test_12CB44_2EAB44_2EAB34;//test_12CB44_2EAB44_2EAB34

uint8_t* begLangSprDat_12CB60_2EAB60_2EAB50;//begLangSprDat_12CB60_2EAB60_2EAB50begSptrsDat
uint8_t* begLangSprTab_12CB58_2EAB58_2EAB48;//begLangSprTab_12CB58_2EAB58_2EAB48
uint8_t* test_12CB5C_2EAB5C_2EAB4C;//test_12CB5C_2EAB5C_2EAB4C

uint8_t* begTitle02Dat_12CB64_2EAB64_2EAB54;//begTitle02Dat_12CB64_2EAB64_2EAB54


Pathstruct pathStrArray_21AB80_21AEC0[] = {
{ "data/screens/sptrs.dat", &begSptrsDat_12CB64_2EAB64_2EAAE4,0,0,0 },
{ "data/screens/sptrs.tab", (uint8_t**)&begSptrsTab_12CAEC_2EAAEC_2EAADC,&test_12CAF0_2EAAF0_2EAAE0,0,0 },
{ "*PALETTE", (uint8_t**)&begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C,0,768,0 },
{ "*SCREEN BACKUP", &begScreenBackup_12CBA4_2EABA4_2EAB94,0,64000,0 },
{ "*SCREEN BACKUP", &begScreenBackup2_12CBA8_2EABA8_2EAB98,0,64000,0 },
{ "", 0,0,0,0 },
{ "data/screens/sfont0.dat", &begSFont0Dat_12CB30_2EAB30_2EAB20,0,0,0 },
{ "data/screens/sfont0.tab", &begSFont0Tab_12CB28_2EAB28_2EAB18,&test_12CB2C_2EAB2C_2EAB1C,0,0 },
{ "data/screens/gcspr.dat", &begGcSprDat_12CB00_2EAB00_2EAAF0,0,0,0 },
{ "data/screens/gcspr.tab", &begGcSprTab_12CAF8_2EAAF8_2EAAE8,&test_12CAFC_2EAAFC_2EAAEC,0,0 },
{ "", 0,0,0,0 },
{ "data/screens/mmspr.dat", &begMmSprDat_12CB0C_2EAB0C_2EAAFC,0,0,0 },
{ "data/screens/mmspr.tab", &begMmSprTab_12CB04_2EAB04_2EAAF4,&test_12CB08_2EAB08_2EAAF8,0,0 },
{ "data/screens/mmmask.dat", &begMmMaskDat_12CBA0_2EABA0_2EAB90,0,0,0 },
{ "data/screens/sfont1.dat", &begSFont1Dat_12CB3C_2EAB3C_2EAB2C,0,0,0 },
{ "data/screens/sfont1.tab", &begSFont1Tab_12CB34_2EAB34_2EAB24,&test_12CB38_2EAB38_2EAB28,0,0 },
{ "data/screens/globe.dat", &begGlobeDat_12CB72_2EAB72_2EAB62,0,0,0 },
{ "data/screens/timer.dat", &begTimerDat_12CB80_2EAB80_2EAB70,0,0,0 },
{ "*BRIGHT TABLE", &begBrightTable_12CBAC_2EABAC_2EAB9C,0,256,0 },
{ "", 0,0,0,0 },
{ "data/screens/pmultspr.dat", &begPMultSprDat_12CB18_2EAB18_2EAB08,0,0,0 },
{ "data/screens/pmultspr.tab", &begPMultSprTab_12CB10_2EAB10_2EAB00,&test_12CB14_2EAB14_2EAB04,0,0 },
{ "data/screens/sfont1.dat", &begSFont1Dat_12CB3C_2EAB3C_2EAB2C,0,0,0 },
{ "data/screens/sfont1.tab", &begSFont1Tab_12CB34_2EAB34_2EAB24,&test_12CB38_2EAB38_2EAB28,0,0 },
{ "", 0,0,0,0 },
{ "data/screens/sfont2.dat", &begSFont2Dat_12CB48_2EAB48_2EAB38,0,0,0 },
{ "data/screens/sfont2.tab",  &begSFont2Tab_12CB40_2EAB40_2EAB30,&test_12CB44_2EAB44_2EAB34,0,0 },
{ "", 0,0,0,0 },
{ "data/screens/langspr.dat", &begLangSprDat_12CB60_2EAB60_2EAB50,0,0,0 },
{ "data/screens/langspr.tab", &begLangSprTab_12CB58_2EAB58_2EAB48,&test_12CB5C_2EAB5C_2EAB4C,0,0 },
{ "", 0,0,0,0 },
{ "intro/title-04.dat", &begTitle02Dat_12CB64_2EAB64_2EAB54,0,0,0 },
{ "", 0,0,0,0 } };

//char aSearchd[9] = "*SearchD"; // weak
//char aDataEtextDat[15] = "data/etext.dat"; // weak
//char aDataFtextDat[15] = "data/ftext.dat"; // weak
//char aDataGtextDat[15] = "data/gtext.dat"; // weak
//char aDataItextDat[15] = "data/itext.dat"; // weak
char aDataBlk10Dat[16] = "data/blk1-0.dat"; // weak
char aDataBlk11Dat[16] = "data/blk1-1.dat"; // weak
char aWscreen[9] = "*WScreen"; // weak
char aWscreen_0[9] = "*WScreen"; // weak
//int *off_99974 = &begPointersTab_AE450_AE440_26C450_26C440; // weak

uint8_t* off_99974[] = {
(uint8_t*)begPointersTab_AE450_AE440_26C450_26C440,(uint8_t*)0x0026C42C,(uint8_t*)0x0026C438,
(uint8_t*)begFont0Tab_AE3B8_AE3A8_26C3B8_26C3A8,(uint8_t*)0x0026C388,(uint8_t*)0x0026C368,
begFont1Tab_AE3BC_26C3BC_26C3AC,(uint8_t*)0x0026C38C,(uint8_t*)0x0026C36C,
(uint8_t*)begSprTab_AE42C_AE41C_26C42C_26C41C,(uint8_t*)0x0026C424,(uint8_t*)0x0026C434,
(uint8_t*)begBuildTab_AE440_AE430_26C440_26C430,(uint8_t*)0x0026C3FC,(uint8_t*)0x0026C420,
(uint8_t*)0x00000000,(uint8_t*)0x00000000,(uint8_t*)0x00000000,
(uint8_t*)0x00267CC8,(uint8_t*)0x00267CD4,(uint8_t*)0x00267CE0,
(uint8_t*)0x00267CEC,(uint8_t*)0x00267CF8,(uint8_t*)0x00267D04,
(uint8_t*)0x00267D10,(uint8_t*)0x00267D1C,(uint8_t*)0x00267D28,
(uint8_t*)0x00267D34,(uint8_t*)0x00267D40,(uint8_t*)0x00267D4C,
(uint8_t*)0x00267D58,(uint8_t*)0x00267D64,(uint8_t*)0x00267D74,
(uint8_t*)0x00267D80,(uint8_t*)0x00267D8C,(uint8_t*)0x00267D9C,
(uint8_t*)0x00267DAC,(uint8_t*)0x00267DBC,(uint8_t*)0x00267DCC,
(uint8_t*)0x00267DD8,(uint8_t*)0x00267DE4,(uint8_t*)0x00267DF4,
(uint8_t*)0x00267E00,(uint8_t*)0x00267E0C,(uint8_t*)0x00267E18,
(uint8_t*)0x00267E28,(uint8_t*)0x00267E38,(uint8_t*)0x00267E48,
(uint8_t*)0x00267E58,(uint8_t*)0x00267E64,(uint8_t*)0x00267E70,
(uint8_t*)0x00267E7C,(uint8_t*)0x00267E88,(uint8_t*)0x00267E98,
(uint8_t*)0x00267EA4,(uint8_t*)0x00267EB0,(uint8_t*)0x00267EBC,
(uint8_t*)0x00267ECC,(uint8_t*)0x00267ED8,(uint8_t*)0x00267EE8,
(uint8_t*)0x00267EF8,(uint8_t*)0x00267F04,(uint8_t*)0x00267F10,
(uint8_t*)0x00267F1C,(uint8_t*)0x00267F2C,(uint8_t*)0x00267F38,
(uint8_t*)0x00267F44,(uint8_t*)0x00267F54,(uint8_t*)0x00267F64,
(uint8_t*)0x00267F6C,(uint8_t*)0x00267F78,(uint8_t*)0x00267F84,
(uint8_t*)0x00267F90,(uint8_t*)0x00267F9C,(uint8_t*)0x00267FA4,
(uint8_t*)0x00267FAC,(uint8_t*)0x00267FB4,(uint8_t*)0x00267FBC,
(uint8_t*)0x00267FC4,(uint8_t*)0x00267FCC,(uint8_t*)0x00267FD4,
(uint8_t*)0x00267FDC,(uint8_t*)0x00267FE4,(uint8_t*)0x00267FEC,
(uint8_t*)0x00267FF0,(uint8_t*)0x00267FF8,(uint8_t*)0x00268000,
(uint8_t*)0x00268008,(uint8_t*)0x00268010,(uint8_t*)0x00268010,
(uint8_t*)0x00268010,(uint8_t*)0x00268010,(uint8_t*)0x00268010,
(uint8_t*)0x00268010,(uint8_t*)0x00268010,(uint8_t*)0x00268010,
(uint8_t*)0x00268010,(uint8_t*)0x00268010,(uint8_t*)0x00268010,
(uint8_t*)0x00268010,(uint8_t*)0x00268010,(uint8_t*)0x00268010,
(uint8_t*)0x00268010,(uint8_t*)0x00268010,(uint8_t*)0x00268010,
(uint8_t*)0x00268010,(uint8_t*)0x00268010,(uint8_t*)0x00268010,
(uint8_t*)0x00268010,(uint8_t*)0x00268010,(uint8_t*)0x00268010,
(uint8_t*)0x00268010,(uint8_t*)0x00268010,(uint8_t*)0x00268010,
(uint8_t*)0x00268010,(uint8_t*)0x00268010,(uint8_t*)0x00268010
};

int dword_999B8[] = { 0 }; // weak
char *off_99A84[15] =
{
  (char*)"Goyaan",
  (char*)"Cyrecius",
  (char*)"Esyphium",
  (char*)"Barabban",
  (char*)"Tervilar",
  (char*)"Imnara",
  (char*)"Kouppi",
  (char*)"Fayaoud",
  (char*)"Rama'Q",
  (char*)"Halaj",
  (char*)"Moussul",
  (char*)"Aleppo",
  (char*)"Schiraz",
  (char*)"Ispahan",
  (char*)"Coam"
}; // weak
char byte_99B58[16] = { 0xB7,0x71,0x7D,0x7A,0x9D,0x9A,0x07,0x5A,0x1D,0x1B,0xDD,0xDA,0x3C,0x39,0x10,0x0E };
char *off_99B68[8] =
{
  (char*)"Zanzamar",
  (char*)"Vodor",
  (char*)"Gryshnak",
  (char*)"Mahmoud",
  (char*)"Syed",
  (char*)"Raschid",
  (char*)"Alhabbal",
  (char*)"Scheherazade"
}; // weak
char byte_99B88[24] =
{
  '\0',
  '\x03',
  '\x02',
  '\x10',
  '\x01',
  '\x0E',
  '\x04',
  '\f',
  '\x06',
  '\t',
  '\a',
  '\b',
  '\x0F',
  '\x12',
  '\x11',
  '\x13',
  '\r',
  '\x05',
  '\v',
  '\n',
  '\x14',
  '\x15',
  '\x16',
  '\x17'
}; // weak
Type_99BA0 unk_99BA0x[1];
//fill it by dosbox
/* = {
0x08,0x00,0x68,0x80,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x0B,0x00,0x7C,0x80,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x2E,0x00,0x98,0x80,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x26,0x00,0xAC,0x80,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x26,0x00,0xBC,0x80,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x26,0x00,0xD0,0x80,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x26,0x00,0xE4,0x80,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x5E,0x00,0xF8,0x80,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0xFF,0x00,0x00,
0x75,0x00,0x0C,0x81,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0xFF,0x00,0x00,
0x7F,0x00,0x24,0x81,0x26,0x00,0x00,0x00,0x32,0x00,0x02,0x01,0x00,0x00,
0x7F,0x00,0x40,0x81,0x26,0x00,0x00,0x00,0x64,0x00,0x02,0x01,0x00,0x00,
0x7F,0x00,0x5C,0x81,0x26,0x00,0x00,0x00,0x96,0x00,0x02,0x01,0x00,0x00,
0x7F,0x00,0x78,0x81,0x26,0x00,0x00,0x00,0xC8,0x00,0x02,0x01,0x00,0x00,
0x7F,0x00,0x94,0x81,0x26,0x00,0x00,0x00,0xFA,0x00,0x02,0x01,0x00,0x00,
0x7F,0x00,0xB0,0x81,0x26,0x00,0x00,0x00,0x2C,0x01,0x02,0x01,0x00,0x00,
0x7F,0x00,0xCC,0x81,0x26,0x00,0x00,0x00,0x5E,0x01,0x02,0x01,0x00,0x00,
0x7F,0x00,0xE8,0x81,0x26,0x00,0x00,0x00,0x90,0x01,0x02,0x01,0x00,0x00,
0x8B,0x00,0x04,0x82,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x76,0x00,0x1C,0x82,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x70,0x00,0x34,0x82,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0xFF,0x00,0x00,
0x70,0x00,0x48,0x82,0x26,0x00,0x00,0x00,0xA5,0x00,0x00,0x01,0x00,0x00,
0x70,0x00,0x5C,0x82,0x26,0x00,0x00,0x00,0xB9,0x00,0x00,0x01,0x00,0x00,
0x70,0x00,0x70,0x82,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0x70,0x00,0x84,0x82,0x26,0x00,0x00,0x00,0xD2,0x00,0x00,0x01,0x00,0x00,
0x70,0x00,0x98,0x82,0x26,0x00,0x00,0x00,0xD2,0x00,0x00,0x01,0x00,0x00,
0x70,0x00,0xAC,0x82,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0x70,0x00,0xC0,0x82,0x26,0x00,0x00,0x00,0xBE,0x00,0x00,0x01,0x00,0x00,
0x70,0x00,0xD4,0x82,0x26,0x00,0x00,0x00,0xAA,0x00,0x00,0x01,0x00,0x00,
0x70,0x00,0xE8,0x82,0x26,0x00,0x00,0x00,0xA0,0x00,0x00,0x01,0x00,0x00,
0x70,0x00,0xFC,0x82,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x70,0x00,0x10,0x83,0x26,0x00,0x00,0x00,0x82,0x00,0x00,0x01,0x00,0x00,
0x70,0x00,0x24,0x83,0x26,0x00,0x00,0x00,0x6E,0x00,0x00,0x01,0x00,0x00,
0x70,0x00,0x38,0x83,0x26,0x00,0x00,0x00,0x5A,0x00,0x00,0x01,0x00,0x00,
0x70,0x00,0x4C,0x83,0x26,0x00,0x00,0x00,0x46,0x00,0x00,0x01,0x00,0x00,
0x70,0x00,0x60,0x83,0x26,0x00,0x00,0x00,0x3C,0x00,0x00,0x01,0x00,0x00,
0x8D,0x00,0x74,0x83,0x26,0x00,0x00,0x00,0x2C,0x01,0x00,0x03,0x00,0x00,
0x8F,0x00,0x8C,0x83,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x90,0x00,0xA0,0x83,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x91,0x00,0xB4,0x83,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x93,0x00,0xC8,0x83,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0x01,0x00,0x00,
0x36,0x00,0xDC,0x83,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0x6E,0x00,0xF0,0x83,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0xFF,0x00,0x00,
0x6F,0x00,0x04,0x84,0x26,0x00,0x00,0x00,0x64,0x00,0x00,0xFF,0x00,0x00,
0x97,0x00,0x18,0x84,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0xFF,0x00,0x00,
0x00,0x00,0x30,0x84,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0xFF,0x00,0x00,
0x7C,0x00,0x44,0x84,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0xFF,0x00,0x00,
0x7D,0x00,0x58,0x84,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0xFF,0x00,0x00,
0x0E,0x00,0x70,0x84,0x26,0x00,0x00,0x00,0x2C,0x01,0x00,0x01,0x00,0x00,
0x95,0x00,0x84,0x84,0x26,0x00,0x00,0x00,0x64,0x00,0x00,0x01,0x00,0x00,
0x16,0x00,0x98,0x84,0x26,0x00,0x00,0x00,0x2C,0x01,0x00,0x01,0x00,0x00,
0x77,0x00,0xAC,0x84,0x26,0x00,0x00,0x00,0x64,0x00,0x00,0x01,0x00,0x00,
0x81,0x00,0xC4,0x84,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0xFF,0x00,0x00,
0x73,0x00,0xE0,0x84,0x26,0x00,0x00,0x00,0x32,0x00,0x00,0xFF,0x00,0x00,
0x73,0x00,0xE0,0x84,0x26,0x00,0x00,0x00,0x64,0x00,0x00,0x01,0x00,0x00,
0x73,0x00,0xE0,0x84,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x73,0x00,0xE0,0x84,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0x73,0x00,0xE0,0x84,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x73,0x00,0xE0,0x84,0x26,0x00,0x00,0x00,0x2C,0x01,0x00,0x01,0x00,0x00,
0x73,0x00,0xE0,0x84,0x26,0x00,0x00,0x00,0x5E,0x01,0x00,0x01,0x00,0x00,
0x73,0x00,0xE0,0x84,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0x01,0x00,0x00,
0x98,0x00,0xF8,0x84,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x04,0x00,0x00,
0x99,0x00,0x10,0x85,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x04,0x00,0x00,
0x7A,0x00,0x28,0x85,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x4E,0x00,0x40,0x85,0x26,0x00,0x00,0x00,0x64,0x00,0x00,0x01,0x00,0x00,
0x7E,0x00,0x54,0x85,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x96,0x00,0x6C,0x85,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0xFF,0x00,0x00,
0x94,0x00,0x7C,0x85,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0x72,0x00,0x90,0x85,0x26,0x00,0x00,0x00,0x32,0x00,0x02,0xFF,0x00,0x00,
0x72,0x00,0xA4,0x85,0x26,0x00,0x00,0x00,0x64,0x00,0x02,0x01,0x00,0x00,
0x72,0x00,0xB8,0x85,0x26,0x00,0x00,0x00,0x96,0x00,0x02,0x01,0x00,0x00,
0x72,0x00,0xCC,0x85,0x26,0x00,0x00,0x00,0xC8,0x00,0x02,0x01,0x00,0x00,
0x72,0x00,0xE0,0x85,0x26,0x00,0x00,0x00,0xFA,0x00,0x02,0x01,0x00,0x00,
0x72,0x00,0xF4,0x85,0x26,0x00,0x00,0x00,0x2C,0x01,0x02,0x01,0x00,0x00,
0x72,0x00,0x08,0x86,0x26,0x00,0x00,0x00,0x5E,0x01,0x02,0x01,0x00,0x00,
0x72,0x00,0x1C,0x86,0x26,0x00,0x00,0x00,0x90,0x01,0x02,0x01,0x00,0x00,
0x46,0x00,0x30,0x86,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x80,0x00,0x44,0x86,0x26,0x00,0x00,0x00,0x5E,0x01,0x00,0x01,0x00,0x00,
0x74,0x00,0x5C,0x86,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0xFF,0x00,0x00,
0x71,0x00,0x74,0x86,0x26,0x00,0x00,0x00,0x96,0x00,0x03,0xFF,0x00,0x00,
0x92,0x00,0x88,0x86,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0xFF,0x00,0x00,
0x9B,0x00,0x9C,0x86,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0xFF,0x00,0x00,
0x9A,0x00,0xB4,0x86,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0xFF,0x00,0x00,
0x7B,0x00,0xD0,0x86,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x8C,0x00,0xEC,0x86,0x26,0x00,0x00,0x00,0x2C,0x01,0x00,0x04,0x00,0x00,
0x9C,0x00,0x00,0x87,0x26,0x00,0x00,0x00,0x2C,0x01,0x00,0x04,0x00,0x00,
0x56,0x00,0x14,0x87,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x1E,0x00,0x28,0x87,0x26,0x00,0x00,0x00,0x64,0x00,0x00,0x01,0x00,0x00,
0x3E,0x00,0x3C,0x87,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x3E,0x00,0x50,0x87,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x82,0x00,0x64,0x87,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x82,0x00,0x7C,0x87,0x26,0x00,0x00,0x00,0xA5,0x00,0x00,0x01,0x00,0x00,
0x82,0x00,0x94,0x87,0x26,0x00,0x00,0x00,0xB9,0x00,0x00,0x01,0x00,0x00,
0x82,0x00,0xAC,0x87,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0x82,0x00,0xC4,0x87,0x26,0x00,0x00,0x00,0xD2,0x00,0x00,0x01,0x00,0x00,
0x82,0x00,0xDC,0x87,0x26,0x00,0x00,0x00,0xD2,0x00,0x00,0x01,0x00,0x00,
0x82,0x00,0xF4,0x87,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0x82,0x00,0x0C,0x88,0x26,0x00,0x00,0x00,0xBE,0x00,0x00,0x01,0x00,0x00,
0x82,0x00,0x24,0x88,0x26,0x00,0x00,0x00,0xAA,0x00,0x00,0x01,0x00,0x00,
0x82,0x00,0x3C,0x88,0x26,0x00,0x00,0x00,0xA0,0x00,0x00,0x01,0x00,0x00,
0x82,0x00,0x54,0x88,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x82,0x00,0x6C,0x88,0x26,0x00,0x00,0x00,0x82,0x00,0x00,0x01,0x00,0x00,
0x82,0x00,0x84,0x88,0x26,0x00,0x00,0x00,0x6E,0x00,0x00,0x01,0x00,0x00,
0x82,0x00,0x9C,0x88,0x26,0x00,0x00,0x00,0x5A,0x00,0x00,0x01,0x00,0x00,
0x82,0x00,0xB4,0x88,0x26,0x00,0x00,0x00,0x46,0x00,0x00,0x01,0x00,0x00,
0x82,0x00,0xCC,0x88,0x26,0x00,0x00,0x00,0x3C,0x00,0x00,0x01,0x00,0x00,
0x83,0x00,0xE4,0x88,0x26,0x00,0x00,0x00,0x32,0x00,0x00,0xFF,0x00,0x00,
0x83,0x00,0xE4,0x88,0x26,0x00,0x00,0x00,0x64,0x00,0x00,0x01,0x00,0x00,
0x83,0x00,0xE4,0x88,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x83,0x00,0xE4,0x88,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0x83,0x00,0xE4,0x88,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x83,0x00,0xE4,0x88,0x26,0x00,0x00,0x00,0x2C,0x01,0x00,0x01,0x00,0x00,
0x83,0x00,0xE4,0x88,0x26,0x00,0x00,0x00,0x5E,0x01,0x00,0x01,0x00,0x00,
0x83,0x00,0xE4,0x88,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0x01,0x00,0x00,
0x84,0x00,0xFC,0x88,0x26,0x00,0x00,0x00,0x32,0x00,0x00,0xFF,0x00,0x00,
0x84,0x00,0xFC,0x88,0x26,0x00,0x00,0x00,0x64,0x00,0x00,0x01,0x00,0x00,
0x84,0x00,0xFC,0x88,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x84,0x00,0xFC,0x88,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0x84,0x00,0xFC,0x88,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x84,0x00,0xFC,0x88,0x26,0x00,0x00,0x00,0x2C,0x01,0x00,0x01,0x00,0x00,
0x84,0x00,0xFC,0x88,0x26,0x00,0x00,0x00,0x5E,0x01,0x00,0x01,0x00,0x00,
0x84,0x00,0xFC,0x88,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0x01,0x00,0x00,
0x85,0x00,0x14,0x89,0x26,0x00,0x00,0x00,0x32,0x00,0x00,0xFF,0x00,0x00,
0x85,0x00,0x14,0x89,0x26,0x00,0x00,0x00,0x64,0x00,0x00,0x01,0x00,0x00,
0x85,0x00,0x14,0x89,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x85,0x00,0x14,0x89,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0x85,0x00,0x14,0x89,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x85,0x00,0x14,0x89,0x26,0x00,0x00,0x00,0x2C,0x01,0x00,0x01,0x00,0x00,
0x85,0x00,0x14,0x89,0x26,0x00,0x00,0x00,0x5E,0x01,0x00,0x01,0x00,0x00,
0x85,0x00,0x14,0x89,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0x01,0x00,0x00,
0x86,0x00,0x2C,0x89,0x26,0x00,0x00,0x00,0x32,0x00,0x00,0xFF,0x00,0x00,
0x86,0x00,0x2C,0x89,0x26,0x00,0x00,0x00,0x64,0x00,0x00,0x01,0x00,0x00,
0x86,0x00,0x2C,0x89,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x86,0x00,0x2C,0x89,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0x86,0x00,0x2C,0x89,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x86,0x00,0x2C,0x89,0x26,0x00,0x00,0x00,0x2C,0x01,0x00,0x01,0x00,0x00,
0x86,0x00,0x2C,0x89,0x26,0x00,0x00,0x00,0x5E,0x01,0x00,0x01,0x00,0x00,
0x86,0x00,0x2C,0x89,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0x01,0x00,0x00,
0x87,0x00,0x44,0x89,0x26,0x00,0x00,0x00,0x32,0x00,0x00,0xFF,0x00,0x00,
0x87,0x00,0x44,0x89,0x26,0x00,0x00,0x00,0x64,0x00,0x00,0x01,0x00,0x00,
0x87,0x00,0x44,0x89,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x87,0x00,0x44,0x89,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0x87,0x00,0x44,0x89,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x87,0x00,0x44,0x89,0x26,0x00,0x00,0x00,0x2C,0x01,0x00,0x01,0x00,0x00,
0x87,0x00,0x44,0x89,0x26,0x00,0x00,0x00,0x5E,0x01,0x00,0x01,0x00,0x00,
0x87,0x00,0x44,0x89,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0x01,0x00,0x00,
0x88,0x00,0x5C,0x89,0x26,0x00,0x00,0x00,0x32,0x00,0x00,0xFF,0x00,0x00,
0x88,0x00,0x5C,0x89,0x26,0x00,0x00,0x00,0x64,0x00,0x00,0x01,0x00,0x00,
0x88,0x00,0x5C,0x89,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x88,0x00,0x5C,0x89,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0x88,0x00,0x5C,0x89,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x88,0x00,0x5C,0x89,0x26,0x00,0x00,0x00,0x2C,0x01,0x00,0x01,0x00,0x00,
0x88,0x00,0x5C,0x89,0x26,0x00,0x00,0x00,0x5E,0x01,0x00,0x01,0x00,0x00,
0x88,0x00,0x5C,0x89,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0x01,0x00,0x00,
0x89,0x00,0x74,0x89,0x26,0x00,0x00,0x00,0x32,0x00,0x00,0xFF,0x00,0x00,
0x89,0x00,0x74,0x89,0x26,0x00,0x00,0x00,0x64,0x00,0x00,0x01,0x00,0x00,
0x89,0x00,0x74,0x89,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x89,0x00,0x74,0x89,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0x89,0x00,0x74,0x89,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x89,0x00,0x74,0x89,0x26,0x00,0x00,0x00,0x2C,0x01,0x00,0x01,0x00,0x00,
0x89,0x00,0x74,0x89,0x26,0x00,0x00,0x00,0x5E,0x01,0x00,0x01,0x00,0x00,
0x89,0x00,0x74,0x89,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0x01,0x00,0x00,
0x8A,0x00,0x8C,0x89,0x26,0x00,0x00,0x00,0x32,0x00,0x00,0xFF,0x00,0x00,
0x8A,0x00,0x8C,0x89,0x26,0x00,0x00,0x00,0x64,0x00,0x00,0x01,0x00,0x00,
0x8A,0x00,0x8C,0x89,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x8A,0x00,0x8C,0x89,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0x8A,0x00,0x8C,0x89,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x8A,0x00,0x8C,0x89,0x26,0x00,0x00,0x00,0x2C,0x01,0x00,0x01,0x00,0x00,
0x8A,0x00,0x8C,0x89,0x26,0x00,0x00,0x00,0x5E,0x01,0x00,0x01,0x00,0x00,
0x8A,0x00,0x8C,0x89,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0x01,0x00,0x00,
0x9D,0x00,0xA4,0x89,0x26,0x00,0x00,0x00,0x20,0x03,0x00,0xF0,0x00,0x00,
0x9E,0x00,0xBC,0x89,0x26,0x00,0x00,0x00,0x20,0x03,0x00,0xF0,0x00,0x00,
0x9F,0x00,0xD4,0x89,0x26,0x00,0x00,0x00,0x20,0x03,0x00,0xF0,0x00,0x00,
0xA0,0x00,0xEC,0x89,0x26,0x00,0x00,0x00,0x20,0x03,0x00,0x01,0x00,0x00,
0xA1,0x00,0x04,0x8A,0x26,0x00,0x00,0x00,0x20,0x03,0x00,0x01,0x00,0x00,
0xA2,0x00,0x1C,0x8A,0x26,0x00,0x00,0x00,0x20,0x03,0x00,0x01,0x00,0x00,
0xA3,0x00,0x34,0x8A,0x26,0x00,0x00,0x00,0x20,0x03,0x00,0x01,0x00,0x00,
0xA4,0x00,0x4C,0x8A,0x26,0x00,0x00,0x00,0x20,0x03,0x00,0x01,0x00,0x00,
0xA5,0x00,0x64,0x8A,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0xFF,0x00,0x00,
0xA6,0x00,0x78,0x8A,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0xFF,0x00,0x00,
0xA7,0x00,0x8C,0x8A,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0xFF,0x00,0x00,
0xA8,0x00,0xA0,0x8A,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0x01,0x00,0x00,
0xA9,0x00,0xB4,0x8A,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0x01,0x00,0x00,
0xAA,0x00,0xC8,0x8A,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0x01,0x00,0x00,
0xAB,0x00,0xDC,0x8A,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0x01,0x00,0x00,
0xAC,0x00,0xF0,0x8A,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0x01,0x00,0x00,
0xAD,0x00,0x04,0x8B,0x26,0x00,0x00,0x00,0x50,0x00,0x00,0x01,0x00,0x00,
0xAD,0x00,0x18,0x8B,0x26,0x00,0x00,0x00,0x8C,0x00,0x00,0x01,0x00,0x00,
0xAD,0x00,0x2C,0x8B,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0xAD,0x00,0x40,0x8B,0x26,0x00,0x00,0x00,0x18,0x01,0x00,0x01,0x00,0x00,
0xAD,0x00,0x54,0x8B,0x26,0x00,0x00,0x00,0x68,0x01,0x00,0x01,0x00,0x00,
0xAD,0x00,0x68,0x8B,0x26,0x00,0x00,0x00,0xB8,0x01,0x00,0x01,0x00,0x00,
0xAD,0x00,0x7C,0x8B,0x26,0x00,0x00,0x00,0x08,0x02,0x00,0x01,0x00,0x00,
0xAD,0x00,0x90,0x8B,0x26,0x00,0x00,0x00,0x58,0x02,0x00,0x01,0x00,0x00,
0x77,0x00,0xA4,0x8B,0x26,0x00,0x00,0x00,0x32,0x00,0x00,0x01,0x00,0x00,
0xC0,0x00,0xC0,0x8B,0x26,0x00,0x00,0x00,0x64,0x00,0x00,0x01,0x00,0x00,
0xC1,0x00,0xD4,0x8B,0x26,0x00,0x00,0x00,0x3C,0x00,0x00,0xFF,0x00,0x00,
0x75,0x00,0xE8,0x8B,0x26,0x00,0x00,0x00,0x64,0x00,0x00,0xFF,0x00,0x00,
0xBF,0x00,0x00,0x8C,0x26,0x00,0x00,0x00,0x64,0x00,0x00,0xFF,0x00,0x00,
0xC6,0x00,0x18,0x8C,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0xB5,0x00,0x30,0x8C,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0x01,0x00,0x00,
0xC9,0x00,0x40,0x8C,0x26,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,
0xD1,0x00,0x54,0x8C,0x26,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,
0xD4,0x00,0x6C,0x8C,0x26,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,
0xD7,0x00,0x88,0x8C,0x26,0x00,0x00,0x00,0x3C,0x00,0x00,0xFF,0x00,0x00,
0xDC,0x00,0xA0,0x8C,0x26,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,
0xE4,0x00,0xB4,0x8C,0x26,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,
0xE5,0x00,0xCC,0x8C,0x26,0x00,0x00,0x00,0xF0,0x00,0x00,0x01,0x00,0x00,
0xE8,0x00,0xE8,0x8C,0x26,0x00,0x00,0x00,0xDC,0x05,0x00,0x01,0x00,0x00,
0xF0,0x00,0x00,0x8D,0x26,0x00,0x00,0x00,0x2C,0x01,0x00,0x01,0x00,0x00,
0x04,0x01,0x18,0x8D,0x26,0x00,0x00,0x00,0x96,0x00,0x03,0xFF,0x00,0x00,
0x05,0x01,0x30,0x8D,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0xFF,0x00,0x00,
0x06,0x01,0x44,0x8D,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0xFF,0x00,0x00,
0x07,0x01,0x58,0x8D,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0xFF,0x00,0x00,
0x08,0x01,0x70,0x8D,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0xFF,0x00,0x00,
0x09,0x01,0x88,0x8D,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0xFF,0x00,0x00,
0x0A,0x01,0xA0,0x8D,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0xFF,0x00,0x00,
0x0B,0x01,0xB8,0x8D,0x26,0x00,0x00,0x00,0x32,0x00,0x03,0xFF,0x00,0x00,
0xF8,0x00,0xD0,0x8D,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0xFB,0x00,0xE4,0x8D,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0xFE,0x00,0xF8,0x8D,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x14,0x01,0x10,0x8E,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x01,0x01,0x28,0x8E,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x15,0x01,0x3C,0x8E,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x1E,0x01,0x58,0x8E,0x26,0x00,0x00,0x00,0xF4,0x01,0x00,0x01,0x00,0x00,
0x1E,0x01,0x74,0x8E,0x26,0x00,0x00,0x00,0xF4,0x01,0x03,0x01,0x00,0x00,
0x1E,0x01,0x90,0x8E,0x26,0x00,0x00,0x00,0xF4,0x01,0x00,0x01,0x00,0x00,
0x2B,0x01,0xAC,0x8E,0x26,0x00,0x00,0x00,0x2C,0x01,0x00,0x04,0x00,0x00,
0x2C,0x01,0xC4,0x8E,0x26,0x00,0x00,0x00,0x2C,0x01,0x00,0x04,0x00,0x00,
0x8E,0x00,0xDC,0x8E,0x26,0x00,0x00,0x00,0x32,0x00,0x00,0xFF,0x00,0x00,
0x8E,0x00,0xF0,0x8E,0x26,0x00,0x00,0x00,0x64,0x00,0x00,0x01,0x00,0x00,
0x8E,0x00,0x04,0x8F,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x8E,0x00,0x18,0x8F,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0x8E,0x00,0x2C,0x8F,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x8E,0x00,0x40,0x8F,0x26,0x00,0x00,0x00,0x2C,0x01,0x00,0x01,0x00,0x00,
0x8E,0x00,0x54,0x8F,0x26,0x00,0x00,0x00,0x5E,0x01,0x00,0x01,0x00,0x00,
0x8E,0x00,0x68,0x8F,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0x01,0x00,0x00,
0x1F,0x01,0x7C,0x8F,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x22,0x01,0x90,0x8F,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x0E,0x01,0xA4,0x8F,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x11,0x01,0xB8,0x8F,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x2D,0x01,0xD0,0x8F,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x2E,0x01,0xE8,0x8F,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x31,0x01,0x04,0x90,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x34,0x01,0x20,0x90,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x45,0x01,0x34,0x90,0x26,0x00,0x00,0x00,0x2C,0x01,0x00,0xFF,0x00,0x00,
0x50,0x01,0x48,0x90,0x26,0x00,0x00,0x00,0xA0,0x00,0x00,0xFF,0x00,0x00,
0x51,0x01,0x60,0x90,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x54,0x01,0x74,0x90,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x57,0x01,0x8C,0x90,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x60,0x01,0xA4,0x90,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x63,0x01,0xB8,0x90,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x66,0x01,0xD0,0x90,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x6F,0x01,0xE8,0x90,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x72,0x01,0xFC,0x90,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x75,0x01,0x14,0x91,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x7E,0x01,0x2C,0x91,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x81,0x01,0x40,0x91,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x84,0x01,0x58,0x91,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x8D,0x01,0x70,0x91,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x90,0x01,0x84,0x91,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x93,0x01,0x9C,0x91,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x9C,0x01,0xB4,0x91,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x9F,0x01,0xC8,0x91,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0xA2,0x01,0xE0,0x91,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0xAB,0x01,0xF8,0x91,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0xAE,0x01,0x0C,0x92,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0xB1,0x01,0x24,0x92,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0xBA,0x01,0x3C,0x92,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0xBD,0x01,0x50,0x92,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0xC0,0x01,0x68,0x92,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0xC9,0x01,0x80,0x92,0x26,0x00,0x00,0x00,0x90,0x01,0x00,0x01,0x00,0x00,
0xCA,0x01,0x98,0x92,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0xCD,0x01,0xAC,0x92,0x26,0x00,0x00,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0xD6,0x01,0xC4,0x92,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0xFF,0x00,0x00,
0xF6,0x01,0xD8,0x92,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0xFF,0x00,0x00,
0xCE,0x01,0xEC,0x92,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0xFE,0x01,0x00,0x93,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0xEE,0x01,0x14,0x93,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0xE6,0x01,0x28,0x93,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0xDE,0x01,0x3C,0x93,0x26,0x00,0x00,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0x06,0x02,0x50,0x93,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0xFF,0x00,0x00,
0x07,0x02,0x68,0x93,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x08,0x02,0x80,0x93,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x0F,0x02,0x9C,0x93,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x10,0x02,0xB4,0x93,0x26,0x00,0x00,0x00,0x96,0x00,0x00,0x01,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};*/
__int16 word_99BA6[] = { 0 }; // weak
__int16 word_99BA8[] = { 250 }; // weak
char byte_99BAC[] = { '\0' }; // weak
char *off_9AB44[2] = { (char*)"             Designed by", (char*)"BULLFROG PRODUCTIONS LTD" }; // weak
char byte_9AD04 = '\0'; // weak
char byte_9AD08 = '\0'; // weak
char byte_9AD09 = '\0'; // weak
char byte_9AD0C[] = { '\0' }; // weak
int dword_9AD88 = 0; // weak
__int16 mouseX_9AD8C = 320; // weak
__int16 mouseY_9AD8E = 200; // weak
//int dword_9AD90 = 13107520; // weak
char byte_9AD96 = '\0'; // weak
int dword_9AD98 = 0; // weak
__int16 word_9AD9C = 0; // weak
int dword_9AD9E = 0; // weak
__int16 word_9ADA2 = 0; // weak
int dword_9ADA4 = 0; // weak
__int16 word_9ADA8 = 0; // weak
__int16 word_9ADB4 = 0; // weak
int dword_9ADBC = 0; // weak
int dword_9ADC0 = 0; // weak
int dword_9ADC4 = 5; // weak
_UNKNOWN unk_9ADC8; // weak
__int16 word_9ADFA = 0; // weak
__int16 word_9ADFC = 0; // weak
//char aDataMusic00Dat[18] = "data/music0-0.dat"; // weak
char aDataMusic00Tab[18] = "data/music0-0.tab"; // weak
//char aDataSnds00Dat[17] = "data/snds0-0.dat"; // weak
char aDataSnds00Tab[17] = "data/snds0-0.tab"; // weak
int dword_9AF08 = 0; // weak
int dword_9AF0C = 0; // weak
int dword_9AF10 = 0; // weak
int dword_9AF14 = 0; // weak
_UNKNOWN unk_9AF18; // weak
char byte_9AF9C = '\0'; // weak
int dword_9AFA0 = 0; // weak
__int16 word_9AFA4 = 0; // weak
char byte_9AFA8 = '\0'; // weak
__int16 word_9AFC0[64] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
__int16 word_9B040[64] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
__int16 word_9B0C0[64] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
int dword_9B140 = 0; // weak
int dword_9B144 = 0; // weak
__int16 word_9B14A = 0; // weak
__int16 word_9B14C = 0; // weak
__int16 word_9B14E = 0; // weak
char byte_9B150 = '\0'; // weak
char byte_9B151 = '\0'; // weak
int dword_9B15C = 0; // weak
__int16 word_9B160[] = { 0 }; // weak
int dword_9B17A[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9B18E[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9B1A2[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9B1B6[6] = { 0, 0, 0, 0, 0, 0 }; // weak
char byte_9B1F2[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
int dword_9B7F2[256] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
int dword_9BBF2[256] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
int dword_9BFF2 = 0; // weak
__int16 word_9BFF6[] = { 0 }; // weak
int dword_9C022[8] = { 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_9C042[8] = { 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
char byte_9C062[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
char byte_9C068[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
char byte_9C06E[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
char byte_9C074[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
_DWORD byte_9C07A[39] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
int dword_9C116[8] = { 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_9C136[8] = { 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
char byte_9C156[16] =
{
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\x03',
  '\x03',
  '\x02',
  '\x03',
  '\x02',
  '\x02',
  '\x03',
  '\0'
}; // weak
char byte_9C166[] = { '\0' }; // weak
char byte_9C176[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
int dword_9C1A6[8] = { -1, -1, -1, -1, -1, -1, -1, -1 }; // weak
char aHmimdrv386[12] = "hmimdrv.386"; // weak
_UNKNOWN unk_9C1D2; // weak
int dword_9C1F2 = 0; // weak
_UNKNOWN unk_9C1FE; // weak
int dword_9C222 = 0; // weak
int dword_9C226 = 0; // weak
int dword_9C22A = 0; // weak
int (*byte_9C22E)(_DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int dword_9C234[] = { 0 }; // weak
int dword_9C238 = 0; // weak
__int16 word_9C23C = 0; // weak
int dword_9C9B4[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9C9C8[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9C9DC[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9C9F0[5] = { 0, 0, 0, 0, 0 }; // weak
char byte_9CA04[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
char byte_9D904[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
int dword_9D922[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9D936[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9D94A[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9D95E[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9D972[5] = { 0, 0, 0, 0, 0 }; // weak
char byte_9D986[] = { 'H' }; // weak
int dword_9D98F[] = { 0 }; // weak
__int16 word_9D993 = 0; // weak
char byte_9DF8F[640] =
{
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF'
}; // weak
char byte_9E20F[80] =
{
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF'
}; // weak
char byte_9E25F[80] =
{
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF'
}; // weak
char byte_9E2AF[80] =
{
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF'
}; // weak
char byte_9E2FF[] = { '\xFF' }; // weak
char byte_9E300[] = { '\xFF' }; // weak
char byte_9E301[] = { '\xFF' }; // weak
char byte_9E302[] = { '\xFF' }; // weak
char byte_9E303[1596] =
{
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF'
}; // weak
char byte_9E93F[640] =
{
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF'
}; // weak
char byte_9EBBF = '\0'; // weak
char byte_9EBC0 = '\0'; // weak
char byte_9EBC1 = '\0'; // weak
int dword_9EBC9 = 1; // weak
char byte_9EBDD = '\x01'; // weak
char byte_9EBE7 = '\x01'; // weak
char byte_9EBE8 = '\x01'; // weak
char byte_9EBE9 = '\x01'; // weak
char byte_9EBEA = '\x01'; // weak
char byte_9EBEB = '\x01'; // weak
char byte_9EBEC = '\x01'; // weak
char byte_9EBED = '\x01'; // weak
char byte_9EBF7 = '\x01'; // weak
char byte_9EBF8 = '\x01'; // weak
char byte_9EBF9 = '\x01'; // weak
char byte_9EBFA = '\x01'; // weak
char byte_9EBFB = '\x01'; // weak
char byte_9EBFC = '\x01'; // weak
char byte_9EC0D = '\0'; // weak
char byte_9EC17 = '\0'; // weak
char byte_9EC18 = '\0'; // weak
char byte_9EC19 = '\0'; // weak
char byte_9EC1A = '\0'; // weak
char byte_9EC1B = '\0'; // weak
char byte_9EC1C = '\0'; // weak
char byte_9EC5D[80] =
{
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01'
}; // weak
char byte_9ECAD = '\x7F'; // weak
char byte_9ECAE[] = { '\x7F' }; // weak
char byte_9ECB7[71] =
{
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F'
}; // weak
char byte_9ECFE = '\0'; // weak
char byte_9ECFF[] = { 'H' }; // weak
_UNKNOWN unk_9ED08; // weak
_UNKNOWN unk_9EE07; // weak
int dword_9EF06 = 0; // weak
__int16 word_9EF0A = 0; // weak
int dword_9EF0C = 0; // weak
char *off_9EF10[20] =
{
  (char*)"Error Code Does Not Indicate An Error",
  (char*)"Specified Driver Is Not Loaded",
  (char*)"Specified Pointer Is NULL",
  (char*)"Detection System Is Already Initialized",
  (char*)"File Open Failure",
  (char*)"Memory Allocation Failure",
  (char*)"Invalid Driver ID",
  (char*)"Driver Not Found",
  (char*)"Detection System Failed To Find Hardware",
  (char*)"Driver Already Loaded Using Specified Handle",
  (char*)"Invalid Handle",
  (char*)"No Handles Available",
  (char*)"Hardware Already Paused",
  (char*)"Hardware Not Paused",
  (char*)"Data Is Not Valid",
  (char*)"HMI*.386 File Open Failure",
  (char*)"Incorrect Port",
  (char*)"Incorrect IRQ",
  (char*)"Incorrect DMA",
  (char*)"Incorrect DMA/IRQ"
}; // weak
int dword_9EF60 = 0; // weak
int dword_9EF64 = 0; // weak
int dword_9EF6C[] = { 0 }; // weak
int dword_9EF80 = 0; // weak
int dword_9F19C = 0; // weak
int dword_9F1A0 = 0; // weak
char byte_9F1A8[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
__int16 word_9F1B0 = 0; // weak
__int16 word_9F1B6 = 0; // weak
//_UNKNOWN tempScreenBuffer_A0000; // weak
uint8_t tempScreenBuffer_A0000[307200];
__int16 word_A01C2 = 0; // weak
int dword_A01C4 = 0; // weak
int dword_A01CC = 0; // weak
__int16 word_A01D0[13] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_A01EA[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_A01FE = 0; // weak
__int16 word_A0202[13] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_A021C[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_A0230[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_A0244[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_A0258[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_A0280[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_A0294 = 0; // weak
__int16 word_A0298[] = { 0 }; // weak
int dword_A02B2[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_A02C6[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_A02DA = 0; // weak
__int16 word_A02DE[28] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
int dword_A0316 = 0; // weak
__int16 word_A031A[] = { 0 }; // weak
int dword_A0338[6] = { 0, 0, 0, 0, 0, 0 }; // weak
char byte_A0350[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
int dword_A0374[8] = { 1, 3, 5, 7, 194, 198, 202, 206 }; // weak
char byte_A0394[9] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
int dword_A039D = -1; // weak
char byte_A03A1[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
int dword_A03FB = 0; // weak
__int16 word_A03FF = 0; // weak
int dword_A0401[15] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_A043D = 0; // weak
int dword_A0441[15] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_A047D = 0; // weak
int dword_A0481[] = { 0 }; // weak
char byte_A04C1[16] =
{
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF'
}; // weak
char byte_A04D1 = '\0'; // weak
char byte_A04D2 = '\0'; // weak
_UNKNOWN unk_A05D1; // weak
int dword_A06DC = 0; // weak
int dword_A06E0 = 0; // weak
int dword_A06E4 = 0; // weak
int dword_A06E8 = 904; // weak
int dword_A06EC = 904; // weak
int dword_A06F0 = 904; // weak
char byte_A0704[32] =
{
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
char byte_A0724[16] =
{
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
char byte_A0734[9] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
char byte_A073D[27] =
{
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
char byte_A0758 = '\0'; // weak
char byte_A0759[11] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
char byte_A0764[11] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
int dword_A076F = 0; // weak
char byte_A0773 = '\0'; // weak
char byte_A0774 = '\0'; // weak
char byte_A0775[] = { '\0' }; // weak
char byte_A0776[18] =
{
  '\x03',
  '\x01',
  '\x04',
  '\x02',
  '\x05',
  '\b',
  '\v',
  '\t',
  '\f',
  '\n',
  '\r',
  '\x10',
  '\x13',
  '\x11',
  '\x14',
  '\x12',
  '\x15',
  '\0'
}; // weak
int dword_A0788 = 0; // weak
int dword_A078C = 0; // weak
char byte_A0794[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
int dword_A079A = 0; // weak
__int16 word_A079E = 0; // weak
int dword_A07A0 = 0; // weak
__int16 word_A07A4 = 0; // weak
int dword_A07A6 = 0; // weak
int dword_A07AA = 0; // weak
__int16 word_A07AE = 0; // weak
int dword_A07B0 = 0; // weak
__int16 word_A07B4 = 0; // weak
int dword_A07B6 = 0; // weak
__int16 word_A07BA = 0; // weak
int dword_A07BC = 0; // weak
int dword_A07C4 = 1; // weak
int dword_A07C8[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_A0808[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_A082C[16] = { 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 }; // weak
int dword_A086C[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_A08AC[16] = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 }; // weak
int dword_A08EC = 0; // weak
int dword_A08F0[16] =
{
  127,
  127,
  127,
  127,
  127,
  127,
  127,
  127,
  127,
  127,
  127,
  127,
  127,
  127,
  127,
  127
}; // weak
int dword_A0930[9] = { 127, 127, 127, 127, 127, 127, 127, 127, 127 }; // weak
int dword_A0954[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_A0994[18] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 875770417, 943142453 }; // weak
char byte_A09DE = '\0'; // weak
char byte_A09DF = '\0'; // weak
char byte_A09E0 = '\0'; // weak
char byte_A09E1 = '\0'; // weak
char byte_A09E2 = '\0'; // weak
char byte_A09E3 = '\0'; // weak
char byte_A09E4 = '\0'; // weak
char byte_A09E5 = '\0'; // weak
char byte_A09E6 = '\0'; // weak
char byte_A09E7 = '\0'; // weak
int dword_A09E8 = 0; // weak
__int16 word_A09EC = 0; // weak
char byte_A09EE = '\0'; // weak
char byte_A09EF = '\0'; // weak
int dword_A09F0 = 0; // weak
char byte_A09F4[] = { '\0' }; // weak
char byte_A09F5[] = { '\0' }; // weak
char byte_A09F6[46] =
{
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
char byte_A0A24[20] =
{
  '?',
  ':',
  '5',
  '0',
  ',',
  ')',
  '%',
  '$',
  '#',
  '\"',
  '!',
  ' ',
  '\x1F',
  '\x1E',
  '\x1D',
  '\x1C',
  '\x1B',
  '\x1A',
  '\x19',
  '\x18'
}; // weak
int dword_A0A38[12] =
{
  336926231,
  269554195,
  219024911,
  185338893,
  151652875,
  117966857,
  101058055,
  67437829,
  50594820,
  33686275,
  65794,
  0
}; // weak
int dword_A0A68[102] =
{
  343,
  363,
  385,
  408,
  432,
  458,
  485,
  514,
  544,
  577,
  611,
  647,
  1367,
  1387,
  1409,
  1432,
  1456,
  1482,
  1509,
  1538,
  1568,
  1601,
  1635,
  1671,
  2391,
  2411,
  2433,
  2456,
  2480,
  2506,
  2533,
  2562,
  2592,
  2625,
  2659,
  2695,
  3415,
  3435,
  3457,
  3480,
  3504,
  3530,
  3557,
  3586,
  3616,
  3649,
  3683,
  3719,
  4439,
  4459,
  4481,
  4504,
  4528,
  4554,
  4581,
  4610,
  4640,
  4673,
  4707,
  4743,
  5463,
  5483,
  5505,
  5528,
  5552,
  5578,
  5605,
  5634,
  5664,
  5697,
  5731,
  5767,
  6487,
  6507,
  6529,
  6552,
  6576,
  6602,
  6629,
  6658,
  6688,
  6721,
  6755,
  6791,
  7511,
  7531,
  7553,
  7576,
  7600,
  7626,
  7653,
  7682,
  7712,
  7745,
  7779,
  7815,
  7854,
  7863,
  7938,
  7984,
  8032,
  8084
}; // weak
int dword_A0C00[] = { 8138 }; // weak
int dword_A0C04[36] =
{
  324,
  306,
  289,
  272,
  257,
  248,
  229,
  216,
  204,
  193,
  182,
  172,
  161,
  144,
  153,
  134,
  129,
  124,
  115,
  108,
  102,
  96,
  91,
  86,
  686,
  726,
  770,
  816,
  864,
  916,
  990,
  1028,
  1088,
  1154,
  1222,
  1294
}; // weak
int dword_A0CA4 = 0; // weak
int dword_A0CA8 = 0; // weak
char byte_A0CC6 = '\0'; // weak
_UNKNOWN unk_A0E84; // weak
__int16 word_A0F00[128] =
{
  -18023,
  23756,
  15838,
  11878,
  9503,
  7919,
  6788,
  5939,
  5279,
  4751,
  4319,
  3959,
  3655,
  3394,
  3168,
  2970,
  2795,
  2640,
  2501,
  2376,
  2263,
  2160,
  2066,
  1980,
  1901,
  1827,
  1760,
  1697,
  1638,
  1584,
  1533,
  1485,
  1397,
  1320,
  1250,
  1188,
  1131,
  1080,
  1033,
  990,
  950,
  914,
  880,
  848,
  819,
  792,
  766,
  742,
  699,
  660,
  625,
  594,
  566,
  540,
  516,
  495,
  475,
  457,
  440,
  424,
  410,
  396,
  383,
  371,
  349,
  330,
  313,
  297,
  283,
  270,
  258,
  247,
  238,
  228,
  220,
  212,
  205,
  198,
  192,
  186,
  175,
  165,
  156,
  148,
  141,
  135,
  129,
  124,
  119,
  114,
  110,
  106,
  102,
  99,
  96,
  93,
  87,
  82,
  78,
  74,
  71,
  67,
  65,
  62,
  59,
  57,
  55,
  53,
  51,
  49,
  48,
  46,
  44,
  41,
  39,
  37,
  35,
  34,
  32,
  31,
  30,
  29,
  27,
  27,
  26,
  25,
  24,
  23
}; // weak
char byte_A1000[128] =
{
  '2',
  '1',
  '0',
  '/',
  '.',
  '-',
  ',',
  '+',
  '*',
  '*',
  ')',
  '(',
  '\'',
  '&',
  '%',
  '$',
  '$',
  '#',
  '\"',
  '!',
  '!',
  ' ',
  '\x1F',
  '\x1E',
  '\x1E',
  '\x1D',
  '\x1C',
  '\x1C',
  '\x1B',
  '\x1A',
  '\x1A',
  '\x19',
  '\x19',
  '\x18',
  '\x18',
  '\x17',
  '\x16',
  '\x16',
  '\x15',
  '\x15',
  '\x14',
  '\x14',
  '\x13',
  '\x13',
  '\x13',
  '\x12',
  '\x12',
  '\x11',
  '\x11',
  '\x10',
  '\x10',
  '\x10',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0E',
  '\x0E',
  '\x0E',
  '\r',
  '\r',
  '\r',
  '\f',
  '\f',
  '\f',
  '\v',
  '\v',
  '\v',
  '\v',
  '\n',
  '\n',
  '\n',
  '\n',
  '\t',
  '\t',
  '\t',
  '\t',
  '\t',
  '\b',
  '\b',
  '\b',
  '\b',
  '\b',
  '\a',
  '\a',
  '\a',
  '\a',
  '\a',
  '\x06',
  '\x06',
  '\x06',
  '\x06',
  '\x06',
  '\x06',
  '\x05',
  '\x05',
  '\x05',
  '\x05',
  '\x05',
  '\x05',
  '\x05',
  '\x04',
  '\x04',
  '\x04',
  '\x04',
  '\x04',
  '\x04',
  '\x03',
  '\x03',
  '\x03',
  '\x03',
  '\x03',
  '\x03',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
char byte_A1080[128] =
{
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  '+',
  ')',
  '(',
  '\'',
  '&',
  '%',
  '$',
  '#',
  '\"',
  '!',
  ' ',
  '\x1F',
  '\x1E',
  '\x1E',
  '\x1D',
  '\x1C',
  '\x1B',
  '\x1B',
  '\x1A',
  '\x19',
  '\x19',
  '\x18',
  '\x17',
  '\x17',
  '\x16',
  '\x16',
  '\x15',
  '\x15',
  '\x14',
  '\x14',
  '\x13',
  '\x13',
  '\x13',
  '\x12',
  '\x12',
  '\x11',
  '\x11',
  '\x11',
  '\x10',
  '\x10',
  '\x10',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\r',
  '\r',
  '\r',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\v',
  '\v',
  '\v',
  '\v',
  '\n',
  '\n',
  '\n',
  '\n',
  '\t',
  '\t',
  '\t',
  '\t',
  '\t',
  '\b',
  '\b',
  '\b',
  '\b',
  '\b',
  '\a',
  '\a',
  '\a',
  '\a',
  '\x06',
  '\x06',
  '\x06',
  '\x06',
  '\x06',
  '\x05',
  '\x05',
  '\x05',
  '\x05',
  '\x05',
  '\x04',
  '\x04',
  '\x04',
  '\x04',
  '\x04',
  '\x03',
  '\x03',
  '\x03',
  '\x03',
  '\x03',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
char byte_A1100[128] =
{
  '\x7F',
  'l',
  'b',
  'Z',
  'T',
  'P',
  'K',
  'H',
  'E',
  'B',
  '@',
  '=',
  ';',
  '9',
  '8',
  '6',
  '4',
  '3',
  '1',
  '0',
  '/',
  '-',
  ',',
  '+',
  '*',
  ')',
  '(',
  '\'',
  '&',
  '%',
  '$',
  '$',
  '#',
  '\"',
  '!',
  '!',
  ' ',
  '\x1F',
  '\x1E',
  '\x1E',
  '\x1D',
  '\x1D',
  '\x1C',
  '\x1B',
  '\x1B',
  '\x1A',
  '\x1A',
  '\x19',
  '\x18',
  '\x18',
  '\x17',
  '\x17',
  '\x16',
  '\x16',
  '\x15',
  '\x15',
  '\x15',
  '\x14',
  '\x14',
  '\x13',
  '\x13',
  '\x12',
  '\x12',
  '\x11',
  '\x11',
  '\x11',
  '\x10',
  '\x10',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0E',
  '\x0E',
  '\x0E',
  '\r',
  '\r',
  '\r',
  '\f',
  '\f',
  '\f',
  '\v',
  '\v',
  '\v',
  '\n',
  '\n',
  '\n',
  '\t',
  '\t',
  '\t',
  '\t',
  '\b',
  '\b',
  '\b',
  '\a',
  '\a',
  '\a',
  '\a',
  '\x06',
  '\x06',
  '\x06',
  '\x06',
  '\x05',
  '\x05',
  '\x05',
  '\x04',
  '\x04',
  '\x04',
  '\x04',
  '\x04',
  '\x03',
  '\x03',
  '\x03',
  '\x03',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
__int16 word_A1180[] = { -6656 }; // weak
__int16 word_A1182[] = { 1014 }; // weak
__int16 word_A1184[] = { -17364 }; // weak
int dword_A1186 = 0; // weak
int dword_A118A = 109; // weak
char byte_A11F0[28] =
{
  '\x03',
  '\x05',
  '\x7F',
  '\a',
  '4',
  '6',
  '\x0F',
  '\x17',
  '\x1F',
  '\'',
  '/',
  '7',
  '=',
  '?',
  'A',
  'C',
  '\t',
  '\v',
  '\x11',
  '\x13',
  '\x19',
  '\x1B',
  '!',
  '#',
  ')',
  '+',
  '1',
  '3'
}; // weak
__int16 word_A120C[224] =
{
  -19320,
  -23472,
  -27312,
  -31563,
  14394,
  16053,
  29428,
  29348,
  29268,
  29188,
  29188,
  29188,
  17430,
  17686,
  -23408,
  -23152,
  -31702,
  -31446,
  -31702,
  -31446,
  -31703,
  -31447,
  -31703,
  -31447,
  -31704,
  -31448,
  -31704,
  -31448,
  -19320,
  -23464,
  -27304,
  -31563,
  14394,
  16053,
  29316,
  29268,
  29220,
  29220,
  29268,
  29316,
  17480,
  17736,
  -23488,
  -23232,
  -31702,
  -31446,
  -31702,
  -31446,
  -31703,
  -31447,
  -31703,
  -31447,
  -31704,
  -31448,
  -31704,
  -31448,
  -19320,
  -23456,
  -27296,
  -31563,
  14394,
  16053,
  29316,
  29268,
  29220,
  29220,
  29268,
  29316,
  17430,
  17686,
  -23408,
  -23152,
  -31700,
  -31444,
  -31700,
  -31444,
  -31701,
  -31445,
  -31701,
  -31445,
  -31702,
  -31446,
  -31702,
  -31446,
  -19320,
  -23440,
  -27280,
  -31563,
  14394,
  16053,
  29316,
  29268,
  29220,
  29220,
  29268,
  29316,
  17480,
  17736,
  -23488,
  -23232,
  -31701,
  -31445,
  -31701,
  -31445,
  -31702,
  -31446,
  -31702,
  -31446,
  -31703,
  -31447,
  -31703,
  -31447,
  -19320,
  -23440,
  -27280,
  -31563,
  14394,
  16053,
  29268,
  29236,
  29220,
  29268,
  29284,
  29332,
  17603,
  17859,
  -23548,
  -23292,
  -31702,
  -31446,
  -31702,
  -31446,
  -31703,
  -31447,
  -31703,
  -31447,
  -31704,
  -31448,
  -31704,
  -31448,
  -19201,
  -23440,
  -27280,
  -31563,
  14394,
  16053,
  29236,
  29236,
  29236,
  29236,
  29236,
  29236,
  17480,
  17736,
  -23488,
  -23232,
  -31702,
  -31446,
  -31702,
  -31446,
  -31703,
  -31447,
  -31703,
  -31447,
  -31704,
  -31448,
  -31704,
  -31448,
  -19201,
  -23440,
  -27392,
  -31563,
  13114,
  14773,
  29188,
  29188,
  29188,
  29188,
  29188,
  29428,
  17408,
  17664,
  -23297,
  -23041,
  -31712,
  -31456,
  -31712,
  -31456,
  -31712,
  -31456,
  -31712,
  -31456,
  -31712,
  -31456,
  -31712,
  -31456,
  -19201,
  -23408,
  -27248,
  -31628,
  13114,
  14773,
  29188,
  29188,
  29188,
  29188,
  29188,
  29428,
  17408,
  17664,
  -23297,
  -23041,
  -31712,
  -31456,
  -31712,
  -31456,
  -31712,
  -31456,
  -31712,
  -31456,
  -31712,
  -31456,
  -31712,
  -31456
}; // weak
__int16 word_A1400[128] =
{
  1023,
  48,
  2047,
  304,
  3071,
  560,
  4095,
  816,
  5119,
  1072,
  6143,
  1328,
  7167,
  1584,
  8191,
  1840,
  9215,
  2096,
  10239,
  2352,
  11263,
  2608,
  12287,
  2864,
  13311,
  3120,
  14335,
  3376,
  15359,
  3632,
  16383,
  3888,
  17407,
  48,
  18431,
  304,
  19455,
  560,
  20479,
  816,
  21503,
  1072,
  22527,
  1328,
  23551,
  1584,
  24575,
  1840,
  25599,
  2096,
  26623,
  2352,
  27647,
  2608,
  28671,
  2864,
  29695,
  3120,
  30719,
  3376,
  31743,
  3632,
  32767,
  3888,
  -31745,
  48,
  -30721,
  304,
  -29697,
  560,
  -28673,
  816,
  -27649,
  1072,
  -26625,
  1328,
  -25601,
  1584,
  -24577,
  1840,
  -23553,
  2096,
  -22529,
  2352,
  -21505,
  2608,
  -20481,
  2864,
  -19457,
  3120,
  -18433,
  3376,
  -17409,
  3632,
  -16385,
  3888,
  -15361,
  48,
  -14337,
  304,
  -13313,
  560,
  -12289,
  816,
  -11265,
  1072,
  -10241,
  1328,
  -9217,
  1584,
  -8193,
  1840,
  -7169,
  2096,
  -6145,
  2352,
  -5121,
  2608,
  -4097,
  2864,
  -3073,
  3120,
  -2049,
  3376,
  -1025,
  3632,
  -1,
  3888
}; // weak
__int16 word_A1500[128] =
{
  3088,
  -31632,
  5374,
  -19320,
  5759,
  -23440,
  6375,
  -31563,
  7022,
  -31702,
  7965,
  -31446,
  3491,
  3964,
  5758,
  29268,
  0,
  -31702,
  1,
  -31446,
  6374,
  2986,
  7021,
  29236,
  8863,
  -31703,
  10054,
  -31447,
  7964,
  1767,
  8862,
  29220,
  3492,
  -31703,
  11305,
  -31447,
  10053,
  2038,
  11304,
  29268,
  14395,
  -31704,
  12815,
  -31448,
  12814,
  3842,
  4929,
  29284,
  16054,
  -31704,
  16057,
  -31448,
  14394,
  4009,
  16053,
  29332,
  16055,
  -31628,
  16058,
  -31371,
  16056,
  17603,
  16059,
  17859,
  0,
  -23548,
  1,
  -23292,
  5151,
  1649,
  5373,
  647,
  16060,
  -6640,
  16072,
  3195,
  794,
  2022,
  16072,
  -30985,
  16064,
  -32226,
  16062,
  -11648,
  16061,
  543,
  16074,
  902,
  16065,
  3075,
  16073,
  798,
  16074,
  -29620,
  16063,
  3157,
  16073,
  -15744,
  16068,
  -17276,
  16072,
  3757,
  16072,
  -11392,
  16066,
  -28802,
  16075,
  537,
  16075,
  -11546,
  16069,
  799,
  16070,
  -15488,
  16067,
  12927,
  16073,
  613,
  16073,
  -31975,
  4930,
  -11290,
  16071,
  13183,
  0,
  -31899,
  5152,
  -27280
}; // weak
__int16 word_A1608 = 30; // weak
__int16 word_A160A = 1568; // weak
int dword_A160C = 262144; // weak
int (__stdcall *dword_A1728)(_DWORD) = NULL; // weak
int (__stdcall *dword_A172C)(_DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_A1730)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int dword_A1734[64] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
__int16 word_A1834[] = { 0 }; // weak
__int16 word_A1836[63] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
__int16 word_A18B4[] = { 0 }; // weak
char byte_A18B8[] = { '\0' }; // weak
__int16 word_A18BA[] = { 0 }; // weak
__int16 word_A18BC[] = { 0 }; // weak
__int16 word_A18BE[] = { 0 }; // weak
__int16 word_A18C0[] = { 0 }; // weak
__int16 word_A18C2[] = { 0 }; // weak
int dword_A18C4[156] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
__int16 word_A1B34[] = { 0 }; // weak
char byte_A1B36[] = { '\0' }; // weak
char byte_A1B37[] = { '\0' }; // weak
char byte_A1B38[] = { '\0' }; // weak
char byte_A1B39[] = { '\0' }; // weak
char byte_A1B3A[] = { '\0' }; // weak
char byte_A1B3B[] = { '\0' }; // weak
__int16 word_A1B3C[] = { 0 }; // weak
__int16 word_A1B3E[] = { 0 }; // weak
__int16 word_A1B40[] = { 0 }; // weak
__int16 word_A1B42[] = { 0 }; // weak
__int16 word_A1B44[] = { 0 }; // weak
__int16 word_A1B46[] = { 0 }; // weak
__int16 word_A1B48[] = { 0 }; // weak
__int16 word_A1B4A[] = { 0 }; // weak
__int16 word_A1B4C[] = { 0 }; // weak
__int16 word_A1B4E[] = { 0 }; // weak
__int16 word_A1B50[] = { 0 }; // weak
_UNKNOWN unk_A1D34; // weak
__int16 word_A1D44 = 0; // weak
int dword_A1F24 = 0; // weak
int dword_A1F28 = 0; // weak
int dword_A1F2C = 0; // weak
int dword_A1F30 = 0; // weak
int dword_A1F34 = 0; // weak
int dword_A1F38 = 0; // weak
int dword_A1F3C = 0; // weak
_UNKNOWN unk_A1F48; // weak
void *off_A2150 = (void *)0x20000; // weak
_UNKNOWN unk_A22BC; // weak
char *off_A282F = (char*)&byte_90000; // weak
void *off_A2995 = (void *)0x70000; // weak
_UNKNOWN unk_A2F5F; // weak
_UNKNOWN unk_A59DD; // weak
int (*off_A6368)(_DWORD, _DWORD) = (int (*)(uint32, uint32)) &_no_support_loaded; // weak
__int16 word_A636C = 0; // weak
int dword_A8874 = 16; // weak
char aColour256[11] = "COLOUR256 "; // weak
char aSs2[5] = "SS2 "; // weak
char aColour[8] = "COLOUR "; // weak
char aLc[4] = "LC "; // weak
char aBlack[7] = "BLACK "; // weak
char aBrun[6] = "BRUN "; // weak
char aCopy[6] = "COPY "; // weak
char aPstamp[8] = "PSTAMP "; // weak
//char aDataSearchDat[16] = "data/search.dat"; // weak
//char aPaused[8] = "PAUSED!"; // weak
//char aCursorUpMoveFo[31] = "Cursor up       Move forwards."; // weak
//char aCursorUpMoveFo_0[31] = "Cursor up       Move forwards."; // weak
//char aCursorDownMove[32] = "Cursor down     Move backwards."; // weak
//char aCursorDownMove_0[32] = "Cursor down     Move backwards."; // weak
//char aCursorLeftMove[27] = "Cursor left     Move left."; // weak
//char aCursorRightMov[28] = "Cursor right    Move right."; // weak
//char aLeftButtonUseS[39] = "Left button     Use spell to the left."; // weak
//char aLeftButtonUseS_0[39] = "Left button     Use spell to the left."; // weak
//char aRightButtonUse[40] = "Right button    Use spell to the right."; // weak
//char aRightButtonUse_0[40] = "Right button    Use spell to the right."; // weak
//char a10SelectAssign[40] = "1 - 0           Select assigned spells."; // weak
//char a10SelectAssign_0[40] = "1 - 0           Select assigned spells."; // weak
//char aSpaceRebirth[25] = "Space           Rebirth."; // weak
//char aShiftQExitToDo[29] = "Shift Q         Exit to dos."; // weak
//char aF5ReflectionsT[36] = "F5              Reflections toggle."; // weak
//char aF5ReflectionsT_0[36] = "F5              Reflections toggle."; // weak
//char aF6SkyToggle[28] = "F6              Sky toggle."; // weak
//char aF7ShadowsToggl[32] = "F7              Shadows toggle."; // weak
//char aF7ShadowsToggl_0[32] = "F7              Shadows toggle."; // weak
//char aF8IconsToggle[30] = "F8              Icons toggle."; // weak
//char aF8IconsToggle_0[30] = "F8              Icons toggle."; // weak
//char aF9SpeedBlurTog[35] = "F9              Speed blur toggle."; // weak
//char aF9SpeedBlurTog_0[35] = "F9              Speed blur toggle."; // weak
//char aF10StereoModes[37] = "F10             Stereo modes toggle."; // weak
//char aF10StereoModes_0[37] = "F10             Stereo modes toggle."; // weak
//char aReturn[17] = "Return          "; // weak
//char aLeftAndRightSp[33] = "Left and Right  Spell selection."; // weak
//char aLeftAndRightSp_0[33] = "Left and Right  Spell selection."; // weak
//char aIfYouAreExperi[57] = "If you are experiencing slowness, try Pressing F5,F6,F7."; // weak
//char aIfYouAreExperi_0[57] = "If you are experiencing slowness, try Pressing F5,F6,F7."; // weak
//char aMagicCarpetCom[57] = "Magic Carpet comes to you from Bullfrog Productions Ltd."; // weak
//char aMagicCarpetCom_0[57] = "Magic Carpet comes to you from Bullfrog Productions Ltd."; // weak
//char aAndWillBeRelea[48] = "And will be released on the 15th November 1994."; // weak
//char aAndWillBeRelea_0[48] = "And will be released on the 15th November 1994."; // weak
//char aCopyright1994B[41] = "Copyright 1994 Bullfrog Productions Ltd."; // weak
//char aCopyright1994B_0[41] = "Copyright 1994 Bullfrog Productions Ltd."; // weak
//char aGoodLuck[11] = "Good Luck!"; // weak
char aCCarpetCdSaveS[30] = "c:/carpet.cd/save/scanned.rmd"; // weak
char aDataSmatitleDa[18] = "data/smatitle.dat"; // weak
char aDataSmatitlePa[18] = "data/smatitle.pal"; // weak
char aDataPal10Dat[16] = "data/pal1-0.dat"; // weak
//char aLoadAllDataFil[20] = "Load all data files"; // weak
//char aInitialiseColo[25] = "Initialise Colour Lookup"; // weak
char aDigijoy[8] = "digijoy"; // weak
char aAnojoy[7] = "anojoy"; // weak
char aAnojoy4[8] = "anojoy4"; // weak
char aVfx[4] = "vfx"; // weak
char aHelp[5] = "help"; // weak
char aDebug[6] = "debug"; // weak
char aNetwork[8] = "network"; // weak
char aCustom[7] = "custom"; // weak
char aSetsound[9] = "setsound"; // weak
char aDemo[5] = "demo"; // weak
char aDetail[7] = "detail"; // weak
char aCheat[6] = "cheat"; // weak
char aName[5] = "name"; // weak
char aLevel[6] = "level"; // weak
char aMovie[6] = "movie"; // weak
char aRoll[5] = "roll"; // weak
char aTime[5] = "time"; // weak
char aPassword[9] = "password"; // weak
char aPlayers[8] = "players"; // weak
char aSession[8] = "session"; // weak
char byte_A9058 = '\0'; // weak
char aInitialiseMusi[17] = "Initialise Music"; // weak
char aInitialiseSoun[17] = "Initialise Sound"; // weak
char aSoundDisabled[15] = "Sound Disabled"; // weak
char aCarpetCd_2[11] = "\\carpet.cd"; // weak
char aSc[4] = "sC:"; // weak
_UNKNOWN unk_A90B8; // weak
_UNKNOWN unk_A90BC; // weak
char aSoundfxNone000[22] = "SOUNDFX = none 0 0 0\n"; // weak
char aMusicNone38800[22] = "MUSIC = none 388 0 0\n"; // weak
char aBfMusic[9] = "BF_MUSIC"; // weak
char aNone_0[5] = "none"; // weak
char aAdlib[6] = "ADLIB"; // weak
char aSblast[7] = "SBLAST"; // weak
char aSbpro[6] = "SBPRO"; // weak
char aAdlibg[7] = "ADLIBG"; // weak
char aSb16fm[7] = "SB16FM"; // weak
char aGravis[7] = "GRAVIS"; // weak
char aPasfm[6] = "PASFM"; // weak
char aCompatible[11] = "COMPATIBLE"; // weak
char aRoland_0[7] = "ROLAND"; // weak
char aSbawe32_0[8] = "SBAWE32"; // weak
char aGeneral_0[8] = "GENERAL"; // weak
char aWblast_0[7] = "WBLAST"; // weak
char aCarpetCd_3[11] = "\\carpet.cd"; // weak
_UNKNOWN unk_A91B4; // weak
_UNKNOWN unk_A91B8; // weak
char aSoundfxNone000_0[22] = "SOUNDFX = none 0 0 0\n"; // weak
char aMusicNone38800_0[22] = "MUSIC = none 388 0 0\n"; // weak
char aBfSound[9] = "BF_SOUND"; // weak
char aNone_1[5] = "none"; // weak
//char aLevels_0[7] = "levels"; // weak
//char aCarpetCd_0[11] = "\\carpet.cd"; // weak
//char aLc_0[4] = "lC:"; // weak
char aLevelsDdlevels[20] = "levels/ddlevels.dat"; // weak
char aLevelsDdlevels_0[20] = "levels/ddlevels.tab"; // weak
char aMovie_0[6] = "movie"; // weak
//char aSave_0[5] = "save"; // weak
char aD_1[4] = " d/"; // weak
//char aTmaps10[9] = "tmaps1-0"; // weak
//char aData_0[5] = "data"; // weak
//char aCreatingSetupD[29] = "Creating Setup Directories.."; // weak
//char aAp[5] = "ap%\n"; // weak
//char aSetupLevels[15] = "Setup levels.."; // weak
//char aDdlevels[9] = "ddlevels"; // weak
//char aSave[5] = "save"; // weak
//char aCarpetCd[11] = "\\carpet.cd"; // weak
//char aData[5] = "data"; // weak
//char aLevels[7] = "levels"; // weak
char aLoadLevel[11] = "Load Level"; // weak
char aGenerateMap[13] = "Generate map"; // weak
char aGenerateFeatur[18] = "Generate features"; // weak
char aInitialiseMode[18] = "Initialise Models"; // weak
char asc_A9608[2] = " "; // weak
char aNetbios[8] = "netbios"; // weak
_UNKNOWN unk_A961C; // weak
char aDataInstBnk[14] = "data\\inst.bnk"; // weak
char aDataDrumBnk[14] = "data\\drum.bnk"; // weak
char aSblast_0[7] = "SBLAST"; // weak
char aSbpro_0[6] = "SBPRO"; // weak
char aSb16[5] = "SB16"; // weak
char aAdlibg_0[7] = "ADLIBG"; // weak
char aMicrosoft8[11] = "MICROSOFT8"; // weak
char aMicrosoft16[12] = "MICROSOFT16"; // weak
char aPas8[5] = "PAS8"; // weak
char aPas16[6] = "PAS16"; // weak
char aGravis_0[7] = "GRAVIS"; // weak
char aSoundmasterii[14] = "SOUNDMASTERII"; // weak
char aCompatible_0[11] = "COMPATIBLE"; // weak
char asc_A971F[2] = "l"; // weak
//char aDataDtablesDat[17] = "data/dtables.dat"; // weak
char aNone[5] = "NONE"; // weak
char aSbawe32[8] = "SBAWE32"; // weak
char aWblast[7] = "WBLAST"; // weak
char aRoland[7] = "ROLAND"; // weak
char aGeneral[8] = "GENERAL"; // weak

int dword_A99A0_A99B8 = 5457241; // weak
//char aCarpetCd_1[11] = "\\carpet.cd"; // weak
//char aC[3] = "C:"; // weak
char aE388[5] = "e388"; // weak
char aNewt[5] = "newt"; // weak
char aDataScreensGco[25] = "data/screens/gconfig.dat"; // weak
char aDataScreensGco_0[25] = "data\\screens\\gconfig.pal"; // weak
char aDataScreensMai[26] = "data\\screens\\mainmenu.dat"; // weak
char aDataScreensMai_0[26] = "data\\screens\\mainmenu.pal"; // weak
char aIntroScrollDat[17] = "intro\\scroll.dat"; // weak
char asc_A9AE4[3] = "--"; // weak
char aIntroIntroDat[16] = "intro\\intro.dat"; // weak
char aIntroOutroDat[16] = "intro\\outro.dat"; // weak
char aDataScreensPmu_0[24] = "data\\screens\\pmulti.pal"; // weak
char aDataScreensPmu_1[24] = "data\\screens\\pmulti.dat"; // weak
char aIntroLevelw2Da[18] = "intro\\levelw2.dat"; // weak
char aIntroLevelw1Da[18] = "intro\\levelw1.dat"; // weak
char aIntroLeveloseD[19] = "intro\\levelose.dat"; // weak
char aDataScreensPpe[23] = "data/screens/pperf.pal"; // weak
char aDataScreensPpe_0[23] = "data\\screens\\pperf.dat"; // weak
char aIntroLogoDat[15] = "intro\\logo.dat"; // weak
char aIntroIntelDat[16] = "intro\\intel.dat"; // weak
char aIntroTitle03Da[19] = "intro\\title-03.dat"; // weak
//char aDataScreensLan[26] = "data\\screens\\language.pal"; // weak
//char aDataScreensLan_0[26] = "data\\screens\\language.dat"; // weak
char aTmaps10_0[9] = "tmaps1-0"; // weak
char aData_1[5] = "data"; // weak
char aCarpetCd_4[11] = "\\carpet.cd"; // weak
char aProductName[13] = "Product name"; // weak
//char aMagicCarpet[13] = "Magic Carpet"; // weak
char aVersionNumber[15] = "Version number"; // weak
char aBetaV80[10] = "Beta v8.0"; // weak
char aVersionDate[13] = "Version date"; // weak
char aJun051995[12] = "Jun 05 1995"; // weak
char a161643[9] = "16:16:43"; // weak
char aProgrammer[11] = "Programmer"; // weak
char aBullfrogSeanCo[23] = "Bullfrog, Sean Cooper."; // weak
char aSuppliedTo[12] = "Supplied to"; // weak
char aPublic[7] = "PUBLIC"; // weak
char aLevelNumber[13] = "Level Number"; // weak
char aTransferRate[15] = "Transfer rate:"; // weak
char aGameturn[10] = "GameTurn:"; // weak
char aSoundNumber[13] = "Sound Number"; // weak
char aGameTurn[10] = "Game turn"; // weak
char aThing[6] = "Thing"; // weak
char aMemoryUsedFree[19] = "Memory (Used/Free)"; // weak
//void *off_ABCE0_ABCDC = &unk_A7325; // weak
char aVipport[8] = "VIPPORT"; // weak
char aVfx1Cyberpuck[15] = "VFX1 CyberPuck"; // weak
//char aVesa[5] = "VESA"; // weak
char aHmidet386[11] = "hmidet.386"; // weak
char aHmidrv386[11] = "hmidrv.386"; // weak
char IsTable[256] =
{
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x03',
  '\x03',
  '\x03',
  '\x03',
  '\x03',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\n',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '8',
  '8',
  '8',
  '8',
  '8',
  '8',
  '8',
  '8',
  '8',
  '8',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  'X',
  'X',
  'X',
  'X',
  'X',
  'X',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\x98',
  '\x98',
  '\x98',
  '\x98',
  '\x98',
  '\x98',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\f',
  '\f',
  '\f',
  '\f',
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
char byte_AC168[8] = { '\x01', '\x02', '\x04', '\b', '\x10', ' ', '@', '\x80' }; // weak
int dword_AC190 = 0; // weak
__int16 word_AC194 = 0; // weak
__int16 word_AC196 = 0; // weak
int dword_AC1A0 = 0; // weak
char byte_AC1A8[256] =
{
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
TColor colorBuffer_AC2B8_AC2A8[0x100];
/*unsigned __int8 colorBuffer_AC2B8_AC2A8[772] =
{
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u
}; // weak*/
int dword_AC5AC = 0; // weak
FILE* dword_AC5B0 = nullptr; // weak
int (*dword_AC5B4)(_DWORD) = NULL; // weak
_UNKNOWN unk_AC5B8; // weak
__int16 word_AC5BE = 0; // weak
__int16 word_AC5C0 = 0; // weak
__int16 word_AC5C2 = 0; // weak
int dword_AC5D4_AC5C4 = 0; // weak
__int16 word_AC5CA = 0; // weak
__int16 word_AC5CC = 0; // weak
__int16 word_AC5CE = 0; // weak
int dword_AC5E0_AC5D0[] = { 0 }; // weak
int dword_AC5E0[] = { 0 }; // weak
int dword_AC5E4[] = { 0 }; // weak
int dword_AC5E8[] = { 0 }; // weak
int dword_AC5EC[] = { 0 }; // weak
int dword_AC5F0[] = { 0 }; // weak
int dword_AC5F4[595] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
int dword_ACF40 = 0; // weak
char byte_ACFE0 = '\0'; // weak
char byte_ACFE1 = '\0'; // weak
char byte_ACFE2 = '\0'; // weak
int dword_AD008_ACFF8 = 0; // weak
__int16 word_AD00C_ACFFC[173] = { 0, 0,  }; // weak
char byte_AD167_AD157[4096]; // weak
//char byte_AD158[9999]; // weak byte_AD167_AD157[1+
//char byte_AD167; // byte_AD167_AD157[16+
//char byte_AD248; // byte_AD167_AD157[241+
//char byte_AE058; // byte_AD167_AD157[3841+
char byte_AE067; // byte_AD167_AD157[3856+
char byte_AE167_AE157; // weak
char* dword_AE238_AE228[80]; // weak
//int dword_AE26C; // dword_AE238_AE228[17
//int dword_AE270; // dword_AE238_AE228[18
//int dword_AE284; // dword_AE238_AE228[23
//int dword_AE288; // dword_AE238_AE228[24
//int dword_AE28C; // dword_AE238_AE228[25
//int dword_AE290; // dword_AE238_AE228[26
//int dword_AE2B0; // dword_AE238_AE228[34
//int dword_AE2B4; // dword_AE238_AE228[35
//int dword_AE2B8; // dword_AE238_AE228[36
//int dword_AE2BC; // dword_AE238_AE228[37
//int dword_AE2C0; // dword_AE238_AE228[38
//int dword_AE2C4; // dword_AE238_AE228[39
//int dword_AE2C8; // dword_AE238_AE228[40
//int dword_AE2CC; // dword_AE238_AE228[41
//int dword_AE2D0; // dword_AE238_AE228[42
//int dword_AE2D4; // dword_AE238_AE228[43
//int dword_AE2D8; // dword_AE238_AE228[44
//int dword_AE2DC; // dword_AE238_AE228[45
//int dword_AE2E0; // dword_AE238_AE228[46
//int dword_AE2EC; // dword_AE238_AE228[49
//int dword_AE2F0; // dword_AE238_AE228[50
//int dword_AE2F4; // dword_AE238_AE228[51
//int dword_AE300; // dword_AE238_AE228[54
//int dword_AE314; // dword_AE238_AE228[59
//int dword_AE318; // dword_AE238_AE228[60
//int dword_AE31C; // dword_AE238_AE228[61
//int dword_AE320; // dword_AE238_AE228[62
//int dword_AE324; // dword_AE238_AE228[63
//int dword_AE328; // dword_AE238_AE228[64
//int dword_AE32C; // dword_AE238_AE228[65
//int dword_AE330; // dword_AE238_AE228[66
//int dword_AE334; // dword_AE238_AE228[67
//int dword_AE338; // dword_AE238_AE228[68
//int dword_AE33C; // dword_AE238_AE228[69
//int dword_AE34C; // dword_AE238_AE228[73
//int dword_AE350; // dword_AE238_AE228[74
//int dword_AE354; // dword_AE238_AE228[75
//int dword_AE358; // dword_AE238_AE228[76
//int dword_AE35C; // dword_AE238_AE228[77
//int dword_AE360; // dword_AE238_AE228[78
//int dword_AE364; // dword_AE238_AE228[79
TypeTab* begFont0Tab_AE3B8_AE3A8_26C3B8_26C3A8; // weak
uint8_t* begSky_AE3D8_AE3C8_26C3D8_26C3C8; // weak
Type_AE3E0* dword_AE3E0_AE3D0; // weak
Type_sub168* dword_AE3EC_AE3DC; // weak
uint8_t* begBlkDat_AE3F0_26C3F0_26C3E0; // weak
uint8_t* begSearch_AE3F4_26C3F4_26C3E4; // weak
uint8_t* begBscreen_AE3FC_AE3EC_26C3FC_26C3EC; // weak
//int dword_AE400_AE3F0(); // weak
uint8* blurBuffer_AE404_AE3F4; // weak
//int dword_AE408_AE3F8(); // weak
int dword_AE400; // weak
TColor* begPalMem_AE418_AE408_26C418_26C408; // weak
uint8_t* begTextDat_AE41C_AE40C_26C41C_26C40C; // weak
uint8_t* begPalData_AE424_AE414_26C424_26C414; // weak
TColor* begPalDat_AE428_AE418_26C428_26C418; // weak
TypeTab* begSprTab_AE42C_AE41C_26C42C_26C41C; // weak
TypeTab* begBuildTab_AE440_AE430_26C440_26C430; // weak
TypeTab* dword_AE44C_AE43C; // weak
TypeTab* begPointersTab_AE450_AE440_26C450_26C440; // weak
axis_3d word_AE454_AE444; // weak
//__int16 word_AE454_AE444; // weak
//__int16 word_AE446; // weak
//__int16 word_AE448; // weak
char origDebug_AE45A_AE44A; // weak
_BYTE byte_AE450[6]; // weak
char byte_AE456; // weak
_UNKNOWN unk_AE89E; // weak
_UNKNOWN unk_B0000; // weak
_DWORD dword_B3278; // weak
int dword_B3284; // weak
__int16 word_B328C; // weak
char byte_B32A0_B3290[256]; // weak
char byte_B33A0_B3390[256]; // weak
char byte_B34A0_B3490[256]; // weak
char byte_B35A0_B3590[256]; // weak
char byte_B36A0_B3690[256]; // weak
char byte_B37A0_B3790[256]; // weak
char byte_B38A0_B3890[256]; // weak
char byte_B39A0_B3990[256]; // weak
_UNKNOWN unk_B3AA0_B3A90; // weak
_UNKNOWN unk_B3CA0_B3C90; // weak
uint32 dword_B3EA0_B3E90x[4096][3]; // for 4K
int dword_B5CA0_B5C90; // weak
int dword_B5CA4_B5C94; // weak
int dword_B5CA8_B5C98; // weak
int dword_B5CAC_B5C9C; // weak
uint8* dword_B5CB0_B5CA0; // weak
int dword_B5CB4_B5CA4; // weak
int dword_B5CB8_B5CA8; // weak
int dword_B5CBC_B5CAC; // weak
int dword_B5CC0_B5CB0; // weak
int dword_B5CC4_B5CB4; // weak
int dword_B5CC8_B5CB8; // weak
int dword_B5CCC_B5CCC; // weak
int dword_B5CD0_B5CC0; // weak
int sin_B5CD4_B5CC4; // weak
int dword_B5CD8_B5CC8; // weak
int sin_B5CDC_B5CCC; // weak
int cosRoll_B5CE0_B5CD0; // weak
int heightViewPort_B5CE4_B5CD4; // weak
int cos_B5CE8_B5CD8; // weak
int dword_B5CEC_B5CDC; // weak
int dword_B5CF0_B5CE0; // weak
int dword_B5CF4_B5CE4; // weak
int posZ_B5CF8_B5CE8; // weak
int dword_B5CFC_B5CEC; // weak
int dword_B5D00_B5CF0; // weak
int dword_B5D04_B5CF4; // weak
int dword_B5D08_B5CF8; // weak
int dword_B5D0C_B5CFC; // weak
int cos_B5D10_B5D00; // weak
int fowDist_B5D14_B5D04; // weak
int sinRoll_B5D18_B5D08; // weak
int dword_B5D1C_B5D0C; // weak
int dword_B5D20_B5D10; // weak
int dword_B5D24_B5D14; // weak
int dword_B5D28_B5D18; // weak
int dword_B5D2C_B5D1C; // weak
int dword_B5D30_B5D20; // weak
int dword_B5D34_B5D24; // weak
__int16 yaw_B5D38_B5D28; // weak
__int16 posY_B5D3A_B5D2A; // weak
__int16 posX_B5D3C_B5D2C; // weak
char byte_B5D3E_B5D2E; // weak
char byte_B5D3F_B5D2F; // weak
char byte_B5D30[9999]; // weak
char byte_B5D31[4812]; // weak
char byte_B6FFD[9999]; // weak
char byte_B6FFE[9999]; // weak
char byte_B6FFF[9999]; // weak
char byte_B7000[9999]; // weak
char byte_B7001[767]; // weak
int dword_B7300; // weak
__int16 word_B7304; // weak
__int16 word_B7306; // weak
__int16 word_B7308; // weak
int dword_B7310; // weak
__int16 word_B7314; // weak
_UNKNOWN unk_B7320; // weak
int dword_B76F0_B76E0; // weak
char byte_B7700_B76F0; // weak
char byte_B76F1; // weak
__int16 word_B7702_B76F2; // weak
__int16 word_B7704_B76F4; // weak
__int16 word_B7706_B76F6; // weak
__int16 word_B7708_B76F8; // weak
__int16 word_B770A_B76FA; // weak
__int16 word_B770C_B76FC; // weak
__int16 word_B770E_B76FE; // weak
__int16 word_B7710_B7700; // weak
__int16 word_B7712_B7702; // weak
__int16 word_B7714_B7704; // weak
__int16 word_B7706; // weak
__int16 word_B7708; // weak
__int16 word_B770A; // weak
__int16 word_B770C; // weak
__int16 word_B770E; // weak
__int16 word_B7710; // weak
__int16 word_B7712; // weak
__int16 word_B7714; // weak
__int16 word_B7716; // weak
__int16 word_B7718; // weak
char byte_B771A; // weak
typedef struct {
    char fog_B7934_B7924[0x4000]; // fix this size / find DOSBOX init !!! //0x14600
    char byte_BB934_BB924[0x10000]; // weak
    char byte_CB934_CB924[0x300]; // weak
    uint8 byte_CBC34_CBC24[0x300]; // weak
} TypeStrPal;
TypeStrPal strPal;
/*
char byte_B7934_B7924[9999]; // weak
char byte_BB934_BB924[18140]; // weak
char byte_CB934_CB924[768]; // weak
char byte_CBC34_CBC24[768]; // weak*/
_UNKNOWN unk_CBF34_CBF24; // weak
_UNKNOWN unk_CBF30; // weak
int dword_CBF34; // weak
__int16 word_CBF38; // weak
int dword_CBF50; // weak
int dword_CBF54; // weak
int dword_CBF58; // weak
int dword_CBF5C; // weak
int dword_CBF60; // weak
_UNKNOWN unk_CBF64; // weak
int dword_CBFC8; // weak
int dword_CBFCC; // weak
int dword_CBFD2; // weak
__int16 word_CBFD6; // weak
int dword_CBFD8; // weak
__int16 word_CBFDC; // weak
char byte_CBFDE; // weak
char byte_CBFDF; // weak
__int16 word_CBFE0[9999]; // weak
__int16 word_CBFE2[63]; // weak
__int16 word_CC060[9999]; // weak
char byte_CC0B2[29]; // weak
char byte_CC0CF[9999]; // weak
char byte_CC0D0[70]; // weak
int dword_CC116; // weak
int dword_CC120; // weak
int dword_CC124; // weak
int dword_CC128; // weak
int dword_CC12C; // weak
int dword_CC130; // weak
int dword_CC134; // weak
int dword_CC138; // weak
int dword_CC13C; // weak
int dword_CC140; // weak
int dword_CC144; // weak
_UNKNOWN unk_CC148; // weak
int dword_CC1AC; // weak
int dword_CC1B0; // weak
__int16 word_CC1B4; // weak
__int16 word_CC1B6; // weak
char byte_CC1CF[9999]; // weak
char mapTerrainType_CC1E0_CC1D0[15930]; // weak
char mapHeightmap_DC1E0_DC1D0[15932]; // weak
char mapShading_EC1E0_EC1D0[15920]; // weak
_UNKNOWN unk_F4240; // weak
char mapAngle_FC1E0_FC1D0[15919]; // weak
_UNKNOWN unk_100000; // weak
__int16 mapEntityIndex_10C1E0_10C1D0[7961]; // weak
_UNKNOWN unk_123333; // weak
_UNKNOWN unk_1234DC; // weak
__int16 word_12C1E0_12C1D0; // weak
__int16 word_12C1E0[9999]; // weak
__int16 word_12C1E2[959]; // weak
int dword_12C960; // weak
int dword_12C964; // weak
int dword_12C968; // weak
int dword_12C96C; // weak
int dword_12C970; // weak
int dword_12C974; // weak
_UNKNOWN unk_12C978; // weak
char byte_12C9A0_12C990[32]; // weak
__int16 word_12C9C0_12C9B0[16]; // weak
__int16 word_12C9E0_12C9D0[16]; // weak
char byte_12CA00_12C9F0[32]; // weak
__int16 word_12CA20_12CA10; // weak
_UNKNOWN unk_12CA50; // weak
int dword_12CA68; // weak
bool bool_12CA7C_12CA6C; // weak
__int16 word_12CA80_12CA70[5]; // weak
__int16 word_12CA8A_12CA7A[5]; // weak
__int16 word_12CA94_12CA84[5]; // weak
__int16 word_12CA9E_12CA8E[5]; // weak
__int16 word_12CAA8_12CA98[5]; // weak
__int16 word_12CAB2_12CAA2[5]; // weak
int dword_12CABC_12CAAC; // weak
__int16 word_12CAC6_12CAB6; // weak
__int16 mouseX_12CAE0_12CAD0_12CAC0[6]; // weak
int dword_12CACC; // weak
__int16 mouseX_12CAE0_12CAD0; // weak
__int16 mouseY_12CAE2_12CAD2; // weak
char byte_12CAE4_12CAD4; // weak
char byte_12CAE5_12CAD5; // weak
char byte_12CAE6_12CAD6; // weak
char byte_12CAE7_12CAD7; // weak
char byte_12CAE8_12CAD8; // weak
//int begSptrsTab_12CAEC_2EAAEC_2EAADC; // weak
//int test_12CAF0_2EAAF0_2EAAE0; // weak
////int begSptrsDat_12CB64_2EAB64_2EAAE4; // weak
//int begGcSprTab_12CAF8_2EAAF8_2EAAE8; // weak
//int test_12CAFC_2EAAFC_2EAAEC; // weak
//int begGcSprDat_12CB00_2EAB00_2EAAF0; // weak
//int begMmSprTab_12CB04_2EAB04_2EAAF4; // weak
//int test_12CB08_2EAB08_2EAAF8; // weak
//int begMmSprDat_12CB0C_2EAB0C_2EAAFC; // weak
//int begPMultSprTab_12CB10_2EAB10_2EAB00; // weak
//int test_12CB14_2EAB14_2EAB04; // weak
//int begPMultSprDat_12CB18_2EAB18_2EAB08; // weak
//_DWORD begSFont0Tab_12CB28_2EAB28_2EAB18; // weak
//_DWORD begSFont1Tab_12CB34_2EAB34_2EAB24; // weak
//int begSFont2Tab_12CB40_2EAB40_2EAB30; // weak
//int test_12CB44_2EAB44_2EAB34; // weak
//int begSFont2Dat_12CB48_2EAB48_2EAB38; // weak
//int begLangSprTab_12CB58_2EAB58_2EAB48; // weak
//int test_12CB5C_2EAB5C_2EAB4C; // weak
//int begLangSprDat_12CB60_2EAB60_2EAB50; // weak
//int begTitle02Dat_12CB64_2EAB64_2EAB54; // weak
uint8_t* dword_12CB68_12CB58; // weak
uint8_t* dword_12CB6C_12CB5C; // weak
__int16 word_12CB70_12CB60; // weak
//int begGlobeDat_12CB72_2EAB72_2EAB62; // weak
uint8_t* dword_12CB76_12CB66; // weak
uint8_t* dword_12CB7A_12CB6A; // weak
__int16 word_12CB7E_12CB6E; // weak
//int begTimerDat_12CB80_2EAB80_2EAB70; // weak
uint8_t* dword_12CB84_12CB74; // weak
uint8_t* dword_12CB88_12CB78; // weak
__int16 word_12CB8C_12CB7C; // weak
//TColor* begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C; // weak
//int begMmMaskDat_12CBA0_2EABA0_2EAB90; // weak
//int begScreenBackup_12CBA4_2EABA4_2EAB94; // weak
//int begScreenBackup2_12CBA8_2EABA8_2EAB98; // weak
//int begBrightTable_12CBAC_2EABAC_2EAB9C; // weak
int dword_12CBB0_12CBA0; // weak
int dword_12CBA4; // weak
int dword_12CBA8; // weak
__int16 word_12CBBC_12CBAC; // weak
__int16 word_12CBBE_12CBAE; // weak
__int16 word_12CBC0_12CBB0; // weak
__int16 word_12CBC2_12CBB2; // weak
__int16 word_12CBB4; // weak
char byte_12CBC6_12CBB6; // weak
char byte_12CBC9_12CBB9; // weak
char byte_12CBCA_12CBBA; // weak
char byte_12CBBB; // weak
char byte_12CBCC_12CBBC; // weak
char byte_12CBCD_12CBBD; // weak
char mainMenuSelector_12CBCE_12CBBE; // weak
uint8_t byte_12CBCF_12CBBF; // weak
char byte_12CBD0_12CBC0; // weak
char byte_12CBD1_12CBC1; // weak
char byte_12CBD2_12CBC2; // weak
char byte_12CBD3_12CBC3; // weak
char byte_12CBD4_12CBC4; // weak
char byte_12CBD5_12CBC5; // weak
char byte_12CBD6_12CBC6; // weak
__int16 word_12CBC8; // weak
__int16 word_12CBCA; // weak
char byte_12CBCC; // weak
char byte_12CC10[32]; // weak
__int16 word_12CC30[32]; // weak
__int16 word_12CC70[32]; // weak
char byte_12CCB0[32]; // weak
__int16 word_12CCD0[32]; // weak
__int16 word_12CD10[9999]; // weak
__int16 word_12CD12[9999]; // weak
__int16 word_12CD14[9999]; // weak
__int16 word_12CD16[9999]; // weak
__int16 word_12CD18[236]; // weak
int dword_12CF00_12CEF0[529]; // weak
//int begTmapsTab_12D744_12D734_2EB744_2EB734x; // weak
Type_sub168_2* dword_12D748_12D738[529]; // weak
Type_sub168_2* dword_12DF8C_12DF7C[529]; // weak
char byte_12E7D0_12E7C0[529]; // weak
char byte_12E9E1_12E9D1[543]; // weak
int dword_12EBF0; // weak
__int16 word_12EBF4; // weak
char byte_12EC10_12EC00[9999]; // weak
char byte_12EC11_12EC01[9999]; // weak
char byte_12ED10_12ED00[256]; // weak
int dword_12EE10_12EE00; // weak
int dword_12EE14_12EE04; // weak
int dword_12EE18_12EE08; // weak
int dword_12EE1C_12EE0; // weak
int dword_12EE24_12EE14; // weak
int dword_12EE28_12EE18; // weak
int dword_12EE2C_12EE1C; // weak
char* dword_12EE30_12EE20; // weak
int dword_12EE38_12EE28; // weak
int dword_12EE3C_12EE2C; // weak
int dword_12EE40_12EE30; // weak
char byte_12EE44_12EE34[6]; // weak
int dword_12EE68_12EE58; // weak
char byte_12EE6E_12EE5E[6]; // weak
int dword_12EE94_12EE84; // weak
int dword_12EE98_12EE88; // weak
__int16 word_12EE9C_12EE8C[2]; // weak
//__int16 word_12EE8E; // weak
//__int16 word_12EE90; // weak
_UNKNOWN unk_12EE94; // weak
int dword_12EEA4; // weak
int dword_12EEA8; // weak
int dword_12EEAC; // weak
int dword_12EEB0; // weak
__int16 word_12EEB6; // weak
int16_t word_12EED6_12EEC6; // weak
int16_t word_12EED8_12EEC8; // weak
typedef struct {
    int16_t word_0;
    int16_t word_2;
    int16_t word_4;
    int8_t byte_6;
} Type_str_12EEDA_12EECA;
Type_str_12EEDA_12EECA str_12EEDA_12EECA; // weak
//__int16 word_12EECC; // weak
//__int16 word_12EECE; // weak
//char byte_12EED0; // weak
char byte_12EEE1_12EED1; // weak
int8_t pressedKeys_12EEF0_12EEE0[128]; // weak
//char byte_12EEF1_12EEE1; // pressedKeys_12EEF0_12EEE0[1]
//char byte_12EEEF; // pressedKeys_12EEF0_12EEE0[15]
//char byte_12EEF4; // pressedKeys_12EEF0_12EEE0[20]
//char byte_12EEFC; // pressedKeys_12EEF0_12EEE0[28]
//char byte_12EEFD; // pressedKeys_12EEF0_12EEE0[29]
//char byte_12EF06; // pressedKeys_12EEF0_12EEE0[38]
//char byte_12EF0A; // pressedKeys_12EEF0_12EEE0[42]
//char byte_12EF16; // pressedKeys_12EEF0_12EEE0[54]
//char byte_12EF18; // pressedKeys_12EEF0_12EEE0[56]
//char byte_12EF19; // pressedKeys_12EEF0_12EEE0[57]
//char byte_12EF1B; // pressedKeys_12EEF0_12EEE0[59]
//char byte_12EF37_12EF27; // pressedKeys_12EEF0_12EEE0[71]
//char byte_12EF38_12EF28; // pressedKeys_12EEF0_12EEE0[72]
//char byte_12EF39_12EF29; // pressedKeys_12EEF0_12EEE0[73]
//char byte_12EF3B_12EF2B; // pressedKeys_12EEF0_12EEE0[75]
//char byte_12EF2D; // pressedKeys_12EEF0_12EEE0[77]
//char byte_12EF2F; // pressedKeys_12EEF0_12EEE0[79]
//char byte_12EF40_12EF30; // pressedKeys_12EEF0_12EEE0[80]
//char byte_12EF31; // pressedKeys_12EEF0_12EEE0[81]
int8_t lastPressedKey_12EF70_12EF60; // lastPressedKey_12EF70_12EF60
char byte_12EF61; // byte_12EF61


_UNKNOWN unk_12EF6E; // weak
int mouseXY_12EF80_12EF70; // weak
_UNKNOWN unk_12EF84_12EF74; // weak
__int16 word_12EF86_12EF76; // weak
int dword_12EF88_12EF78; // weak
int mouseByteIndex2_12EF8C_12EF7C; // weak
Type_9AD90 mouseXY2_12EF90_12EF80; // weak
Type_9AD90 dword_12EF94_12EF84; // weak
int dword_12EF98_12EF88; // weak
int dword_12EF9C_12EF8C; // weak
int dword_12EFA0_12EF90; // weak
int dword_12EFA4_12EF94; // weak
int dword_12EFA8_12EF98; // weak
int dword_12EFAC_12EF9C; // weak
int dword_12EFA4; // weak
__int16 word_12EFC4_12EFB4; // weak
__int16 word_12EFC6_12EFB6; // weak
int dword_12EFC8_12EFB8; // weak
Type_9AD90 dword_12EFCC_12EFBC; // weak
__int16 word_12EFC0; // weak
__int16 word_12EFD2_12EFC2; // weak
__int16 word_12EFD4_12EFC4; // weak
__int16 word_12EFDA_12EFCA; // weak
__int16 mouseRightButton_12EFDC_12EFCC; // weak
__int16 mouseLeftButton_12EFDE_12EFCE; // weak
__int16 word_12EFE0_12EFD0; // weak
__int16 mouseRightButton2_12EFE2_12EFD2; // weak
__int16 mouseLeftButton2_12EFE4_12EFD4; // weak
int scrWidth_12EFF0_12EFE0; // weak
//uint8_t preReadBuffer_12EFF4[64000]; // weak
//uint8_t* begWscreen_2ECFF4_2ECFE4 = preReadBuffer_12EFF4; // weak
int scrHeight_12EFF8_12EFE8; // weak
int dword_12EFEC; // weak
int dword_12F000_12EFF0; // weak
int dword_12EFF4; // weak
int dword_12F008_12EFF8; // weak
int dword_12EFFC; // weak
int dword_12F000; // weak
int dword_12F004; // weak
int dword_12F018_12F008; // weak
int dword_12F00C; // weak
int dword_12F010; // weak
int dword_12F024_12F014; // weak
int dword_12F028_12F018; // weak
__int16 word_12F01C; // weak
__int16 typeResolution_12F02E_12F01E; // weak
int dword_12F020; // weak
__int16 word_12F024; // weak
int dword_12F028; // weak
__int16 word_12F02C; // weak
int dword_12F030; // weak
int dword_12F064; // weak
int dword_12F06A; // weak
void* dword_12F080_12F070; // weak
__int16 word_12F074; // weak
TColor byte_12F090_12F080[256]; // weak
TColor byte_12F390_12F380[256]; // weak
//_UNKNOWN unk_12F67E; // weak
__int16 word_12F690_12F680; // weak
int dword_12F6A0_12F690[9999]; // weak
int dword_12F6A4_12F694[9999]; // weak
int dword_12F6A8_12F698[9999]; // weak
int dword_1302A0_130290; // weak
int dword_130294; // weak
int dword_1302A8_130298; // weak
int dword_1302AC_13029C; // weak
char byte_1302B0_1302A0[9999]; // weak
char byte_1302B1_1302A1[4591]; // weak
int dword_131490; // weak
int dword_131494; // weak
int dword_131498; // weak
int freeMem_1314AC_13149C; // weak
int dword_1314A0; // weak
int dword_1314B8; // weak
__int16 word_1314BC[9999]; // weak
int dword_1314BE; // weak
__int16 word_1314C2; // weak
int dword_1314C4; // weak
__int16 word_1314C8; // weak
int dword_1314CA; // weak
__int16 word_1314CE; // weak
int dword_1314D0; // weak
__int16 word_1314D4; // weak
int dword_1314D6; // weak
__int16 word_1314DA[9999]; // weak
int dword_1314DC; // weak
__int16 word_1314E0; // weak
int dword_1314E2; // weak
__int16 word_1314E6; // weak
int dword_1314E8; // weak
__int16 word_1314EC; // weak
int dword_1314EE; // weak
__int16 word_1314F2; // weak
int dword_1314F4; // weak
__int16 word_1314F8[9999]; // weak
int dword_1314FA; // weak
__int16 word_1314FE; // weak
int dword_131500; // weak
__int16 word_131504; // weak
int dword_131506; // weak
__int16 word_13150A; // weak
int dword_13150C; // weak
__int16 word_131510; // weak
int dword_131512; // weak
__int16 word_131516[9999]; // weak
int dword_131518; // weak
__int16 word_13151C; // weak
int dword_13151E; // weak
__int16 word_131522; // weak
int dword_131524; // weak
__int16 word_131528; // weak
int dword_13152A; // weak
__int16 word_13152E; // weak
_UNKNOWN unk_131530; // weak
int dword_131554; // weak
int dword_131558; // weak
char byte_13155D; // weak
int dword_131560; // weak
int dword_131564; // weak
int dword_131568; // weak
int dword_131570; // weak
int dword_131574; // weak
_UNKNOWN unk_131578; // weak
int dword_131598; // weak
int dword_1315A4; // weak
__int16 word_1315A8; // weak
int dword_1315AC; // weak
__int16 word_1315B0; // weak
int dword_1315B4; // weak
__int16 word_1315B8; // weak
int dword_1315BC; // weak
__int16 word_1315C0; // weak
int dword_1315D4[9999]; // weak
int dword_1315D8; // weak
__int16 word_1315DC; // weak
int dword_1315E0[9999]; // weak
int dword_1315E4[9999]; // weak
int dword_1315E8[9999]; // weak
int dword_1315EC[9999]; // weak
int dword_1315F0; // weak
__int16 word_1315F4; // weak
int dword_1315F8; // weak
__int16 word_1315FC; // weak
int dword_131604; // weak
__int16 word_131608; // weak
int dword_131610[65]; // weak
char byte_131714[6]; // weak
int dword_131ADC; // weak
_UNKNOWN unk_131B70; // weak
int dword_131B94; // weak
int dword_131B98; // weak
char byte_131B9D; // weak
_UNKNOWN unk_131BA0; // weak
int dword_131BC0; // weak
_UNKNOWN unk_131BCC; // weak
_UNKNOWN unk_131BD0; // weak

//---------------- fixproc
int sub_369D0_36D90(Type_sub168* a1);
int nullsub_3(_DWORD a) { return 0; }; // weak
int nullsub_19(_DWORD a) { return 0; }; // weak
//_DWORD dos_getdiskfree(_DWORD a, uint32 b) { return 0; };// weak
_DWORD dos_getdrive(_DWORD a) { return 0; };// weak
_DWORD dos_getvect(_DWORD a) { return 0; };// weak
_DWORD dos_setvect(_DWORD a, _DWORD b, _DWORD c) { return 0; };// weak
_DWORD expand(_DWORD a, _DWORD b) { return 0; };// weak
int gettextposition(_DWORD a) { return 0; };// weak
_DWORD int386(_DWORD a, _DWORD b, _DWORD c) { return 0; };// weak
_DWORD int386x(_DWORD a, _DWORD b, _DWORD c, _DWORD d) { return 0; };// weak
void JUMPOUT(int adress) {};
void memset32(char* v32, int v35, int v25) {};

int nullsub_11(_DWORD a) { return 0; }; // weak
int nullsub_1(_DWORD a, _DWORD b) { return 0; }; // weak
int nullsub_2(void) { return 0; }; // weak
_DWORD outtext(char* text)
{
    printf(text);
    return 0;
};
void qmemcpy(int a, int b, char c) {};
_DWORD segread(_DWORD a) { return 0; };// weak
_DWORD settextposition(_DWORD a, _DWORD b) { return 0; };// weak
//_WORD* sub_27690(_WORD* result, int a2) { return 0; };

//unsigned __int16 DrawSprite_2DCB0_2DCF0(int a1, int a2) { return 0; };
//char sub_33800_33BF0(char a1, char a2, unsigned __int16 a3, unsigned __int8 a4) { return 0; };
//char sub_35F30_362F0(int a1, char a2, char a3, int a4, int a5, unsigned __int8 a6) { return 0; };
//char sub_3FCA0_3FFE0(int a1, __int16 a2, __int16 a3, __int16 a4, char a5, __int16 a6, __int16 a7, __int16 a8, __int16 a9, __int16 a10, __int16 a11) { return 0; };
_DWORD unknown_libname_1(_DWORD a) { return 0; };// weak

void _disable() {};
void _enable() {};
int _FDFS(void) { return 0; };// weak	
int __readgsbyte(int a) { return 0; };
int __readgsdword(int a) { return 0; };
int __readgsword(int a) { return 0; };
void __writegsbyte(int a, int b) {};
void __writegsdword(int a, int b) {};
void __writegsword(int a, int b) {};

//int __readeflags() { return 0; };
void __writeeflags(int a) {};
//_DWORD access(_DWORD a, _DWORD b) { return 0; };// weak
_DWORD gets(_DWORD a) { return 0; };// weak
//_DWORD mkdir(_DWORD a) { return 0; };// weak
//void __outbyte(int a, int b) {};
_DWORD outp(_DWORD a, char b) { return 0; };// weak
_DWORD read(_DWORD a, _DWORD b, _DWORD c) { return 0; };// weak
_DWORD close(_DWORD a) { return 0; };// weak
_DWORD creat(_DWORD a, _DWORD b) { return 0; };// weak
_DWORD setmode(_DWORD a, _DWORD b) { return 0; };// weak
_DWORD sopen(_DWORD a, _DWORD b, char c) { return 0; };
//_DWORD lseek(_DWORD a, _DWORD b, char c) { return 0; };// weak
_DWORD open(_DWORD a, _DWORD b) { return 0; };
//int __inbyte(int a) { return 0; };
_DWORD write(_DWORD a, _DWORD b, _DWORD c) { return 0; };// weak
void __inbytestring(int a, int b, int c) {};
_DWORD tolower(_DWORD a) { return 0; };// weak
//void __outword(int a, int b) {};
int __inword(int a) { return 0; };

//int DataFileIO::FileLengthBytes(int a) { return 0; };
int MK_FP(void* a, void* b) { return 0; };
//---------------- fixproc

uint8_t byte_9AD97 = 0;
uint32_t mouseButtonsStates_12EFB0_12EFA0 = 0;
uint16_t word_12EFD6_12EFC6 = 0;
uint16_t word_9AD94 = 0;
uint16_t word_12EFD8_12EFC8 = 0;
void UpdateMouseEventData_5BE72_5C382(uint32_t mouse_states, int32_t mouse_posx, int32_t mouse_posy)
{
    if (dword_9AD98)
    {
        byte_9AD97 = 1;
        mouseButtonsStates_12EFB0_12EFA0 = mouse_states;
        if ((typeResolution_12F02E_12F01E & 8) != 0)
        {
            mouse_posx /= 8;
            mouse_posy /= 8;
        }
        mouse_9AD90.x = mouse_posx;
        mouse_9AD90.y = mouse_posy;
        if (mouse_9AD90.x > 638)
            mouse_9AD90.x = 638;
        if (mouse_9AD90.y > 478)
            mouse_9AD90.y = 478;
        if ((mouseButtonsStates_12EFB0_12EFA0 & 2) != 0)
        {
            if (!mouseLeftButton2_12EFE4_12EFD4)
            {
                if (word_12EFD6_12EFC6 <= 0)
                {
                    word_12EFD6_12EFC6 = word_9AD94;
                }
                else
                {
                    word_12EFD8_12EFC8 = 1;
                }
            }
            if (!mouseLeftButton2_12EFE4_12EFD4 && !mouseLeftButton_12EFDE_12EFCE)
            {
                mouseLeftButton_12EFDE_12EFCE = 1;
                mouseX_9AD8C = mouse_posx;
                mouseY_9AD8E = mouse_posy;
            }
            mouseLeftButton2_12EFE4_12EFD4 = 1;
        }
        if ((mouseButtonsStates_12EFB0_12EFA0 & 4) != 0)
            mouseLeftButton2_12EFE4_12EFD4 = 0;
        if ((mouseButtonsStates_12EFB0_12EFA0 & 8) != 0)
        {
            if (!mouseRightButton2_12EFE2_12EFD2 && !mouseRightButton_12EFDC_12EFCC)
            {
                mouseRightButton_12EFDC_12EFCC = 1;
                mouseX_9AD8C = mouse_posx;
                mouseY_9AD8E = mouse_posy;
            }
            mouseRightButton2_12EFE2_12EFD2 = 1;
        }
        if ((mouseButtonsStates_12EFB0_12EFA0 & 0x10) != 0)
            mouseRightButton2_12EFE2_12EFD2 = 0;
        if ((mouseButtonsStates_12EFB0_12EFA0 & 0x20) != 0)
        {
            if (!word_12EFE0_12EFD0 && !word_12EFDA_12EFCA)
            {
                word_12EFDA_12EFCA = 1;
                mouseX_9AD8C = mouse_posx;
                mouseY_9AD8E = mouse_posy;
            }
            word_12EFE0_12EFD0 = 1;
        }
        if ((mouseButtonsStates_12EFB0_12EFA0 & 0x40) != 0)
            word_12EFE0_12EFD0 = 0;
        if (!dword_9AD88)
        {
            HIWORD(dword_12EFCC_12EFBC) = word_9AFA4;
            sub_5BB60_5C070();
            sub_5B650_5BB60();
            if ((typeResolution_12F02E_12F01E & 8) != 0)
                sub_61A1C_61F2C(*(int*)&dword_12EFCC_12EFBC >> 16);
        }
    }
}

void MouseEvents(uint32_t buttons, int x, int y)
{
    UpdateMouseEventData_5BE72_5C382(buttons, x, y);
};

//------------------------------------

//Type_str_AE400_AE3F0 str_AE400_AE3F0;

Type_str_AE400_AE3F0* str_AE400_AE3F0;

int dword_AE400_AE3F0() {
    return (int)str_AE400_AE3F0;
};

void dword_AE400_AE3F0(int input) {
    str_AE400_AE3F0 = (Type_str_AE400_AE3F0*)input;
};

Type_str_AE408_AE3F8* str_AE408_AE3F8;

int dword_AE408_AE3F8() {
    return (int)str_AE408_AE3F8;
};

void dword_AE408_AE3F8(int input) {
    str_AE408_AE3F8 = (Type_str_AE408_AE3F8*)input;
};

//------------------------------------

//----- (00010000) --------------------------------------------------------
void sub_10000()
{
  while ( 1 )
    __debugbreak();
}
// 10000: using guessed type void sub_10000();

//----- (00010010) --------------------------------------------------------
void sub_10010(__int16 a1, __int16 a2)
{
  word_9000E = a1;
  word_90010 = a2;
}
// 9000E: using guessed type __int16 word_9000E;
// 90010: using guessed type __int16 word_90010;

//SYNCHRONIZED WITH REMC1
uint8_t* sub_1002D(uint8_t* a1, uint8_t* a2)//1E102D_
{
    dword_90008 = a1;
    dword_90004 = a2;//fix dword_90004
    while (1)
    {
        qmemcpy(&dword_90012, (const void*)dword_90008, sizeof(dword_90012));
        dword_90008 += 4;
        qmemcpy(&word_9000C, (const void*)dword_90008, sizeof(word_9000C));
        dword_90008 += 2;
        if (word_9000C != -20718)
            break;
        sub_10166();
    }
    if (word_9000C != -3590)
        return 0;
    sub_100B8();
    return dword_90008;
}

//SYNCHRONIZED WITH REMC1
__int16 sub_100B8()
{
    __int16 result; // ax

    qmemcpy(&word_90016, (const void*)dword_90008, sizeof(word_90016));
    dword_90008 += 2;
    dword_90008 += 8;
    while (word_90016)
    {
        --word_90016;
        qmemcpy(&dword_90012, (const void*)dword_90008, sizeof(dword_90012));
        dword_90008 += 4;
        qmemcpy(&word_9000C, (const void*)dword_90008, sizeof(word_9000C));
        dword_90008 += 2;
        if (word_9000C == 7)
        {
            result = sub_101A1();
        }
        else if (word_9000C == 15)
        {
            result = sub_10254();
        }
        else
        {
            result = sub_10190();
        }
    }
    return result;
}

//----- (00010166) --------------------------------------------------------
__int16 sub_10166()
{
  __int16 result; // ax

  word_9000E = *(_WORD *)(dword_90008 + 2);
  result = *(_WORD *)(dword_90008 + 4);
  word_90010 = result;
  dword_90008 += 6;
  return result;
}
// 90008: using guessed type int dword_90008;
// 9000E: using guessed type __int16 word_9000E;
// 90010: using guessed type __int16 word_90010;

//----- (00010190) --------------------------------------------------------
int sub_10190()
{
  int result; // eax

  result = (unsigned __int16)dword_90012 - 6;
  dword_90008 += result;
  return result;
}
// 90008: using guessed type int dword_90008;
// 90012: using guessed type __int16 word_90012;

//SYNCHRONIZED WITH REMC1
__int16 sub_101A1()
{
    _WORD* v0; // edi
    __int16* v1; // esi
    __int16 result; // ax
    _BYTE* v3; // edi
    _BYTE* v4; // esi
    char v5; // dl
    _WORD* v6; // [esp-4h] [ebp-14h]
    _WORD* v7; // [esp+0h] [ebp-10h]
    __int16 i; // [esp+6h] [ebp-Ah]
    __int16 v9; // [esp+8h] [ebp-8h]
    int v10; // [esp+Ch] [ebp-4h]

    v10 = (unsigned __int16)word_9000E;
    v0 = (_WORD*)dword_90004;
    v1 = (__int16*)(dword_90008 + 2);
    v9 = *(_WORD*)dword_90008;
    do
    {
        while (1)
        {
            result = *v1++;
            v7 = v0;
            if (result >= 0)
                goto LABEL_10;
            if ((result & 0x4000) == 0)
                break;
            v0 = (_WORD*)((char*)v0 + v10 * -result);
        }
        v6 = v0;
        v3 = (uint8*)((char*)v0 + v10 - 1);
        if (byte_967E4 == 1)
        {
            if ((_BYTE)result)
                *v3 = result;
        }
        else
        {
            *v3 = result;
        }
        v0 = v6;
    LABEL_10:
        for (i = result; i; --i)
        {
            while (1)
            {
                LOBYTE(result) = *(_BYTE*)v1;
                v4 = (uint8*)((char*)v1 + 1);
                result = (unsigned __int8)result;
                v0 = (_WORD*)((char*)v0 + (unsigned __int8)result);
                v5 = *v4;
                v1 = (__int16*)(v4 + 1);
                if (v5 > 0)
                    break;
                result = *v1++;
                do
                {
                    *v0++ = result;
                    ++v5;
                } while (v5);
                if (!--i)
                    goto LABEL_18;
            }
            do
            {
                *v0++ = *v1++;
                --v5;
            } while (v5);
        }
    LABEL_18:
        v0 = (_WORD*)((char*)v7 + v10);
        --v9;
    } while (v9);
    dword_90008 = (uint8_t*)v1;
    return result;
}

//----- (00010254) --------------------------------------------------------
int sub_10254()
{
  _BYTE *v0; // edi
  char *v1; // esi
  __int16 v2; // bx
  __int16 v3; // cx
  char v4; // dl
  __int16 v5; // ax
  char v6; // dh
  char v7; // dh
  int result; // eax
  uint8_t* v9; // [esp-8h] [ebp-Ch]
  int v10; // [esp-4h] [ebp-8h]
  __int16 v11; // [esp+2h] [ebp-2h]

  v11 = word_9000E;
  v0 = (_BYTE *)dword_90004;
  v1 = (char *)dword_90008;
  v10 = (unsigned __int16)dword_90012 - 6;
  v9 = dword_90008;
  v2 = word_90010;
  do
  {
    ++v1;
    v3 = v11;
    do
    {
      v4 = *v1++;
      if ( v4 > 0 )
      {
        v3 -= (unsigned __int8)v4;
      }
      else
      {
        HIBYTE(v5) = -1;
        LOBYTE(v5) = v4;
        v3 += v5;
      }
      if ( v4 > 0 )
      {
        v7 = *v1++;
        do
        {
          if ( byte_967E4 == 1 )
          {
            if ( v7 )
              *v0 = v7;
          }
          else
          {
            *v0 = v7;
          }
          ++v0;
          --v4;
        }
        while ( v4 );
      }
      else
      {
        do
        {
          v6 = *v1++;
          if ( byte_967E4 == 1 )
          {
            if ( v6 )
              *v0 = v6;
          }
          else
          {
            *v0 = v6;
          }
          ++v0;
          ++v4;
        }
        while ( v4 );
      }
    }
    while ( v3 );
    --v2;
  }
  while ( v2 );
  result = v10;
  dword_90008 = v10 + v9;
  return result;
}
// 90004: using guessed type int dword_90004;
// 90008: using guessed type int dword_90008;
// 9000E: using guessed type __int16 word_9000E;
// 90010: using guessed type __int16 word_90010;
// 90012: using guessed type __int16 word_90012;
// 967E4: using guessed type char byte_967E4;

//----- (00010300) --------------------------------------------------------
void sub_10300()
{
  if ( word_90026 && sub_35AD0() )
  {
    word_AC5CC = 1;
  }
  else if ( word_AC5CE && (lastPressedKey_12EF70_12EF60 || mouseLeftButton_12EFDE_12EFCE || mouseRightButton_12EFDC_12EFCC) )
  {
    word_AC5CC = 1;
  }
  else
  {
    while ( dword_AC5D4_AC5C4 < (unsigned int)dword_9ADC4 )
    {
      if ( word_90026 && sub_35AD0() )
      {
        word_AC5CC = 1;
        return;
      }
      if ( word_AC5CE && (lastPressedKey_12EF70_12EF60 || mouseLeftButton_12EFDE_12EFCE || mouseLeftButton_12EFDE_12EFCE != mouseRightButton_12EFDC_12EFCC) )
      {
        word_AC5CC = 1;
        return;
      }
    }
    dword_AC5D4_AC5C4 = 0;
  }
}
// 90026: using guessed type __int16 word_90026;
// 9ADC4: using guessed type int dword_9ADC4;
// AC5C4: using guessed type int dword_AC5D4_AC5C4;
// AC5CC: using guessed type __int16 word_AC5CC;
// AC5CE: using guessed type __int16 word_AC5CE;
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFCC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFCE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;

//----- (000103C0) --------------------------------------------------------
unsigned int sub_103C0(void *a1, unsigned int a2)
{
  unsigned int result; // eax

  if ( a1 )
  {
    result = a2;
    qmemcpy((int)a1, (int)(const void *)dword_AC5AC, a2);
  }
  dword_AC5AC += a2;
  return result;
}
// AC5AC: using guessed type int dword_AC5AC;

//----- (000103F0) --------------------------------------------------------
int sub_103F0()
{
  int result; // eax

  dword_AC1A0 = dword_90028;
  DataFileIO::Read((FILE*)dword_AC5B0, (uint8_t*)&dword_AC190, 16);
  while ( word_AC194 != -3590 )
    printf("ERROR UNKNOWN FRAME TYPE\n");
  while ( (unsigned int)dword_AC190 >= 0xFA00 )
    printf("PAGE SIZE IS > BSCREEN\n");
  DataFileIO::Read(dword_AC5B0, (uint8_t*)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, dword_AC190 - 16);
  result = dword_AC190;
  dword_90028 += dword_AC190;
  return result;
}
// 5D113: using guessed type _DWORD printf(const char *, ...);
// 90028: using guessed type int dword_90028;
// AC190: using guessed type int dword_AC190;
// AC194: using guessed type __int16 word_AC194;
// AC1A0: using guessed type int dword_AC1A0;
// AC5B0: using guessed type int dword_AC5B0;
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;

//----- (000104D0) --------------------------------------------------------
void sub_104D0()
{
  int v0; // eax
  int v1; // eax
  unsigned int i; // ebx
  int v3; // ebp
  char *v4; // esi
  char *v5; // edi
  char v6; // al
  char v7; // al
  char *v8; // esi
  char *v9; // esi
  char *v10; // edi
  char v11; // al
  char v12; // al
  char *v13; // esi
  char *v14; // edi
  char v15; // al
  char v16; // al
  char *v17; // edi
  char v18; // al
  char v19; // al
  unsigned __int8 v20; // al
  int v21; // [esp+0h] [ebp-1Ch] BYREF
  int v22; // [esp+4h] [ebp-18h]
  char v23; // [esp+8h] [ebp-14h]

  //fix
  v22 = 0;
  //fix

  v23 = 0;
  byte_AC1A8[0] = 0;
  v0 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  dword_AC5AC = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  if ( word_AC194 == -3840 )
  {
    sub_103C0(0, dword_AC190 - 16);
    v1 = sub_103F0();
    //v0 = sub_104D0(v1);
    //fix !!!
    sub_104D0();
    //fix !!!
  }
  else if ( word_AC194 == -3590 )
  {
    for ( i = 0; ; ++i )
    {
      v0 = (unsigned __int16)word_AC196;
      if ( i >= (unsigned __int16)word_AC196 )
        break;
      v3 = dword_AC5AC;
      sub_103C0(&v21, 6u);
      switch ( (__int16)v22 )
      {
        case 4:
          sub_108C0();
          v4 = aColour256;
          v5 = &byte_AC1A8[strlen(byte_AC1A8)];
          do
          {
            v6 = *v4;
            *v5 = *v4;
            if ( !v6 )
              break;
            v7 = v4[1];
            v4 += 2;
            v5[1] = v7;
            v5 += 2;
          }
          while ( v7 );
          v23 = 1;
          break;
        case 7:
          v8 = aSs2;
          sub_10960();
          goto LABEL_23;
        case 11:
          v9 = aColour;
          sub_108C0();
          v10 = &byte_AC1A8[strlen(byte_AC1A8)];
          do
          {
            v11 = *v9;
            *v10 = *v9;
            if ( !v11 )
              break;
            v12 = v9[1];
            v9 += 2;
            v10[1] = v12;
            v10 += 2;
          }
          while ( v12 );
          v23 = 1;
          break;
        case 12:
          v8 = aLc;
          sub_10AB0();
          goto LABEL_23;
        case 13:
          memset((uint8*)dword_9001C, 0, (unsigned __int16)word_AC5C2 * (unsigned __int16)word_AC5C0);
          v8 = aBlack;
          goto LABEL_23;
        case 15:
          v8 = aBrun;
          sub_10BD0();
          goto LABEL_23;
        case 16:
          sub_103C0((void *)dword_9001C, (unsigned __int16)word_AC5C0 * (unsigned __int16)word_AC5C2);
          v13 = aCopy;
          v14 = &byte_AC1A8[strlen(byte_AC1A8)];
          do
          {
            v15 = *v13;
            *v14 = *v13;
            if ( !v15 )
              break;
            v16 = v13[1];
            v13 += 2;
            v14[1] = v16;
            v14 += 2;
          }
          while ( v16 );
          v21 = (unsigned __int16)word_AC5C2 * (unsigned __int16)word_AC5C0;
          break;
        case 18:
          sub_103C0(0, v21 - 6);
          v8 = aPstamp;
LABEL_23:
          v17 = &byte_AC1A8[strlen(byte_AC1A8)];
          do
          {
            v18 = *v8;
            *v17 = *v8;
            if ( !v18 )
              break;
            v19 = v8[1];
            v8 += 2;
            v17[1] = v19;
            v17 += 2;
          }
          while ( v19 );
          break;
        default:
          break;
      }
      dword_AC5AC = v3 + v21;
    }
  }
  if ( dword_AC5B4 )
    dword_AC5B4(v0);
  sub_10300();
  if ( v23 )
  {
    sub_5CC54_5D164();
    if ( word_90024 )
    {
      SetPalette_319A0_319E0(colorBuffer_AC2B8_AC2A8);
      v20 = sub_5CC70_5D180(colorBuffer_AC2B8_AC2A8, 0x3Fu, 0x3Fu, 0x3Fu);
      sub_24BF0(v20);
    }
  }
  if ( byte_90091 )
  {
    begWscreen_2ECFF4_2ECFE4 += 6720;
    Blit_5CDA0_5D2B0();
    begWscreen_2ECFF4_2ECFE4 -= 6720;
  }
  else
  {
    Blit_5CDA0_5D2B0();
  }
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 9001C: using guessed type int dword_9001C;
// 90024: using guessed type __int16 word_90024;
// 90091: using guessed type char byte_90091;
// AC190: using guessed type int dword_AC190;
// AC194: using guessed type __int16 word_AC194;
// AC196: using guessed type __int16 word_AC196;
// AC2A8: using guessed type unsigned __int8 colorBuffer_AC2B8_AC2A8[772];
// AC5AC: using guessed type int dword_AC5AC;
// AC5B4: using guessed type int (*dword_AC5B4)(_DWORD);
// AC5C0: using guessed type __int16 word_AC5C0;
// AC5C2: using guessed type __int16 word_AC5C2;
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//----- (000107C0) --------------------------------------------------------
int sub_107C0(__int16 a1, __int16 a2, int a3)
{
  word_90024 = a2;
  word_90030 = 0;
  word_AC5CA = 0;
  LOWORD(dword_AC5E0_AC5D0[0]) = 0;
  dword_9001C = (int)begWscreen_2ECFF4_2ECFE4;
  dword_AC5B0 = DataFileIO::CreateOrOpenFile((char*)&unk_9ADC8, 512);
  DataFileIO::Read(dword_AC5B0, (uint8_t*)&unk_AC5B8, 12);
  mouseRightButton_12EFDC_12EFCC = 0;
  mouseLeftButton_12EFDE_12EFCE = 0;
  dword_90028 += 12;
  lastPressedKey_12EF70_12EF60 = 0;
  word_AC5CC = 0;
  FlvInitSet_356E0_35AA0();
  for ( word_AC5CE = a1; !word_AC5CC; ++LOWORD(dword_AC5E0_AC5D0[0]) )
  {
    if ( SLOWORD(dword_AC5E0_AC5D0[0]) >= (unsigned __int16)word_AC5BE - 1 )
      break;
    sub_111B0(0, a3);
    sub_103F0();
    sub_104D0();
  }
  return DataFileIO::Close(dword_AC5B0);
}
// 9001C: using guessed type int dword_9001C;
// 90024: using guessed type __int16 word_90024;
// 90028: using guessed type int dword_90028;
// 90030: using guessed type __int16 word_90030;
// AC5B0: using guessed type int dword_AC5B0;
// AC5BE: using guessed type __int16 word_AC5BE;
// AC5CA: using guessed type __int16 word_AC5CA;
// AC5CC: using guessed type __int16 word_AC5CC;
// AC5CE: using guessed type __int16 word_AC5CE;
// AC5D0: using guessed type int dword_AC5E0_AC5D0[];
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFCC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFCE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//----- (000108C0) --------------------------------------------------------
unsigned int sub_108C0()
{
  unsigned int result; // eax
  char *v1; // ebx
  int i; // edi
  int v3; // esi
  unsigned int v4; // [esp+0h] [ebp-1Ch] BYREF
  int v5; // [esp+4h] [ebp-18h] BYREF
  char v6[20]; // [esp+8h] [ebp-14h] BYREF

  result = sub_103C0(&v5, 2u);
  v1 = (char *)&colorBuffer_AC2B8_AC2A8;
  for ( i = 0; (unsigned __int16)i < (unsigned __int16)v5; ++i )
  {
    sub_103C0(v6, 1u);
    v1 += 3 * (unsigned __int8)v6[0];
    v4 = 0;
    sub_103C0(&v4, 1u);
    if ( !(_WORD)v4 )
      v4 = 256;
    v3 = 0;
    do
    {
      sub_103C0(v1, 3u);
      ++v3;
      result = v4;
      v1 += 3;
    }
    while ( (unsigned __int16)v3 < (unsigned __int16)v4 );
  }
  return result;
}
// 10930: conditional instruction was optimized away because %var_1C.2!=0
// 108C0: using guessed type char var_14[20];

//----- (00010960) --------------------------------------------------------
__int16 sub_10960()
{
  __int16 result; // ax
  int v1; // ebp
  char *v2; // ebx
  unsigned __int16 v3; // di
  int j; // esi
  unsigned __int16 k; // cx
  int i; // [esp+0h] [ebp-28h]
  int v7; // [esp+4h] [ebp-24h] BYREF
  int v8; // [esp+8h] [ebp-20h] BYREF
  int v9; // [esp+Ch] [ebp-1Ch] BYREF
  char v10[4]; // [esp+10h] [ebp-18h] BYREF
  char v11[20]; // [esp+14h] [ebp-14h] BYREF

  result = sub_103C0(&v7, 2u);
  v1 = dword_9001C;
  for ( i = 0; (unsigned __int16)i < (unsigned __int16)v7; v1 += (unsigned __int16)word_AC5C0 )
  {
    sub_103C0(&v9, 2u);
    v2 = (char *)v1;
    if ( (v9 & 0x8000) == 0 )
    {
      v3 = v9;
      for ( j = 0; (unsigned __int16)j < v3; ++j )
      {
        sub_103C0(v11, 1u);
        v2 += (unsigned __int8)v11[0];
        sub_103C0(v10, 1u);
        if ( v10[0] >= 0 )
        {
          if ( v10[0] > 0 )
          {
            sub_103C0(v2, 2 * v10[0]);
            v2 += 2 * v10[0];
          }
        }
        else
        {
          sub_103C0(&v8, 2u);
          for ( k = 0; k < (int)abs8(v10[0]); ++k )
          {
            v2 += 2;
            *((_WORD *)v2 - 1) = v8;
          }
        }
      }
    }
    else if ( (v9 & 0x4000) != 0 )
    {
      v1 += (unsigned __int16)word_AC5C0 * (abs16(v9) - 1);
      --i;
    }
    else
    {
      *(_BYTE *)((unsigned __int16)word_AC5C0 + v1 - 1) = v9;
    }
    result = word_AC5C0;
    ++i;
  }
  return result;
}
// 9001C: using guessed type int dword_9001C;
// AC5C0: using guessed type __int16 word_AC5C0;
// 10960: using guessed type char var_14[20];
// 10960: using guessed type char var_18[4];

//----- (00010AB0) --------------------------------------------------------
__int16 sub_10AB0()
{
  int v0; // edi
  __int16 result; // ax
  char *v2; // ebx
  unsigned __int16 v3; // si
  int v4; // eax
  int i; // [esp+0h] [ebp-28h]
  int v6; // [esp+4h] [ebp-24h] BYREF
  char v7[4]; // [esp+8h] [ebp-20h] BYREF
  char v8[4]; // [esp+Ch] [ebp-1Ch] BYREF
  char v9[4]; // [esp+10h] [ebp-18h] BYREF
  char v10[20]; // [esp+14h] [ebp-14h] BYREF

  sub_103C0(&v6, 2u);
  v0 = (unsigned __int16)v6 * (unsigned __int16)word_AC5C0 + dword_9001C;
  result = sub_103C0(&v6, 2u);
  for ( i = 0; (unsigned __int16)i < (unsigned __int16)v6; v0 += (unsigned __int16)word_AC5C0 )
  {
    v2 = (char *)v0;
    v3 = 0;
    sub_103C0(v10, 1u);
    while ( v3 < (int)(unsigned __int8)v10[0] )
    {
      sub_103C0(v7, 1u);
      v2 += (unsigned __int8)v7[0];
      sub_103C0(v9, 1u);
      if ( v9[0] >= 0 )
      {
        if ( v9[0] <= 0 )
          goto LABEL_8;
        sub_103C0(v2, v9[0]);
        v4 = v9[0];
      }
      else
      {
        sub_103C0(v8, 1u);
        memset(v2, (unsigned __int8)v8[0], abs8(v9[0]));
        v4 = abs8(v9[0]);
      }
      v2 += v4;
LABEL_8:
      ++v3;
    }
    result = word_AC5C0;
    ++i;
  }
  return result;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 9001C: using guessed type int dword_9001C;
// AC5C0: using guessed type __int16 word_AC5C0;
// 10AB0: using guessed type char var_14[20];
// 10AB0: using guessed type char var_20[4];
// 10AB0: using guessed type char var_18[4];
// 10AB0: using guessed type char var_1C[4];

//----- (00010BD0) --------------------------------------------------------
__int16 sub_10BD0()
{
  int v0; // edi
  char *v1; // ebx
  int v2; // esi
  unsigned int v3; // eax
  __int16 result; // ax
  int i; // [esp+0h] [ebp-1Ch]
  char v6[4]; // [esp+4h] [ebp-18h] BYREF
  char v7[20]; // [esp+8h] [ebp-14h] BYREF

  v0 = dword_9001C;
  for ( i = 0; (unsigned __int16)i < (unsigned __int16)word_AC5C2; v0 += (unsigned __int16)word_AC5C0 )
  {
    v1 = (char *)v0;
    v2 = 0;
    sub_103C0(0, 1u);
    if ( word_AC5C0 )
    {
      do
      {
        v3 = sub_103C0(v7, 1u);
        if ( v7[0] >= 0 )
        {
          if ( v7[0] > 0 )
          {
            sub_103C0(v6, 1u);
            v3 = (unsigned int)memset(v1, (unsigned __int8)v6[0], v7[0]);
          }
        }
        else
        {
          v7[0] = abs8(v7[0]);
          v3 = sub_103C0(v1, v7[0]);
        }
        LOWORD(v3) = v7[0];
        v2 += v3;
        v1 += v7[0];
      }
      while ( (unsigned __int16)v2 < (unsigned __int16)word_AC5C0 );
    }
    result = word_AC5C0;
    ++i;
  }
  return result;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 9001C: using guessed type int dword_9001C;
// AC5C0: using guessed type __int16 word_AC5C0;
// AC5C2: using guessed type __int16 word_AC5C2;
// 10BD0: using guessed type char var_14[20];
// 10BD0: using guessed type char var_18[4];

//SYNCHRONIZED WITH REMC1
Type_AE3E0* sub_10CB0(unsigned __int16 a1)
{
    //unsigned __int16 v1; // bx
    Type_AE3E0* v2; // edi
    //Type_AE3E0* v3; // esi
    //int v4; // eax
    //int v5; // eax

    //v1 = a1;
    sub_42530_42870(9);
    v2 = (Type_AE3E0*)malloc_42540_42880(sizeof(Type_AE3E0));
    //v3 = v2;
    if (v2 && ((v2->var_2 = (Type_sub_AE3E0*)malloc_42540_42880(sizeof(Type_sub_AE3E0) * a1)) != 0))
    {
        v2->var_0 = a1;
        for (int i = 0; i < a1; i++)
            //while ( --v1 != 0xFFFF )
        {
            //v5 = 28 * v1;
            v2->var_2[i].var_4 = nullptr;
            v2->var_2[i].var_0 = 0;
        }
    }
    else if (v2)
    {
        free_426E0_42A20(v2);
        v2 = nullptr;
    }
    sub_42530_42870(10);
    return v2;
}

//SYNCHRONIZED WITH REMC1
void sub_10D40(Type_AE3E0* a1x, Type_sub168_2* a2x, __int16 a3)//1E1D40_
{
    __int16 v3; // si
    __int16 v4; // di
    __int16 i; // ax
    //Type_sub_AE3E0* v6; // edx
    //int v7; // ecx
    int v8; // eax
    //int v9; // edx
    //__int16 v11; // [esp+8h] [ebp-14h]

    //allert_error();//test it

    v3 = -1;
    v4 = -1;
    if (!a1x->var_0)
        return;
    for (i = 0; i < a1x->var_0; i++)
    {
        //v6 = &a1x->var_2[i];
        if (a1x->var_2[i].var_4)
        {
            if (!a1x->var_2[i].var_0)
                v4 = i;
        }
        else
        {
            v3 = i;
        }
    }
    if (v3 <= 0)
        v3 = v4;
    if (v3 <= -1)
        return;
    //v7 = (int)a2x->var_u32_0;
    v8 = a2x->var_u32_0->yy * a2x->var_u32_0->xx;
    //v11 = *(uint16*)&a2x->var_u32_0->data[v8];
    //v9 = 28 * v3;
    a1x->var_2[v3].var_4 = a2x;
    a1x->var_2[v3].var_12 = 6;
    a1x->var_2[v3].var_14 = v8 + 6;
    a1x->var_2[v3].var_16 = *(uint16*)&a2x->var_u32_0->datax[v8];
    a1x->var_2[v3].var_18 = a2x->var_u32_0->xx;
    a1x->var_2[v3].var_20 = a2x->var_u32_0->yy;
    a1x->var_2[v3].var_8 = v8 + 6;
    a1x->var_2[v3].var_22 = 1;
    a1x->var_2[v3].var_0 = 1;
    a1x->var_2[v3].var_24 = v3;
    a1x->var_2[v3].var_26 = a3;
}

//SYNCHRONIZED WITH REMC1
void sub_10EB0(Type_sub_AE3E0* a1x)//1E1EB0_
{
    Type_sub168_2_2* v1; // esi
    int v2; // edi
    uint8_t* v3; // eax
    __int16 v4; // cx
    int result; // eax

    //allert_error();//test it

    if (a1x->var_22 > a1x->var_16)
    {
        a1x->var_22 = 1;
        a1x->var_8 = a1x->var_14;
    }
    //v1 = (uint8_t*)**(_DWORD **)(a1 + 4);
    v1 = a1x->var_4->var_u32_0;
    v2 = a1x->var_8;
    sub_10010(a1x->var_18, 0);
    //v1 += 6;
    v3 = sub_1002D(&v1->datax[v2], v1->datax);
    v4 = a1x->var_22;
    result = v3 - v1->datax;
    a1x->var_8 = result;
    a1x->var_22 = v4 + 1;
}

//SYNCHRONIZED WITH REMC1
void sub_10F10(Type_sub_AE3E0* a1x)
{
    if (a1x)
    {
        a1x->var_0 = 0;
        a1x->var_4 = nullptr;
    }
}

//|SYNCHRONIZED WITH REMC1
Type_sub_AE3E0* sub_10FD0(Type_AE3E0* a1x, __int16 a2)
{
  Type_sub_AE3E0* result; // eax
  int v3; // edx

  //HIWORD(v3) = HIWORD(a1);
  result = a1x->var_2;
  v3 = a1x->var_0;
  if ( !a1x->var_0)
    return nullptr;
  while ( !result->var_4 || a2 != result->var_26)
  {
    v3--;
    result++;
    if ( !v3 )
      return nullptr;
  }
  return result;
}

//SYNCHRONIZED WITH REMC1
void sub_11010(Type_AE3E0* a1x)
{
    allert_error();//test it

    if (a1x)
    {
        free_426E0_42A20(a1x->var_2);
        a1x->var_2 = nullptr;
        free_426E0_42A20((void*)a1x);
        a1x = nullptr;
    }
}

//----- (00011050) --------------------------------------------------------
__int16 sub_11050()
{
  __int16 v0; // bx
  __int16 v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+4h] [ebp-10h]
  int v4[3]; // [esp+8h] [ebp-Ch] BYREF

  //fix
  v3 = 0;
  //fix

  v0 = 0;
  if ( byte_9002C )
    return 1;
  dos_getdrive((uint32)v4);
  if ( !dos_getdiskfree(v4[0], (uint32)v2) && v2[0] == -1 && !v2[1] && v3 == 134217729 )
  {
    v0 = 1;
    byte_9002C = 1;
  }
  return v0;
}
// 5D386: using guessed type _DWORD dos_getdrive(_DWORD);
// 5D3BC: using guessed type _DWORD dos_getdiskfree(_DWORD, _DWORD);
// 9002C: using guessed type char byte_9002C;
// 11050: using guessed type int var_C[3];

//----- (000111B0) --------------------------------------------------------
void sub_111B0(int a1, int a2)
{
  int v2; // eax
  __int16 v3; // bx
  char v4; // al

  LOWORD(a1) = word_90030;
  while ( 1 )
  {
    v2 = a2 + 7 * (__int16)a1;
    if ( LOWORD(dword_AC5E0_AC5D0[0]) != *(_WORD *)v2 )
      break;
    v3 = *(_WORD *)(v2 + 3);
    v4 = *(_BYTE *)(v2 + 2) - 65;
    word_90030 = a1;
    switch ( v4 )
    {
      case 0:
      case 32:
        dword_9ADC4 = v3;
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      case 1:
      case 33:
        sub_20E60_20E60();
        sub_5CEF0_5D400(v3);
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      case 4:
      case 36:
        sub_5D010_5D520();
        sub_5D070_5D580(v3);
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      case 10:
        sub_24B80();
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      case 11:
      case 43:
        if ( dword_9AF08 )
          sub_5D740(dword_9ADC0, dword_9AF08, v3);
        goto LABEL_9;
      case 12:
      case 44:
LABEL_9:
        sub_5D290_5D7A0(v3);
        word_AC5CA = 0;
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      case 14:
        if ( !byte_90090 )
          goto LABEL_26;
        sub_24AB0();
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      case 15:
        sub_24BB0();
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      case 16:
        sub_24B50((unsigned __int8 *)dword_AE238_AE228[v3]);
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      case 17:
      case 49:
        if ( !byte_939E4 )
          goto LABEL_26;
        sub_5D970(0, v3, -1);
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      case 18:
      case 50:
        if ( !byte_939E4 )
          goto LABEL_26;
        if ( !v3 )
          goto LABEL_21;
        sub_5DB20(0, v3);
        LOWORD(a1) = word_90030;
        ++a1;
        break;
      case 19:
      case 51:
        if ( !byte_939E4 )
          goto LABEL_26;
        if ( v3 )
        {
          sub_5DC60(0, v3);
          LOWORD(a1) = word_90030;
          ++a1;
        }
        else
        {
LABEL_21:
          sub_5D010_5D520();
          LOWORD(a1) = word_90030;
          ++a1;
        }
        break;
      case 23:
      case 55:
        sub_20E60_20E60();
        word_AC5CA = 0;
        goto LABEL_26;
      case 25:
      case 57:
        sub_5D290_5D7A0(v3);
        word_AC5CA = v3 + 1;
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      default:
LABEL_26:
        LOWORD(a1) = word_90030;
        ++a1;
        break;
    }
  }
  word_90030 = a1;
  if ( word_AC5CA && sub_5DD00(dword_CBFC8) )
  {
    sub_20E60_20E60();
    sub_5D290_5D7A0(word_AC5CA - 1);
  }
}
// 90030: using guessed type __int16 word_90030;
// 90090: using guessed type char byte_90090;
// 939E4: using guessed type char byte_939E4;
// 9ADC0: using guessed type int dword_9ADC0;
// 9ADC4: using guessed type int dword_9ADC4;
// 9AF08: using guessed type int dword_9AF08;
// AC5CA: using guessed type __int16 word_AC5CA;
// AC5D0: using guessed type int dword_AC5E0_AC5D0[];
// AE228: using guessed type int dword_AE238_AE228[17];
// CBFC8: using guessed type int dword_CBFC8;

//----- (00011410) --------------------------------------------------------
int sub_11410(int a1, int a2)
{
  int v2; // edx
  int i; // eax
  int v4; // eax
  int v5; // ecx
  int *v6; // ebx

  v2 = 1;
  for ( i = 6; i < 600; i += 6 )
  {
    if ( dword_AC5E8[i] == -1 )
      break;
    ++v2;
  }
  v4 = 3 * v2;
  dword_AC5E0[2 * v4] = a1;
  dword_AC5E8[2 * v4] = a1;
  dword_AC5EC[2 * v4] = 0;
  v5 = dword_AC5E8[6 * v2];
  dword_AC5E4[2 * v4] = a2;
  v6 = (int *)((char *)&dword_AD008_ACFF8 + 6 * v5);
  dword_AC5F0[2 * v4] = (int)v6;
  dword_AC5F4[2 * v4] = *v6;
  return v2;
}
// AC5E0: using guessed type int dword_AC5E0[];
// AC5E4: using guessed type int dword_AC5E4[];
// AC5E8: using guessed type int dword_AC5E8[];
// AC5EC: using guessed type int dword_AC5EC[];
// AC5F0: using guessed type int dword_AC5F0[];
// AC5F4: using guessed type int dword_AC5F4[595];
// ACFF8: using guessed type int dword_AD008_ACFF8;

//----- (00011490) --------------------------------------------------------
int sub_11490(int a1)
{
  dword_AC5E8[6 * a1] = -1;
  return 1;
}
// AC5E8: using guessed type int dword_AC5E8[];

//----- (000114B0) --------------------------------------------------------
int sub_114B0(int a1, _DWORD *a2, _DWORD *a3)
{
  int *v3; // eax
  char *v4; // edx
  int v5; // ecx
  int v6; // ebx
  int v7; // esi
  int v8; // edi
  int v9; // ebp

  v3 = &dword_AC5E0[6 * a1];
  v4 = (char *)v3[5];
  v5 = v3[4];
  *a2 = *v4;
  *a3 = v4[1];
  v6 = v3[3] + 1;
  v3[5] += 4;
  v3[3] = v6;
  if ( *(unsigned __int16 *)(v5 + 4) > v6 )
    return 1;
  v7 = v3[4];
  v3[3] = 0;
  v8 = v3[2];
  v3[4] = v7 + 6;
  ++v8;
  v9 = v3[1];
  v3[2] = v8;
  if ( v8 <= v9 )
    return 1;
  else
    return 2;
}
// AC5E0: using guessed type int dword_AC5E0[];

int sub_11540()//1E2540_
{
  int i; // edx
  _BYTE *v1; // edx
  unsigned __int8 j; // bl
  int v3; // esi
  __int16 v4; // cx
  int result; // eax
  char v6; // bh
  int v7; // [esp+0h] [ebp-18h]
  char v8; // [esp+4h] [ebp-14h]
  char v9; // [esp+8h] [ebp-10h]

  v7 = (int)begWscreen_2ECFF4_2ECFE4;
  sub_3EEA0_3F1E0((char*)"data/search.dat", begWscreen_2ECFF4_2ECFE4);
  for ( i = 6; i != 600; dword_AC5E0_AC5D0[i] = -1 )
    i += 6;
  v1 = (_BYTE *)begSearch_AE3F4_26C3F4_26C3E4;
  for ( j = 0; j < 0x20u; ++j )
  {
    v3 = 3 * j;
    v4 = 0;
    *(int *)((char *)&dword_AD008_ACFF8 + v3 * 2) = (int)v1;
    word_AD00C_ACFFC[v3] = 0;
    do
    {
      result = 0;
      do
      {
        v6 = *(_BYTE *)(v7 + (__int16)result + 32 * v4);
        if ( j == v6 )
        {
          if ( !v6 && v1 == (_BYTE *)begSearch_AE3F4_26C3F4_26C3E4 )
          {
            v8 = result;
            v9 = v4;
          }
          *v1 = result - v8;
          v1[1] = v4 - v9;
          v1[2] = j;
          v1 += 4;
          ++word_AD00C_ACFFC[3 * j];
        }
        ++result;
      }
      while ( (__int16)result < 32 );
      ++v4;
    }
    while ( v4 < 32 );
  }
  return result;
}

//SYNCHRONIZED WITH REMC1
int sub_11640(Type_AE400_29795* a1x, axis_3d* a2x, char a3)
{
  int v3; // edi
  int result; // eax
  int v5; // edi
  int v6; // edi
  __int16 v7; // si
  __int16 v8; // ax
  int v9; // ebx
  int v10; // ebx

  if ( (a3 & 2) != 0 )
  {
    v3 = a1x->var_u32_29951_156->v_12;
    if ( a2x->z < v3 + (__int16)sub_11F50(a2x) )
      return 1;
    v5 = a1x->var_u32_29951_156->v_10;
    if (a2x->z > v5 + (__int16)sub_11F50(a2x) )
      return 1;
  }
  if ( (a3 & 1) == 0 || (v6 = a1x->var_u32_29951_156->v_20, (result = ~v6 & sub_11810(a2x)) == 0) )
  {
    if ( (a3 & 4) != 0 )
    {
      v7 = sub_42180_424C0(&a1x->var_u32_29867_72, a2x);
      v8 = sub_42240_42580(0, v7);
      if ( v8 < 0 )
      {
        if ( v8 == -1 )
        {
          v10 = a1x->var_u32_29951_156->v_16;
          if ( (unsigned __int16)sub_42210_42550(0, v7) > v10 )
            return 1;
        }
      }
      else if ( v8 > 0 && v8 == 1 )
      {
        v9 = a1x->var_u32_29951_156->v_18;
        if ( (unsigned __int16)sub_42210_42550(0, v7) > v9 )
          return 1;
      }
    }
    return 0;
  }
  return result;
}

//SYNCHRONIZED WITH REMC1
int sub_11760(axis_3d* a1x)
{
  unsigned __int16 v1; // ax

  LOBYTE(v1) = a1x->x >> 8;
  HIBYTE(v1) = a1x->y >> 8;
  return 1 << (mapAngle_FC1E0_FC1D0[v1] & 0xF);
}

//SYNCHRONIZED WITH REMC1
int sub_11810(axis_3d* a1x)//1E2810_
{
  int v1; // edx
  int result; // eax

  v1 = a1x->x >> 8;
  result = 0;
  BYTE1(v1) = HIBYTE(a1x->y);
  switch ( mapTerrainType_CC1E0_CC1D0[(unsigned __int16)v1] )
  {
    case 0:
      result = 1;
      break;
    case 1:
      result = 2;
      break;
    case 2:
      result = 4;
      break;
    case 3:
      result = 8;
      break;
    case 4:
      result = 16;
      break;
    case 5:
      result = 32;
      break;
    case 8:
      result = 256;
      break;
    case 9:
      result = 512;
      break;
    case 10:
      result = 0x100000;
      break;
    case 11:
      result = 0x200000;
      break;
    case 12:
      result = 0x400000;
      break;
    case 13:
    case 14:
      return result;
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      result = 1024;
      break;
    case 21:
    case 22:
    case 24:
      result = 0x20000;
      break;
    case 23:
      result = 0x40000;
      break;
    case 25:
    case 27:
      result = 0x80000;
      break;
    case 26:
      result = 0x10000;
      break;
    default:
      result = 0x800000;
      break;
  }
  return result;
}

//SYNCHRONIZED WITH REMC1
bool sub_118C0(axis_3d* a1, axis_4d* a2, axis_3d* a3, axis_4d* a4)
{
  __int64 v4; // rax
  bool result; // eax

  result = 0;
  if ( abs16(a3->x - a1->x) < a2->var_u16_29875_80 + a4->var_u16_29875_80)
  {
    v4 = (__int16)(a3->y - a1->y);
    if ( (int)((HIDWORD(v4) ^ v4) - HIDWORD(v4)) < a2->var_u16_29877_82 + a4->var_u16_29877_82
      && (int)abs32((__int16)a1->z + a2->var_u16_29873_78 - ((__int16)a3->z + a4->var_u16_29873_78)) < a2->var_u16_29879_84 + a4->var_u16_29879_84)
    {
      return 1;
    }
  }
  return result;
}

//SYNCHRONIZED WITH REMC1
bool sub_11950(Type_AE400_29795* a1x, Type_AE400_29795* a2x)
{
  return sub_118C0(&a1x->var_u32_29867_72, &a1x->var_u16_29873_78, &a2x->var_u32_29867_72, &a2x->var_u16_29873_78);
}

//----- (00011980) --------------------------------------------------------
int sub_11980(int a1)
{
  int v1; // edx
  int v2; // ebp
  int v3; // edi
  int i; // ebx
  int v6; // ebx
  int v7; // [esp+0h] [ebp-1Ch] BYREF
  int v8; // [esp+4h] [ebp-18h] BYREF
  int v9; // [esp+8h] [ebp-14h]

  v1 = *(__int16 *)(a1 + 80) + 255;
  v9 = (*(__int16 *)(a1 + 72) + 128) >> 8;
  v2 = (*(__int16 *)(a1 + 74) + 128) >> 8;
  v3 = sub_11410(0, (v1 - (__CFSHL__(v1 >> 31, 8) + (v1 >> 31 << 8))) >> 8);
  if ( !v3 )
    return 0;
  while ( sub_114B0(v3, (uint32*)&v8, (uint32*)&v7) == 1 )
  {
    for ( i = 164 * mapEntityIndex_10C1E0_10C1D0[256 * (unsigned __int8)(v2 + v7) + (unsigned __int8)(v8 + v9)];
          ;
          i = 164 * *(unsigned __int16 *)(v6 + 20) )
    {
      v6 = dword_AE400_AE3F0() + 29795 + i;
      if ( v6 == dword_AE400_AE3F0() + 29795 )
        break;
      if ( (*(_BYTE *)(v6 + 16) & 8) != 0
        && (*(char *)(a1 + 66) == -1
         || *(_BYTE *)(a1 + 66) == *(_BYTE *)(v6 + 64) && *(char *)(a1 + 67) == -1
         || *(_BYTE *)(a1 + 66) == *(_BYTE *)(v6 + 64) && *(_BYTE *)(a1 + 67) == *(_BYTE *)(v6 + 65))
        && *(_WORD *)(a1 + 24) != *(_WORD *)(v6 + 24)
        && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)v6) )
      {
        sub_11490(v3);
        return v6;
      }
    }
  }
  sub_11490(v3);
  return 0;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// 10C1D0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7961];

//----- (00011AC0) --------------------------------------------------------
int sub_11AC0(_WORD *a1)
{
  int v1; // edx
  int v2; // ebp
  int v3; // edi
  int i; // ebx
  char v6; // dh
  __int16 v7; // ax
  int v8; // ebx
  int v9; // [esp+0h] [ebp-1Ch] BYREF
  int v10; // [esp+4h] [ebp-18h] BYREF
  int v11; // [esp+8h] [ebp-14h]

  v1 = (__int16)a1[40] + 255;
  v11 = ((__int16)a1[37] + 128) >> 8;
  v2 = ((__int16)a1[36] + 128) >> 8;
  v3 = sub_11410(0, (v1 - (__CFSHL__(v1 >> 31, 8) + (v1 >> 31 << 8))) >> 8);
  if ( !v3 )
    return 0;
  while ( sub_114B0(v3, (uint32*)&v10, (uint32*)&v9) == 1 )
  {
    for ( i = 164 * mapEntityIndex_10C1E0_10C1D0[256 * (unsigned __int8)(v11 + v9) + (unsigned __int8)(v2 + v10)];
          ;
          i = 164 * *(unsigned __int16 *)(v8 + 20) )
    {
      v8 = dword_AE400_AE3F0() + 29795 + i;
      if ( v8 == dword_AE400_AE3F0() + 29795 )
        break;
      if ( (*(_BYTE *)(v8 + 16) & 8) != 0 && *(_BYTE *)(v8 + 64) == 10 )
      {
        v6 = *(_BYTE *)(v8 + 65);
        if ( v6 == 39 || v6 == 40 || v6 == 45 )
        {
          v7 = a1[12];
          if ( v7 != *(_WORD *)(v8 + 24) && v7 != *(unsigned __int16 *)(v8 + 144) && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)v8) )
          {
            sub_11490(v3);
            return v8;
          }
        }
      }
    }
  }
  sub_11490(v3);
  return 0;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// 10C1D0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7961];

//----- (00011C00) --------------------------------------------------------
int sub_11C00(__int16 *a1)
{
  int v1; // edx
  int v2; // ebp
  int v3; // edi
  int i; // eax
  int v6; // ebx
  int v7; // [esp+0h] [ebp-1Ch] BYREF
  int v8; // [esp+4h] [ebp-18h] BYREF
  int v9; // [esp+8h] [ebp-14h]

  v1 = a1[40] + 255;
  v9 = (a1[37] + 128) >> 8;
  v2 = (a1[36] + 128) >> 8;
  v3 = sub_11410(0, (v1 - (__CFSHL__(v1 >> 31, 8) + (v1 >> 31 << 8))) >> 8);
  if ( !v3 )
    return 0;
  while ( sub_114B0(v3, (uint32*)&v8, (uint32*)&v7) == 1 )
  {
    for ( i = mapEntityIndex_10C1E0_10C1D0[256 * (unsigned __int8)(v7 + v9) + (unsigned __int8)(v2 + v8)];
          ;
          i = *(unsigned __int16 *)(v6 + 20) )
    {
      v6 = dword_AE400_AE3F0() + 29795 + 164 * i;
      if ( v6 == dword_AE400_AE3F0() + 29795 )
        break;
      if ( (*(_BYTE *)(v6 + 16) & 8) != 0
        && *(_BYTE *)(v6 + 64) == 10
        && *(_BYTE *)(v6 + 65) == 39
        && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)v6) )
      {
        sub_11490(v3);
        return v6;
      }
    }
  }
  sub_11490(v3);
  return 0;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// 10C1D0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7961];

//----- (00011D10) --------------------------------------------------------
int sub_11D10(int a1)
{
  int v1; // edx
  int v2; // ebp
  int v3; // edi
  int i; // ebx
  int v6; // ebx
  int v7; // [esp+0h] [ebp-1Ch] BYREF
  int v8; // [esp+4h] [ebp-18h] BYREF
  int v9; // [esp+8h] [ebp-14h]

  v1 = *(__int16 *)(a1 + 80) + 255;
  v9 = (*(__int16 *)(a1 + 72) + 128) >> 8;
  v2 = (*(__int16 *)(a1 + 74) + 128) >> 8;
  v3 = sub_11410(0, (v1 - (__CFSHL__(v1 >> 31, 8) + (v1 >> 31 << 8))) >> 8);
  if ( !v3 )
    return 0;
  while ( sub_114B0(v3, (uint32*)&v8, (uint32*)&v7) == 1 )
  {
    for ( i = 164 * mapEntityIndex_10C1E0_10C1D0[256 * (unsigned __int8)(v2 + v7) + (unsigned __int8)(v8 + v9)];
          ;
          i = 164 * *(unsigned __int16 *)(v6 + 20) )
    {
      v6 = dword_AE400_AE3F0() + 29795 + i;
      if ( v6 == dword_AE400_AE3F0() + 29795 )
        break;
      if ( (*(char *)(a1 + 66) == -1
         || *(_BYTE *)(a1 + 66) == *(_BYTE *)(v6 + 64) && *(char *)(a1 + 67) == -1
         || *(_BYTE *)(a1 + 66) == *(_BYTE *)(v6 + 64) && *(_BYTE *)(a1 + 67) == *(_BYTE *)(v6 + 65))
        && *(_WORD *)(a1 + 24) != *(_WORD *)(v6 + 24)
        && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)v6) )
      {
        sub_11490(v3);
        return v6;
      }
    }
  }
  sub_11490(v3);
  return 0;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// 10C1D0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7961];

//----- (00011E50) --------------------------------------------------------
int sub_11E50(__int16 *a1, char a2, char a3)
{
  int v3; // ebp
  __int16 i; // di
  int v5; // ebx
  char v6; // al
  int result; // eax
  unsigned int v8; // ebx
  int v9; // [esp+0h] [ebp-1Ch]
  __int16 v10; // [esp+4h] [ebp-18h]
  int v11; // [esp+8h] [ebp-14h]

  v3 = dword_AE400_AE3F0();
  v11 = (*a1 - 128) >> 8;
  v10 = 0;
  v9 = (a1[1] - 128) >> 8;
  do
  {
    for ( i = 0; i < 2; ++i )
    {
      v5 = 164 * mapEntityIndex_10C1E0_10C1D0[256 * (unsigned __int8)(v10 + v9) + (unsigned __int8)(i + v11)];
      while ( 1 )
      {
        v8 = v3 + 29795 + v5;
        if ( v8 <= v3 + 29795 )
          break;
        v6 = *(_BYTE *)(v8 + 64);
        dword_AE400_AE3F0(v3);
        if ( v6 == a2 && a3 == *(_BYTE *)(v8 + 65) && sub_42340_42680((axis_3d*)(uint16*)a1, (axis_3d*)(_WORD *)(v8 + 72)) <= 0x80 )
        {
          result = 1;
          v3 = dword_AE400_AE3F0();
          goto LABEL_13;
        }
        v5 = 164 * *(unsigned __int16 *)(v8 + 20);
        v3 = dword_AE400_AE3F0();
      }
    }
    ++v10;
  }
  while ( v10 < 2 );
  result = 0;
LABEL_13:
  dword_AE400_AE3F0(v3);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// 10C1D0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7961];

//----- (00011F50) --------------------------------------------------------
int sub_11F50(axis_3d* position)
{
  return sub_724C0_729D0(position->x, position->y);
}

//----- (000120B0) --------------------------------------------------------
int sub_120B0(int a1, unsigned __int8 a2, unsigned __int16 a3)
{
  unsigned int i; // esi
  int result; // eax
  int v5; // ebp
  int j; // esi
  int v7; // esi
  int v8; // ebp
  int v9; // eax
  int v10; // esi
  char v11; // cl
  int v12; // eax
  int v13; // esi
  int v14; // [esp+0h] [ebp-48h]
  int v15; // [esp+4h] [ebp-44h]
  int v16; // [esp+8h] [ebp-40h]
  int v17; // [esp+Ch] [ebp-3Ch]
  int v18; // [esp+14h] [ebp-34h]
  int v19; // [esp+18h] [ebp-30h]
  int v20; // [esp+1Ch] [ebp-2Ch]
  int v21; // [esp+20h] [ebp-28h]
  int v22; // [esp+28h] [ebp-20h]
  unsigned __int8 v23; // [esp+2Ch] [ebp-1Ch]
  int v24; // [esp+30h] [ebp-18h]

  v24 = 1 << a2;
  if ( a2 )
  {
    v14 = (*(__int16 *)(a1 + 72) + 128) >> 8;
    v22 = (*(__int16 *)(a1 + 80)
         + 255
         - (__CFSHL__((*(__int16 *)(a1 + 80) + 255) >> 31, 8)
          + ((*(__int16 *)(a1 + 80) + 255) >> 31 << 8))) >> 8;
    result = -v22;
    v20 = -v22;
    if ( -v22 <= v22 )
    {
      v17 = ((*(__int16 *)(a1 + 74) + 128) >> 8) - v22;
      do
      {
        v8 = -v22;
        if ( -v22 <= v22 )
        {
          v23 = v14 - v22;
          do
          {
            v9 = 164 * mapEntityIndex_10C1E0_10C1D0[256 * (unsigned __int8)v17 + v23];
            v10 = dword_AE400_AE3F0() + 29795;
            while ( 1 )
            {
              v13 = v9 + v10;
              if ( v13 == dword_AE400_AE3F0() + 29795 )
                break;
              if ( *(_WORD *)(a1 + 24) != *(_WORD *)(v13 + 24) )
              {
                v11 = *(_BYTE *)(v13 + 64);
                if ( v11 )
                {
                  if ( (*(_BYTE *)(v13 + 16) & 8) != 0
                    && ((unsigned __int16)v24 & *(_WORD *)(v13 + 28)) != 0
                    && (*(char *)(a1 + 66) == -1
                     || v11 == *(_BYTE *)(a1 + 66) && *(char *)(a1 + 67) == -1
                     || *(_BYTE *)(a1 + 66) == *(_BYTE *)(v13 + 64) && *(_BYTE *)(a1 + 67) == *(_BYTE *)(v13 + 65))
                    && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)v13) )
                  {
                    v12 = v13 + 6 * a2;
                    if ( *(_WORD *)(v12 + 94) )
                      *(_DWORD *)(v12 + 90) += a3;
                    else
                      *(_DWORD *)(v12 + 90) = a3;
                    *(_WORD *)(v13 + 6 * a2 + 94) = *(_WORD *)(a1 + 24);
                  }
                }
              }
              v10 = 164 * *(unsigned __int16 *)(v13 + 20);
              v9 = dword_AE400_AE3F0() + 29795;
            }
            ++v8;
            ++v23;
          }
          while ( v8 <= v22 );
        }
        result = ++v17;
        ++v20;
      }
      while ( v20 <= v22 );
    }
  }
  else
  {
    for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
    {
      if ( *(_BYTE *)(i + 65) == 2 && *(_WORD *)(i + 24) != *(_WORD *)(a1 + 24) && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)i) )
      {
        if ( *(_WORD *)(i + 94) )
          *(_DWORD *)(i + 90) += a3;
        else
          *(_DWORD *)(i + 90) = a3;
        *(_WORD *)(i + 94) = *(_WORD *)(a1 + 24);
      }
    }
    v18 = (*(__int16 *)(a1 + 72)
         - 128
         - (__CFSHL__((*(__int16 *)(a1 + 72) - 128) >> 31, 8)
          + ((*(__int16 *)(a1 + 72) - 128) >> 31 << 8))) >> 8;
    v16 = (*(__int16 *)(a1 + 80)
         + 255
         - (__CFSHL__((*(__int16 *)(a1 + 80) + 255) >> 31, 8)
          + ((*(__int16 *)(a1 + 80) + 255) >> 31 << 8))) >> 8;
    result = -v16;
    v15 = -v16;
    if ( -v16 <= v16 )
    {
      v19 = ((*(__int16 *)(a1 + 74)
            - 128
            - (__CFSHL__((*(__int16 *)(a1 + 74) - 128) >> 31, 8)
             + ((*(__int16 *)(a1 + 74) - 128) >> 31 << 8))) >> 8)
          - v16;
      do
      {
        v5 = -v16;
        if ( -v16 <= v16 )
        {
          v21 = v18 - v16;
          do
          {
            for ( j = 164 * mapEntityIndex_10C1E0_10C1D0[256 * (unsigned __int8)v19 + (unsigned __int8)v21];
                  ;
                  j = 164 * *(unsigned __int16 *)(v7 + 20) )
            {
              v7 = dword_AE400_AE3F0() + 29795 + j;
              if ( v7 == dword_AE400_AE3F0() + 29795 )
                break;
              if ( *(_WORD *)(a1 + 24) != *(_WORD *)(v7 + 24)
                && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)v7)
                && ((unsigned __int16)v24 & *(_WORD *)(v7 + 28)) != 0
                && (*(_BYTE *)(v7 + 16) & 8) != 0
                && (*(_BYTE *)(v7 + 64) != 3 || *(_BYTE *)(v7 + 65) != 2)
                && (*(char *)(a1 + 66) == -1
                 || *(_BYTE *)(a1 + 66) == *(_BYTE *)(v7 + 64) && *(char *)(a1 + 67) == -1
                 || *(_BYTE *)(a1 + 66) == *(_BYTE *)(v7 + 64) && *(_BYTE *)(a1 + 67) == *(_BYTE *)(v7 + 65)) )
              {
                if ( *(_WORD *)(v7 + 94) )
                  *(_DWORD *)(v7 + 90) += a3;
                else
                  *(_DWORD *)(v7 + 90) = a3;
                *(_WORD *)(v7 + 94) = *(_WORD *)(a1 + 24);
              }
            }
            result = v21 + 1;
            ++v5;
            ++v21;
          }
          while ( v5 <= v16 );
        }
        LOBYTE(v19) = v19 + 1;
        ++v15;
      }
      while ( v15 <= v16 );
    }
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 10C1D0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7961];

//----- (000124F0) --------------------------------------------------------
int sub_124F0(int a1, char a2, unsigned __int16 a3)
{
  int result; // eax
  unsigned int i; // ebx
  int v5; // ebp
  int j; // eax
  int v7; // ebx
  int v8; // [esp+0h] [ebp-34h]
  unsigned __int8 v9; // [esp+4h] [ebp-30h]
  int v10; // [esp+8h] [ebp-2Ch]
  int v11; // [esp+10h] [ebp-24h]
  int v12; // [esp+14h] [ebp-20h]

  result = 1 << a2;
  if ( !a2 )
  {
    for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
    {
      if ( *(_BYTE *)(i + 65) == 2 && *(_WORD *)(i + 24) != *(_WORD *)(a1 + 24) && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)i) )
      {
        if ( *(_WORD *)(i + 94) )
          *(_DWORD *)(i + 90) += a3;
        else
          *(_DWORD *)(i + 90) = a3;
        *(_WORD *)(i + 94) = *(_WORD *)(a1 + 24);
      }
    }
    v12 = (*(__int16 *)(a1 + 72)
         - 128
         - (__CFSHL__((*(__int16 *)(a1 + 72) - 128) >> 31, 8)
          + ((*(__int16 *)(a1 + 72) - 128) >> 31 << 8))) >> 8;
    v11 = (*(__int16 *)(a1 + 80)
         + 255
         - (__CFSHL__((*(__int16 *)(a1 + 80) + 255) >> 31, 8)
          + ((*(__int16 *)(a1 + 80) + 255) >> 31 << 8))) >> 8;
    result = -v11;
    v8 = -v11;
    if ( -v11 <= v11 )
    {
      v10 = ((*(__int16 *)(a1 + 74)
            - 128
            - (__CFSHL__((*(__int16 *)(a1 + 74) - 128) >> 31, 8)
             + ((*(__int16 *)(a1 + 74) - 128) >> 31 << 8))) >> 8)
          - v11;
      do
      {
        v5 = -v11;
        if ( -v11 <= v11 )
        {
          v9 = v12 - v11;
          do
          {
            for ( j = mapEntityIndex_10C1E0_10C1D0[256 * (unsigned __int8)v10 + v9]; ; j = *(unsigned __int16 *)(v7 + 20) )
            {
              v7 = dword_AE400_AE3F0() + 29795 + 164 * j;
              if ( v7 == dword_AE400_AE3F0() + 29795 )
                break;
              if ( *(_WORD *)(a1 + 24) != *(_WORD *)(v7 + 24)
                && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)v7)
                && ((unsigned __int16)(1 << a2) & *(_WORD *)(v7 + 28)) != 0
                && (*(_BYTE *)(v7 + 16) & 8) != 0
                && (*(_BYTE *)(v7 + 64) != 3 || *(_BYTE *)(v7 + 65) != 2)
                && (*(char *)(a1 + 66) == -1
                 || *(_BYTE *)(a1 + 66) == *(_BYTE *)(v7 + 64) && *(char *)(a1 + 67) == -1
                 || *(_BYTE *)(a1 + 66) == *(_BYTE *)(v7 + 64) && *(_BYTE *)(a1 + 67) == *(_BYTE *)(v7 + 65)) )
              {
                if ( *(_BYTE *)(v7 + 64) != 2 || *(_BYTE *)(v7 + 65) )
                {
                  if ( *(_WORD *)(v7 + 94) )
                    *(_DWORD *)(v7 + 90) += a3;
                  else
                    *(_DWORD *)(v7 + 90) = a3;
                  *(_WORD *)(v7 + 94) = *(_WORD *)(a1 + 24);
                }
                else
                {
                  if ( *(_WORD *)(v7 + 94) )
                    *(_DWORD *)(v7 + 90) += a3 / 10;
                  else
                    *(_DWORD *)(v7 + 90) = a3 / 10;
                  *(_WORD *)(v7 + 94) = *(_WORD *)(a1 + 24);
                }
              }
            }
            ++v5;
            ++v9;
          }
          while ( v5 <= v11 );
        }
        result = v8 + 1;
        LOBYTE(v10) = v10 + 1;
        v8 = result;
      }
      while ( result <= v11 );
    }
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 10C1D0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7961];

//----- (000127E0) --------------------------------------------------------
int sub_127E0(int a1, char a2, unsigned __int16 a3)
{
  int result; // eax
  unsigned int i; // ebx
  int v5; // ebp
  int v6; // eax
  int v7; // ebx
  int v8; // ebx
  int v9; // [esp+0h] [ebp-30h]
  int v10; // [esp+4h] [ebp-2Ch]
  int v11; // [esp+Ch] [ebp-24h]
  unsigned __int8 v12; // [esp+10h] [ebp-20h]
  int v13; // [esp+14h] [ebp-1Ch]

  result = 1 << a2;
  if ( !a2 )
  {
    for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
    {
      if ( *(_BYTE *)(i + 65) == 2 && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)i) )
      {
        *(_WORD *)(i + 50) = 30;
        if ( *(_WORD *)(i + 24) != *(_WORD *)(a1 + 24) )
        {
          if ( *(_WORD *)(i + 94) )
            *(_DWORD *)(i + 90) += a3;
          else
            *(_DWORD *)(i + 90) = a3;
          *(_WORD *)(i + 94) = *(_WORD *)(a1 + 24);
        }
      }
    }
    v11 = (*(__int16 *)(a1 + 72)
         - 128
         - (__CFSHL__((*(__int16 *)(a1 + 72) - 128) >> 31, 8)
          + ((*(__int16 *)(a1 + 72) - 128) >> 31 << 8))) >> 8;
    v13 = (*(__int16 *)(a1 + 80)
         + 255
         - (__CFSHL__((*(__int16 *)(a1 + 80) + 255) >> 31, 8)
          + ((*(__int16 *)(a1 + 80) + 255) >> 31 << 8))) >> 8;
    result = -v13;
    v10 = -v13;
    if ( -v13 <= v13 )
    {
      v9 = ((*(__int16 *)(a1 + 74)
           - 128
           - (__CFSHL__((*(__int16 *)(a1 + 74) - 128) >> 31, 8)
            + ((*(__int16 *)(a1 + 74) - 128) >> 31 << 8))) >> 8)
         - v13;
      do
      {
        v5 = -v13;
        if ( -v13 <= v13 )
        {
          v12 = v11 - v13;
          do
          {
            v6 = 164 * mapEntityIndex_10C1E0_10C1D0[256 * (unsigned __int8)v9 + v12];
            v7 = dword_AE400_AE3F0() + 29795;
            while ( 1 )
            {
              v8 = v6 + v7;
              if ( v8 == dword_AE400_AE3F0() + 29795 )
                break;
              if ( *(_WORD *)(a1 + 24) != *(_WORD *)(v8 + 24)
                && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)v8)
                && ((unsigned __int16)(1 << a2) & *(_WORD *)(v8 + 28)) != 0
                && (*(_BYTE *)(v8 + 16) & 8) != 0
                && (*(_BYTE *)(v8 + 64) != 3 || *(_BYTE *)(v8 + 65) != 2)
                && (*(char *)(a1 + 66) == -1
                 || *(_BYTE *)(a1 + 66) == *(_BYTE *)(v8 + 64) && *(char *)(a1 + 67) == -1
                 || *(_BYTE *)(a1 + 66) == *(_BYTE *)(v8 + 64) && *(_BYTE *)(a1 + 67) == *(_BYTE *)(v8 + 65)) )
              {
                if ( *(_WORD *)(v8 + 94) )
                  *(_DWORD *)(v8 + 90) += a3;
                else
                  *(_DWORD *)(v8 + 90) = a3;
                *(_WORD *)(v8 + 94) = *(_WORD *)(a1 + 24);
              }
              v7 = 164 * *(unsigned __int16 *)(v8 + 20);
              v6 = dword_AE400_AE3F0() + 29795;
            }
            ++v5;
            ++v12;
          }
          while ( v5 <= v13 );
        }
        result = v10 + 1;
        LOBYTE(v9) = v9 + 1;
        v10 = result;
      }
      while ( result <= v13 );
    }
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 10C1D0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7961];

//SYNCHRONIZED WITH REMC1
int sub_12B50(Type_AE400_29795* a1x, int a2, unsigned __int8 a3, unsigned __int16 a4)
{
  int v4; // eax
  int result; // eax

  v4 = a2 + 6 * a3;
  if ( *(_WORD *)(v4 + 94) )
    *(_DWORD *)(v4 + 90) = a4;
  else
    *(_DWORD *)(v4 + 90) += a4;
  result = a2 + 6 * a3;
  *(_WORD *)(result + 94) = a1x->id_29819_24;
  return result;
}

//----- (00012C50) --------------------------------------------------------
unsigned int sub_12C50(_WORD *a1)
{
  unsigned int v1; // ebx
  __int16 v2; // di
  int v3; // esi
  int v4; // ebp
  __int16 v6; // [esp+0h] [ebp-14h]

  sub_37510(a1, a1[13] + 1);
  v1 = *(_DWORD *)(dword_AE408_AE3F8() + 36470);
  v2 = a1[36];
  v3 = (__int16)a1[40] + 256;
  v4 = (__int16)a1[41] + 256;
  v6 = a1[37];
  while ( v1 > dword_AE400_AE3F0() + 29795 )
  {
    if ( abs16(*(_WORD *)(v1 + 72) - v2) <= v3 + *(__int16 *)(v1 + 80)
      && abs16(*(_WORD *)(v1 + 74) - v6) <= v4 + *(__int16 *)(v1 + 82) )
    {
      *(_DWORD *)(v1 + 12) = -1;
    }
    v1 = *(_DWORD *)v1;
  }
  return sub_37510(a1, a1[13]);
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00012D10) --------------------------------------------------------
char sub_12D10(_WORD *a1)
{
  unsigned int i; // ebx
  __int16 v3; // si
  unsigned __int16 v4; // ax
  __int16 v5; // dx
  __int16 v6; // si
  unsigned __int16 v7; // ax
  __int16 v8; // dx
  __int16 v9; // si
  unsigned __int16 v10; // ax
  __int16 v11; // dx
  __int16 v12; // si
  unsigned __int16 v13; // ax
  __int16 v14; // dx
  __int16 v15; // [esp+0h] [ebp-28h]
  unsigned __int16 v16; // [esp+8h] [ebp-20h]
  __int16 v17; // [esp+Ch] [ebp-1Ch]
  __int16 v18; // [esp+10h] [ebp-18h]
  __int16 v19; // [esp+10h] [ebp-18h]
  __int16 v20; // [esp+18h] [ebp-10h]
  __int16 v21; // [esp+18h] [ebp-10h]

  v20 = (__int16)a1[40] >> 8;
  v18 = (__int16)a1[41] >> 8;
  sub_37510(a1, a1[13] + 1);
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    if ( *(_BYTE *)(i + 65) == 2 && (_WORD *)i != a1 && sub_11950((Type_AE400_29795*)i, (Type_AE400_29795*)a1) )
      goto LABEL_5;
  }
  v15 = (__int16)a1[40] >> 8;
  v17 = (__int16)a1[41] >> 8;
  LOBYTE(v16) = ((unsigned __int16)(a1[36] + 128) >> 8) - v15;
  HIBYTE(v16) = ((unsigned __int16)(a1[37] + 128) >> 8) - v17;
  v21 = v15 - v20;
  v19 = v17 - v18;
  v3 = v19;
  v4 = v16;
  if ( v19 )
  {
    while ( 1 )
    {
      v5 = 2 * v15;
      if ( 2 * v15 )
        break;
LABEL_13:
      LOBYTE(v4) = ((unsigned __int16)(a1[36] + 128) >> 8) - v15;
      ++HIBYTE(v4);
      if ( !--v3 )
        goto LABEL_14;
    }
    while ( mapAngle_FC1E0_FC1D0[v4] >= 0 )
    {
      LOBYTE(v4) = v4 + 1;
      if ( !--v5 )
        goto LABEL_13;
    }
    goto LABEL_5;
  }
LABEL_14:
  LOBYTE(v7) = ((unsigned __int16)(a1[36] + 128) >> 8) - v15;
  v6 = v19;
  HIBYTE(v7) = HIBYTE(v16) + 2 * v17 - v19;
  if ( v19 )
  {
    while ( 1 )
    {
      v8 = 2 * v15;
      if ( 2 * v15 )
        break;
LABEL_18:
      LOBYTE(v7) = ((unsigned __int16)(a1[36] + 128) >> 8) - v15;
      ++HIBYTE(v7);
      if ( !--v6 )
        goto LABEL_19;
    }
    while ( mapAngle_FC1E0_FC1D0[v7] >= 0 )
    {
      LOBYTE(v7) = v7 + 1;
      if ( !--v8 )
        goto LABEL_18;
    }
    goto LABEL_5;
  }
LABEL_19:
  LOBYTE(v10) = ((unsigned __int16)(a1[36] + 128) >> 8) - v15;
  v9 = v19;
  HIBYTE(v10) = v19 + HIBYTE(v16);
  if ( v19 )
  {
    while ( 1 )
    {
      v11 = v21;
      if ( v21 )
        break;
LABEL_23:
      LOBYTE(v10) = ((unsigned __int16)(a1[36] + 128) >> 8) - v15;
      ++HIBYTE(v10);
      if ( !--v9 )
        goto LABEL_24;
    }
    while ( mapAngle_FC1E0_FC1D0[v10] >= 0 )
    {
      LOBYTE(v10) = v10 + 1;
      if ( !--v11 )
        goto LABEL_23;
    }
    goto LABEL_5;
  }
LABEL_24:
  LOBYTE(v13) = ((unsigned __int16)(a1[36] + 128) >> 8) - v21;
  v12 = v19;
  HIBYTE(v13) = v19 + HIBYTE(v16);
  if ( v19 )
  {
    while ( 1 )
    {
      v14 = v21;
      if ( v21 )
        break;
LABEL_29:
      LOBYTE(v13) = ((unsigned __int16)(a1[36] + 128) >> 8) - v15;
      ++HIBYTE(v13);
      if ( !--v12 )
        goto LABEL_30;
    }
    while ( mapAngle_FC1E0_FC1D0[v13] >= 0 )
    {
      LOBYTE(v13) = v13 + 1;
      if ( !--v14 )
        goto LABEL_29;
    }
LABEL_5:
    sub_37510(a1, a1[13]);
    return 0;
  }
LABEL_30:
  sub_37510(a1, a1[13]);
  return 1;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00012F70) --------------------------------------------------------
_BOOL1 sub_12F70(_WORD *a1)
{
  _BOOL1 v1; // bl
  unsigned int v2; // ecx
  unsigned __int16 v3; // ax
  __int16 v4; // dx
  __int16 v5; // si
  unsigned __int16 v7; // [esp+4h] [ebp-14h]

  v1 = 0;
  v2 = *(_DWORD *)(dword_AE408_AE3F8() + 36462);
  do
  {
    if ( v2 <= dword_AE400_AE3F0() + 29795 )
      break;
    if ( *(_BYTE *)(v2 + 65) == 2
      && abs16(*(_WORD *)(v2 + 72) - *a1) <= *(__int16 *)(v2 + 80) + 2048
      && abs16(*(_WORD *)(v2 + 74) - a1[1]) <= *(__int16 *)(v2 + 82) + 2048 )
    {
      v1 = 1;
    }
    v2 = *(_DWORD *)v2;
  }
  while ( !v1 );
  if ( !v1 )
  {
    LOBYTE(v7) = HIBYTE(*a1) - 8;
    HIBYTE(v7) = HIBYTE(a1[1]) - 8;
    v5 = 8;
    v3 = v7;
    do
    {
      if ( v1 )
        break;
      v4 = 8;
      do
      {
        if ( v1 )
          break;
        v1 = mapAngle_FC1E0_FC1D0[v3] < 0;
        LOBYTE(v3) = v3 + 1;
        --v4;
      }
      while ( v4 );
      LOBYTE(v3) = HIBYTE(*a1) - 8;
      ++HIBYTE(v3);
      --v5;
    }
    while ( v5 );
  }
  return !v1;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00013170) --------------------------------------------------------
int sub_13170(int a1)
{
  int result; // eax

  sub_132B0(a1);
  switch ( *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) )
  {
    case 0:
      sub_136C0(a1);
      result = sub_136C0(a1);
      break;
    case 1:
      sub_13800(a1);
      result = sub_136C0(a1);
      break;
    case 2:
    case 5:
      sub_138E0();
      result = sub_136C0(a1);
      break;
    case 3:
      sub_138F0(a1);
      result = sub_136C0(a1);
      break;
    case 4:
      sub_13990((_WORD *)a1);
      result = sub_136C0(a1);
      break;
    case 6:
      sub_13BA0(a1);
      result = sub_136C0(a1);
      break;
    case 7:
      sub_13CA0(a1);
      result = sub_136C0(a1);
      break;
    case 8:
    case 9:
      sub_13DC0(a1);
      result = sub_136C0(a1);
      break;
    case 0xB:
      sub_13A70(a1);
      result = sub_136C0(a1);
      break;
    case 0xC:
      sub_13A10(a1);
      result = sub_136C0(a1);
      break;
    case 0xD:
      sub_13DC0(a1);
      goto LABEL_13;
    default:
LABEL_13:
      result = sub_136C0(a1);
      break;
  }
  return result;
}

//----- (000132B0) --------------------------------------------------------
int sub_132B0(int a1)
{
  int v1; // edx
  __int16 v2; // cx
  unsigned __int16 i; // ax
  int v4; // edx
  __int16 v5; // di
  unsigned __int16 j; // ax
  int v7; // ecx
  int v8; // esi
  unsigned __int16 v9; // di
  int v10; // edx
  int v11; // ecx
  int v12; // edx
  int v13; // edx
  unsigned __int16 v14; // si
  int v16; // edx
  unsigned __int8 v17; // cl
  int v18; // ecx
  int v19; // edi
  int v20; // edx
  unsigned int v21; // ebp
  int v22; // edi
  int v23; // eax
  int v24; // esi
  int v25; // edx
  int v26; // eax
  int v27; // eax
  char v29; // [esp+0h] [ebp-14h]

  v29 = 0;
  sub_16990();
  v1 = *(_DWORD *)(a1 + 160);
  v2 = *(_WORD *)(v1 + 404);
  if ( v2 < 0 )
    *(_WORD *)(v1 + 404) = v2 + 1;
  for ( i = 0; i < 0x18u; ++i )
  {
    v4 = *(_DWORD *)(a1 + 160) + 2 * i;
    v5 = *(_WORD *)(v4 + 724);
    if ( v5 > 0 )
      *(_WORD *)(v4 + 724) = v5 - 1;
  }
  for ( j = 0; j < 8u; ++j )
  {
    v7 = *(_DWORD *)(a1 + 160);
    v8 = 8 * j;
    v9 = *(_WORD *)(v7 + v8 + 460);
    if ( v9 < 0x601Fu )
    {
      *(_WORD *)(v7 + v8 + 460) = *(_WORD *)(v7 + 522) + 1 + v9;
      v10 = v8 + *(_DWORD *)(a1 + 160);
      if ( *(_WORD *)(v10 + 460) > 0x601Fu )
        *(_WORD *)(v10 + 460) = 24607;
    }
    v11 = *(_DWORD *)(a1 + 160);
    v12 = v11 + 8 * j;
    if ( *(_WORD *)(v12 + 460) > 0x601Fu )
    {
      if ( !*(_WORD *)(v12 + 462) )
        *(_WORD *)(v12 + 460) -= 256 - *(_WORD *)(v11 + 522);
      v13 = *(_DWORD *)(a1 + 160) + 8 * j;
      if ( *(_WORD *)(v13 + 460) < 0x601Fu )
        *(_WORD *)(v13 + 460) = 24607;
    }
  }
  sub_45C10_45F50((Type_AE400_29795*)a1);
  v14 = *(_WORD *)(*(_DWORD *)(a1 + 160) + 50);
  if ( v14 && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)(164 * v14 + dword_AE400_AE3F0() + 29795)) )
    v29 = 1;
  if ( v29 )
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 331) = 2;
  if ( *(_WORD *)(*(_DWORD *)(a1 + 160) + 331) )
  {
    memset((void*)(a1 + 90), 0, 36);
    --*(_WORD *)(*(_DWORD *)(a1 + 160) + 331);
  }
  else if ( sub_46540_46880((Type_AE400_29795*)a1) == 2 )
  {
    *(_BYTE *)(a1 + 70) = 2;
    return 0;
  }
  sub_14EB0(a1);
  v16 = *(_DWORD *)(a1 + 160);
  v17 = *(_BYTE *)(v16 + 326);
  if ( v17 < 0xC8u )
    *(_BYTE *)(v16 + 326) = v17 + 1;
  *(_DWORD *)(a1 + 140) += *(_DWORD *)(a1 + 132);
  v18 = *(__int16 *)(*(_DWORD *)(a1 + 160) + 341) + *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v18;
  if ( v18 < -1 )
    *(_DWORD *)(a1 + 12) = -1;
  v19 = *(_DWORD *)(a1 + 8);
  if ( *(_DWORD *)(a1 + 12) > v19 )
    *(_DWORD *)(a1 + 12) = v19;
  v20 = *(_DWORD *)(a1 + 160);
  v21 = *(_DWORD *)(v20 + 351);
  if ( v21 )
    *(_DWORD *)(v20 + 351) = v21 - 1;
  if ( v29 || (*(_BYTE *)(a1 + 17) & 0x10) != 0 )
  {
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a1 + 136) / 200;
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 341) = *(_DWORD *)(a1 + 8) / 200;
    if ( *(int *)(a1 + 132) < 1000 )
      *(_DWORD *)(a1 + 132) = 1000;
    *(_BYTE *)(a1 + 17) &= ~0x10u;
  }
  else
  {
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a1 + 136) / 2000;
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 341) = *(_DWORD *)(a1 + 8) / 500;
    if ( *(int *)(a1 + 132) < 100 )
      *(_DWORD *)(a1 + 132) = 100;
  }
  if ( *(int *)(a1 + 140) < 0 )
    *(_DWORD *)(a1 + 140) = 0;
  v22 = *(_DWORD *)(a1 + 136);
  if ( *(_DWORD *)(a1 + 140) > v22 )
    *(_DWORD *)(a1 + 140) = v22;
  sub_15EC0(a1);
  v23 = *(__int16 *)(*(_DWORD *)(a1 + 160) + 526);
  if ( !(*(unsigned __int8 *)(a1 + 63) % (64 - ((v23 - (__CFSHL__(v23 >> 31, 2) + 4 * (v23 >> 31))) >> 2))) )
  {
    v24 = sub_16800(v21, a1);
    if ( v24 )
    {
      sub_16870(a1);
      sub_16890(a1, v24);
    }
    if ( *(_DWORD *)(a1 + 12) < *(_DWORD *)(a1 + 8) )
      sub_155F0(a1, 1u);
  }
  v25 = (__int16)sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  v26 = *(_DWORD *)(a1 + 156);
  if ( *(__int16 *)(a1 + 76) > v25 + *(__int16 *)(v26 + 10) )
    *(_WORD *)(a1 + 76) = *(_WORD *)(v26 + 10) + v25;
  v27 = *(_DWORD *)(a1 + 156);
  if ( *(__int16 *)(a1 + 76) < v25 + *(__int16 *)(v27 + 12) )
    *(_WORD *)(a1 + 76) = *(_WORD *)(v27 + 12) + v25;
  return 1;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000136C0) --------------------------------------------------------
int sub_136C0(int a1)
{
  int v2; // eax

  if ( sub_13F00(a1) )
  {
    sub_14C80(a1);
    return 1;
  }
  else if ( sub_14310(a1) )
  {
    sub_14DA0(a1);
    return 1;
  }
  else
  {
    v2 = *(__int16 *)(*(_DWORD *)(a1 + 160) + 526);
    if ( *(unsigned __int8 *)(a1 + 63) % (64 - ((v2 - (__CFSHL__(v2 >> 31, 2) + 4 * (v2 >> 31))) >> 2)) )
    {
      return 1;
    }
    else if ( sub_14120(a1) )
    {
      sub_14C40(a1);
      return 1;
    }
    else if ( sub_143A0(a1) )
    {
      sub_14D00(a1);
      return 1;
    }
    else if ( sub_145B0(a1) )
    {
      sub_14D60(a1);
      return 1;
    }
    else if ( sub_147E0(a1) )
    {
      sub_14D40(a1);
      return 1;
    }
    else if ( sub_14230(a1) )
    {
      sub_14CE0(a1);
      return 1;
    }
    else
    {
      if ( sub_14B10(a1) )
        sub_14D20(a1);
      else
        sub_14DC0(a1);
      return 1;
    }
  }
}

//----- (00013800) --------------------------------------------------------
bool sub_13800(int a1)
{
  int v1; // ebx
  bool result; // eax
  int v3; // ebx
  int v4; // eax

  v1 = 164 * *(unsigned __int16 *)(a1 + 146) + dword_AE400_AE3F0() + 29795;
  result = sub_15440(a1, v1);
  if ( result )
  {
    *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v1 + 72));
    if ( sub_15470(a1, v1, 512, 2048) )
    {
      if ( sub_155F0(a1, 0x10u) )
        return 0;
      v3 = *(__int16 *)(a1 + 76) - (*(__int16 *)(v1 + 76) + 512);
      if ( v3 )
        v4 = v3 / (int)abs32(v3);
      else
        LOWORD(v4) = 0;
      *(_WORD *)(a1 + 76) += v4 * *(_WORD *)(*(_DWORD *)(a1 + 156) + 14);
    }
    return 1;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000138E0) --------------------------------------------------------
int sub_138E0()
{
  return 0;
}

//----- (000138F0) --------------------------------------------------------
int sub_138F0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(a1 + 150));
  result = sub_15470(a1, 0, 2048, 3072);
  if ( result )
  {
    if ( sub_155F0(a1, 0x10u) )
    {
      return 0;
    }
    else
    {
      v2 = *(__int16 *)(a1 + 76) - (*(__int16 *)(a1 + 154) + 512);
      if ( v2 )
        v3 = v2 / (int)abs32(v2);
      else
        LOWORD(v3) = 0;
      *(_WORD *)(a1 + 76) += v3 * *(_WORD *)(*(_DWORD *)(a1 + 156) + 14);
      return 1;
    }
  }
  return result;
}

//----- (00013990) --------------------------------------------------------
bool sub_13990(_WORD *a1)
{
  int v1; // esi
  bool result; // eax

  v1 = 164 * (unsigned __int16)a1[73] + dword_AE400_AE3F0() + 29795;
  result = sub_15440((int)a1, v1);
  if ( result )
  {
    a1[17] = sub_42150_42490((axis_3d*)(a1 + 36), (axis_3d*)(_WORD *)(v1 + 72));
    return sub_15470((int)a1, v1, 256, 2048) == 0;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00013A10) --------------------------------------------------------
int sub_13A10(int a1)
{
  if ( !sub_15E60(a1, 2u) )
  {
    if ( sub_15A00(a1, 2u) )
    {
      sub_155F0(a1, 2u);
      return 0;
    }
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 12) = *(_WORD *)(a1 + 128);
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 14) = 1;
  }
  return 0;
}

//----- (00013A70) --------------------------------------------------------
bool sub_13A70(int a1)
{
  unsigned int v1; // esi

  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 50);
  if ( v1 <= dword_AE400_AE3F0() + 29795 )
  {
    if ( sub_15A00(a1, 0xCu) )
      sub_155F0(a1, 0xCu);
    if ( !sub_15E60(a1, 2u) )
    {
      if ( sub_15A00(a1, 2u) )
      {
        sub_155F0(a1, 2u);
        return 0;
      }
      *(_WORD *)(*(_DWORD *)(a1 + 160) + 12) = *(_WORD *)(a1 + 128);
      *(_WORD *)(*(_DWORD *)(a1 + 160) + 14) = 1;
    }
    return 0;
  }
  if ( sub_42750((_WORD *)(a1 + 72), (_WORD *)(v1 + 72)) > 104857600 && sub_155F0(a1, 0x13u) )
    return 1;
  sub_155F0(a1, 0xCu);
  if ( !sub_15440(a1, v1) )
    return 0;
  *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v1 + 72));
  return !sub_15470(a1, v1, 256, 2048);
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00013BA0) --------------------------------------------------------
bool sub_13BA0(int a1)
{
  _WORD *v1; // esi
  bool result; // eax
  __int16 v3; // ax
  int v4; // ecx
  int v5; // eax

  v1 = (_WORD *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 146));
  result = sub_15440(a1, (int)v1);
  if ( result )
  {
    *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(v1 + 36));
    if ( sub_15470(a1, (int)v1, 1024, 3072) )
    {
      if ( sub_155F0(a1, 3u) )
      {
        v3 = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(v1 + 36));
        if ( (unsigned __int16)sub_42210_42550(*(_WORD *)(a1 + 30), v3) < 0x1Cu )
          v1[72] = *(_WORD *)(a1 + 24);
      }
      v4 = *(__int16 *)(a1 + 76) - ((__int16)v1[38] + 512);
      if ( v4 )
        v5 = v4 / (int)abs32(v4);
      else
        LOWORD(v5) = 0;
      *(_WORD *)(a1 + 76) += v5 * *(_WORD *)(*(_DWORD *)(a1 + 156) + 14);
    }
    return 1;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00013CA0) --------------------------------------------------------
bool sub_13CA0(int a1)
{
  int v1; // esi
  bool result; // eax
  int v3; // eax
  signed __int8 v4; // al
  int v5; // ecx
  int v6; // eax

  v1 = 164 * *(unsigned __int16 *)(a1 + 146) + dword_AE400_AE3F0() + 29795;
  result = sub_15440(a1, v1);
  if ( result )
  {
    *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v1 + 72));
    if ( sub_15470(a1, v1, 2048, 3584) )
    {
      v3 = *(__int16 *)(*(_DWORD *)(a1 + 160) + 526);
      if ( !(*(unsigned __int8 *)(a1 + 63) % (64 - ((v3 - (__CFSHL__(v3 >> 31, 2) + 4 * (v3 >> 31))) >> 2))) )
      {
        v4 = sub_16310((_DWORD *)a1);
        if ( v4 != -1 && sub_155F0(a1, v4) )
          return 0;
        v5 = *(__int16 *)(a1 + 76) - (*(__int16 *)(v1 + 76) + 512);
        if ( v5 )
          v6 = v5 / (int)abs32(v5);
        else
          LOWORD(v6) = 0;
        *(_WORD *)(a1 + 76) += v6 * *(_WORD *)(*(_DWORD *)(a1 + 156) + 14);
      }
    }
    return 1;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00013DC0) --------------------------------------------------------
bool sub_13DC0(int a1)
{
  return sub_13DD0(a1);
}

//----- (00013DD0) --------------------------------------------------------
bool sub_13DD0(int a1)
{
  int v1; // esi
  bool result; // eax
  signed __int8 v3; // al
  unsigned __int8 v4; // di
  int v5; // eax

  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 146);
  result = sub_15440(a1, v1);
  if ( !result )
    return result;
  *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v1 + 72));
  if ( !sub_15470(a1, v1, 3072, 4096) || *(__int16 *)(*(_DWORD *)(a1 + 160) + 404) < 0 )
    return 1;
  v3 = sub_16030(a1);
  if ( v3 == -1 || (v4 = v3, !sub_15A00(a1, v3)) || !sub_155F0(a1, v4) )
  {
    v5 = *(__int16 *)(a1 + 76) - (*(__int16 *)(v1 + 76) + 512);
    if ( v5 )
      v5 /= (int)abs32(v5);
    *(_WORD *)(a1 + 76) += v5 * *(_WORD *)(*(_DWORD *)(a1 + 156) + 14);
    return 1;
  }
  if ( *(_BYTE *)(v1 + 65) <= 1u )
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 8 * *(__int16 *)(*(_DWORD *)(v1 + 160) + 48) + 462) = 0;
  return 0;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00013F00) --------------------------------------------------------
int sub_13F00(int a1)
{
  _WORD *v1; // esi
  __int16 v2; // bx
  unsigned int v3; // eax
  _WORD *v4; // esi
  int result; // eax
  unsigned int v6; // eax
  _WORD *v7; // esi
  int v8; // [esp+0h] [ebp-28h]
  __int16 v9; // [esp+4h] [ebp-24h]
  int v10; // [esp+8h] [ebp-20h]

  v1 = (_WORD *)(dword_AE400_AE3F0() + 29795);
  if ( !*(_WORD *)(*(_DWORD *)(a1 + 160) + 50) && sub_14E60(a1, 0x10u) && sub_15E90(a1, 0x10u) )
  {
    v1[12] = *(_WORD *)(a1 + 24);
    v8 = (int)(*(__int16 *)(a1 + 72)
             - (__CFSHL__((unsigned __int64)*(__int16 *)(a1 + 72) >> 32, 14)
              + ((unsigned __int64)*(__int16 *)(a1 + 72) >> 32 << 14))) >> 14;
    v10 = (int)(*(__int16 *)(a1 + 74)
              - (__CFSHL__((unsigned __int64)*(__int16 *)(a1 + 74) >> 32, 14)
               + ((unsigned __int64)*(__int16 *)(a1 + 74) >> 32 << 14))) >> 14;
    v9 = v10 + 4;
    do
    {
      v2 = v8;
      do
      {
        v1[36] = (v2 & 3) << 14;
        v1[37] = (v10 & 3) << 14;
        v3 = sub_15260((int)v1, 2u);
        if ( !v3 || sub_42640((_WORD *)(v3 + 72), v1 + 36) > 12288 )
        {
          v4 = v1 + 36;
          result = 1;
          *(_DWORD *)(a1 + 150) = *(_DWORD *)v4;
          *(_WORD *)(a1 + 154) = v4[2];
          return result;
        }
        v1[36] = (((v2 & 3) << 6) + 31) << 8;
        v1[37] = (((v10 & 3) << 6) + 31) << 8;
        v6 = sub_15260((int)v1, 2u);
        if ( !v6 || sub_42640((_WORD *)(v6 + 72), v1 + 36) > 12288 )
        {
          v7 = v1 + 36;
          result = 1;
          *(_DWORD *)(a1 + 150) = *(_DWORD *)v7;
          *(_WORD *)(a1 + 154) = v7[2];
          return result;
        }
        ++v2;
      }
      while ( v2 < (__int16)(v8 + 4) );
      LOWORD(v10) = v10 + 1;
    }
    while ( (__int16)v10 < v9 );
  }
  return 0;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00014120) --------------------------------------------------------
int sub_14120(int a1)
{
  unsigned int v1; // esi
  unsigned int v2; // eax
  unsigned int v3; // ebx
  int v4; // eax

  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 50);
  if ( v1 <= dword_AE400_AE3F0() + 29795 )
    return 0;
  v2 = sub_14E60(a1, 0x10u);
  v3 = v2;
  if ( !v2 )
    return 0;
  if ( *(_WORD *)(v2 + 48) )
    return 0;
  v4 = *(_DWORD *)(a1 + 160);
  if ( *(_WORD *)(v4 + 756)
    || !sub_12D10((_WORD *)(164 * *(unsigned __int16 *)(v4 + 50) + dword_AE400_AE3F0() + 29795))
    || *(_DWORD *)(a1 + 136) < *(_DWORD *)(v3 + 136)
    || *(_BYTE *)(v1 + 70) != 4 )
  {
    return 0;
  }
  *(_WORD *)(a1 + 146) = (int)(v1 - (dword_AE400_AE3F0() + 29795)) / 164;
  *(_WORD *)(a1 + 148) = sub_15420(v1);
  return 1;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00014230) --------------------------------------------------------
unsigned int sub_14230(int a1)
{
  unsigned int result; // eax
  unsigned int v2; // eax
  unsigned int v3; // eax
  int v4; // ecx

  result = sub_14E60(a1, 3u);
  if ( result )
  {
    v2 = sub_14E60(a1, 0x10u);
    if ( v2 )
    {
      if ( *(_DWORD *)(a1 + 136) <= *(_DWORD *)(v2 + 136) )
      {
        v3 = sub_15080(a1);
        v4 = v3;
        if ( v3 )
          goto LABEL_5;
      }
    }
    else
    {
      v3 = sub_15080(a1);
      v4 = v3;
      if ( v3 )
      {
LABEL_5:
        *(_WORD *)(a1 + 146) = (int)(v3 - (dword_AE400_AE3F0() + 29795)) / 164;
        *(_WORD *)(a1 + 148) = sub_15420(v4);
        return 1;
      }
    }
    return 0;
  }
  return result;
}
// 142B6: conditional instruction was optimized away because eax.4==0
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00014310) --------------------------------------------------------
int sub_14310(int a1)
{
  unsigned int v1; // ecx

  if ( *(_DWORD *)(a1 + 8) / 2 <= *(_DWORD *)(a1 + 12) )
    return 0;
  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 50);
  if ( v1 <= dword_AE400_AE3F0() + 29795 )
    return 0;
  *(_WORD *)(a1 + 146) = 164 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 50) / 164;
  *(_WORD *)(a1 + 148) = sub_15420(v1);
  return 1;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000143A0) --------------------------------------------------------
int sub_143A0(int a1)
{
  unsigned int i; // ebx
  int v2; // edi
  unsigned int v3; // eax
  int v4; // ebx
  int v6; // [esp+8h] [ebp-1Ch]
  unsigned int v7; // [esp+Ch] [ebp-18h]

  v7 = -1;
  if ( !sub_16920(a1) || !*(_WORD *)(*(_DWORD *)(a1 + 160) + 50) && sub_14E60(a1, 0x10u) )
    return 0;
  v6 = 0;
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    if ( *(_WORD *)(i + 24) != *(_WORD *)(a1 + 24) && *(_BYTE *)(i + 65) == 2 )
    {
      if ( (v2 = 164 * *(__int16 *)(i + 24),
            50000 - *(_DWORD *)(dword_AE400_AE3F0() + v2 + 29931) / 10 * *(__int16 *)(*(_DWORD *)(a1 + 160) + 522) / 255 < *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 8 * *(__int16 *)(*(_DWORD *)(dword_AE400_AE3F0() + v2 + 29955) + 48) + 460))
        && sub_42750((_WORD *)(dword_AE400_AE3F0() + 29795 + v2 + 72), (_WORD *)(i + 72)) > 58982400
        && !sub_11950((Type_AE400_29795*)(dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(i + 24)), (Type_AE400_29795*)i)
        || *(_DWORD *)(i + 140) + 640 * (255 - *(__int16 *)(*(_DWORD *)(a1 + 160) + 522)) < *(_DWORD *)(164 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 50) + dword_AE400_AE3F0() + 29935) )
      {
        v3 = sub_42750((_WORD *)(a1 + 72), (_WORD *)(i + 72));
        if ( v3 < v7 )
        {
          v6 = i;
          v7 = v3;
        }
      }
    }
  }
  if ( !v6 )
    return 0;
  v4 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 28);
  if ( sub_42750((_WORD *)(v6 + 72), (_WORD *)(a1 + 72)) >= v4 * v4 )
    return 0;
  *(_WORD *)(a1 + 146) = (v6 - (dword_AE400_AE3F0() + 29795)) / 164;
  *(_WORD *)(a1 + 148) = sub_15420(v6);
  return 1;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (000145B0) --------------------------------------------------------
int sub_145B0(int a1)
{
  unsigned int v1; // ebp
  unsigned int i; // ebx
  int v3; // ecx
  int v4; // eax
  int v5; // edx
  unsigned int v7; // eax
  int v8; // ebx
  int v9; // [esp+8h] [ebp-18h]

  v1 = -1;
  if ( !sub_16920(a1) || !*(_WORD *)(*(_DWORD *)(a1 + 160) + 50) && sub_14E60(a1, 0x10u) )
    return 0;
  v9 = 0;
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    if ( *(_WORD *)(i + 24) != *(_WORD *)(a1 + 24) && *(_BYTE *)(i + 65) <= 1u && !sub_16000(i, 0xCu) )
    {
      v3 = *(_DWORD *)(i + 160);
      v4 = *(_DWORD *)(a1 + 160);
      v5 = v4 + 8 * *(__int16 *)(v3 + 48);
      if ( *(_WORD *)(v5 + 462) == 1 )
      {
        *(_WORD *)(a1 + 146) = (int)(i - (dword_AE400_AE3F0() + 29795)) / 164;
        *(_WORD *)(a1 + 148) = sub_15420(i);
        return 1;
      }
      if ( 50000 - *(__int16 *)(v4 + 522) * (*(_DWORD *)(i + 136) / 10) / 255 <= *(unsigned __int16 *)(v5 + 460)
        || !*(_WORD *)(v3 + 50)
        && sub_14E60(i, 0x10u)
        && *(_DWORD *)(i + 140) + 32 * (255 - *(__int16 *)(*(_DWORD *)(a1 + 160) + 522)) < *(_DWORD *)(a1 + 140) )
      {
        v7 = sub_42750((_WORD *)(a1 + 72), (_WORD *)(i + 72));
        if ( v7 < v1 )
        {
          v9 = i;
          v1 = v7;
        }
      }
    }
  }
  if ( !v9 )
    return 0;
  v8 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 28) + 10;
  if ( sub_42750((_WORD *)(v9 + 72), (_WORD *)(a1 + 72)) >= v8 * v8 )
    return 0;
  *(_WORD *)(a1 + 146) = (v9 - (dword_AE400_AE3F0() + 29795)) / 164;
  *(_WORD *)(a1 + 148) = sub_15420(v9);
  return 1;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (000147E0) --------------------------------------------------------
int sub_147E0(int a1)
{
  unsigned int i; // ebx
  int v2; // edx
  int v3; // edi
  int v4; // ecx
  int v5; // ecx
  unsigned int v6; // eax
  int v7; // ebx
  _WORD *v9; // [esp+0h] [ebp-24h]
  unsigned int v10; // [esp+4h] [ebp-20h]
  int v11; // [esp+8h] [ebp-1Ch]
  int v12; // [esp+Ch] [ebp-18h]

  v10 = -1;
  if ( !sub_16920(a1) )
    return 0;
  v12 = 0;
  v9 = (_WORD *)(a1 + 72);
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    if ( *(_WORD *)(i + 24) != *(_WORD *)(a1 + 24) && *(_BYTE *)(i + 65) == 3 )
    {
      v2 = dword_AE400_AE3F0() + 164 * *(__int16 *)(i + 24);
      v3 = *(_DWORD *)(v2 + 29955);
      v4 = *(_DWORD *)(a1 + 160);
      v11 = *(unsigned __int16 *)(v4 + 8 * *(__int16 *)(v3 + 48) + 460);
      v5 = *(__int16 *)(v4 + 522);
      if ( 50000 - v5 * (*(_DWORD *)(v2 + 29931) / 10) / 255 < v11
        && 10 * (275 - v5) < *(_DWORD *)(i + 140)
        && !sub_11950((Type_AE400_29795*)i, (Type_AE400_29795*)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(v3 + 50))) )
      {
        v6 = sub_42750(v9, (_WORD *)(i + 72));
        if ( v6 < v10 )
        {
          v12 = i;
          v10 = v6;
        }
      }
    }
  }
  if ( !v12 )
    return 0;
  v7 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 28);
  if ( sub_42750((_WORD *)(v12 + 72), v9) >= v7 * v7 )
    return 0;
  *(_WORD *)(a1 + 146) = (v12 - (dword_AE400_AE3F0() + 29795)) / 164;
  *(_WORD *)(a1 + 148) = sub_15420(v12);
  return 1;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00014B10) --------------------------------------------------------
int sub_14B10(int a1)
{
  unsigned int v1; // esi
  int v2; // ebp
  int v3; // eax
  unsigned int j; // ebx
  unsigned int v5; // eax
  int i; // [esp+0h] [ebp-18h]
  _WORD *v8; // [esp+4h] [ebp-14h]

  v1 = -1;
  v2 = 0;
  if ( !sub_16920(a1) )
    return 0;
  v3 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 50);
  if ( v3 == dword_AE400_AE3F0() + 29795 )
    v3 = a1;
  v8 = (_WORD *)(v3 + 72);
  for ( i = 0; i != 80; i += 4 )
  {
    for ( j = *(_DWORD *)(i + dword_AE408_AE3F8() + 36382); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
    {
      if ( *(_WORD *)(j + 24) != *(_WORD *)(a1 + 24) && *(int *)(j + 140) > 0 )
      {
        v5 = sub_42750(v8, (_WORD *)(j + 72));
        if ( v5 < v1 )
        {
          v2 = j;
          v1 = v5;
        }
      }
    }
  }
  if ( !v2 )
    return 0;
  *(_WORD *)(a1 + 146) = (v2 - (dword_AE400_AE3F0() + 29795)) / 164;
  *(_WORD *)(a1 + 148) = sub_15420(v2);
  return 1;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00014C40) --------------------------------------------------------
int sub_14C40(int a1)
{
  *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 1;
  return 1;
}

//----- (00014C80) --------------------------------------------------------
int sub_14C80(int a1)
{
  *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 3;
  return 1;
}

//----- (00014CE0) --------------------------------------------------------
int sub_14CE0(int a1)
{
  *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 6;
  return 1;
}

//----- (00014D00) --------------------------------------------------------
int sub_14D00(int a1)
{
  *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 7;
  return 1;
}

//----- (00014D20) --------------------------------------------------------
int sub_14D20(int a1)
{
  *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 13;
  return 1;
}

//----- (00014D40) --------------------------------------------------------
int sub_14D40(int a1)
{
  *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 9;
  return 1;
}

//----- (00014D60) --------------------------------------------------------
int sub_14D60(int a1)
{
  *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 8;
  return 1;
}

//----- (00014DA0) --------------------------------------------------------
int sub_14DA0(int a1)
{
  *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 11;
  return 1;
}

//----- (00014DC0) --------------------------------------------------------
int sub_14DC0(int a1)
{
  unsigned int v1; // ecx

  if ( *(_DWORD *)(a1 + 12) >= *(_DWORD *)(a1 + 8)
    || (v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 50), v1 <= dword_AE400_AE3F0() + 29795) )
  {
    *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 12;
  }
  else
  {
    *(_WORD *)(a1 + 146) = 164 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 50) / 164;
    *(_WORD *)(a1 + 148) = sub_15420(v1);
    *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 11;
  }
  return 1;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00014E60) --------------------------------------------------------
unsigned int sub_14E60(int a1, unsigned __int8 a2)
{
  unsigned int result; // eax

  result = dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(*(_DWORD *)(a1 + 160) + 2 * a2 + 676);
  if ( result <= dword_AE400_AE3F0() + 29795 )
    return 0;
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00014EB0) --------------------------------------------------------
int sub_14EB0(int a1)
{
  __int16 *v1; // eax
  __int16 v2; // ax
  unsigned __int16 v3; // ax
  int v4; // ecx
  __int16 v5; // dx
  __int16 *v6; // edi
  int v7; // eax
  __int16 v8; // ax
  int v9; // eax
  __int16 v10; // ax
  unsigned __int16 v11; // cx
  __int64 v12; // rax
  int v13; // eax
  int v14; // ecx
  __int16 v15; // si
  __int16 v16; // si
  unsigned int v17; // eax
  unsigned __int16 v18; // si
  unsigned __int16 v19; // dx
  int v21; // [esp-Ch] [ebp-18h]
  int v22; // [esp-8h] [ebp-14h]
  int v23; // [esp-4h] [ebp-10h]

  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  v1 = *(__int16 **)(a1 + 156);
  v23 = v1[7];
  v22 = v1[5];
  v21 = v1[6];
  v2 = sub_11F50((axis_3d*)(__int16*)&word_AE454_AE444);
  sub_42000_42340(&word_AE454_AE444, v2, v21, v22, v23);
  sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, *(_WORD *)(a1 + 30), 0, *(_WORD *)(a1 + 126));
  v3 = *(_WORD *)(a1 + 30);
  HIBYTE(v3) += 2;
  sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, v3, 0, *(_WORD *)(*(_DWORD *)(a1 + 160) + 16));
  v4 = *(_DWORD *)(a1 + 160);
  v5 = *(_WORD *)(v4 + 16);
  v6 = (__int16 *)(v4 + 16);
  if ( v5 )
    v7 = v5 / (int)abs16(v5);
  else
    LOWORD(v7) = 0;
  v8 = *v6 - 4 * v7;
  *v6 = v8;
  sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  v9 = *(__int16 *)(*(_DWORD *)(a1 + 160) + 12) - *(__int16 *)(a1 + 126);
  if ( v9 )
    v9 /= (int)abs32(v9);
  *(_WORD *)(a1 + 126) += 16 * v9;
  v10 = *(_WORD *)(a1 + 34);
  HIBYTE(v10) &= 7u;
  v11 = sub_42210_42550(*(_WORD *)(a1 + 30), v10);
  v12 = 255 - *(__int16 *)(*(_DWORD *)(a1 + 160) + 526);
  v13 = v11 / (int)(unsigned __int16)(((int)(v12 - (__CFSHL__(HIDWORD(v12), 4) + 16 * HIDWORD(v12))) >> 4) + 8);
  v14 = *(_DWORD *)(a1 + 156);
  v15 = v13;
  if ( (__int16)v13 <= *(__int16 *)(v14 + 2) )
  {
    if ( (__int16)v13 < *(__int16 *)(v14 + 4) )
      v15 = *(_WORD *)(v14 + 4);
  }
  else
  {
    v15 = *(_WORD *)(v14 + 2);
  }
  v16 = sub_42240_42580(*(unsigned __int16 *)(a1 + 30), *(_WORD *)(a1 + 34)) * v15;
  v17 = *(unsigned __int16 *)(a1 + 30);
  v18 = (v17 + v16) & 0x7FF;
  v19 = *(_WORD *)(a1 + 34);
  *(_WORD *)(a1 + 30) = v18;
  if ( (unsigned __int16)v17 < (unsigned int)v19 && v18 > v19
    || (v19 = *(_WORD *)(a1 + 34), v17 > v19) && v19 > *(_WORD *)(a1 + 30) )
  {
    *(_WORD *)(a1 + 30) = v19;
  }
  return 1;
}
// AE444: using guessed type __int16 word_AE454_AE44X;

//----- (00015080) --------------------------------------------------------
unsigned int sub_15080(int a1)
{
  unsigned int v1; // esi
  unsigned int v2; // ebx
  int v3; // eax
  int v4; // edx
  unsigned int v5; // eax
  unsigned int v6; // eax
  int v7; // ebp
  unsigned int v9; // [esp+8h] [ebp-24h]
  _WORD *v10; // [esp+Ch] [ebp-20h]
  unsigned int v11; // [esp+10h] [ebp-1Ch]
  unsigned int v12; // [esp+18h] [ebp-14h]

  v1 = -1;
  v2 = *(_DWORD *)(dword_AE408_AE3F8() + 36466);
  v9 = 164 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 50) + dword_AE400_AE3F0() + 29795;
  v12 = 0;
  v10 = (_WORD *)(a1 + 72);
  while ( v2 > dword_AE400_AE3F0() + 29795 )
  {
    v3 = *(unsigned __int16 *)(v2 + 144);
    v4 = 164 * (unsigned __int16)v3 + dword_AE400_AE3F0();
    if ( *(_BYTE *)(v4 + 29859) != 3 )
    {
      v5 = sub_42750(v10, (_WORD *)(v2 + 72));
      if ( v5 >= v1 )
        goto LABEL_19;
      goto LABEL_18;
    }
    if ( v3 == *(__int16 *)(a1 + 24) )
      goto LABEL_19;
    if ( 50000 - *(_DWORD *)(v4 + 29931) / 10 * *(__int16 *)(*(_DWORD *)(a1 + 160) + 522) / 255 < *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 8 * *(__int16 *)(*(_DWORD *)(v4 + 29955) + 48) + 460) )
    {
      v5 = sub_42750((_WORD *)(v9 + 72), (_WORD *)(v2 + 72));
      if ( v5 >= v1 )
        goto LABEL_19;
LABEL_18:
      v12 = v2;
      v1 = v5;
      goto LABEL_19;
    }
    v11 = sub_15340(v2, a1);
    if ( v11 )
    {
      v6 = dword_AE400_AE3F0() + 29795 >= v9 ? sub_15260(v2, 2u) : sub_153B0(v2, v9);
      v7 = v6;
      if ( (*(_WORD *)(a1 + 24) == *(_WORD *)(v11 + 24) || sub_42750((_WORD *)(v2 + 72), (_WORD *)(v11 + 72)) > 26214400)
        && (!v7 || !sub_11950((Type_AE400_29795*)v2, (Type_AE400_29795*)v7)) )
      {
        v5 = sub_42750(v10, (_WORD *)(v2 + 72));
        if ( v5 < v1 )
          goto LABEL_18;
      }
    }
LABEL_19:
    v2 = *(_DWORD *)v2;
  }
  return v12;
}
// 15222: conditional instruction was optimized away because cl.1!=3
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00015260) --------------------------------------------------------
unsigned int sub_15260(int a1, unsigned __int8 a2)
{
  unsigned int v2; // esi
  unsigned int v3; // edi
  unsigned int i; // ebx
  unsigned int v5; // eax
  unsigned int j; // ebx
  unsigned int v7; // eax

  v2 = -1;
  v3 = 0;
  if ( a2 < 2u )
  {
    if ( a2 )
      return v3;
  }
  else if ( a2 > 3u )
  {
    if ( a2 == 0xFF )
    {
      for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
      {
        if ( *(_WORD *)(i + 24) != *(_WORD *)(a1 + 24) )
        {
          v5 = sub_42750((_WORD *)(a1 + 72), (_WORD *)(i + 72));
          if ( v5 < v2 )
          {
            v3 = i;
            v2 = v5;
          }
        }
      }
    }
    return v3;
  }
  for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36462); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
  {
    if ( *(_WORD *)(j + 24) != *(_WORD *)(a1 + 24) && *(char *)(j + 65) == a2 )
    {
      v7 = sub_42750((_WORD *)(a1 + 72), (_WORD *)(j + 72));
      if ( v7 < v2 )
      {
        v3 = j;
        v2 = v7;
      }
    }
  }
  return v3;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00015340) --------------------------------------------------------
unsigned int sub_15340(int a1, int a2)
{
  unsigned int v2; // esi
  unsigned int v3; // edi
  unsigned int i; // ebx
  __int16 v5; // ax
  unsigned int v6; // eax

  v2 = -1;
  v3 = 0;
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    v5 = *(_WORD *)(i + 24);
    if ( v5 != *(_WORD *)(a1 + 24) && v5 != *(_WORD *)(a2 + 24) && *(_BYTE *)(i + 65) <= 1u )
    {
      v6 = sub_42750((_WORD *)(a1 + 72), (_WORD *)(i + 72));
      if ( v6 < v2 )
      {
        v3 = i;
        v2 = v6;
      }
    }
  }
  return v3;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (000153B0) --------------------------------------------------------
unsigned int sub_153B0(int a1, int a2)
{
  unsigned int v2; // esi
  unsigned int v3; // edi
  unsigned int i; // ebx
  __int16 v5; // ax
  unsigned int v6; // eax

  v2 = -1;
  v3 = 0;
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    v5 = *(_WORD *)(i + 24);
    if ( v5 != *(_WORD *)(a1 + 24) && v5 != *(_WORD *)(a2 + 24) && *(_BYTE *)(i + 65) == 2 )
    {
      v6 = sub_42750((_WORD *)(a1 + 72), (_WORD *)(i + 72));
      if ( v6 < v2 )
      {
        v3 = i;
        v2 = v6;
      }
    }
  }
  return v3;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00015420) --------------------------------------------------------
__int16 sub_15420(int a1)
{
  return *(_WORD *)(a1 + 24) + *(char *)(a1 + 65) + (*(char *)(a1 + 64) << 7);
}

//----- (00015440) --------------------------------------------------------
bool sub_15440(int a1, int a2)
{
  return sub_15420(a2) == *(_WORD *)(a1 + 148);
}

//----- (00015470) --------------------------------------------------------
int sub_15470(int a1, int a2, signed int a3, signed int a4)
{
  signed int v4; // eax
  signed int v5; // esi
  signed int v6; // esi

  *(_WORD *)(*(_DWORD *)(a1 + 160) + 14) = 0;
  v4 = sub_42340_42680((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(a2 + 72));
  v5 = v4;
  if ( a2 )
  {
    if ( v4 > a3 )
    {
      if ( sub_15E60(a1, 2u) )
        return 0;
      if ( v5 > a4 && sub_15A00(a1, 2u) )
      {
        sub_155F0(a1, 2u);
        return 0;
      }
      *(_WORD *)(*(_DWORD *)(a1 + 160) + 12) = *(_WORD *)(a1 + 128);
      goto LABEL_15;
    }
LABEL_8:
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 12) = 0;
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 14) = 1;
    return 1;
  }
  v6 = sub_423D0_42710((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(a1 + 150));
  if ( v6 <= a3 )
    goto LABEL_8;
  if ( !sub_15E60(a1, 2u) )
  {
    if ( v6 > a4 && sub_15A00(a1, 2u) )
    {
      sub_155F0(a1, 2u);
      return 0;
    }
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 12) = *(_WORD *)(a1 + 128);
LABEL_15:
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 14) = 1;
  }
  return 0;
}

//----- (000155F0) --------------------------------------------------------
int sub_155F0(int a1, unsigned __int8 a2)
{
  unsigned int v2; // esi
  int v3; // ebx
  int result; // eax
  unsigned int v5; // esi
  unsigned int v6; // eax
  int v7; // eax
  unsigned int v8; // eax
  unsigned int v9; // eax
  unsigned int v10; // eax

  if ( !sub_15A00(a1, a2) )
    return 0;
  *(_BYTE *)(a1 + 17) &= ~1u;
  switch ( a2 )
  {
    case 0u:
    case 0xFu:
      v2 = sub_14E60(a1, a2);
      if ( !v2
        || *(__int16 *)(*(_DWORD *)(a1 + 160) + 404) < 0
        || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v2 + 136)
        || (unsigned __int16)sub_42210_42550(*(_WORD *)(a1 + 30), *(_WORD *)(a1 + 34)) >= 0xAAu )
      {
        return 0;
      }
      *(_WORD *)(2 * a2 + *(_DWORD *)(a1 + 160) + 724) = word_90034[a2];
      *(_WORD *)(a1 + 32) = sub_42180_424C0(
          (axis_3d*)(_WORD *)(a1 + 72),
          (axis_3d*)(_WORD *)(164 * *(unsigned __int16 *)(a1 + 146) + dword_AE400_AE3F0() + 29795 + 72));
      *(_WORD *)(v2 + 48) = *(_WORD *)(v2 + 50);
      ++*(_WORD *)(*(_DWORD *)(a1 + 160) + 404);
      v3 = *(_DWORD *)(a1 + 160);
      if ( *(__int16 *)(v3 + 404) >= 8 )
        *(_WORD *)(v3 + 404) = ((*(__int16 *)(v3 + 526)
                               - 255
                               - (__CFSHL__((*(__int16 *)(v3 + 526) - 255) >> 31, 3)
                                + 8 * ((*(__int16 *)(v3 + 526) - 255) >> 31))) >> 3)
                             - 1;
      result = 1;
      break;
    case 1u:
    case 4u:
    case 5u:
    case 0xEu:
      v9 = sub_14E60(a1, a2);
      if ( !v9 || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v9 + 136) )
        return 0;
      *(_WORD *)(v9 + 48) = *(_WORD *)(v9 + 50);
      *(_WORD *)(*(_DWORD *)(a1 + 160) + 2 * a2 + 724) = word_90034[a2];
      result = 1;
      break;
    case 2u:
      v8 = sub_14E60(a1, a2);
      if ( !v8 || *(_WORD *)(v8 + 48) || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v8 + 136) )
        return 0;
      *(_WORD *)(v8 + 48) = *(_WORD *)(v8 + 50);
      *(_WORD *)(*(_DWORD *)(a1 + 160) + 2 * a2 + 724) = word_90034[a2];
      result = 1;
      break;
    case 3u:
    case 7u:
    case 8u:
    case 0xBu:
    case 0xDu:
    case 0x11u:
    case 0x14u:
      v5 = sub_14E60(a1, a2);
      if ( !v5
        || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v5 + 136)
        || (unsigned __int16)sub_42210_42550(*(_WORD *)(a1 + 30), *(_WORD *)(a1 + 34)) >= 0xE3u )
      {
        return 0;
      }
      *(_WORD *)(2 * a2 + *(_DWORD *)(a1 + 160) + 724) = word_90034[a2];
      *(_WORD *)(a1 + 32) = sub_42180_424C0(
          (axis_3d*)(_WORD *)(a1 + 72),
          (axis_3d*)(_WORD *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 146) + 72));
      *(_WORD *)(v5 + 48) = *(_WORD *)(v5 + 50);
      result = 1;
      break;
    case 6u:
    case 9u:
    case 0xAu:
    case 0xCu:
      v10 = sub_14E60(a1, a2);
      if ( !v10 || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v10 + 136) )
        return 0;
      *(_WORD *)(v10 + 48) = *(_WORD *)(v10 + 50);
      *(_WORD *)(*(_DWORD *)(a1 + 160) + 2 * a2 + 724) = word_90034[a2];
      result = 1;
      break;
    case 0x10u:
      v6 = sub_14E60(a1, a2);
      if ( !v6 || *(_WORD *)(v6 + 48) || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v6 + 136) )
        return 0;
      if ( *(_WORD *)(*(_DWORD *)(a1 + 160) + 50) )
      {
        *(_WORD *)(v6 + 48) = *(_WORD *)(v6 + 50);
        *(_WORD *)(*(_DWORD *)(a1 + 160) + 2 * a2 + 724) = word_90034[a2];
        result = 1;
      }
      else
      {
        v7 = (int)sub_373F0_377B0((axis_3d*)(a1 + 150), 3, 2);
        if ( v7 )
        {
          *(_WORD *)(v7 + 24) = *(_WORD *)(a1 + 24);
          *(_WORD *)(*(_DWORD *)(a1 + 160) + 50) = (v7 - (dword_AE400_AE3F0() + 29795)) / 164;
        }
        result = 1;
      }
      break;
    default:
      return 0;
  }
  return result;
}
// 90034: using guessed type __int16 word_90034[24];
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00015A00) --------------------------------------------------------
int sub_15A00(int a1, unsigned __int8 a2)
{
  unsigned int v2; // eax
  int result; // eax
  unsigned int v4; // eax
  unsigned int v5; // eax
  int v6; // edx
  __int64 v7; // rax
  unsigned int v8; // esi
  int v9; // eax
  int v10; // edx
  __int64 v11; // rax
  unsigned int v12; // eax
  int v13; // edx
  __int64 v14; // rax
  unsigned int v15; // eax

  switch ( a2 )
  {
    case 0u:
    case 0xBu:
    case 0xDu:
    case 0xFu:
      v12 = sub_14E60(a1, a2);
      if ( !v12 )
        goto LABEL_37;
      v13 = *(_DWORD *)(a1 + 160);
      if ( *(_WORD *)(v13 + 2 * a2 + 724) )
        goto LABEL_37;
      if ( *(_DWORD *)(a1 + 140) < *(_DWORD *)(v12 + 136) )
        goto LABEL_37;
      v14 = 255 - *(__int16 *)(v13 + 524);
      if ( (unsigned __int16)sub_42210_42550(*(_WORD *)(a1 + 30), *(_WORD *)(a1 + 34)) >= ((((int)(v14
                                                                                           - (__CFSHL__(HIDWORD(v14), 2)
                                                                                            + 4 * HIDWORD(v14))) >> 2)
                                                                                    + 20) << 11)
                                                                                  / 360 )
        goto LABEL_37;
      result = 1;
      break;
    case 2u:
      v2 = sub_14E60(a1, a2);
      if ( !v2 || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v2 + 136) )
        goto LABEL_37;
      result = 1;
      break;
    case 3u:
    case 7u:
    case 8u:
    case 0x11u:
    case 0x14u:
      v5 = sub_14E60(a1, a2);
      if ( !v5 )
        goto LABEL_37;
      if ( *(_WORD *)(v5 + 48) )
        goto LABEL_37;
      v6 = *(_DWORD *)(a1 + 160);
      if ( *(_WORD *)(v6 + 2 * a2 + 724) )
        goto LABEL_37;
      if ( *(_DWORD *)(a1 + 140) < *(_DWORD *)(v5 + 136) )
        goto LABEL_37;
      v7 = 255 - *(__int16 *)(v6 + 524);
      if ( (unsigned __int16)sub_42210_42550(*(_WORD *)(a1 + 30), *(_WORD *)(a1 + 34)) >= ((((int)(v7
                                                                                           - (__CFSHL__(HIDWORD(v7), 2)
                                                                                            + 4 * HIDWORD(v7))) >> 2)
                                                                                    + 20) << 11)
                                                                                  / 360 )
        goto LABEL_37;
      result = 1;
      break;
    case 4u:
    case 0xCu:
    case 0xEu:
      v4 = sub_14E60(a1, a2);
      if ( !v4
        || *(_WORD *)(v4 + 48)
        || *(_WORD *)(*(_DWORD *)(a1 + 160) + 2 * a2 + 724)
        || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v4 + 136) )
      {
        goto LABEL_37;
      }
      result = 1;
      break;
    case 0x10u:
      v8 = sub_14E60(a1, a2);
      if ( !v8 )
        goto LABEL_37;
      v9 = *(_DWORD *)(a1 + 160);
      v10 = v9 + 2 * a2;
      if ( *(_WORD *)(v9 + 50) )
      {
        if ( *(_WORD *)(v8 + 48) )
          goto LABEL_37;
        if ( *(_WORD *)(v10 + 724) )
          goto LABEL_37;
        if ( !sub_12D10((_WORD *)(164 * *(unsigned __int16 *)(v9 + 50) + dword_AE400_AE3F0() + 29795)) )
          goto LABEL_37;
        if ( *(_DWORD *)(a1 + 140) < *(_DWORD *)(v8 + 136) )
          goto LABEL_37;
        v11 = 255 - *(__int16 *)(*(_DWORD *)(a1 + 160) + 524);
        if ( (unsigned __int16)sub_42210_42550(*(_WORD *)(a1 + 30), *(_WORD *)(a1 + 34)) >= ((((int)(v11
                                                                                             - (__CFSHL__(
                                                                                                  HIDWORD(v11),
                                                                                                  2)
                                                                                              + 4 * HIDWORD(v11))) >> 2)
                                                                                      + 20) << 11)
                                                                                    / 360 )
          goto LABEL_37;
        result = 1;
      }
      else
      {
        if ( *(_WORD *)(v10 + 724) || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v8 + 136) )
          goto LABEL_37;
        result = 1;
      }
      break;
    default:
      if ( a2 >= 0x18u
        || (v15 = sub_14E60(a1, a2)) == 0
        || *(_WORD *)(*(_DWORD *)(a1 + 160) + 2 * a2 + 724)
        || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v15 + 136) )
      {
LABEL_37:
        result = 0;
      }
      else
      {
        result = 1;
      }
      break;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00015E60) --------------------------------------------------------
bool sub_15E60(int a1, unsigned __int8 a2)
{
  unsigned int v2; // eax
  bool result; // eax

  result = 0;
  if ( a2 < 0x18u )
  {
    v2 = sub_14E60(a1, a2);
    if ( v2 )
    {
      if ( *(__int16 *)(v2 + 48) > 0 )
        return 1;
    }
  }
  return result;
}

//----- (00015E90) --------------------------------------------------------
bool sub_15E90(int a1, unsigned __int8 a2)
{
  return *(_DWORD *)(sub_14E60(a1, a2) + 136) <= *(_DWORD *)(a1 + 136);
}

//----- (00015EC0) --------------------------------------------------------
int sub_15EC0(int a1)
{
  int v1; // esi
  int v2; // eax
  __int16 v3; // bx
  int v4; // ecx
  int v5; // edx
  int v6; // eax
  int v7; // ebp
  int result; // eax
  unsigned int i; // [esp+4h] [ebp-1Ch]
  int v10; // [esp+8h] [ebp-18h]

  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); ; i = *(_DWORD *)i )
  {
    result = dword_AE400_AE3F0() + 29795;
    if ( dword_AE400_AE3F0() + 29795 >= i )
      break;
    if ( !*(_BYTE *)(i + 65) )
    {
      v1 = 0;
      v10 = 0;
      do
      {
        v2 = v1 + *(_DWORD *)(a1 + 160);
        if ( !*(_WORD *)(v2 + 676) )
        {
          v3 = *(_WORD *)(v2 + 628);
          if ( v3 > 0 )
          {
            *(_WORD *)(v2 + 628) = v3 - 1;
            if ( v3 == 1 )
            {
              v4 = (*(int (**)(int))((char *)&off_987DE + v10))(a1 + 72);
              if ( v4 )
              {
                v5 = *(_DWORD *)(a1 + 160);
                v6 = 0;
                while ( *(_DWORD *)(v5 + 532) )
                {
                  ++v6;
                  v5 += 4;
                  if ( v6 >= 24 )
                    goto LABEL_12;
                }
                v7 = dword_AE400_AE3F0() + 29795;
                *(_BYTE *)(v4 + 16) |= 1u;
                *(_WORD *)(v4 + 42) = (a1 - v7) / 164;
                *(_DWORD *)(*(_DWORD *)(a1 + 160) + 4 * v6 + 532) = (v4 - v7) / 164;
              }
            }
          }
        }
LABEL_12:
        v1 += 2;
        v10 += 14;
      }
      while ( v1 != 48 );
    }
  }
  return result;
}
// 987DE: using guessed type int (*off_987DE)(int);
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00016000) --------------------------------------------------------
unsigned int sub_16000(int a1, unsigned __int8 a2)
{
  unsigned int result; // eax

  result = sub_14E60(a1, a2);
  if ( !result || *(__int16 *)(result + 48) <= 0 )
    return 0;
  return result;
}

//----- (00016030) --------------------------------------------------------
char sub_16030(int a1)
{
  int v1; // eax
  int v2; // ecx
  int v3; // eax
  int v4; // esi
  int v6; // esi

  v1 = (*(_DWORD *)(a1 + 136) - (__CFSHL__(*(int *)(a1 + 136) >> 31, 2) + 4 * (*(int *)(a1 + 136) >> 31))) >> 2;
  if ( v1 > *(_DWORD *)(a1 + 140) )
  {
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 406) = 1;
    goto LABEL_9;
  }
  v2 = *(_DWORD *)(a1 + 160);
  if ( *(_WORD *)(v2 + 406) )
  {
    v3 = v1 + 6000;
    v4 = *(_DWORD *)(a1 + 136);
    if ( v3 >= v4 )
    {
      if ( v4 / 2 > *(_DWORD *)(a1 + 140) )
        goto LABEL_9;
    }
    else if ( v3 > *(_DWORD *)(a1 + 140) )
    {
      goto LABEL_9;
    }
    *(_WORD *)(v2 + 406) = 0;
  }
LABEL_9:
  if ( !*(_WORD *)(*(_DWORD *)(a1 + 160) + 406) )
  {
    if ( !sub_14E60(a1, 0x11u) )
      goto LABEL_50;
    if ( sub_15A00(a1, 0x11u) )
      return 17;
    if ( !sub_15E90(a1, 0x11u) || *(_WORD *)(*(_DWORD *)(a1 + 160) + 758) )
    {
LABEL_50:
      if ( !sub_14E60(a1, 8u) )
        goto LABEL_49;
      if ( sub_15A00(a1, 8u) )
        return 8;
      if ( !sub_15E90(a1, 8u) || *(_WORD *)(*(_DWORD *)(a1 + 160) + 740) )
      {
LABEL_49:
        if ( sub_16000(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 146), 0xEu)
          && (v6 = *(__int16 *)(*(_DWORD *)(a1 + 160) + 524), rand() % 255 < v6) )
        {
          if ( sub_14E60(a1, 0xFu) )
          {
            if ( sub_15A00(a1, 0xFu) )
              return 15;
            if ( sub_15E90(a1, 0xFu) )
              return -1;
          }
        }
        else
        {
          if ( !sub_14E60(a1, 7u) )
            goto LABEL_52;
          if ( sub_15A00(a1, 7u) )
            return 7;
          if ( !sub_15E90(a1, 7u) || *(_WORD *)(*(_DWORD *)(a1 + 160) + 738) )
          {
LABEL_52:
            if ( !sub_14E60(a1, 0x14u) )
              goto LABEL_53;
            if ( sub_15A00(a1, 0x14u) )
              return 20;
            if ( !sub_15E90(a1, 0x14u) || *(_WORD *)(*(_DWORD *)(a1 + 160) + 764) )
            {
LABEL_53:
              if ( !sub_14E60(a1, 0) )
                goto LABEL_51;
              if ( sub_15A00(a1, 0) )
                return 0;
              if ( !sub_15E90(a1, 0) || *(_WORD *)(*(_DWORD *)(a1 + 160) + 724) )
              {
LABEL_51:
                if ( sub_14E60(a1, 0xFu) )
                {
                  if ( sub_15A00(a1, 0xFu) )
                    return 15;
                  sub_15E90(a1, 0xFu);
                }
              }
            }
          }
        }
      }
    }
  }
  return -1;
}
// 5DD50: using guessed type int rand(void);
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00016310) --------------------------------------------------------
char sub_16310(_DWORD *a1)
{
  int v1; // eax
  int v2; // ecx
  int v3; // eax
  int v4; // esi

  v1 = (a1[34] - (__CFSHL__((int)a1[34] >> 31, 2) + 4 * ((int)a1[34] >> 31))) >> 2;
  if ( v1 > a1[35] )
  {
    *(_WORD *)(a1[40] + 406) = 1;
    goto LABEL_9;
  }
  v2 = a1[40];
  if ( *(_WORD *)(v2 + 406) )
  {
    v3 = v1 + 6000;
    v4 = a1[34];
    if ( v3 >= v4 )
    {
      if ( v4 / 2 > a1[35] )
        goto LABEL_9;
    }
    else if ( v3 > a1[35] )
    {
      goto LABEL_9;
    }
    *(_WORD *)(v2 + 406) = 0;
  }
LABEL_9:
  if ( !*(_WORD *)(a1[40] + 406) )
  {
    if ( !sub_14E60((int)a1, 0x11u) )
      goto LABEL_46;
    if ( sub_15A00((int)a1, 0x11u) )
      return 17;
    if ( !sub_15E90((int)a1, 0x11u) || *(_WORD *)(a1[40] + 758) )
    {
LABEL_46:
      if ( !sub_14E60((int)a1, 8u) )
        goto LABEL_45;
      if ( sub_15A00((int)a1, 8u) )
        return 8;
      if ( !sub_15E90((int)a1, 8u) || *(_WORD *)(a1[40] + 740) )
      {
LABEL_45:
        if ( !sub_14E60((int)a1, 7u) )
          goto LABEL_44;
        if ( sub_15A00((int)a1, 7u) )
          return 7;
        if ( !sub_15E90((int)a1, 7u) || *(_WORD *)(a1[40] + 738) )
        {
LABEL_44:
          if ( !sub_14E60((int)a1, 0x14u) )
            goto LABEL_43;
          if ( sub_15A00((int)a1, 0x14u) )
            return 20;
          if ( !sub_15E90((int)a1, 0x14u) || *(_WORD *)(a1[40] + 764) )
          {
LABEL_43:
            if ( !sub_14E60((int)a1, 0) )
              goto LABEL_42;
            if ( sub_15A00((int)a1, 0) )
              return 0;
            if ( !sub_15E90((int)a1, 0) || *(_WORD *)(a1[40] + 724) )
            {
LABEL_42:
              if ( sub_14E60((int)a1, 0xFu) )
              {
                if ( sub_15A00((int)a1, 0xFu) )
                  return 15;
                sub_15E90((int)a1, 0xFu);
              }
            }
          }
        }
      }
    }
  }
  return -1;
}

//----- (00016540) --------------------------------------------------------
int sub_16540(int result)
{
  unsigned int i; // edi
  unsigned int v2; // esi
  unsigned int v3; // ecx
  int v4; // ebx
  unsigned __int8 v5; // al
  int v6; // ebp
  int v7; // ebx
  unsigned __int8 v8; // al
  int v9; // edx
  int v10; // eax
  unsigned int v11; // ebp
  int v12; // edx
  unsigned int v13; // ebx

  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36474); ; i = *(_DWORD *)i )
  {
    v12 = dword_AE400_AE3F0();
    v13 = dword_AE400_AE3F0() + 29795;
    if ( i <= dword_AE400_AE3F0() + 29795 )
      break;
    if ( (*(_BYTE *)(i + 17) & 0x20) != 0 )
      continue;
    result = 164 * *(__int16 *)(i + 24);
    v2 = v13 + result;
    if ( v13 + result <= v13 )
      continue;
    if ( *(_BYTE *)(v2 + 64) != 3 )
      continue;
    result = 164 * *(unsigned __int16 *)(i + 146);
    v3 = v13 + result;
    if ( v13 + result <= v13 )
      continue;
    *(_BYTE *)(i + 17) |= 0x20u;
    LOBYTE(result) = *(_BYTE *)(v3 + 64);
    if ( (unsigned __int8)result < 3u )
      continue;
    if ( (unsigned __int8)result <= 3u )
    {
      if ( *(_BYTE *)(v3 + 65) != 2 )
      {
        v7 = *(unsigned __int16 *)(*(_DWORD *)(v12 + 164 * *(__int16 *)(v3 + 24) + 29955)
                                 + 8 * *(__int16 *)(*(_DWORD *)(v2 + 160) + 48)
                                 + 460);
        v8 = *(_BYTE *)(i + 65);
        if ( v8 < 0xAu )
        {
          if ( v8 >= 3u && v8 <= 4u )
            goto LABEL_33;
LABEL_34:
          v7 += 500;
        }
        else if ( v8 > 0xAu )
        {
          if ( v8 > 0xBu && v8 != 16 )
            goto LABEL_34;
LABEL_33:
          v7 += 3000;
        }
        if ( v7 < 0 )
          v7 = 0;
        if ( v7 > 0xFFFF )
          LOWORD(v7) = -1;
        v9 = *(_DWORD *)(dword_AE400_AE3F0() + 164 * *(__int16 *)(v3 + 24) + 29955);
        v10 = *(_DWORD *)(v2 + 160);
        goto LABEL_49;
      }
      v4 = *(unsigned __int16 *)(*(_DWORD *)(v12 + 164 * *(__int16 *)(v3 + 24) + 29955)
                               + 8 * *(__int16 *)(*(_DWORD *)(v2 + 160) + 48)
                               + 460);
      v5 = *(_BYTE *)(i + 65);
      if ( v5 < 0xAu )
      {
        if ( v5 >= 3u && v5 <= 4u )
          goto LABEL_18;
LABEL_19:
        v4 += 1000;
      }
      else if ( v5 > 0xAu )
      {
        if ( v5 > 0xBu && v5 != 16 )
          goto LABEL_19;
LABEL_18:
        v4 += 5000;
      }
      if ( v4 < 0 )
        v4 = 0;
      if ( v4 > 0xFFFF )
        v4 = 0xFFFF;
      v6 = dword_AE400_AE3F0();
      *(_WORD *)(*(_DWORD *)(164 * *(__int16 *)(v3 + 24) + dword_AE400_AE3F0() + 29955)
               + 8 * *(__int16 *)(*(_DWORD *)(v2 + 160) + 48)
               + 460) = v4;
      result = *(_DWORD *)(v2 + 136) / 10 * *(__int16 *)(*(_DWORD *)(v3 + 160) + 522) / 255;
      if ( v4 > 50000 - result )
      {
        result = *(__int16 *)(*(_DWORD *)(v2 + 160) + 48);
        *(_WORD *)(*(_DWORD *)(164 * *(__int16 *)(v3 + 24) + v6 + 29955) + 8 * result + 462) = 1;
      }
      continue;
    }
    if ( (_BYTE)result == 10 && *(_BYTE *)(i + 65) == 1 )
    {
      LOBYTE(result) = *(_BYTE *)(v3 + 65);
      if ( (_BYTE)result == 39 )
      {
        result = 164 * *(unsigned __int16 *)(v3 + 144);
        v11 = v13 + result;
        if ( v13 + result > v13 && *(_BYTE *)(v11 + 64) == 3 )
        {
          v7 = ((*(_DWORD *)(v3 + 140) - (__CFSHL__(*(int *)(v3 + 140) >> 31, 2) + 4 * (*(int *)(v3 + 140) >> 31))) >> 2)
             + *(unsigned __int16 *)(*(_DWORD *)(v11 + 160) + 8 * *(__int16 *)(*(_DWORD *)(v2 + 160) + 48) + 460);
          if ( v7 < 0 )
            v7 = 0;
          if ( v7 > 0xFFFF )
            LOWORD(v7) = -1;
          v10 = *(_DWORD *)(v2 + 160);
          v9 = *(_DWORD *)(v11 + 160);
LABEL_49:
          result = *(__int16 *)(v10 + 48);
          *(_WORD *)(v9 + 8 * result + 460) = v7;
          continue;
        }
      }
    }
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00016800) --------------------------------------------------------
unsigned int sub_16800(unsigned int a1, int a2)
{
  unsigned int v2; // esi
  unsigned int i; // ebx
  unsigned int v4; // eax

  v2 = -1;
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36474); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    if ( *(unsigned __int16 *)(i + 146) == *(__int16 *)(a2 + 24) )
    {
      v4 = sub_42750((_WORD *)(a2 + 72), (_WORD *)(i + 72));
      if ( v4 < v2 )
      {
        v2 = v4;
        a1 = i;
      }
    }
  }
  if ( v2 >= 0x1900000 )
    return 0;
  else
    return a1;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00016870) --------------------------------------------------------
int sub_16870(int a1)
{
  int result; // eax

  result = *(_DWORD *)(a1 + 160);
  *(_WORD *)(result + 16) = 80;
  return result;
}

//----- (00016890) --------------------------------------------------------
char sub_16890(int a1, int a2)
{
  int v2; // eax

  v2 = sub_42750((_WORD *)(a1 + 72), (_WORD *)(a2 + 72));
  if ( v2 < (int)&unk_100000 )
  {
    LOBYTE(v2) = *(_BYTE *)(a2 + 65);
    if ( (unsigned __int8)v2 < 4u )
    {
      if ( !(_BYTE)v2 || (_BYTE)v2 == 3 )
      {
LABEL_10:
        if ( sub_15A00(a1, 0xEu) )
        {
          LOBYTE(v2) = sub_155F0(a1, 0xEu);
          return v2;
        }
        v2 = sub_15A00(a1, 4u);
        if ( !v2 )
          return v2;
LABEL_15:
        LOBYTE(v2) = sub_155F0(a1, 4u);
      }
    }
    else
    {
      if ( (unsigned __int8)v2 <= 4u )
        goto LABEL_14;
      if ( (unsigned __int8)v2 >= 9u )
      {
        if ( (unsigned __int8)v2 > 9u )
        {
          if ( (_BYTE)v2 != 16 )
            return v2;
          goto LABEL_10;
        }
LABEL_14:
        v2 = sub_15A00(a1, 4u);
        if ( !v2 )
          return v2;
        goto LABEL_15;
      }
    }
  }
  return v2;
}

//----- (00016920) --------------------------------------------------------
_BOOL1 sub_16920(int a1)
{
  return sub_14E60(a1, 0)
      || sub_14E60(a1, 0xFu)
      || sub_14E60(a1, 8u)
      || sub_14E60(a1, 0x11u)
      || sub_14E60(a1, 0x14u)
      || sub_14E60(a1, 7u);
}

//----- (00016990) --------------------------------------------------------
char sub_16990()
{
  int v0; // ecx
  unsigned int i; // eax
  char result; // al

  v0 = dword_ACF40;
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    if ( !*(_BYTE *)(i + 65) )
      v0 = i;
  }
  result = 1;
  dword_ACF40 = v0;
  return result;
}
// ACF40: using guessed type int dword_ACF40;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (000169E0) --------------------------------------------------------
int sub_169E0()
{
  int result; // eax
  int v1; // ebx
  int v2; // ecx
  int v3; // edx

  result = dword_AE408_AE3F8();
  if ( !*(_BYTE *)(dword_AE408_AE3F8() + 150) )
  {
    v1 = ((mouse_9AD90.x << 7) - 40960) / 320;
    if ( typeResolution_12F02E_12F01E == 1 )
      v2 = (25600 - (mouse_9AD90.y << 7)) / 200;
    else
      v2 = ((mouse_9AD90.y << 7) - 30720) / -240;
    if ( v1 < -127 )
      v1 = -127;
    if ( v1 > 127 )
      LOBYTE(v1) = 127;
    if ( v2 < -127 )
      v2 = -127;
    if ( v2 > 127 )
      LOBYTE(v2) = 127;
    v3 = dword_AE400_AE3F0();
    *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29718) = v1;
    result = *(__int16 *)(v3 + 8);
    *(_BYTE *)(v3 + 10 * result + 29719) = v2;
  }
  return result;
}
// 9AD90: using guessed type __int16 word_9AD90;
// 9AD92: using guessed type __int16 word_9AD92;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//SYNCHRONIZED WITH REMC1
//----- (00016B00) --------------------------------------------------------
void sub_16B00()
{
  int v0; // edx
  int v1; // eax
  int v2; // edx
  int v3; // edx
  int v4; // eax
  int v5; // esi
  int v6; // esi
  int v7; // eax
  int v8; // esi
  int v9; // esi
  int v10; // edx
  char v11; // bh
  char* v12; // edx
  char *v13; // edi
  char *v14; // esi
  char v15; // al
  char v16; // al
  int v17; // edx
  char *v18; // edi
  char *v19; // esi
  char v20; // al
  char v21; // al
  char *v22; // edi
  char *v23; // esi
  char v24; // al
  char v25; // al
  int v26; // edx
  int v27; // edx
  int v28; // ebx
  int v29; // esi
  char* v30; // edx
  char *v31; // edi
  char *v32; // esi
  char v33; // al
  char v34; // al
  int v35; // eax
  int v36; // ebx
  _BOOL1 v37; // zf
  char* v38; // edx
  char *v39; // edi
  char *v40; // esi
  char v41; // al
  char v42; // al
  int v43; // edx
  int v44; // eax
  char* v45; // edx
  char *v46; // edi
  char *v47; // esi
  char v48; // al
  char v49; // al
  int v50; // eax
  char *v51; // edi
  char *v52; // esi
  char v53; // al
  char v54; // al
  int v55; // edx
  int v56; // esi
  int v57; // edi
  char *v58; // edi
  char *v59; // esi
  char v60; // al
  char v61; // al
  int v62; // edx
  int v63; // esi
  char v64; // al
  char *v65; // edi
  char *v66; // esi
  char v67; // al
  char v68; // al
  int v69; // edx
  int v70; // edx
  int v71; // ebx
  char *v72; // esi
  char *v73; // edi
  char v74; // al
  char v75; // al
  int v76; // eax
  int v77; // edx
  int v78; // ecx
  char *v79; // edi
  char *v80; // esi
  char v81; // al
  char v82; // al
  int v83; // edx
  char *v84; // edi
  char *v85; // esi
  char v86; // al
  char v87; // al
  int v88; // edx
  unsigned __int8 v89; // dl
  __int16 v91; // [esp-4h] [ebp-10h]

  v0 = dword_AE400_AE3F0();
  v1 = str_AE400_AE3F0->var_u16_8;
  if ( *(_BYTE *)(dword_AE400_AE3F0() + 10 * v1 + 29715) )
    return;
  if (pressedKeys_12EEF0_12EEE0[56])//byte_12EF28 8/*/Up
  {
    LOBYTE(v1) = lastPressedKey_12EF70_12EF60;
    if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 < 0x3Cu )
    {
      if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 < 0x26u )
      {
        if ( lastPressedKey_12EF70_12EF60 == 31 )
        {
          LOBYTE(v1) = dword_AE408_AE3F8();
          if ( (str_AE408_AE3F8->var_u8_0 & 0x10) == 0 )
          {
            sub_593B0_598C0();
            v2 = dword_AE400_AE3F0();
            *(__int16*)((char*)&word_38D03 + dword_AE400_AE3F0()) = str_AE408_AE3F8->var_u16_17;
            //*(_WORD*)&byte_38D03[dword_AE400_AE3F0()] = str_AE408_AE3F8->var_u16_17;
            *(int *)((char *)&dword_38D05 + v2) = dword_AC5D4_AC5C4;
            sub_3E750_3EA90(199);
            sub_3E8C0_3EC00(199);
            sub_37220_375E0();
            v3 = str_AE400_AE3F0->var_u16_8;
            str_AE400_AE3F0->var_u32_4593 = -1;
            v4 = dword_AE400_AE3F0();
            *(_WORD *)(2049 * v3 + dword_AE400_AE3F0() + 68 * str_AE400_AE3F0->var_u16_8 + 13415) = 100;
            v5 = 2049 * *(__int16 *)(v4 + 8);
            v1 = dword_AE400_AE3F0();
            *(_WORD *)(dword_AE400_AE3F0() + v5 + 68 * str_AE400_AE3F0->var_u16_8 + 13417) = 0;
            v6 = 2049 * *(__int16 *)(v1 + 8);
            LOWORD(v1) = *(_WORD *)(dword_AE400_AE3F0() + 8);
            strcpy((char *)(v6 + dword_AE400_AE3F0() + 68 * (__int16)v1 + 13351), "Game saved.");
          }
          lastPressedKey_12EF70_12EF60 = 0;
        }
      }
      else if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x26u )
      {
        LOBYTE(v1) = dword_AE408_AE3F8();
        if ( (str_AE408_AE3F8->var_u8_0 & 0x10) == 0 )
        {
          sub_3E690_3E9D0(199);
          sub_3E7F0_3EB30(199);
          str_AE408_AE3F8->var_u16_17 = *(__int16*)((char*)&word_38D03 + dword_AE400_AE3F0());
          //str_AE408_AE3F8->var_u16_17 = *(_WORD *)&byte_38D03[dword_AE400_AE3F0()];
          dword_AC5D4_AC5C4 = *(int *)((char *)&dword_38D05 + dword_AE400_AE3F0());
          sub_59420_59930();
          FlvInitSet_356E0_35AA0();
          v7 = dword_AE400_AE3F0();
          *(_WORD *)(2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 68 * str_AE400_AE3F0->var_u16_8 + 13415) = 100;
          v8 = 2049 * *(__int16 *)(v7 + 8);
          v1 = dword_AE400_AE3F0();
          *(_WORD *)(v8 + dword_AE400_AE3F0() + 68 * str_AE400_AE3F0->var_u16_8 + 13417) = 0;
          v9 = 2049 * *(__int16 *)(v1 + 8);
          LOWORD(v1) = *(_WORD *)(dword_AE400_AE3F0() + 8);
          strcpy((char *)(v9 + dword_AE400_AE3F0() + 68 * (__int16)v1 + 13351), "Game loaded.");
        }
        lastPressedKey_12EF70_12EF60 = 0;
      }
      else if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 >= 0x2Fu )
      {
        if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x2Fu )
        {
          LOBYTE(v1) = dword_AE408_AE3F8();
          if ( *(char *)(dword_AE408_AE3F8() + 1) < 0 )
            MakeControlCommand_188A0(4, 8);
          lastPressedKey_12EF70_12EF60 = 0;
        }
        else if ( lastPressedKey_12EF70_12EF60 == 59 )
        {
          MakeControlCommand_188A0(30, 1);
          lastPressedKey_12EF70_12EF60 = 0;
        }
      }
    }
    else if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x3Cu )
    {
      MakeControlCommand_188A0(30, 2);
      lastPressedKey_12EF70_12EF60 = 0;
    }
    else if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 < 0x3Fu )
    {
      if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x3Du )
        MakeControlCommand_188A0(30, 3);
      else
        MakeControlCommand_188A0(30, 4);
      lastPressedKey_12EF70_12EF60 = 0;
    }
    else if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x3Fu )
    {
      MakeControlCommand_188A0(30, 5);
      lastPressedKey_12EF70_12EF60 = 0;
    }
    else if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x40u )
    {
      MakeControlCommand_188A0(30, 6);
      lastPressedKey_12EF70_12EF60 = 0;
    }
    else if ( lastPressedKey_12EF70_12EF60 == 65 )
    {
      MakeControlCommand_188A0(30, 7);
      lastPressedKey_12EF70_12EF60 = 0;
    }
  }
  else
  {
    if ( !pressedKeys_12EEF0_12EEE0[42] && !pressedKeys_12EEF0_12EEE0[54])//byte_12EF1A shift + 8/*  byte_12EF26 6/^/Right
    {
      if ( (str_AE408_AE3F8->var_u8_0 & 0x10) == 0 && lastPressedKey_12EF70_12EF60 == 25 )
      {
        v11 = str_AE408_AE3F8->var_u8_2 ^ 1;
        str_AE408_AE3F8->var_u8_2 = v11;
        if ( (v11 & 1) != 0 )
        {
          if ( byte_939E5 )
            sub_5D010_5D520();
          if ( byte_939CD )
            sub_20E60_20E60();
        }
        else if ( byte_939CD )
        {
          sub_5D290_5D7A0(*(_WORD *)(v0 + 576));
        }
        lastPressedKey_12EF70_12EF60 = 0;
      }
      if ( lastPressedKey_12EF70_12EF60 == 19 )
      {
        if ( *(_BYTE *)(dword_AE400_AE3F0() + 8631) && !str_AE400_AE3F0->set.mod3D_8603 )
          sub_34C80_35040();
        lastPressedKey_12EF70_12EF60 = 0;
      }
      if ( lastPressedKey_12EF70_12EF60 == 57 )
      {
        MakeControlCommand_188A0(15, 0);
        MakeControlCommand_188A0(27, 0);
        lastPressedKey_12EF70_12EF60 = 0;
      }
      LOBYTE(v1) = lastPressedKey_12EF70_12EF60 - 59;
      switch ( lastPressedKey_12EF70_12EF60 )
      {
        case 0x3B://F1
          if ( byte_939E4 )
          {
            byte_939E5 ^= 1u;
            if ( byte_939E5 )
              v12 = dword_AE238_AE228[75];
            else
              v12 = dword_AE238_AE228[76];
            v13 = (char *)(dword_AE400_AE3F0()
                         + 13323
                         + 2049 * str_AE400_AE3F0->var_u16_8
                         + 28
                         + 68 * str_AE400_AE3F0->var_u16_8);
            v14 = (char *)v12;
            do
            {
              v15 = *v14;
              *v13 = *v14;
              if ( !v15 )
                break;
              v16 = v14[1];
              v14 += 2;
              v13[1] = v16;
              v13 += 2;
            }
            while ( v16 );
            sub_5D010_5D520();
            v17 = dword_AE400_AE3F0();
            *(_WORD *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 68 * str_AE400_AE3F0->var_u16_8 + 13415) = 50;
            *(_WORD *)(2049 * *(__int16 *)(v17 + 8) + v17 + 68 * *(__int16 *)(v17 + 8) + 13417) = 2;
          }
          LOBYTE(v1) = 0;
          lastPressedKey_12EF70_12EF60 = 0;
          return;
        case 0x3C://F2
          if ( !byte_939CC )
            goto LABEL_180;
          if ( byte_939CD )
          {
            sub_20E60_20E60();
            v22 = (char *)(68 * str_AE400_AE3F0->var_u16_8
                         + dword_AE400_AE3F0()
                         + 13323
                         + 2049 * str_AE400_AE3F0->var_u16_8
                         + 28);
            v23 = dword_AE238_AE228[78];
            do
            {
              v24 = *v23;
              *v22 = *v23;
              if ( !v24 )
                break;
              v25 = v23[1];
              v23 += 2;
              v22[1] = v25;
              v22 += 2;
            }
            while ( v25 );
            byte_939CD = 0;
          }
          else
          {
            v91 = *(_WORD *)(dword_AE400_AE3F0() + 576);
            byte_939CD = 1;
            sub_5D290_5D7A0(v91);
            v18 = (char *)(68 * str_AE400_AE3F0->var_u16_8
                         + dword_AE400_AE3F0()
                         + 13323
                         + 2049 * str_AE400_AE3F0->var_u16_8
                         + 28);
            v19 = dword_AE238_AE228[77];
            do
            {
              v20 = *v19;
              *v18 = *v19;
              if ( !v20 )
                break;
              v21 = v19[1];
              v19 += 2;
              v18[1] = v21;
              v18 += 2;
            }
            while ( v21 );
          }
          v26 = dword_AE400_AE3F0();
          v1 = 2049 * str_AE400_AE3F0->var_u16_8;
          *(_WORD *)(dword_AE400_AE3F0() + v1 + 68 * str_AE400_AE3F0->var_u16_8 + 13415) = 50;
          *(_WORD *)(2049 * *(__int16 *)(v26 + 8) + v26 + 68 * *(__int16 *)(v26 + 8) + 13417) = 2;
          lastPressedKey_12EF70_12EF60 = 0;
          return;
        case 0x3D://F3
          LOBYTE(v1) = dword_AE408_AE3F8();
          if ( (str_AE408_AE3F8->var_u8_0 & 0x10) != 0 )
            goto LABEL_110;
          v27 = (*(unsigned __int8 *)(dword_AE408_AE3F8() + 150) + 1) % 3;
          *(_BYTE *)(dword_AE408_AE3F8() + 150) = v27;
          if ( (_BYTE)v27 )
          {
            if ( (unsigned __int8)v27 <= 1u )
            {
              v28 = dword_AE400_AE3F0() + 13323 + 2049 * str_AE400_AE3F0->var_u16_8 + 28;
              v29 = 68 * str_AE400_AE3F0->var_u16_8;
              v30 = dword_AE238_AE228[64];
            }
            else
            {
              if ( (_BYTE)v27 != 2 )
                goto LABEL_109;
              v28 = dword_AE400_AE3F0() + 13323 + 2049 * str_AE400_AE3F0->var_u16_8 + 28;
              v29 = 68 * str_AE400_AE3F0->var_u16_8;
              v30 = dword_AE238_AE228[65];
            }
          }
          else
          {
            v28 = dword_AE400_AE3F0() + 13323 + 2049 * str_AE400_AE3F0->var_u16_8 + 28;
            v29 = 68 * str_AE400_AE3F0->var_u16_8;
            v30 = dword_AE238_AE228[63];
          }
          v31 = (char *)(v28 + v29);
          v32 = (char *)v30;
          do
          {
            v33 = *v32;
            *v31 = *v32;
            if ( !v33 )
              break;
            v34 = v32[1];
            v32 += 2;
            v31[1] = v34;
            v31 += 2;
          }
          while ( v34 );
LABEL_109:
          v35 = dword_AE400_AE3F0();
          *(_WORD *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 68 * str_AE400_AE3F0->var_u16_8 + 13415) = 50;
          v36 = *(__int16 *)(v35 + 8);
          v1 = 2049 * v36 + v35;
          *(_WORD *)(v1 + 68 * v36 + 13417) = 2;
LABEL_110:
          lastPressedKey_12EF70_12EF60 = 0;
          return;
        case 0x3E://F4
          v1 = dword_AE400_AE3F0();
          if ( *(_BYTE *)(dword_AE400_AE3F0() + 8629) )
          {
            v37 = str_AE400_AE3F0->set.softenOn_8605 == 1;
            str_AE400_AE3F0->set.softenOn_8605 ^= 1u;
            if ( v37 )
              v38 = dword_AE238_AE228[42];
            else
              v38 = dword_AE238_AE228[41];
            v39 = (char *)(dword_AE400_AE3F0() + 13323 + 2049 * *(__int16 *)(v1 + 8) + 28 + 68 * str_AE400_AE3F0->var_u16_8);
            v40 = (char *)v38;
            do
            {
              v41 = *v40;
              *v39 = *v40;
              if ( !v41 )
                break;
              v42 = v40[1];
              v40 += 2;
              v39[1] = v42;
              v39 += 2;
            }
            while ( v42 );
            v43 = dword_AE400_AE3F0();
            *(_WORD *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 68 * str_AE400_AE3F0->var_u16_8 + 13415) = 50;
            v1 = 2049 * *(__int16 *)(v43 + 8);
            *(_WORD *)(v1 + v43 + 68 * *(__int16 *)(v43 + 8) + 13417) = 2;
          }
          lastPressedKey_12EF70_12EF60 = 0;
          return;
        case 0x3F://F5
          v44 = dword_AE400_AE3F0();
          if ( *(_BYTE *)(dword_AE400_AE3F0() + 8621) )
          {
            v37 = str_AE400_AE3F0->set.reflections_8597 == 1;
            str_AE400_AE3F0->set.reflections_8597 ^= 1u;
            if ( v37 )
              v45 = dword_AE238_AE228[40];
            else
              v45 = dword_AE238_AE228[39];
            v46 = (char *)(dword_AE400_AE3F0() + 13323 + 2049 * *(__int16 *)(v44 + 8) + 28 + 68 * str_AE400_AE3F0->var_u16_8);
            v47 = (char *)v45;
            do
            {
              v48 = *v47;
              *v46 = *v47;
              if ( !v48 )
                break;
              v49 = v47[1];
              v47 += 2;
              v46[1] = v49;
              v46 += 2;
            }
            while ( v49 );
            v50 = dword_AE400_AE3F0();
            *(_WORD *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 68 * str_AE400_AE3F0->var_u16_8 + 13415) = 50;
            *(_WORD *)(2049 * *(__int16 *)(v50 + 8) + v50 + 68 * *(__int16 *)(v50 + 8) + 13417) = 2;
          }
          LOBYTE(v1) = 0;
          lastPressedKey_12EF70_12EF60 = 0;
          return;
        case 0x40://F6
          v1 = dword_AE400_AE3F0();
          if ( !*(_BYTE *)(dword_AE400_AE3F0() + 8623) || !begSky_AE3D8_AE3C8_26C3D8_26C3C8 )
            goto LABEL_180;
          v37 = str_AE400_AE3F0->set.skyOn_8599 == 1;
          str_AE400_AE3F0->set.skyOn_8599 ^= 1u;
          if ( v37 )
          {
            v51 = (char *)(68 * str_AE400_AE3F0->var_u16_8 + 2049 * *(__int16 *)(v1 + 8) + dword_AE400_AE3F0() + 13323 + 28);
            v52 = dword_AE238_AE228[44];
          }
          else
          {
            v51 = (char *)(dword_AE400_AE3F0()
                         + 13323
                         + 2049 * str_AE400_AE3F0->var_u16_8
                         + 28
                         + 68 * str_AE400_AE3F0->var_u16_8);
            v52 = dword_AE238_AE228[43];
          }
          do
          {
            v53 = *v52;
            *v51 = *v52;
            if ( !v53 )
              break;
            v54 = v52[1];
            v52 += 2;
            v51[1] = v54;
            v51 += 2;
          }
          while ( v54 );
          v55 = dword_AE400_AE3F0();
          *(_WORD *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 68 * str_AE400_AE3F0->var_u16_8 + 13415) = 50;
          v1 = 2049 * *(__int16 *)(v55 + 8);
          *(_WORD *)(v1 + v55 + 68 * *(__int16 *)(v55 + 8) + 13417) = 2;
          lastPressedKey_12EF70_12EF60 = 0;
          return;
        case 0x41://F7
          v56 = dword_AE400_AE3F0();
          if ( *(_BYTE *)(dword_AE400_AE3F0() + 8622) )
          {
            v57 = dword_AE400_AE3F0() + 13323;
            v37 = str_AE400_AE3F0->set.shadowsOn_8598 == 1;
            str_AE400_AE3F0->set.shadowsOn_8598 ^= 1u;
            v58 = (char *)(68 * *(__int16 *)(v56 + 8) + 2049 * *(__int16 *)(v56 + 8) + v57 + 28);
            if ( v37 )
              v59 = dword_AE238_AE228[38];
            else
              v59 = dword_AE238_AE228[37];
            do
            {
              v60 = *v59;
              *v58 = *v59;
              if ( !v60 )
                break;
              v61 = v59[1];
              v59 += 2;
              v58[1] = v61;
              v58 += 2;
            }
            while ( v61 );
            v62 = dword_AE400_AE3F0();
            v1 = dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8;
            *(_WORD *)(v1 + 68 * str_AE400_AE3F0->var_u16_8 + 13415) = 50;
            *(_WORD *)(2049 * *(__int16 *)(v62 + 8) + v62 + 68 * *(__int16 *)(v62 + 8) + 13417) = 2;
          }
          lastPressedKey_12EF70_12EF60 = 0;
          return;
        case 0x42://F8
          v63 = dword_AE400_AE3F0();
          v64 = str_AE400_AE3F0->set.iconsOn_8602 ^ 1;
          str_AE400_AE3F0->set.mapOn_8601 ^= 1u;
          *(_BYTE *)(v63 + 8602) = v64;
          v65 = (char *)(2049 * *(__int16 *)(v63 + 8) + v63 + 13323 + 28 + 68 * *(__int16 *)(v63 + 8));
          if ( *(_BYTE *)(v63 + 8601) )
            v66 = dword_AE238_AE228[45];
          else
            v66 = dword_AE238_AE228[46];
          do
          {
            v67 = *v66;
            *v65 = *v66;
            if ( !v67 )
              break;
            v68 = v66[1];
            v66 += 2;
            v65[1] = v68;
            v65 += 2;
          }
          while ( v68 );
          v69 = dword_AE400_AE3F0();
          *(_WORD *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 68 * str_AE400_AE3F0->var_u16_8 + 13415) = 50;
          v1 = *(__int16 *)(v69 + 8);
          *(_WORD *)(2049 * v1 + v69 + 68 * v1 + 13417) = 2;
          lastPressedKey_12EF70_12EF60 = 0;
          return;
        case 0x43://F9
          if ( !*(_BYTE *)(dword_AE400_AE3F0() + 8628) )
            goto LABEL_169;
          LOBYTE(v1) = str_AE400_AE3F0->set.blur_8604;
          v70 = dword_AE400_AE3F0() + 13323;
          if ( (_BYTE)v1 )
          {
            if ( (unsigned __int8)v1 <= 1u )
            {
              v78 = str_AE400_AE3F0->var_u16_8;
              str_AE400_AE3F0->set.blur_8604 = v1 + 1;
              v79 = (char *)(2049 * v78 + v70 + 28 + 68 * v78);
              v80 = dword_AE238_AE228[50];
              do
              {
                v81 = *v80;
                *v79 = *v80;
                if ( !v81 )
                  break;
                v82 = v80[1];
                v80 += 2;
                v79[1] = v82;
                v79 += 2;
              }
              while ( v82 );
              v83 = dword_AE400_AE3F0();
              *(_WORD *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 68 * str_AE400_AE3F0->var_u16_8 + 13415) = 50;
              v1 = 2049 * *(__int16 *)(v83 + 8);
              *(_WORD *)(v1 + v83 + 68 * *(__int16 *)(v83 + 8) + 13417) = 2;
              lastPressedKey_12EF70_12EF60 = 0;
              return;
            }
            if ( (_BYTE)v1 == 2 )
            {
              v84 = (char *)(2049 * str_AE400_AE3F0->var_u16_8 + v70 + 28 + 68 * str_AE400_AE3F0->var_u16_8);
              v85 = dword_AE238_AE228[51];
              do
              {
                v86 = *v85;
                *v84 = *v85;
                if ( !v86 )
                  break;
                v87 = v85[1];
                v85 += 2;
                v84[1] = v87;
                v84 += 2;
              }
              while ( v87 );
              v88 = dword_AE400_AE3F0();
              *(_WORD *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 68 * str_AE400_AE3F0->var_u16_8 + 13415) = 50;
              v1 = v88 + 2049 * *(__int16 *)(v88 + 8);
              *(_WORD *)(v1 + 68 * *(__int16 *)(v88 + 8) + 13417) = 2;
              *(_BYTE *)(v88 + 8604) = 0;
            }
          }
          else if ( blurBuffer_AE404_AE3F4 )
          {
            v71 = str_AE400_AE3F0->var_u16_8;
            str_AE400_AE3F0->set.blur_8604 = 1;
            v72 = dword_AE238_AE228[49];
            v73 = (char *)(68 * v71 + v70 + 2049 * v71 + 28);
            do
            {
              v74 = *v72;
              *v73 = *v72;
              if ( !v74 )
                break;
              v75 = v72[1];
              v72 += 2;
              v73[1] = v75;
              v73 += 2;
            }
            while ( v75 );
            v76 = dword_AE400_AE3F0();
            *(_WORD *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 68 * str_AE400_AE3F0->var_u16_8 + 13415) = 50;
            v77 = *(__int16 *)(v76 + 8);
            v1 = 2049 * v77 + v76;
            *(_WORD *)(v1 + 68 * v77 + 13417) = 2;
            lastPressedKey_12EF70_12EF60 = 0;
            return;
          }
LABEL_169:
          lastPressedKey_12EF70_12EF60 = 0;
          return;
        case 0x44://F10
          LOBYTE(v1) = dword_AE400_AE3F0();
          if ( *(_BYTE *)(2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 14421) || !*(_BYTE *)(dword_AE400_AE3F0() + 8627) )
            goto LABEL_180;
          v89 = str_AE400_AE3F0->set.mod3D_8603;
          if ( v89 )
          {
            if ( v89 <= 1u )
            {
              sub_315C0_31600();
              LOBYTE(v1) = dword_AE400_AE3F0();
              str_AE400_AE3F0->set.mod3D_8603 = 2;
              lastPressedKey_12EF70_12EF60 = 0;
            }
            else
            {
              if ( v89 == 2 )
              {
                str_AE400_AE3F0->set.mod3D_8603 = 0;
                goto LABEL_180;
              }
              lastPressedKey_12EF70_12EF60 = 0;
            }
          }
          else
          {
            if ( !blurBuffer_AE404_AE3F4 )
              goto LABEL_180;
            sub_31600_31640();
            v1 = dword_AE400_AE3F0();
            str_AE400_AE3F0->set.mod3D_8603 = 1;
            *(_BYTE *)(v1 + 8600) = 40;
            lastPressedKey_12EF70_12EF60 = 0;
          }
          return;
        default:
          return;
      }
    }
    LOBYTE(v1) = lastPressedKey_12EF70_12EF60;
    if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 < 0x13u )
    {
      if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 >= 0x10u )
      {
        if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x10u )
        {
          MakeControlCommand_188A0(2, 0);
          LOBYTE(v1) = 0;
          lastPressedKey_12EF70_12EF60 = 0;
        }
        else if ( lastPressedKey_12EF70_12EF60 == 18 )
        {
          LOBYTE(v1) = dword_AE408_AE3F8();
          if ( *(char *)(dword_AE408_AE3F8() + 1) < 0 )
            MakeControlCommand_188A0(26, 0);
          lastPressedKey_12EF70_12EF60 = 0;
        }
      }
    }
    else if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x13u )
    {
      LOBYTE(v1) = dword_AE408_AE3F8();
      if ( (str_AE408_AE3F8->var_u8_0 & 0x10) == 0 )
      {
        v10 = dword_AE400_AE3F0();
        *(_BYTE *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13325) |= 0xCu;
        v1 = 2049 * *(__int16 *)(v10 + 8);
        *(_WORD *)(v10 + v1 + 14476) = 0;
      }
      lastPressedKey_12EF70_12EF60 = 0;
    }
    else if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 >= 0x21u )
    {
      if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x21u )
      {
        LOBYTE(v1) = dword_AE408_AE3F8();
        if ( *(char *)(dword_AE408_AE3F8() + 1) < 0 )
        {
          v1 = 2049 * str_AE400_AE3F0->var_u16_8;
          *(_BYTE *)(dword_AE400_AE3F0() + v1 + 13325) |= 4u;
        }
        lastPressedKey_12EF70_12EF60 = 0;
      }
      else if ( lastPressedKey_12EF70_12EF60 == 46 )
      {
        LOBYTE(v1) = dword_AE408_AE3F8();
        if ( *(char *)(dword_AE408_AE3F8() + 1) >= 0 )
        {
LABEL_180:
          lastPressedKey_12EF70_12EF60 = 0;
        }
        else
        {
          LOBYTE(v1) = dword_AE400_AE3F0();
          *(_BYTE *)(2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 13325) |= 2u;
          lastPressedKey_12EF70_12EF60 = 0;
        }
      }
    }
  }
}

//----- (00017C20) --------------------------------------------------------
void sub_17C20()
{
  int v3; // eax
  int v4; // edx
  int v5; // eax
  _BYTE *v6; // edx
  int v7; // ebx
  char v8; // cl
  char v9; // al
  char v10; // ch
  int v11; // edx
  int v12; // eax
  int v13; // eax
  int v14; // edx
  int v15; // eax
  int v16; // eax
  int v17; // esi
  int v18; // edx
  int v19; // edx
  int v20; // edx
  int v21; // edx
  int v22; // edx
  int v23; // edx

  //fix
  __int16 a1;
  __int16 a2;
  __int16 a3;
  //fix

  v3 = dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8;
  if ( *(_BYTE *)(v3 + 13332) == 1 )
  {
    if ( pressedKeys_12EEF0_12EEE0[59] )
      MakeControlCommand_188A0(2, 0);
    return;
  }
  LOBYTE(v3) = *(_BYTE *)(v3 + 14421);
  switch ( (char)v3 )
  {
    case 0:
    case 4:
      v4 = str_AE400_AE3F0->var_u16_8;
      LOBYTE(v3) = 5 * v4;
      if ( *(_BYTE *)(dword_AE400_AE3F0() + 10 * v4 + 29715) )
      {
        mouseLeftButton_12EFDE_12EFCE = 0;
        mouseRightButton_12EFDC_12EFCC = 0;
        return;
      }
      sub_16B00();
      sub_3FCA0_3FFE0(0, 256, 160, 640, 400, 16, 8);
      v6 = (_BYTE *)dword_AE400_AE3F0();
      v7 = 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333) + dword_AE400_AE3F0() + 29795;
      v8 = pressedKeys_12EEF0_12EEE0[29];
      *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29720) = 0;
      if ( v8 )
      {
        switch ( lastPressedKey_12EF70_12EF60 )
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
            MakeControlCommand_188A0(25, lastPressedKey_12EF70_12EF60 - 2);
            lastPressedKey_12EF70_12EF60 = 0;
            break;
          default:
            goto LABEL_54;
        }
        goto LABEL_54;
      }
      if ( pressedKeys_12EEF0_12EEE0[56] )
      {
        if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 < 0x3Bu )
        {
          if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 < 0x21u )
          {
            if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 >= 0x13u )
            {
              if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x13u )
              {
                MakeControlCommand_188A0(12, 0);
                lastPressedKey_12EF70_12EF60 = 0;
                LOBYTE(v3) = sub_169E0();
                return;
              }
              if ( lastPressedKey_12EF70_12EF60 == 31 )
              {
                MakeControlCommand_188A0(10, 0);
                lastPressedKey_12EF70_12EF60 = 0;
              }
            }
          }
          else
          {
            if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x21u )
            {
              MakeControlCommand_188A0(4, 32);
              lastPressedKey_12EF70_12EF60 = 0;
              LOBYTE(v3) = sub_169E0();
              return;
            }
            if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 < 0x2Fu )
            {
              if ( lastPressedKey_12EF70_12EF60 == 35 )
              {
                v6[8606] ^= 1u;
                lastPressedKey_12EF70_12EF60 = 0;
              }
            }
            else
            {
              if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x2Fu )
              {
                MakeControlCommand_188A0(4, 8);
                lastPressedKey_12EF70_12EF60 = 0;
                LOBYTE(v3) = sub_169E0();
                return;
              }
              if ( lastPressedKey_12EF70_12EF60 == 50 )
              {
                MakeControlCommand_188A0(4, 16);
                lastPressedKey_12EF70_12EF60 = 0;
              }
            }
          }
          goto LABEL_54;
        }
        if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x3Bu )
        {
          MakeControlCommand_188A0(30, 1);
          lastPressedKey_12EF70_12EF60 = 0;
          LOBYTE(v3) = sub_169E0();
          return;
        }
        if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 >= 0x3Eu )
        {
          if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x3Eu )
          {
            MakeControlCommand_188A0(30, 4);
            lastPressedKey_12EF70_12EF60 = 0;
            LOBYTE(v3) = sub_169E0();
            return;
          }
          if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 < 0x40u )
          {
            MakeControlCommand_188A0(30, 5);
            lastPressedKey_12EF70_12EF60 = 0;
            LOBYTE(v3) = sub_169E0();
            return;
          }
          if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x40u )
          {
            MakeControlCommand_188A0(30, 6);
            lastPressedKey_12EF70_12EF60 = 0;
            LOBYTE(v3) = sub_169E0();
            return;
          }
          if ( lastPressedKey_12EF70_12EF60 == 65 )
          {
            MakeControlCommand_188A0(30, 7);
            lastPressedKey_12EF70_12EF60 = 0;
          }
          goto LABEL_54;
        }
        if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x3Cu )
          MakeControlCommand_188A0(30, 2);
        else
          MakeControlCommand_188A0(30, 3);
LABEL_64:
        lastPressedKey_12EF70_12EF60 = 0;
        LOBYTE(v3) = sub_169E0();
        return;
      }
      if ( pressedKeys_12EEF0_12EEE0[42] || pressedKeys_12EEF0_12EEE0[54] )
      {
        if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 < 0x25u )
        {
          if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 >= 0x10u )
          {
            if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x10u )
            {
              MakeControlCommand_188A0(2, 0);
              lastPressedKey_12EF70_12EF60 = 0;
              LOBYTE(v3) = sub_169E0();
              return;
            }
            if ( lastPressedKey_12EF70_12EF60 == 18 )
            {
              if ( *(char *)(dword_AE408_AE3F8() + 1) < 0 )
                MakeControlCommand_188A0(26, 0);
              goto LABEL_64;
            }
          }
        }
        else
        {
          if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x25u )
          {
            if ( (*(_BYTE *)dword_AE408_AE3F8() & 0x10) == 0 )
              *(_DWORD *)(v7 + 12) = -1;
            goto LABEL_64;
          }
          if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x26u )
          {
            MakeControlCommand_188A0(6, 48);
            lastPressedKey_12EF70_12EF60 = 0;
            LOBYTE(v3) = sub_169E0();
            return;
          }
          if ( lastPressedKey_12EF70_12EF60 == 46 )
          {
            if ( *(char *)(dword_AE408_AE3F8() + 1) < 0 )
              MakeControlCommand_188A0(27, 0);
            goto LABEL_64;
          }
        }
LABEL_54:
        LOBYTE(v3) = sub_169E0();
        return;
      }
      if ( lastPressedKey_12EF70_12EF60 == 26 )
      {
        if ( !v6[8603] )
        {
          v9 = v6[8600];
          if ( v9 < 40 )
            v6[8600] = v9 + 1;
        }
        lastPressedKey_12EF70_12EF60 = 0;
      }
      if ( lastPressedKey_12EF70_12EF60 == 27 )
      {
        if ( !str_AE400_AE3F0->set.mod3D_8603 )
        {
          v10 = *(_BYTE *)(dword_AE400_AE3F0() + 8600);
          if ( v10 > 17 )
            *(_BYTE *)(dword_AE400_AE3F0() + 8600) = v10 - 1;
        }
        lastPressedKey_12EF70_12EF60 = 0;
      }
      switch ( lastPressedKey_12EF70_12EF60 )
      {
        case 23:
          MakeControlCommand_188A0(16, 0);
          goto LABEL_177;
        case 1:
          MakeControlCommand_188A0(27, 0);
          MakeControlCommand_188A0(29, 0);
          lastPressedKey_12EF70_12EF60 = 0;
          return;
        case 19:
          if ( *(_BYTE *)(dword_AE400_AE3F0() + 8631) )
            sub_34C80_35040();
          lastPressedKey_12EF70_12EF60 = 0;
          break;
      }
      if ( lastPressedKey_12EF70_12EF60 == 57 )
      {
        MakeControlCommand_188A0(15, 0);
        MakeControlCommand_188A0(27, 0);
        MakeControlCommand_188A0(28, 0);
        lastPressedKey_12EF70_12EF60 = 0;
      }
      if ( mouseLeftButton_12EFDE_12EFCE && mouseRightButton_12EFDC_12EFCC )
      {
        if ( (*(_BYTE *)(dword_AE408_AE3F8() + 1) & 2) == 0 && *(int *)(v7 + 12) >= 0 )
          MakeControlCommand_188A0(20, 2);
        mouseRightButton_12EFDC_12EFCC = 0;
        mouseLeftButton_12EFDE_12EFCE = 0;
      }
      if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 >= 2u )
      {
        if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0xBu )
        {
          MakeControlCommand_188A0(24, lastPressedKey_12EF70_12EF60 - 2);
          lastPressedKey_12EF70_12EF60 = 0;
        }
        else if ( lastPressedKey_12EF70_12EF60 == 28 )
        {
          if ( *(int *)(v7 + 12) >= 0 )
            MakeControlCommand_188A0(20, 2);
          lastPressedKey_12EF70_12EF60 = 0;
        }
      }
      if ( pressedKeys_12EEF0_12EEE0[72] )
        MakeControlCommand_188A0(6, 1);
      if ( pressedKeys_12EEF0_12EEE0[80] )
        MakeControlCommand_188A0(6, 2);
      if ( pressedKeys_12EEF0_12EEE0[75] )
        MakeControlCommand_188A0(6, 4);
      if ( pressedKeys_12EEF0_12EEE0[77] )
        MakeControlCommand_188A0(6, 8);
      v11 = *(_DWORD *)(v7 + 160);
      v12 = *(__int16 *)(v11 + 940);
      if ( v12 == -1 )
      {
        mouseLeftButton_12EFDE_12EFCE = 0;
LABEL_119:
        v14 = *(_DWORD *)(v7 + 160);
        v15 = *(__int16 *)(v14 + 944);
        if ( v15 == -1 )
        {
          mouseRightButton_12EFDC_12EFCC = 0;
          LOBYTE(v3) = sub_169E0();
          return;
        }
        v16 = 164 * *(_DWORD *)(v14 + 4 * v15 + 532) + dword_AE400_AE3F0() + 29795;
        if ( *(_BYTE *)(v16 + 60) == 1 )
        {
          if ( mouseRightButton_12EFDC_12EFCC )
          {
            MakeControlCommand_188A0(6, 32);
            mouseRightButton_12EFDC_12EFCC = 0;
            LOBYTE(v3) = sub_169E0();
            return;
          }
        }
        else if ( mouseRightButton_12EFDC_12EFCC
               || mouseRightButton2_12EFE2_12EFD2 && *(__int16 *)(v16 + 48) > 0
               || mouseRightButton2_12EFE2_12EFD2 && *(_BYTE *)(v16 + 62) && *(char *)(v16 + 61) > 0 )
        {
          MakeControlCommand_188A0(6, 32);
          mouseRightButton_12EFDC_12EFCC = 0;
        }
        goto LABEL_54;
      }
      v13 = dword_AE400_AE3F0() + 29795 + 164 * *(_DWORD *)(v11 + 4 * v12 + 532);
      if ( *(_BYTE *)(v13 + 60) == 1 )
      {
        if ( !mouseLeftButton_12EFDE_12EFCE )
          goto LABEL_119;
      }
      else if ( !mouseLeftButton_12EFDE_12EFCE
             && (!mouseLeftButton2_12EFE4_12EFD4 || *(__int16 *)(v13 + 48) <= 0)
             && (!mouseLeftButton2_12EFE4_12EFD4 || !*(_BYTE *)(v13 + 62) || *(char *)(v13 + 61) <= 0) )
      {
        goto LABEL_119;
      }
      MakeControlCommand_188A0(6, 16);
      mouseLeftButton_12EFDE_12EFCE = 0;
      goto LABEL_119;
    case 1:
      sub_16B00();
      if ( mouseLeftButton_12EFDE_12EFCE && mouseRightButton_12EFDC_12EFCC || lastPressedKey_12EF70_12EF60 == 28 )
      {
        lastPressedKey_12EF70_12EF60 = 0;
        mouseRightButton_12EFDC_12EFCC = 0;
        mouseLeftButton_12EFDE_12EFCE = 0;
        MakeControlCommand_188A0(20, 0);
      }
      return;
    case 2:
      sub_3FCA0_3FFE0(
        1,
        640 - 4 * *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 22),
        162,
        640 - *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 22),
        5 * *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 23) + 162,
        *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 22),
        *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 23));
      sub_16B00();
      v3 = 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333);
      v17 = dword_AE400_AE3F0() + 29795 + v3;
      if ( *(int *)(v17 + 12) < 0 )
        MakeControlCommand_188A0(20, 0);
      if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 >= 2u && (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0xBu )
      {
        v3 = *(char *)(dword_AE408_AE3F8() + 22);
        if ( v3 != -1 )
        {
          v18 = dword_AE400_AE3F0();
          *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = 23;
          *(_BYTE *)(v18 + 10 * *(__int16 *)(v18 + 8) + 29716) = lastPressedKey_12EF70_12EF60 - 2;
          *(_BYTE *)(v18 + 10 * *(__int16 *)(v18 + 8) + 29717) = -1;
          v3 = 0;
          v19 = *(_DWORD *)(v17 + 160);
          while ( *(__int16 *)(*(_DWORD *)(v17 + 160)
                             + 2 * (unsigned __int8)byte_99B88[*(char *)(dword_AE408_AE3F8() + 22)]
                             + 676) != *(_DWORD *)(v19 + 532) )
          {
            ++v3;
            v19 += 4;
            if ( v3 >= 24 )
              goto LABEL_146;
          }
          *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29717) = v3;
        }
LABEL_146:
        lastPressedKey_12EF70_12EF60 = 0;
      }
      if ( mouseLeftButton_12EFDE_12EFCE && mouseRightButton_12EFDC_12EFCC || lastPressedKey_12EF70_12EF60 == 28 )
      {
        lastPressedKey_12EF70_12EF60 = 0;
        mouseRightButton_12EFDC_12EFCC = 0;
        mouseLeftButton_12EFDE_12EFCE = 0;
        MakeControlCommand_188A0(20, 0);
LABEL_164:
        lastPressedKey_12EF70_12EF60 = 0;
        return;
      }
      if ( mouseLeftButton_12EFDE_12EFCE )
      {
        v3 = *(char *)(dword_AE408_AE3F8() + 22);
        mouseLeftButton_12EFDE_12EFCE = 0;
        if ( v3 == -1 )
          goto LABEL_164;
        v20 = dword_AE400_AE3F0();
        *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = 21;
        *(_BYTE *)(v20 + 10 * *(__int16 *)(v20 + 8) + 29716) = -1;
        v3 = 0;
        v21 = *(_DWORD *)(v17 + 160);
        do
        {
          if ( *(__int16 *)(*(_DWORD *)(v17 + 160) + 2 * (unsigned __int8)byte_99B88[*(char *)(dword_AE408_AE3F8() + 22)] + 676) == *(_DWORD *)(v21 + 532) )
          {
            *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29716) = v3;
            lastPressedKey_12EF70_12EF60 = 0;
            return;
          }
          ++v3;
          v21 += 4;
        }
        while ( v3 < 24 );
        lastPressedKey_12EF70_12EF60 = 0;
      }
      else
      {
        if ( !mouseRightButton_12EFDC_12EFCC )
          goto LABEL_164;
        v3 = *(char *)(dword_AE408_AE3F8() + 22);
        mouseRightButton_12EFDC_12EFCC = mouseLeftButton_12EFDE_12EFCE;
        if ( v3 == -1 )
          goto LABEL_164;
        v22 = dword_AE400_AE3F0();
        *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = 22;
        *(_BYTE *)(v22 + 10 * *(__int16 *)(v22 + 8) + 29716) = -1;
        v3 = 0;
        v23 = *(_DWORD *)(v17 + 160);
        while ( *(__int16 *)(*(_DWORD *)(v17 + 160) + 2 * (unsigned __int8)byte_99B88[*(char *)(dword_AE408_AE3F8() + 22)] + 676) != *(_DWORD *)(v23 + 532) )
        {
          ++v3;
          v23 += 4;
          if ( v3 >= 24 )
            goto LABEL_164;
        }
        *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29716) = v3;
        lastPressedKey_12EF70_12EF60 = 0;
      }
      return;
    case 3:
      if ( lastPressedKey_12EF70_12EF60 > 0 )
      {
        LOBYTE(v3) = byte_9AD0C[(unsigned __int8)lastPressedKey_12EF70_12EF60];
        if ( lastPressedKey_12EF70_12EF60 == 28 )
        {
          MakeControlCommand_188A0(19, 0);
        }
        else if ( (unsigned __int8)v3 >= 0x41u && (unsigned __int8)v3 <= 0x5Au
               || (unsigned __int8)v3 >= 0x61u && (unsigned __int8)v3 <= 0x7Au
               || (unsigned __int8)v3 >= 0x30u && (unsigned __int8)v3 <= 0x39u
               || (_BYTE)v3 == 8
               || (_BYTE)v3 == 32 )
        {
          MakeControlCommand_188A0(17, byte_9AD0C[(unsigned __int8)lastPressedKey_12EF70_12EF60]);
        }
      }
LABEL_177:
      lastPressedKey_12EF70_12EF60 = 0;
      return;
    default:
      return;
  }
}
// 17CB9: variable 'v5' is possibly undefined
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// AE41C: using guessed type int begSprTab_AE42C_AE41C_26C42C_26C41C;
// 12EEFD: using guessed type char pressedKeys_12EEF0_12EEE0[29];
// 12EF0A: using guessed type char pressedKeys_12EEF0_12EEE0[42];
// 12EF16: using guessed type char pressedKeys_12EEF0_12EEE0[54];
// 12EF18: using guessed type char pressedKeys_12EEF0_12EEE0[56];
// 12EF1B: using guessed type char pressedKeys_12EEF0_12EEE0[59];
// 12EF28: using guessed type char pressedKeys_12EEF0_12EEE0[72];
// 12EF2B: using guessed type char pressedKeys_12EEF0_12EEE0[75];
// 12EF2D: using guessed type char pressedKeys_12EEF0_12EEE0[77];
// 12EF30: using guessed type char pressedKeys_12EEF0_12EEE0[80];
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFCC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFCE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFD2: using guessed type __int16 mouseRightButton2_12EFE2_12EFD2;
// 12EFD4: using guessed type __int16 mouseLeftButton2_12EFE4_12EFD4;

//SYNCHRONIZED WITH REMC1
void MakeControlCommand_188A0(int a1, char a2)
{
  int v2; // edx
  int result; // eax
  int v4; // ebx
  int v5; // ebx
  int v6; // ebx
  int v7; // ecx
  int v8; // ebx
  int v9; // ebx
  int v10; // ebx
  int v11; // esi
  int v12; // esi
  int v13; // esi
  _BYTE *v14; // ebx
  int v15; // ebx

  v2 = dword_AE400_AE3F0();
  result = a1;
  switch ( (__int16)a1 )
  {
    case 0:
    case 1:
    case 2:
    case 26:
      *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = a1;
      dword_AE400_AE3F0(v2);
      return;
    case 4:
      if ( *(char *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) != (_WORD)a1
        && *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) )
      {
        goto LABEL_80;
      }
      *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = a1;
      result = *(__int16 *)(v2 + 8);
      *(_BYTE *)(v2 + 10 * result + 29716) |= a2;
      dword_AE400_AE3F0(v2);
      return;
    case 6:
      if ( *(char *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) != (_WORD)a1
        && *(_BYTE *)(10 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 29715) )
      {
        goto LABEL_80;
      }
      *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = a1;
      result = *(__int16 *)(v2 + 8);
      *(_BYTE *)(v2 + 10 * result + 29720) |= a2;
      dword_AE400_AE3F0(v2);
      return;
    case 10:
      if ( *(char *)(10 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 29715) != (_WORD)a1
        && *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) )
      {
        goto LABEL_80;
      }
      *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = a1;
      dword_AE400_AE3F0(v2);
      return;
    case 11:
      if ( *(char *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) != (_WORD)a1
        && *(_BYTE *)(10 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 29715) )
      {
        goto LABEL_80;
      }
      *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = a1;
      dword_AE400_AE3F0(v2);
      return;
    case 12:
      if ( *(char *)(10 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 29715) != (_WORD)a1
        && *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) )
      {
        goto LABEL_80;
      }
      *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = a1;
      dword_AE400_AE3F0(v2);
      return;
    case 14:
      if ( *(char *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) != (_WORD)a1
        && *(_BYTE *)(10 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 29715) )
      {
        goto LABEL_80;
      }
      *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = a1;
      dword_AE400_AE3F0(v2);
      return;
    case 15:
      if ( *(char *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) != (_WORD)a1
        && *(_BYTE *)(10 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 29715) )
      {
        goto LABEL_80;
      }
      v4 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333);
      if ( *(int *)(v4 + 12) >= 0 || *(_BYTE *)(v4 + 70) != 3 )
        goto LABEL_80;
      *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = a1;
      dword_AE400_AE3F0(v2);
      return;
    case 16:
      if ( *(char *)(10 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 29715) != (_WORD)a1
        && *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) )
      {
        goto LABEL_80;
      }
      *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = a1;
      dword_AE400_AE3F0(v2);
      return;
    case 17:
      if ( *(char *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) != (_WORD)a1
        && *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) )
      {
        goto LABEL_80;
      }
      *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29716) = a2;
      *(_BYTE *)(v2 + 10 * *(__int16 *)(v2 + 8) + 29715) = a1;
      dword_AE400_AE3F0(v2);
      return;
    case 18:
      if ( *(char *)(10 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 29715) != (_WORD)a1
        && *(_BYTE *)(10 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 29715) )
      {
        goto LABEL_80;
      }
      *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = a1;
      dword_AE400_AE3F0(v2);
      return;
    case 19:
      if ( *(char *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) != (_WORD)a1
        && *(_BYTE *)(10 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 29715) )
      {
        goto LABEL_80;
      }
      *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = a1;
      dword_AE400_AE3F0(v2);
      return;
    case 20:
      v8 = dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8;
      if ( *(char *)(v8 + 29715) != (_WORD)a1 && *(_BYTE *)(v8 + 29715) )
        goto LABEL_80;
      goto LABEL_79;
    case 21:
      v9 = dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8;
      if ( *(char *)(v9 + 29715) == (_WORD)a1 || !*(_BYTE *)(v9 + 29715) )
        goto LABEL_79;
      goto LABEL_80;
    case 22:
      v10 = dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8;
      if ( *(char *)(v10 + 29715) == (_WORD)a1 || !*(_BYTE *)(v10 + 29715) )
        goto LABEL_79;
      goto LABEL_80;
    case 23:
      v11 = dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8;
      if ( *(char *)(v11 + 29715) == (_WORD)a1 || !*(_BYTE *)(v11 + 29715) )
        goto LABEL_79;
      goto LABEL_80;
    case 24:
      v12 = dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8;
      if ( *(char *)(v12 + 29715) == (_WORD)a1 || !*(_BYTE *)(v12 + 29715) )
        goto LABEL_79;
      goto LABEL_80;
    case 25:
      v13 = dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8;
      if ( *(char *)(v13 + 29715) == (_WORD)a1 || !*(_BYTE *)(v13 + 29715) )
        goto LABEL_79;
      goto LABEL_80;
    case 27:
      v5 = dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8;
      if ( *(char *)(v5 + 29715) != (_WORD)a1 && *(_BYTE *)(v5 + 29715)
        || (*(_BYTE *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13325) & 2) == 0 )
      {
        goto LABEL_80;
      }
      *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = a1;
      dword_AE400_AE3F0(v2);
      return;
    case 28:
      v6 = dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8;
      if ( *(char *)(v6 + 29715) != (_WORD)a1 && *(_BYTE *)(v6 + 29715)
        || (*(_BYTE *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13325) & 4) == 0 )
      {
        goto LABEL_80;
      }
      *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = a1;
      dword_AE400_AE3F0(v2);
      return;
    case 29:
      v7 = dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8;
      if ( *(char *)(v7 + 29715) != (_WORD)a1 && *(_BYTE *)(v7 + 29715) )
        goto LABEL_80;
      *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = a1;
      dword_AE400_AE3F0(v2);
      return;
    case 30:
      if ( *(char *)(dword_AE408_AE3F8() + 1) < 0
        || (v14 = (_BYTE *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8), v14[14357] == 99)
        && v14[14358] == 104
        && v14[14359] == 114
        && v14[14360] == 111
        && v14[14361] == 110
        && v14[14362] == 105
        && v14[14363] == 99
        && v14[14364] == 108
        && v14[14365] == 101 )
      {
        v15 = dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8;
        if ( *(char *)(v15 + 29715) == (_WORD)a1 || !*(_BYTE *)(v15 + 29715) )
        {
LABEL_79:
          *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = a1;
          result = *(__int16 *)(v2 + 8);
          *(_BYTE *)(v2 + 10 * result + 29716) = a2;
        }
      }
      goto LABEL_80;
    default:
LABEL_80:
      dword_AE400_AE3F0(v2);
  }
}

void sub_192D8()
{
	unsigned int tempFlag = __readeflags();
	sub_193EE(sub_192F3());
	__writeeflags(tempFlag);
}

//----- (000192F3) --------------------------------------------------------
int sub_192F3()
{
    FixPerifery((char*)"cpuid");
    cpuVar_90084 = 5;
    cpuVar_90085 = 1;
    return 1;
    /*
  unsigned int v4; // kr00_4
  unsigned int v5; // kr04_4
  int result; // eax
  unsigned int v7; // kr08_4
  unsigned int v8; // kr0C_4
  int *v14; // esi
  _BYTE *v15; // edi
  int v16; // ecx

  //fix
  v14 = 0;
  v15 = 0;
  v16 = 0;
  //fix

  //fix __asm { pushfw }
  v4 = __readeflags();
  __writeeflags((unsigned int)&loc_40000 ^ v4);
  v5 = __readeflags();
  result = v4 ^ v5;
  cpuVar_90084 = 3;
  if ( v4 != v5 )
  {
    cpuVar_90084 = 4;
    v7 = __readeflags();
    __writeeflags(v7 ^ 0x200000);
    v8 = __readeflags();
    result = v7 ^ v8;
    if ( v7 != v8 )
    {
      //fix
      byte_90076 = 1;
      _EAX = 0;
      __asm { cpuid }
      dword_9006A = _EBX;
      dword_9006E = _EDX;
      dword_90072 = _ECX;
      v14 = &dword_9006A;
      v15 = &unk_90078;
      v16 = 1;
      
      //fix
      do
      {
        if ( !v16 )
          break;
        _ZF = *(_BYTE *)v14 == *v15;
        v14 = (int *)((char *)v14 + 1);
        ++v15;
        --v16;
      }
      while ( _ZF );
      if ( !v16 )
        cpuVar_90085 = 1;
      //fix _EAX = 1;
      __asm { cpuid }
      //fix dword_90066 = _EAX;
      //fix cpuVar_90084 = (unsigned __int16)(_EAX & 0xF00) >> 8;
      //fix byte_90087 = _EAX & 0xF;
      result = dword_90066;
      byte_90086 = (unsigned __int8)(dword_90066 & 0xF0) >> 4;
    }
  }
  return result;
  */
}
// 90066: using guessed type int dword_90066;
// 9006A: using guessed type int dword_9006A;
// 9006E: using guessed type int dword_9006E;
// 90072: using guessed type int dword_90072;
// 90076: using guessed type char byte_90076;
// 90084: using guessed type char cpuVar_90084;
// 90085: using guessed type char cpuVar_90085;
// 90086: using guessed type char byte_90086;
// 90087: using guessed type char byte_90087;

//----- (000193EE) --------------------------------------------------------
void sub_193EE(__int16 a1)
{
  __int16 v1; // fps
  double v2; // st6
  _BOOL1 v3; // c0
  char v4; // c2
  _BOOL1 v5; // c3

  __asm { fninit }
  word_90064 = a1;
  if ( (_BYTE)a1 )
  {
    byte_90088 = 0;
  }
  else if ( (word_90064 & 0x103F) == 63 )
  {
    byte_90088 = 1;
    if ( cpuVar_90084 == 3 )
    {
      //fix v2 = -(1.0 / 0.0);
      //fix v3 = v2 < 1.0 / 0.0;
      v4 = 0;
      //fix v5 = v2 == 1.0 / 0.0;
      word_90064 = v1;
      byte_90089 = 2;
      //fix if ( v2 != 1.0 / 0.0 )
      //fix   byte_90089 = 3;
    }
  }
  else
  {
    byte_90088 = 0;
  }
}
// 90064: using guessed type __int16 word_90064;
// 90084: using guessed type char cpuVar_90084;
// 90088: using guessed type char byte_90088;
// 90089: using guessed type char byte_90089;

void sub_19470()
{
	sub_192D8();
	if (cpuVar_90084 == 5 && cpuVar_90085 == 1)
		str_AE408_AE3F8->var_u8_8 = 1;
	else
		str_AE408_AE3F8->var_u8_8 = 0;
}

//----- (000194F0) --------------------------------------------------------
int sub_194F0()
{
  int v0; // ebx
  int v1; // esi
  __int16 i; // cx
  unsigned int j; // eax
  int result; // eax

  v0 = dword_AE400_AE3F0();
  v1 = dword_AE408_AE3F8();
  for ( i = 0; i < 20; ++i )
  {
    for ( j = *(_DWORD *)(v1 + 4 * i + 36382); j > v0 + 29795; j = *(_DWORD *)j )
      *(_DWORD *)(j + 12) = -1;
  }
  result = *(unsigned __int16 *)(j + 34);
  dword_AE408_AE3F8(v1);
  dword_AE400_AE3F0(v0);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00019550) --------------------------------------------------------
__int16 sub_19550(int a1)
{
  __int16 result; // ax
  int v2; // esi
  int v3; // esi
  __int16 v4; // ax

  //fix
  v4 = 0;
  //fix

  result = dword_AE400_AE3F0() + 29795;
  v2 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 52);
  if ( *(_BYTE *)(v2 + 64) != 5 )
    sub_41E80_421C0((Type_AE400_29795*)a1);
  if ( *(_BYTE *)(a1 + 58) )
  {
    *(_WORD *)(a1 + 30) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v2 + 72));
    *(_WORD *)(a1 + 32) = sub_42180_424C0((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v2 + 72));
    v3 = v2 + 72;
    *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)v3;
    word_AE454_AE444.z = *(_WORD *)(v3 + 4);
    sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), -*(_WORD *)(a1 + 56));
    result = sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
    if ( *(_WORD *)(a1 + 94) )
    {
      *(_DWORD *)(a1 + 12) -= *(_DWORD *)(a1 + 90);
      result = *(_WORD *)(a1 + 94);
      *(_WORD *)(a1 + 94) = 0;
      *(_WORD *)(a1 + 40) = result;
    }
    else
    {
      *(_WORD *)(a1 + 40) = 0;
    }
  }
  else if ( (*(_BYTE *)(a1 + 63) & 3) == 0 )
  {
    sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v2 + 72));
    result = *(_WORD *)(v2 + 30);
    *(_WORD *)(a1 + 30) = result;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;

//SYNCHRONIZED WITH REMC1
signed int sub_19650(axis_3d* a1x)
{
  int v1; // eax
  unsigned __int16 v2; // dx
  unsigned __int16 v3; // bx
  unsigned __int8 v4; // cl
  unsigned __int16 v5; // bx
  int v6; // esi
  int v7; // ebx
  signed int v8; // ecx
  signed int v9; // ebx

  v1 = a1x->x >> 8;
  BYTE1(v1) = HIBYTE(a1x->y);
  v2 = v1;
  LOBYTE(v1) = v1 + 1;
  v3 = v1;
  ++BYTE1(v1);
  v4 = mapHeightmap_DC1E0_DC1D0[v3];
  v5 = v1;
  LOBYTE(v2) = mapHeightmap_DC1E0_DC1D0[v2];
  LOBYTE(v1) = v1 - 1;
  HIBYTE(v2) = mapHeightmap_DC1E0_DC1D0[v5];
  v6 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v1];
  v7 = (unsigned __int8)v2 + v4 - v6;
  v8 = abs32((unsigned __int8)v2 + v6 - v4 - HIBYTE(v2));
  v9 = abs32(v7 - HIBYTE(v2));
  if ( v8 > v9 )
    return v8;
  return v9;
}

//SYNCHRONIZED WITH REMC1
void sub_196E0(Type_AE400_29795* a1x)
{
  //__int16 *v1; // eax
  __int16 v2; // ax
  int v3; // eax
  __int16 v4; // ax
  int result; // eax
  int v6; // esi
  __int16 v7; // ax
  //__int16 *v8; // eax
  __int16 v9; // ax
  int v10; // esi
  __int16 v11; // ax
  //__int16 *v12; // eax
  __int16 v13; // ax
  int v14; // esi
  __int16 v15; // ax
  //__int16 *v16; // eax
  __int16 v17; // ax
  int v18; // esi
  int v19; // [esp-Ch] [ebp-1Ch]
  int v20; // [esp-Ch] [ebp-1Ch]
  int v21; // [esp-Ch] [ebp-1Ch]
  int v22; // [esp-Ch] [ebp-1Ch]
  int v23; // [esp-8h] [ebp-18h]
  int v24; // [esp-8h] [ebp-18h]
  int v25; // [esp-8h] [ebp-18h]
  int v26; // [esp-8h] [ebp-18h]
  int v27; // [esp-4h] [ebp-14h]
  int v28; // [esp-4h] [ebp-14h]
  int v29; // [esp-4h] [ebp-14h]
  int v30; // [esp-4h] [ebp-14h]
  __int16 v31; // [esp+0h] [ebp-10h]

  word_AE454_AE444 = a1x->var_u32_29867_72;
  //word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  //v1 = *(__int16 **)(a1 + 156);
  v27 = a1x->var_u32_29951_156->v_14;
  v23 = a1x->var_u32_29951_156->v_10;
  v19 = a1x->var_u32_29951_156->v_12;
  v2 = sub_11F50(&word_AE454_AE444);
  sub_42000_42340(&word_AE454_AE444, v2, v19, v23, v27);
  sub_41EC0_42200(&word_AE454_AE444, a1x->var_u16_29825_30, 0, a1x->actSpeed_29921_126);
  if (a1x->var_u32_29867_72.x >> 8 == word_AE454_AE444.x >> 8 )
  {
    v3 = word_AE454_AE444.y >> 8;
    if (a1x->var_u32_29867_72.y >> 8 == v3 )
      goto LABEL_3;
  }
  if ( !sub_11640(a1x, &word_AE454_AE444, 1) )
  {
    v6 = a1x->var_u32_29951_156->v_16;
    v3 = sub_19650(&word_AE454_AE444);
    if ( v3 < v6 )
      goto LABEL_3;
  }
  v31 = a1x->var_u16_29825_30;
  LOBYTE(v7) = v31 + 85;
  HIBYTE(v7) = ((unsigned __int16)(v31 + 341) >> 8) & 7;
  a1x->var_u16_29825_30 = v7;
  word_AE454_AE444 = a1x->var_u32_29867_72;
  //word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  //v8 = *(__int16 **)(a1 + 156);
  v28 = a1x->var_u32_29951_156->v_14;
  v24 = a1x->var_u32_29951_156->v_10;
  v20 = a1x->var_u32_29951_156->v_12;
  v9 = sub_11F50(&word_AE454_AE444);
  sub_42000_42340(&word_AE454_AE444, v9, v20, v24, v28);
  sub_41EC0_42200(&word_AE454_AE444, a1x->var_u16_29825_30, 0, a1x->actSpeed_29921_126);
  if ( !sub_11640(a1x, &word_AE454_AE444, 1) )
  {
    v10 = a1x->var_u32_29951_156->v_16;
    v3 = sub_19650(&word_AE454_AE444);
    if ( v3 < v10 )
      goto LABEL_3;
  }
  LOBYTE(v11) = v31 - 85;
  HIBYTE(v11) = ((unsigned __int16)(v31 - 341) >> 8) & 7;
  a1x->var_u16_29825_30 = v11;
  word_AE454_AE444 = a1x->var_u32_29867_72;
  //word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  //v12 = *(__int16 **)(a1 + 156);
  v29 = a1x->var_u32_29951_156->v_14;
  v25 = a1x->var_u32_29951_156->v_10;
  v21 = a1x->var_u32_29951_156->v_12;
  v13 = sub_11F50(&word_AE454_AE444);
  sub_42000_42340(&word_AE454_AE444, v13, v21, v25, v29);
  sub_41EC0_42200(&word_AE454_AE444, a1x->var_u16_29825_30, 0, a1x->actSpeed_29921_126);
  if ( !sub_11640(a1x, &word_AE454_AE444, 1) )
  {
    v14 = a1x->var_u32_29951_156->v_16;
    v3 = sub_19650(&word_AE454_AE444);
    if ( v3 < v14 )
      goto LABEL_3;
  }
  LOBYTE(v15) = v31;
  HIBYTE(v15) = (HIBYTE(v31) + 4) & 7;
  a1x->var_u16_29825_30 = v15;
  word_AE454_AE444 = a1x->var_u32_29867_72;
  //word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  //v16 = *(__int16 **)(a1 + 156);
  v30 = a1x->var_u32_29951_156->v_14;
  v26 = a1x->var_u32_29951_156->v_10;
  v22 = a1x->var_u32_29951_156->v_12;
  v17 = sub_11F50(&word_AE454_AE444);
  sub_42000_42340(&word_AE454_AE444, v17, v22, v26, v30);
  sub_41EC0_42200(&word_AE454_AE444, a1x->var_u16_29825_30, 0, a1x->actSpeed_29921_126);
  if ( sub_11640(a1x, &word_AE454_AE444, 1)
    || (v18 = a1x->var_u32_29951_156->v_16, v3 = sub_19650(&word_AE454_AE444), v3 >= v18) )
  {
    result = 1;
    a1x->actLife_29807_12 = -1;
  }
  else
  {
LABEL_3:
    sub_41C70_41FB0(a1x, &word_AE454_AE444);
    v4 = a1x->var_u16_29825_30
       + sub_422A0_425E0(
           a1x->var_u16_29825_30,
           a1x->var_u16_29829_34,
           a1x->var_u32_29951_156->v_4,
           a1x->var_u32_29951_156->v_2);
    HIBYTE(v4) &= 7u;
    a1x->var_u16_29825_30 = v4;
  }
}

//SYNCHONIZED WITH REMC1
void sub_19B10(Type_AE400_29795* a1x, char a2)
{
  unsigned int v2; // edx
  __int16 v3; // ax
  unsigned __int16 v4; // cx
  int i; // ebx
  int v6; // eax
  unsigned __int8 v7; // al
  //int v8; // ebx
  Type_AE400_29795* v9x; // ebx
  unsigned int v10; // ebp
  int v11; // edx
  __int16 v12; // ax
  unsigned int v13; // edi
  __int16 v14; // ax
  unsigned int v15; // [esp+0h] [ebp-20h]
  int v16; // [esp+4h] [ebp-1Ch]
  Type_AE400_29795* v17x; // [esp+8h] [ebp-18h]

  v2 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
        a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v3 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v2 = 1;
      a1x->var_u16_29835_40 = v3;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v4 = a1x->var_u16_29849_54;
    if ( v4 )
    {
      for ( i = dword_AE400_AE3F0() + 29795 + 164 * v4;
            i != dword_AE400_AE3F0() + 29795;
            i = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(i + 54) )
      {
        v6 = *(_DWORD *)(i + 12);
        if ( v6 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v6;
          v2 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(i + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v2 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v2 )
  {
    if ( v2 <= 1 )
    {
      if ( *(_BYTE *)(164 * a1x->var_u16_29835_40 + dword_AE400_AE3F0() + 29859) != 3 )
        return;
      a1x->var_u16_29941_146 = a1x->var_u16_29835_40;
      v7 = a2 + 2;
    }
    else
    {
      v7 = a2 + 4;
    }
    goto LABEL_31;
  }
  //v8 = *(_DWORD *)(a1 + 156);
  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
  {
    v15 = a1x->var_u32_29951_156->v_28 * a1x->var_u32_29951_156->v_28;
    v9x = str_AE408_AE3F8->str_36382x[a1x->var_u8_29860_65];
    v17x = 0;
    v10 = -1;
    while ( v9x > str_AE400_AE3F0->str_29795)
    {
      if ( !v9x->var_u16_29847_52 && v9x != a1x )
      {
        v11 = v9x->var_u32_29867_72.x - a1x->var_u32_29867_72.x;
        v12 = v9x->var_u32_29867_72.y - a1x->var_u32_29867_72.y;
        v13 = v11 * v11 + v12 * v12;
        if ( v13 <= v15 )
        {
          v16 = a1x->var_u32_29951_156->v_30;
          v14 = sub_42150_42490(&a1x->var_u32_29867_72, &v9x->var_u32_29867_72);
          if ( (unsigned __int16)sub_42210_42550(a1x->var_u16_29825_30, v14) < v16 && v13 < v10 )
          {
            v17x = v9x;
            v10 = v13;
          }
        }
      }
      v9x = v9x->next;
    }
    if ( v17x )
    {
        a1x->var_u16_29847_52 = v17x - str_AE400_AE3F0->str_29795;
      v7 = a2 + 3;
LABEL_31:
      sub_424F0_42830(a1x, v7);
    }
  }
}

//SYNCHRONIZED WITH REMC1
void sub_19D70(Type_AE400_29795* a1x, char a2)
{
  unsigned int v2; // ebp
  __int16 v3; // ax
  unsigned __int16 v4; // cx
  int i; // esi
  int v6; // eax
  unsigned __int8 v7; // al
  unsigned int v8; // eax
  int v9; // ebp
  int v10; // eax
  unsigned int v11; // ebp
  unsigned int j; // esi
  int v13; // eax
  unsigned int v14; // edi
  __int16 v15; // ax
  int v16; // eax
  unsigned int v17; // ebp
  unsigned int v18; // esi
  int v19; // eax
  unsigned int v20; // edi
  __int16 v21; // ax
  unsigned int v22; // [esp+4h] [ebp-28h]
  int v23; // [esp+8h] [ebp-24h]
  int v24; // [esp+8h] [ebp-24h]
  unsigned int v25; // [esp+Ch] [ebp-20h]
  unsigned int v26; // [esp+14h] [ebp-18h]
  unsigned int v27; // [esp+18h] [ebp-14h]

  v2 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
        a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v3 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v2 = 1;
      a1x->var_u16_29835_40 = v3;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v4 = a1x->var_u16_29849_54;
    if ( v4 )
    {
      for ( i = 164 * v4 + dword_AE400_AE3F0() + 29795;
            i != dword_AE400_AE3F0() + 29795;
            i = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(i + 54) )
      {
        v6 = *(_DWORD *)(i + 12);
        if ( v6 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v6;
          v2 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(i + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v2 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v2 )
  {
    if ( v2 <= 1 )
    {
      if ( *(_BYTE *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29835_40 + 29859) != 3 )
        return;
      a1x->var_u16_29941_146 = a1x->var_u16_29835_40;
      v7 = a2 + 2;
    }
    else
    {
      v7 = a2 + 4;
    }
    goto LABEL_42;
  }
  sub_196E0(a1x);
  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
  {
    v8 = 9377 * a1x->rand_29799_4 + 9439;
    a1x->rand_29799_4 = v8;
    v9 = a1x->rand_29799_4;
    a1x->rand_29799_4 = 9377 * v9 + 9439;
    a1x->var_u16_29829_34 += ((unsigned __int8)(-95 * v9 - 33) + 85) * (2 * ((int)(v8 % 0x9D) / 79) - 1);
    LOBYTE(v8) = a1x->var_u8_29853_58;
    a1x->var_u16_29829_34 &= 0x7ffu;
    if ( (_BYTE)v8 )
    {
      v10 = a1x->var_u32_29951_156->v_28;
      v11 = -1;
      v22 = v10 * v10;
      v26 = 0;
      for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36462); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
      {
        v13 = (__int16)(*(_WORD *)(j + 72) - a1x->var_u32_29867_72.x);
        v14 = v13 * v13
            + (__int16)(*(_WORD *)(j + 74) - a1x->var_u32_29867_72.y) * (__int16)(*(_WORD *)(j + 74) - a1x->var_u32_29867_72.y);
        if ( v14 <= v22 && (*(_BYTE *)(j + 16) & 0x20) == 0 )
        {
          v23 = a1x->var_u32_29951_156->v_30;
          v15 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(j + 72));
          if ( (unsigned __int16)sub_42210_42550(a1x->var_u16_29825_30, v15) < v23 && v14 < v11 )
          {
            v26 = j;
            v11 = v14;
          }
        }
      }
      if ( v26 )
      {
          a1x->var_u16_29941_146 = (int)(v26 - (dword_AE400_AE3F0() + 29795)) / 164;
        v7 = a2 + 2;
LABEL_42:
        sub_424F0_42830(a1x, v7);
        return;
      }
      v16 = a1x->var_u32_29951_156->v_28;
      v17 = -1;
      v25 = v16 * v16;
      v18 = *(_DWORD *)(dword_AE408_AE3F8() + 4 * a1x->var_u8_29860_65 + 36382);
      v27 = 0;
      while ( v18 > dword_AE400_AE3F0() + 29795 )
      {
        if ( !*(_WORD *)(v18 + 52) && v18 != (uint32)a1x )
        {
          v19 = (__int16)(*(_WORD *)(v18 + 72) - a1x->var_u32_29867_72.x);
          v20 = v19 * v19
              + (__int16)(*(_WORD *)(v18 + 74) - a1x->var_u32_29867_72.y)
              * (__int16)(*(_WORD *)(v18 + 74) - a1x->var_u32_29867_72.y);
          if ( v20 <= v25 )
          {
            v24 = a1x->var_u32_29951_156->v_30;
            v21 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v18 + 72));
            if ( (unsigned __int16)sub_42210_42550(a1x->var_u16_29825_30, v21) < v24 && v20 < v17 )
            {
              v27 = v18;
              v17 = v20;
            }
          }
        }
        v18 = *(_DWORD *)v18;
      }
      if ( v27 )
      {
        a1x->var_u16_29847_52 = (int)(v27 - (dword_AE400_AE3F0() + 29795)) / 164;
        v7 = a2 + 3;
        goto LABEL_42;
      }
    }
  }
}

//SYNCHRONIZED WITH REMC1
int sub_1A120(Type_AE400_29795* a1x, char a2, unsigned __int16 (*a3)(Type_AE400_29795*, int))
{
  int v3; // esi
  unsigned int v4; // edi
  __int16 v5; // ax
  unsigned __int16 v6; // ax
  int v7; // eax
  int i; // edx
  int v9; // ecx
  char v10; // cl
  int v12; // edi
  //int v13; // ecx
  unsigned int v14; // ebp
  int v15; // [esp+0h] [ebp-14h]

  v3 = dword_AE400_AE3F0();
  v4 = 0;
  v15 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
      a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v5 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v4 = 1;
      a1x->var_u16_29835_40 = v5;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v6 = a1x->var_u16_29849_54;
    if ( v6 )
    {
      v7 = 164 * v6 + v3 + 29795;
      for ( i = v3 + 29795; v7 != i; v7 = i + 164 * *(unsigned __int16 *)(v7 + 54) )
      {
        v9 = *(_DWORD *)(v7 + 12);
        if ( v9 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v9;
          v4 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(v7 + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v4 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v4 )
  {
    if ( v4 <= 1 )
    {
      v10 = *(_BYTE *)(v3 + 164 * a1x->var_u16_29835_40 + 29859);
      dword_AE400_AE3F0(v3);
      if ( v10 == 3 )
      {
          a1x->var_u16_29941_146 = a1x->var_u16_29835_40;
        return 0;
      }
    }
    else
    {
      dword_AE400_AE3F0(v3);
      sub_424F0_42830(a1x, a2 + 4);
    }
    return v15;
  }
  dword_AE400_AE3F0(v3);
  sub_196E0(a1x);
  v12 = dword_AE400_AE3F0() + 29795 + 164 * a1x->var_u16_29941_146;
  if ( (a1x->var_u8_29858_63 & 3) == 0 )
      a1x->var_u16_29829_34 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v12 + 72));
  if ( *(int *)(v12 + 12) < 0 || (*(_BYTE *)(v12 + 17) & 4) != 0 )
  {
LABEL_26:
    sub_424F0_42830(a1x, a2 + 1);
    return 0;
  }
  //v13 = *(_DWORD *)(a1 + 156);
  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
  {
    v14 = a1x->var_u32_29951_156->v_28;
    if ( sub_42340_42680(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v12 + 72)) >= v14 )
      goto LABEL_26;
    if ( a3(a1x, v12) )
      return 1;
  }
  return v15;
}

//SYNCHRONIZED WITH REMC1
void sub_1A390(Type_AE400_29795* a1x, unsigned __int16 a2)
{
  char v2; // al
  Type_AE400_29795* v3x; // esi
  __int16 v4; // di
  __int16 v5; // ax
  unsigned __int16 v6; // ax
  int i; // eax
  int v8; // edx
  unsigned __int8 v9; // al
  //__int16 v10; // ax
  __int16 v11; // ax
  __int16 v12; // ax
  unsigned int v13; // ecx
  __int64 v14; // rax
  __int64 v15; // rax
  unsigned __int8 v17; // [esp+0h] [ebp-10h]

  if ( !a1x->var_u16_29847_52)
  {
    v2 = a2;
LABEL_34:
    v9 = v2 + 1;
    goto LABEL_35;
  }
  v3x = &str_AE400_AE3F0->str_29795[a1x->var_u16_29847_52];
  v4 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
      v5 = a1x->str_29885_90.var_u16_29889_94;
      a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      a1x->var_u16_29835_40 = v5;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v4 = 1;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v6 = a1x->var_u16_29849_54;
    if ( v6 )
    {
      for ( i = 164 * v6 + dword_AE400_AE3F0() + 29795;
            i != dword_AE400_AE3F0() + 29795;
            i = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(i + 54) )
      {
        v8 = *(_DWORD *)(i + 12);
        if ( v8 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v8;
          v4 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(i + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v4 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  v17 = a2 + 2;
  if ( v4 )
  {
    if ( (unsigned __int16)v4 > 1u )
    {
      v3x->var_u16_29941_146 = a1x->var_u16_29835_40;
      v3x->var_u16_29847_52 = 0;
      sub_424F0_42830(v3x, v17);
      v9 = a2 + 4;
LABEL_35:
      sub_424F0_42830(a1x, v9);
      return;
    }
    //v10 = 41 * a1x->var_u16_29835_40;
    if ( *(_BYTE *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29835_40 + 29859) == 3 )
    {
      v11 = a1x->var_u16_29835_40;
      v3x->var_u16_29847_52 = 0;
      v3x->var_u16_29941_146 = v11;
      sub_424F0_42830(v3x, v17);
      v12 = a1x->var_u16_29835_40;
      a1x->var_u16_29847_52 = 0;
      a1x->var_u16_29941_146 = v12;
      sub_424F0_42830(a1x, v17);
    }
  }
  else
  {
    sub_196E0(a1x);
    //v10 = a1x->var_u8_29858_63 / a1x->var_u32_29951_156->v_26;
    if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
    {
      switch (v3x->var_u8_29865_70 - a2 )
      {
        case 0:
        case 1:
          goto LABEL_24;
        case 2:
          a1x->var_u16_29941_146 = v3x->var_u16_29941_146;
          a1x->var_u16_29847_52 = 0;
          sub_424F0_42830(a1x, v17);
          return;
        case 3:
            a1x->var_u16_29847_52 = v3x->var_u16_29847_52;
LABEL_24:
            a1x->var_u16_29829_34 = sub_42150_42490(
              &a1x->var_u32_29867_72,
              (axis_3d*)(_WORD *)(164 * a1x->var_u16_29847_52 + dword_AE400_AE3F0() + 29795 + 72));
          v13 = *(_DWORD *)(dword_AE408_AE3F8() + 4 * a1x->var_u8_29860_65 + 36382);
          break;
        default:
          v2 = a2;
          a1x->var_u16_29847_52 = 0;
          goto LABEL_34;
      }
      while ( v13 > dword_AE400_AE3F0() + 29795 )
      {
        if ( *(_WORD *)(v13 + 24) != a1x->id_29819_24)
        {
          v14 = a1x->var_u32_29867_72.x - *(__int16 *)(v13 + 72);
          if ( (int)((HIDWORD(v14) ^ v14) - HIDWORD(v14)) < 256 )
          {
            v15 = a1x->var_u32_29867_72.y - *(__int16 *)(v13 + 74);
            if ( (int)((HIDWORD(v15) ^ v15) - HIDWORD(v15)) < 256 )
            {
              a1x->var_u16_29829_34 = sub_42150_42490((axis_3d*)(_WORD *)(v13 + 72), &a1x->var_u32_29867_72);
              break;
            }
          }
        }
        v13 = *(_DWORD *)v13;
      }
      //v10 = v3x->acceleration_29925_130 + v3x->actSpeed_29921_126;
      a1x->actSpeed_29921_126 += v3x->acceleration_29925_130;
    }
  }
}

//SYNCHRONIZED WITH REMC1
void sub_1A6C0(Type_AE400_29795* a1x, char a2)
{
  Type_AE400_29795* ix; // ebx
  __int16 v3; // cx
  unsigned int v4; // eax
  unsigned int v5; // ebx
  char v6; // cl

  for ( ix = &str_AE400_AE3F0->str_29795[a1x->var_u16_29849_54];
        ;
        ix = &str_AE400_AE3F0->str_29795[ix->var_u16_29849_54])
  {
    v4 = dword_AE400_AE3F0() + 29795;
    if ( ix == str_AE400_AE3F0->str_29795)
      break;
    sub_424F0_42830(ix, a2 + 5);
    v3 = ix->var_u16_29833_38;
    if ( v3 )
        a1x->var_u16_29833_38 = v3;
  }
  v5 = v4 + 164 * a1x->var_u16_29833_38;
  if ( v5 > v4
    && *(_BYTE *)(v5 + 64) == 3
    && !*(_BYTE *)(v5 + 65)
    && (a1x->var_u8_29860_65 != 9 || !a1x->var_u16_29939_144)
    && a1x->id_29819_24 == a1x - str_AE400_AE3F0->str_29795)
  {
    v6 = a1x->var_u8_29860_65;
    if ( v6 != 12 && v6 != 13 && v6 != 14 && v6 != 15 && v6 != 9 )
      ++*(_DWORD *)(*(_DWORD *)(v5 + 160) + 359);
  }
  sub_424F0_42830(a1x, a2 + 5);
}

//SYNCHRONIZED WITH REMC1
void sub_1A800(Type_AE400_29795* a1x)
{
  _WORD *v1; // eax
  int v2; // eax

  if ( (a1x->var_u8_29858_63 & 7) == 0 )
  {
    v1 = (_WORD *)dword_AE408_AE3F8();
    if ( (str_AE408_AE3F8->var_u8_1 & 2) != 0 )
        a1x->var_u32_29935_140 = 5000;
    sub_27690(v1, a1x);
    v2 = (int)sub_373F0_377B0(&a1x->var_u32_29867_72, 10, 1);
    if ( v2 )
      *(_WORD *)(v2 + 24) = a1x->id_29819_24;
    sub_41E80_421C0(a1x);
  }
}

//SYNCHRONIZED WITH REMC1
int sub_1A8E0(Type_AE400_29795* a1x, Type_AE400_29795* a2x)
{
  axis_3d* v2x; // edi
  int v3; // eax
  int v4; // ebx
  __int16 v5; // ax
  int v7; // [esp+0h] [ebp-14h]

  v2x = &a1x->var_u32_29867_72;
  v7 = 0;
  v3 = (int)sub_373F0_377B0(&a1x->var_u32_29867_72, 9, 0);
  v4 = v3;
  if ( v3 )
  {
    *(_BYTE *)(v3 + 68) = 10;
    *(_BYTE *)(v3 + 69) = 0;
    *(_WORD *)(v3 + 24) = a1x->id_29819_24;
    *(_WORD *)(v3 + 30) = sub_42150_42490(v2x, &a2x->var_u32_29867_72);
    *(_WORD *)(v4 + 32) = sub_42180_424C0(v2x, &a2x->var_u32_29867_72);
    *(_WORD *)(v4 + 76) += a1x->var_u16_29873_78.var_u16_29879_84;
    v5 = a1x->var_u16_29941_146;
    *(_DWORD *)(v4 + 156) = (uint32)&unk_98F38[6];
    *(_WORD *)(v4 + 146) = v5;
    *(_BYTE *)(v4 + 67) = a1x->sModel_29862_67;
    LOBYTE(v5) = a1x->sClass_29861_66;
    *(_WORD *)(v4 + 44) = 500;
    *(_BYTE *)(v4 + 66) = v5;
    return 1;
  }
  return v7;
}

//SYNCHRONIZED WITH REMC1
int sub_1A990(Type_AE400_29795* a1x, Type_AE400_29795* a2x)
{
  axis_3d* v2x; // edi
  int v3; // ebx
  char v4; // al
  int v6; // [esp+0h] [ebp-14h]

  v2x = &a1x->var_u32_29867_72;
  v6 = 0;
  v3 = (int)sub_373F0_377B0(&a1x->var_u32_29867_72, 9, 13);
  if ( v3 )
  {
    *(_WORD *)(v3 + 24) = a1x->id_29819_24;
    *(_WORD *)(v3 + 30) = sub_42150_42490(v2x, &a2x->var_u32_29867_72);
    *(_WORD *)(v3 + 32) = sub_42180_424C0(v2x, &a2x->var_u32_29867_72);
    *(_WORD *)(v3 + 76) += a1x->var_u16_29873_78.var_u16_29879_84;
    *(_WORD *)(v3 + 146) = a1x->var_u16_29941_146;
    *(_BYTE *)(v3 + 67) = a1x->sModel_29862_67;
    v4 = a1x->sClass_29861_66;
    *(_WORD *)(v3 + 44) = 250;
    *(_BYTE *)(v3 + 66) = v4;
    sub_370A0_37460((Type_AE400_29795*)(_WORD *)v3, 195);
    return 1;
  }
  return v6;
}

//SYNCHRONIZED WITH REMC1
void sub_1AA40(Type_AE400_29795* a1x, int a2)
{
  axis_3d* v2x; // edi
  int v3; // ebx
  int v5; // [esp+4h] [ebp-14h]

  v2x = &a1x->var_u32_29867_72;
  v5 = 0;
  v3 = (int)sub_373F0_377B0(&a1x->var_u32_29867_72, 9, 13);
  if ( v3 )
  {
    *(_WORD *)(v3 + 24) = a1x->id_29819_24;
    *(_WORD *)(v3 + 30) = sub_42150_42490(v2x, &a1x->var_u32_29867_72);
    *(_WORD *)(v3 + 32) = sub_42180_424C0(v2x, &a1x->var_u32_29867_72);
    *(_WORD *)(v3 + 76) += a1x->var_u16_29873_78.var_u16_29879_84;
    *(_WORD *)(v3 + 146) = a1x->var_u16_29941_146;
    *(_BYTE *)(v3 + 67) = a1x->sModel_29862_67;
    *(_BYTE *)(v3 + 66) = a1x->sClass_29861_66;
    if (a1x->var_u16_29939_144)
      *(_WORD *)(v3 + 44) = 600;
    else
      *(_WORD *)(v3 + 44) = 400;
    sub_370A0_37460((Type_AE400_29795*)(_WORD *)v3, 203);
  }
}

//SYNCHRONIZED WITH REMC1
int sub_1AB10(Type_AE400_29795* a1x, int a2)
{
  int v2; // ebx

  v2 = 0;
  if ( (int)sub_42340_42680(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(a2 + 72)) < 1024 )
  {
    v2 = 1;
    sub_12B50(a1x, a2, 0, a1x->var_u16_29839_44);
  }
  return v2;
}

//SYNCHRONIZED WITH REMC1
int sub_1AB70(Type_AE400_29795* a1x, Type_AE400_29795* a2x)
{
  unsigned int v2; // eax
  int v3; // edi
  int v4; // ebx
  unsigned __int16 v5; // si
  unsigned __int16 v6; // bx
  int v7; // eax
  __int16 v8; // cx
  unsigned __int16 i; // bx
  int v10; // eax
  __int16 v11; // cx
  int v12; // eax
  __int16 v13; // si
  __int16 v15; // [esp+4h] [ebp-34h]
  __int16 v16; // [esp+8h] [ebp-30h]
  int v17; // [esp+Ch] [ebp-2Ch]
  char v18; // [esp+14h] [ebp-24h]
  __int16 v19; // [esp+18h] [ebp-20h]
  __int16 v20; // [esp+1Ch] [ebp-1Ch]
  __int16 v21; // [esp+20h] [ebp-18h]
  char v22; // [esp+24h] [ebp-14h]

  v20 = a1x->id_29819_24;
  v17 = 0;
  v19 = sub_42150_42490(&a1x->var_u32_29867_72, &a2x->var_u32_29867_72);
  v21 = sub_42180_424C0(&a1x->var_u32_29867_72, &a2x->var_u32_29867_72);
  v16 = a1x->var_u16_29873_78.var_u16_29879_84;
  v15 = a1x->var_u16_29941_146;
  v18 = a1x->sModel_29862_67;
  v22 = a1x->sClass_29861_66;
  v2 = (unsigned int)(7 * a1x->var_u32_29935_140) / a1x->var_u32_29931_136;
  v3 = 0;
  LOWORD(v4) = 0;
  v5 = v2;
  if ( (_WORD)v2 )
  {
      a1x->rand_29799_4 = 9377 * a1x->rand_29799_4 + 9439;
    v4 = (int)(a1x->rand_29799_4 % (100 * (unsigned int)(unsigned __int16)v2)) / 100;
  }
  if ( !(_WORD)v2 )
    v5 = 1;
  if ( v5 > 5u )
    v5 = 5;
  switch ( (__int16)v4 )
  {
    case 0:
      v6 = 0;
      do
      {
        v7 = (int)sub_373F0_377B0(&a1x->var_u32_29867_72, 9, 0);
        v3 = v7;
        if ( v7 )
        {
          *(_BYTE *)(v7 + 69) = 0;
          *(_DWORD *)(v7 + 156) = (uint32)((char *)&unk_98F38[6 - v6]);
          *(_BYTE *)(v7 + 67) = v18;
          *(_BYTE *)(v7 + 66) = v22;
          *(_BYTE *)(v7 + 68) = 10;
          *(_WORD *)(v7 + 24) = v20;
          *(_WORD *)(v7 + 30) = v19;
          v8 = *(_WORD *)(v7 + 76);
          *(_WORD *)(v7 + 32) = v21;
          *(_WORD *)(v7 + 44) = 400;
          *(_WORD *)(v7 + 76) = v16 + v8;
          *(_WORD *)(v7 + 146) = v15;
        }
        ++v6;
      }
      while ( v6 < v5 );
      break;
    case 1:
    case 2:
      for ( i = 1; i < v5; ++i )
      {
        v10 = (int)sub_373F0_377B0(&a1x->var_u32_29867_72, 9, 9);
        v3 = v10;
        if ( v10 )
        {
          *(_BYTE *)(v10 + 69) = 23;
          *(_DWORD *)(v10 + 156) = (uint32)((char *)&unk_98F38[6 - i]);
          *(_BYTE *)(v10 + 67) = v18;
          *(_BYTE *)(v10 + 66) = v22;
          *(_BYTE *)(v10 + 68) = 10;
          *(_WORD *)(v10 + 24) = v20;
          *(_WORD *)(v10 + 30) = v19;
          v11 = *(_WORD *)(v10 + 76);
          *(_WORD *)(v10 + 32) = v21;
          *(_WORD *)(v10 + 44) = 800;
          *(_WORD *)(v10 + 76) = v16 + v11;
          *(_WORD *)(v10 + 146) = v15;
        }
      }
      break;
    case 3:
    case 4:
    case 5:
    case 6:
      v12 = (int)sub_373F0_377B0(&a1x->var_u32_29867_72, 9, 3);
      v3 = v12;
      if ( v12 )
      {
        *(_BYTE *)(v12 + 69) = 17;
        *(_DWORD *)(v12 + 156) = (uint32)&unk_98F38[3];
        *(_BYTE *)(v12 + 67) = v18;
        *(_BYTE *)(v12 + 66) = v22;
        *(_BYTE *)(v12 + 68) = 10;
        *(_WORD *)(v12 + 24) = v20;
        *(_WORD *)(v12 + 30) = v19;
        v13 = *(_WORD *)(v12 + 76);
        *(_WORD *)(v12 + 32) = v21;
        *(_WORD *)(v12 + 44) = 8000;
        *(_WORD *)(v12 + 76) = v16 + v13;
        *(_WORD *)(v12 + 146) = v15;
      }
      break;
    default:
      break;
  }
  if ( v3 )
    return 1;
  return v17;
}

//SYNCHRONIZED WITH REMC1
int sub_1AE30(Type_AE400_29795* a1x, Type_AE400_29795* a2x)
{
  axis_3d* v2x; // edi
  int v3; // eax
  int v4; // ebx
  __int16 v5; // ax
  int v7; // [esp+0h] [ebp-14h]

  v2x = &a1x->var_u32_29867_72;
  v7 = 0;
  v3 = (int)sub_373F0_377B0(&a1x->var_u32_29867_72, 9, 14);
  v4 = v3;
  if ( v3 )
  {
    *(_BYTE *)(v3 + 68) = 10;
    *(_BYTE *)(v3 + 69) = 0;
    *(_WORD *)(v3 + 24) = a1x->id_29819_24;
    *(_WORD *)(v3 + 30) = sub_42150_42490(v2x, &a2x->var_u32_29867_72);
    *(_WORD *)(v4 + 32) = sub_42180_424C0(v2x, &a2x->var_u32_29867_72);
    *(_WORD *)(v4 + 76) += a1x->var_u16_29873_78.var_u16_29879_84;
    v5 = a1x->var_u16_29941_146;
    *(_DWORD *)(v4 + 156) = (uint32)&unk_98F38[6];
    *(_WORD *)(v4 + 146) = v5;
    *(_BYTE *)(v4 + 67) = a1x->sModel_29862_67;
    LOBYTE(v5) = a1x->sClass_29861_66;
    *(_WORD *)(v4 + 44) = 780;
    *(_BYTE *)(v4 + 66) = v5;
    return 1;
  }
  return v7;
}

//SYNCHRONIZED WITH REMC1
int sub_1AEE0(Type_AE400_29795* a1x, Type_AE400_29795* a2x)
{
  axis_3d* v2x; // esi
  int v3; // edi
  int v4; // eax
  int v5; // ebx
  char v6; // al

  v2x = &a1x->var_u32_29867_72;
  v3 = 0;
  v4 = (int)sub_373F0_377B0(&a1x->var_u32_29867_72, 9, 9);
  v5 = v4;
  if ( v4 )
  {
    *(_BYTE *)(v4 + 68) = 10;
    *(_BYTE *)(v4 + 69) = 23;
    *(_WORD *)(v4 + 24) = a1x->id_29819_24;
    *(_WORD *)(v4 + 30) = sub_42150_42490(v2x, &a2x->var_u32_29867_72);
    *(_WORD *)(v5 + 32) = sub_42180_424C0(v2x, &a2x->var_u32_29867_72);
    *(_WORD *)(v5 + 76) += a1x->var_u16_29873_78.var_u16_29879_84;
    *(_WORD *)(v5 + 146) = a1x->var_u16_29941_146;
    *(_DWORD *)(v5 + 156) = (uint32)&unk_98F38[6];
    *(_BYTE *)(v5 + 67) = a2x->sModel_29862_67;
    v6 = a2x->sClass_29861_66;
    *(_WORD *)(v5 + 44) = 4000;
    v3 = 1;
    *(_BYTE *)(v5 + 66) = v6;
  }
  return v3;
}

//SYNCHRONIZED WITH REMC1
void sub_1B060(Type_AE400_29795* a1x)
{
  sub_19B10(a1x, 0);
}

//SYNCHRONIZED WITH REMC1
void sub_1B070(Type_AE400_29795* a1x)
{
  sub_19D70(a1x, 0);
  sub_1B120(a1x);
}

//SYNCHRONIZED WITH REMC1
void sub_1B090(Type_AE400_29795* a1x)
{
  if ( (unsigned __int16)sub_1A120(a1x, 0, (unsigned __int16 (*)(Type_AE400_29795*, int))sub_1A8E0) )
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 8);
  sub_1B120(a1x);
}

//SYNCHRONIZED WITH REMC1
void sub_1B0E0(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 0);
  sub_1B120(a1x);
}

//SYNCHRONIZED WITH REMC1
void sub_1B100(Type_AE400_29795* a1x)
{
  return sub_1A6C0(a1x, 0);
}

//SYNCHRONIZED WITH REMC1
void sub_1B110(Type_AE400_29795* a1x)
{
    sub_1A800(a1x);
}

//SYNCHRONIZED WITH REMC1
void sub_1B120(Type_AE400_29795* a1x)
{
  __int16 v1; // ax
  int v2; // edx
  int result; // eax

  a1x->var_u32_29867_72.z += a1x->var_u16_29821_26;
  v1 = sub_11F50(&a1x->var_u32_29867_72);
  v2 = a1x->var_u32_29867_72.z;
  result = v1 + 256;
  a1x->var_u16_29821_26 -= 5;
  if ( v2 < result )
      a1x->var_u16_29821_26 = 150;
}

//SYNCHONIZED WITH REMC1
void sub_1B160(Type_AE400_29795* a1x)
{
  //__int16 result; // ax
  int v2; // eax

  sub_19B10(a1x, 6);
  sub_196E0(a1x);
  //HIBYTE(result) = a1x->var_u8_29865_70;
  if ( a1x->var_u8_29865_70 == 6 )
  {
    if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
    {
      v2 = 164 * a1x->var_u16_29941_146 + dword_AE400_AE3F0() + 29795;
      if ( *(_BYTE *)(v2 + 64) )
      {
        a1x->var_u16_29829_34 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD*)(v2 + 72));
      }
      else
      {
        a1x->var_u16_29941_146 = 0;
        sub_424F0_42830(a1x, 7u);
      }
    }
  }
}

//SYNCHONIZED WITH REMC1
void sub_1B200(Type_AE400_29795* a1x)
{
  //int v1; // esi
  unsigned int result; // eax
  unsigned int v3; // ecx
  unsigned int v4; // edi
  int v5; // esi
  int v6; // edx
  unsigned int v7; // edx
  unsigned int v8; // [esp+0h] [ebp-10h]

  sub_19D70(a1x, 6);
  //v1 = *(_DWORD *)(a1 + 156);
  result = a1x->var_u8_29858_63 / a1x->var_u32_29951_156->v_26;
  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
  {
    v8 = a1x->var_u32_29951_156->v_28 * a1x->var_u32_29951_156->v_28;
    v3 = -1;
    v4 = 0;
    for ( result = *(_DWORD *)(dword_AE408_AE3F8() + 36466); result > dword_AE400_AE3F0() + 29795; result = *(_DWORD *)result )
    {
      if ( *(_BYTE *)(result + 65) == 40 )
      {
        v5 = (__int16)(*(_WORD *)(result + 72) - a1x->var_u32_29867_72.x);
        v6 = (__int16)(*(_WORD *)(result + 74) - a1x->var_u32_29867_72.y);
        v7 = v5 * v5 + v6 * v6;
        if ( v7 <= v8 && v7 < v3 )
        {
          v4 = result;
          v3 = v7;
        }
      }
    }
    if ( v4 )
    {
      a1x->var_u16_29941_146 = (int)(v4 - (dword_AE400_AE3F0() + 29795)) / 164;
      sub_424F0_42830(a1x, 6u);
    }
  }
}

//SYNCHRONIZED WITH REMC1
void sub_1B2D0(Type_AE400_29795* a1x)
{
  if ( (unsigned __int16)sub_1A120(a1x, 6, (unsigned __int16 (*)(Type_AE400_29795*, int))sub_1AB10) )
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 7);
}

//SYNCHRONIZED WITH REMC1
void sub_1B320(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 6u);
}

//SYNCHRONIZED WITH REMC1
void sub_1B330(Type_AE400_29795* a1x)
{
  return sub_1A6C0(a1x, 6);
}

//SYNCHRONIZED WITH REMC1
void sub_1B340(Type_AE400_29795* a1x)
{
    sub_1A800(a1x);
}

//SYNCHRONIZED WITH REMC1
void sub_1B350(Type_AE400_29795* a1x)
{
  sub_19B10(a1x, 12);
  if (a1x->var_u8_29865_70 == 14 )
      a1x->var_u16_29821_26 = 1;
}

//SYNCHRONIZED WITH REMC1
void sub_1B370(Type_AE400_29795* a1x)
{
  sub_19D70(a1x, 12);
  if (a1x->var_u8_29865_70 == 14 )
  {
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 13);
    a1x->var_u16_29821_26 = 1;
  }
}

//SYNCHRONIZED WITH REMC1
void sub_1B3C0(Type_AE400_29795* a1x)
{
  __int16 v1; // dx
  int v2; // ecx
  int v3; // eax
  __int16 result; // ax

  v1 = a1x->var_u16_29821_26;
  if ( v1 )
  {
      a1x->var_u16_29821_26 = v1 - 1;
    if ( v1 == 1 )
        a1x->actSpeed_29921_126 = 3 * a1x->actSpeed_29923_128;
  }
  v2 = a1x->var_u32_29867_72.z - *(__int16 *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29941_146 + 29871);
  if ( v2 )
    v3 = v2 / (int)abs32(v2);
  else
    LOWORD(v3) = 0;
  a1x->var_u32_29867_72.z += v3 * a1x->var_u32_29951_156->v_14;
  result = sub_1A120(a1x, 12, (unsigned __int16 (*)(Type_AE400_29795*, int))sub_1AB10);
  if ( result )
  {
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 13);
    a1x->actSpeed_29921_126 = -a1x->acceleration_29925_130;
    result = 3 * a1x->var_u32_29951_156->v_26;
    a1x->var_u16_29821_26 = result;
  }
  if (a1x->var_u8_29865_70 != 14 )
  {
    result = a1x->actSpeed_29923_128;
    a1x->actSpeed_29921_126 = result;
  }
}

//SYNCHRONIZED WITH REMC1
void sub_1B4C0(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 0xCu);
  if (a1x->var_u8_29865_70 == 14 )
      a1x->var_u16_29821_26 = 1;
}

//SYNCHRONIZED WITH REMC1
void sub_1B4E0(Type_AE400_29795* a1x)
{
  return sub_1A6C0(a1x, 12);
}

//SYNCHRONIZED WITH REMC1
void sub_1B4F0(Type_AE400_29795* a1x)
{
    sub_1A800(a1x);
}

//SYNCHRONIZED WITH REMC1
void sub_1B500(Type_AE400_29795* a1x)
{
  sub_19B10(a1x, 18);
}

//SYNCHRONIZED WITH REMC1
void sub_1B510(Type_AE400_29795* a1x)
{
  sub_19D70(a1x, 18);
}

//SYNCHRONIZED WITH REMC1
void sub_1B520(Type_AE400_29795* a1x)
{
  if ( (unsigned __int16)sub_1A120(a1x, 18, (unsigned __int16 (*)(Type_AE400_29795*, int))sub_1A8E0) )
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 8);
}

//SYNCHRONIZED WITH REMC1
void sub_1B570(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 0x12u);
}

//SYNCHRONIZED WITH REMC1
void sub_1B580(Type_AE400_29795* a1x)
{
  sub_1A6C0(a1x, 18);
}

//SYNCHRONIZED WITH REMC1
void sub_1B590(Type_AE400_29795* a1x)
{
    sub_1A800(a1x);
}

//SYNCHRONIZED WITH REMC1
void sub_1B5A0(Type_AE400_29795* a1x)
{
  sub_19B10(a1x, 24);
  if (a1x->var_u8_29865_70 == 26 )
    sub_1BC50(a1x);
}

//SYNCHRONIZED WITH REMC1
void sub_1B5D0(Type_AE400_29795* a1x)
{
  unsigned int v1; // edx
  __int16 v2; // ax
  int v3; // eax
  int i; // esi
  int v5; // edi
  int v6; // esi
  Type_AE400_29795* v7x; // eax
  int v8; // edx
  unsigned int v9; // eax
  __int16 v10; // dx
  int v11; // eax
  //int v12; // esi
  int v13; // ecx
  int v14; // eax
  unsigned int v15; // ebp
  unsigned int v16; // esi
  int v17; // edi
  unsigned int v18; // edi
  __int16 v19; // ax
  int v20; // ebp
  int v21; // eax
  unsigned int v22; // edi
  unsigned int v23; // edx
  unsigned int v24; // esi
  int v25; // ebp
  int v26; // ebp
  __int16 v27; // cx
  unsigned int v28; // eax
  int v29; // eax
  Type_AE400_29795* v30x; // esi
  unsigned int v31; // ebp
  int v32; // edi
  int v33; // eax
  unsigned int v34; // edi
  __int16 v35; // ax
  int v36; // esi
  int v38; // [esp+0h] [ebp-38h]
  int v39; // [esp+4h] [ebp-34h]
  int v40; // [esp+4h] [ebp-34h]
  Type_AE400_29795* v41x; // [esp+8h] [ebp-30h]
  unsigned int v42; // [esp+Ch] [ebp-2Ch]
  unsigned int v43; // [esp+14h] [ebp-24h]
  unsigned int v44; // [esp+1Ch] [ebp-1Ch]

  a1x->var_u16_29821_26 = 0;
  v1 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
        a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v2 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v1 = 1;
      a1x->var_u16_29835_40 = v2;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    if (a1x->var_u16_29849_54)
    {
      v3 = 164 * a1x->var_u16_29849_54;
      for ( i = dword_AE400_AE3F0() + 29795; ; i = 164 * *(unsigned __int16 *)(v6 + 54) )
      {
        v6 = v3 + i;
        v3 = dword_AE400_AE3F0() + 29795;
        if ( v6 == dword_AE400_AE3F0() + 29795 )
          break;
        v5 = *(_DWORD *)(v6 + 12);
        if ( v5 < a1x->actLife_29807_12)
        {
          a1x->actLife_29807_12 = v5;
          v1 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(v6 + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v1 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v1 )
  {
    if ( v1 <= 1 )
    {
      //LOWORD(v7) = 41 * a1x->var_u16_29835_40;
      if ( *(_BYTE *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29835_40 + 29859) == 3 )
      {
          a1x->var_u16_29941_146 = a1x->var_u16_29835_40;
        sub_424F0_42830(a1x, 0x1Au);
      }
    }
    else
    {
      sub_424F0_42830(a1x, 0x1Cu);
    }
  }
  else
  {
    sub_196E0(a1x);
    //LOWORD(v7) = a1x->var_u8_29858_63 / a1x->var_u32_29951_156->v_26;
    v8 = a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26;
    if ( !v8 )
    {
      if (a1x->var_u16_29941_146)
      {
        LOWORD(v8) = a1x->var_u16_29941_146;
        //LOBYTE(v7) = dword_AE400_AE3F0() + 99;
        v36 = dword_AE400_AE3F0() + 29795 + 164 * v8;
        if ( *(_BYTE *)(v36 + 64) == 10 && *(_BYTE *)(v36 + 65) == 45 )
        {
          if ( sub_42340_42680(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v36 + 72)) > 0x1000 )
          {
            //LOWORD(v7) = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v36 + 72));
            a1x->var_u16_29829_34 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD*)(v36 + 72));
          }
          else
          {
            sub_424F0_42830(a1x, 0x1Cu);
            a1x->var_u16_29821_26 = 1;
            ++*(_WORD *)(v36 + 26);
          }
        }
        else
        {
            a1x->var_u16_29941_146 = 0;
        }
      }
      else
      {
        v9 = 9377 * a1x->rand_29799_4 + 9439;
        a1x->rand_29799_4 = v9;
        v10 = 2 * (v9 % 0x9D / 79i64);
        v11 = 9377 * a1x->rand_29799_4 + 9439;
        a1x->rand_29799_4 = v11;
        a1x->var_u16_29829_34 += ((unsigned __int8)v11 + 85) * (v10 - 1);
        //v12 = *(_DWORD *)(a1 + 156);
        a1x->var_u16_29829_34 &= 0x7ffu;
        v13 = 4 * a1x->var_u32_29951_156->v_26;
        //v7 = a1x->var_u8_29858_63 / v13;
        if ( !(a1x->var_u8_29858_63 % v13) )
        {
          v14 = a1x->var_u32_29951_156->v_28 * a1x->var_u32_29951_156->v_28;
          v15 = -1;
          v38 = a1x->var_u8_29858_63 % v13;
          v16 = *(_DWORD *)(dword_AE408_AE3F8() + 36462);
          v43 = v14;
          while ( 1 )
          {
            //LOBYTE(v7) = dword_AE400_AE3F0() + 99;
            if ( v16 <= dword_AE400_AE3F0() + 29795 )
              break;
            v17 = (__int16)(*(_WORD *)(v16 + 72) - a1x->var_u32_29867_72.x);
            v18 = (__int16)(*(_WORD *)(v16 + 74) - a1x->var_u32_29867_72.y)
                * (__int16)(*(_WORD *)(v16 + 74) - a1x->var_u32_29867_72.y)
                + v17 * v17;
            if ( v18 <= v43 && (*(_BYTE *)(v16 + 16) & 0x20) == 0 )
            {
              v39 = a1x->var_u32_29951_156->v_30;
              v19 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v16 + 72));
              if ( (unsigned __int16)sub_42210_42550(a1x->var_u16_29825_30, v19) < v39 && v18 < v15 )
              {
                v38 = v16;
                v15 = v18;
              }
            }
            v16 = *(_DWORD *)v16;
          }
          v20 = v38;
          if ( v38 )
          {
            if ( *(_BYTE *)(v38 + 65) > 1u || !*(_WORD *)(*(_DWORD*)(v38 + 160) + 528) )
              v20 = 0;
          }
          if ( !v20 )
          {
            v21 = a1x->var_u32_29951_156->v_28;
            v22 = -1;
            v23 = 0;
            v24 = *(_DWORD *)(dword_AE408_AE3F8() + 36418);
            v44 = v21 * v21;
            while ( 1 )
            {
              //LOBYTE(v7) = dword_AE400_AE3F0() + 99;
              if ( v24 <= dword_AE400_AE3F0() + 29795 )
                break;
              v25 = (__int16)(*(_WORD *)(v24 + 72) - a1x->var_u32_29867_72.x);
              v26 = v25 * v25;
              v27 = a1x->var_u32_29867_72.y;
              v28 = v26 + (__int16)(*(_WORD *)(v24 + 74) - v27) * (__int16)(*(_WORD *)(v24 + 74) - v27);
              if ( v28 <= v44 && v28 < v22 )
              {
                v23 = v24;
                v22 = v26 + (__int16)(*(_WORD *)(v24 + 74) - v27) * (__int16)(*(_WORD *)(v24 + 74) - v27);
              }
              v24 = *(_DWORD *)v24;
            }
            v20 = v23;
          }
          if ( v20 )
          {
            if ( *(_BYTE *)(v20 + 64) != 10 || *(_BYTE *)(v20 + 65) != 45 )
            {
              a1x->var_u16_29941_146 = (v20 - (dword_AE400_AE3F0() + 29795)) / 164;
              sub_424F0_42830(a1x, 0x1Au);
            }
          }
          else
          {
            v29 = a1x->var_u32_29951_156->v_28;
            v42 = v29 * v29;
            v30x = str_AE408_AE3F8->str_36382x[a1x->var_u8_29860_65 + 36382];
            v41x = 0;
            v31 = -1;
            while ( 1 )
            {
              v7x = str_AE400_AE3F0->str_29795;
              if ( v30x <= str_AE400_AE3F0->str_29795)
                break;
              if ( !v30x->var_u16_29847_52 && v30x != a1x )
              {
                v32 = v30x->var_u32_29867_72.x - a1x->var_u32_29867_72.x;
                v33 = v30x->var_u32_29867_72.y - a1x->var_u32_29867_72.y;
                v34 = v33 * v33 + v32 * v32;
                if ( v34 <= v42 )
                {
                  v40 = a1x->var_u32_29951_156->v_30;
                  v35 = sub_42150_42490(&a1x->var_u32_29867_72, &v30x->var_u32_29867_72);
                  if ( (unsigned __int16)sub_42210_42550(a1x->var_u16_29825_30, v35) < v40 && v34 < v31 )
                  {
                    v41x = v30x;
                    v31 = v34;
                  }
                }
              }
              v30x = v30x->next;
            }
            if ( v41x )
            {
              a1x->var_u16_29847_52 = v41x - v7x;
              sub_424F0_42830(a1x, 0x1Bu);
            }
          }
        }
      }
    }
  }
  if (a1x->var_u8_29865_70 == 26 )
    sub_1BC50(a1x);
}

//SYNCHRONIZED WITH REMC1
void sub_1BB20(Type_AE400_29795* a1x)
{
  int result; // eax

  sub_1A120(a1x, 24, (unsigned __int16 (*)(Type_AE400_29795*, int))sub_1A990);
  if (a1x->var_u8_29865_70 != 26)
  {
      sub_1BCE0(a1x);
      return;
  }
  result = a1x->var_u8_29858_63 / a1x->var_u32_29951_156->v_26;
  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
  {
    result = 164 * a1x->var_u16_29941_146;
    if ( result + dword_AE400_AE3F0() + 29795 )
    {
      result += dword_AE400_AE3F0();
      if ( *(_BYTE *)(result + 29860) <= 1u )
      {
        result = *(_DWORD *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29941_146 + 29955);
        *(_WORD *)(result + 528) = 200;
      }
    }
  }
}

//SYNCHRONIZED WITH REMC1
void sub_1BBE0(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 0x18u);
  if (a1x->var_u8_29865_70 == 26 )
    sub_1BC50(a1x);
}

//SYNCHRONIZED WITH REMC1
void sub_1BC10(Type_AE400_29795* a1x)
{
  if (a1x->var_u16_29821_26)
    sub_41E80_421C0(a1x);
  else
    sub_1A6C0(a1x, 24);
}

//SYNCHRONIZED WITH REMC1
void sub_1BC40(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//SYNCHRONIZED WITH REMC1
void sub_1BC50(Type_AE400_29795* a1x)
{
  unsigned int v1; // eax
  int v2; // ecx
  unsigned __int16 v3; // dx
  char result; // al

  v1 = 9377 * a1x->rand_29799_4 + 9439;
  a1x->rand_29799_4 = v1;
  a1x->actSpeed_29921_126 = 0;
  if ( (int)(v1 % 0x14) <= 10 )
    sub_36FA0_37360(a1x, 206);
  else
    sub_36FA0_37360(a1x, 1);
  v2 = dword_AE400_AE3F0();
  v3 = a1x->var_u16_29941_146;
  a1x->sClass_29861_66 = *(_BYTE *)(dword_AE400_AE3F0() + 164 * v3 + 29859);
  result = *(_BYTE *)(v2 + 164 * v3 + 29860);
  a1x->sModel_29862_67 = result;
}

//SYNCHRONIZED WITH REMC1
void sub_1BCE0(Type_AE400_29795* a1x)
{
  a1x->actSpeed_29921_126 = a1x->actSpeed_29923_128;
  sub_36FA0_37360(a1x, 0);
  a1x->sClass_29861_66 = 3;
  a1x->sModel_29862_67 = -1;
}

//SYNCHRONIZED WITH REMC1
void sub_1BD10(Type_AE400_29795* a1x)
{
  sub_424F0_42830(a1x, 0x1Fu);
}

//SYNCHRONIZED WITH REMC1
void sub_1BD20(Type_AE400_29795* a1x)
{
  unsigned int v1; // edi
  __int16 v2; // ax
  unsigned __int16 v3; // cx
  int i; // eax
  int v5; // edx
  //int v6; // esi
  unsigned int v7; // ebp
  unsigned int v8; // esi
  int v9; // edi
  int v10; // eax
  unsigned int v11; // edi
  __int16 v12; // ax
  int v13; // eax
  unsigned int v14; // ebp
  int v15; // eax
  _WORD *v16; // esi
  unsigned int v17; // edi
  unsigned int v18; // edx
  unsigned int j; // eax
  int v20; // edi
  int v21; // edi
  __int16 v22; // cx
  int v23; // esi
  unsigned int v24; // eax
  int result; // eax
  int v26; // edx
  int v27; // [esp+0h] [ebp-20h]
  axis_3d* v28x; // [esp+4h] [ebp-1Ch]
  unsigned int v29; // [esp+8h] [ebp-18h]
  unsigned int v30; // [esp+Ch] [ebp-14h]

  v1 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
      a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v2 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v1 = 1;
      a1x->var_u16_29835_40 = v2;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v3 = a1x->var_u16_29849_54;
    if ( v3 )
    {
      for ( i = dword_AE400_AE3F0() + 29795 + 164 * v3;
            i != dword_AE400_AE3F0() + 29795;
            i = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(i + 54) )
      {
        v5 = *(_DWORD *)(i + 12);
        if ( v5 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v5;
          v1 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(i + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v1 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v1 )
  {
    if ( v1 <= 1 )
    {
      if ( *(_BYTE *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29835_40 + 29859) == 3 )
      {
        a1x->var_u16_29941_146 = a1x->var_u16_29835_40;
        sub_424F0_42830(a1x, 0x20u);
      }
    }
    else
    {
      sub_424F0_42830(a1x, 0x22u);
    }
  }
  else
  {
    sub_196E0(a1x);
    //v6 = *(_DWORD *)(a1 + 156);
    if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
    {
      v7 = -1;
      v29 = 0;
      v30 = a1x->var_u32_29951_156->v_28 * a1x->var_u32_29951_156->v_28;
      v8 = *(_DWORD *)(dword_AE408_AE3F8() + 36462);
      v28x = &a1x->var_u32_29867_72;
      while ( 1 )
      {
        v13 = dword_AE400_AE3F0() + 29795;
        if ( v8 <= dword_AE400_AE3F0() + 29795 )
          break;
        v9 = (__int16)(*(_WORD *)(v8 + 72) - a1x->var_u32_29867_72.x);
        v10 = (__int16)(*(_WORD *)(v8 + 74) - a1x->var_u32_29867_72.y);
        v11 = v10 * v10 + v9 * v9;
        if ( v11 <= v30 && (*(_BYTE *)(v8 + 16) & 0x20) == 0 )
        {
          v27 = a1x->var_u32_29951_156->v_30;
          v12 = sub_42150_42490(v28x, (axis_3d*)(_WORD *)(v8 + 72));
          if ( (unsigned __int16)sub_42210_42550(a1x->var_u16_29825_30, v12) < v27 && v11 < v7 )
          {
            v29 = v8;
            v7 = v11;
          }
        }
        v8 = *(_DWORD *)v8;
      }
      v14 = v29;
      if ( v29 )
      {
        a1x->var_u16_29941_146 = (int)(v29 - v13) / 164;
        sub_424F0_42830(a1x, 0x20u);
      }
      else if (a1x->var_u16_29941_146)
      {
        v15 = 164 * a1x->var_u16_29941_146 + v13;
        if ( *(_BYTE *)(v15 + 64) == 10 && *(_BYTE *)(v15 + 65) == 39 )
        {
          v16 = (_WORD *)(v15 + 72);
          v17 = a1x->actSpeed_29923_128 << 7;
          if ( sub_423D0_42710(v28x, (axis_3d*)(_WORD *)(v15 + 72)) > v17 )
          {
             a1x->var_u16_29829_34 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)v16);
          }
          else
          {
            a1x->var_u16_29821_26 = 15;
            sub_424F0_42830(a1x, 0x21u);
          }
        }
        else
        {
            a1x->var_u16_29941_146 = 0;
        }
      }
      else if ( !(2 * (a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26)) )
      {
        v18 = -1;
        for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36466); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
        {
          if ( *(_BYTE *)(j + 65) == 39 )
          {
            v20 = (__int16)(*(_WORD *)(j + 72) - a1x->var_u32_29867_72.x);
            v21 = v20 * v20;
            v22 = a1x->var_u32_29867_72.y;
            if ( v21 + (__int16)(*(_WORD *)(j + 74) - v22) * (__int16)(*(_WORD *)(j + 74) - v22) < v18 )
            {
              v14 = j;
              v18 = v21 + (__int16)(*(_WORD *)(j + 74) - v22) * (__int16)(*(_WORD *)(j + 74) - v22);
            }
          }
        }
        if ( v14 )
            a1x->var_u16_29941_146 = (int)(v14 - (dword_AE400_AE3F0() + 29795)) / 164;
        if (a1x->var_u32_29931_136 + 500 < a1x->var_u32_29935_140)
        {
          v23 = (int)sub_373F0_377B0(&a1x->var_u32_29867_72, 10, 52);
          if ( v23 )
          {
            v24 = 9377 * a1x->rand_29799_4 + 9439;
            a1x->rand_29799_4 = v24;
            *(_WORD *)(v23 + 26) = 10 * (v24 % 0xA) + 100;
            a1x->var_u32_29935_140 -= 500;
          }
        }
      }
    }
  }
  result = a1x->actLife_29807_12;
  v26 = a1x->maxLife_29803_8;
  if ( result < v26 )
  {
    result = v26 >> 7;
    a1x->actLife_29807_12 += v26 >> 7;
  }
}

//SYNCHRONIZED WITH REMC1
void sub_1C110(Type_AE400_29795* a1x)
{
  int result; // eax
  int v2; // edx

  if ( (unsigned __int16)sub_1A120(a1x, 30, (unsigned __int16 (*)(Type_AE400_29795*, int))sub_1AB70) )
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 32);
  result = a1x->actLife_29807_12;
  v2 = a1x->maxLife_29803_8;
  if ( result < v2 )
  {
    result = v2 >> 7;
    a1x->actLife_29807_12 += v2 >> 7;
  }
}

//----- (0001C170) --------------------------------------------------------
void sub_1C170(Type_AE400_29795* a1x)
{
  int v1; // esi
  unsigned int v2; // edi
  __int16 v3; // ax
  unsigned __int16 v4; // cx
  int v5; // eax
  int i; // edx
  int v7; // ecx
  __int16 result; // ax
  int v9; // edi
  unsigned int v10; // eax
  int v11; // ebp

  v1 = dword_AE400_AE3F0();
  v2 = 0;
  if ( *(_BYTE *)(a1 + 58) )
  {
    if ( *(_WORD *)(a1 + 94) )
    {
      *(_DWORD *)(a1 + 12) -= *(_DWORD *)(a1 + 90);
      v3 = *(_WORD *)(a1 + 94);
      *(_WORD *)(a1 + 94) = 0;
      v2 = 1;
      *(_WORD *)(a1 + 40) = v3;
    }
    else
    {
      *(_WORD *)(a1 + 40) = 0;
    }
    v4 = *(_WORD *)(a1 + 54);
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < *(_DWORD *)(a1 + 12) )
        {
          *(_DWORD *)(a1 + 12) = v7;
          v2 = 1;
          *(_WORD *)(a1 + 40) = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if ( *(int *)(a1 + 12) < 0 )
  {
    v2 = 2;
    *(_WORD *)(a1 + 38) = *(_WORD *)(a1 + 40);
  }
  dword_AE400_AE3F0(v1);
  if ( v2 )
  {
    if ( v2 <= 1 )
    {
      result = 41 * *(_WORD *)(a1 + 40);
      if ( *(_BYTE *)(v1 + 164 * *(unsigned __int16 *)(a1 + 40) + 29859) == 3 )
      {
        *(_WORD *)(a1 + 146) = *(_WORD *)(a1 + 40);
        return sub_424F0_42830(a1, 0x20u);
      }
    }
    else
    {
      return sub_424F0_42830(a1, 0x22u);
    }
  }
  else
  {
    sub_196E0(a1);
    result = *(unsigned __int8 *)(a1 + 63) / *(__int16 *)(a1 + 26);
    if ( !(*(unsigned __int8 *)(a1 + 63) % *(__int16 *)(a1 + 26)) )
    {
      v9 = 164 * *(unsigned __int16 *)(a1 + 146) + dword_AE400_AE3F0() + 29795;
      if ( *(_BYTE *)(v9 + 64) == 10 && *(_BYTE *)(v9 + 65) == 39 )
      {
        v10 = sub_423D0_42710((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v9 + 72));
        v11 = *(__int16 *)(a1 + 128);
        if ( v10 > 5 * v11 )
        {
          if ( v10 <= 20 * v11 )
            *(_WORD *)(a1 + 26) = 3;
          result = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v9 + 72));
          *(_WORD *)(a1 + 34) = result;
        }
        else
        {
          *(_WORD *)(a1 + 146) = 0;
          *(_DWORD *)(a1 + 140) += *(_DWORD *)(v9 + 140);
          *(_WORD *)(v9 + 144) = 0;
          sub_41E80_421C0(v9);
          sub_424F0_42830(a1, 0x1Fu);
          return sub_38BA0(a1);
        }
      }
      else
      {
        *(_WORD *)(a1 + 146) = 0;
        return sub_424F0_42830(a1, 0x1Fu);
      }
    }
  }
}
// 1C23C: conditional instruction was optimized away because edi.4==2
// AE3F0: using guessed type int dword_AE400_AE3F0();

//SYNCHRONIZED WITH REMC1
void sub_1C3C0(Type_AE400_29795* a1x)
{
  sub_1A6C0(a1x, 30);
}

//SYNCHRONIZED WITH REMC1
void sub_1C3D0(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//SYNCHRONIZED WITH REMC1
void sub_1C490(Type_AE400_29795* a1x)
{
  sub_19B10(a1x, 36);
}

//SYNCHRONIZED EITH REMC1
void sub_1C4A0(Type_AE400_29795* a1x)
{
  sub_19D70(a1x, 36);
  if (a1x->var_u8_29865_70 == 38 )
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 37);
  a1x->actSpeed_29921_126 = 30;
}

//SYNCHRONIZED EITH REMC1
void sub_1C4F0(Type_AE400_29795* a1x)
{
  int v1; // ebp
  unsigned int v2; // esi
  __int16 v3; // ax
  unsigned __int16 v4; // cx
  int v5; // eax
  int i; // edx
  int v7; // ecx
  char v8; // cl
  __int16 v9; // ax
  int v10; // edi
  __int16 v11; // ax
  int v12; // ebp
  __int16 v13; // ax
  Type_AE400_29795* v14x; // edx
  //int v15; // ecx
  int v16; // edx
  unsigned int v17; // esi
  char v18; // ah
  int v19; // eax
  int v20; // esi
  __int16 v21; // ax
  axis_3d* v22x; // [esp+4h] [ebp-14h]

  v1 = dword_AE400_AE3F0();
  a1x->actSpeed_29921_126 = 30;
  v2 = 0;
  if ( a1x->var_u8_29853_58 )
  {
    if ( a1x->str_29885_90.var_u16_29889_94 )
    {
      a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v3 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v2 = 1;
      a1x->var_u16_29835_40 = v3;
    }
    else
    {
      a1x->var_u16_29835_40 = 0;
    }
    v4 = a1x->var_u16_29849_54;
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < a1x->actLife_29807_12 )
        {
          a1x->actLife_29807_12 = v7;
          v2 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if ( a1x->actLife_29807_12 < 0 )
  {
    v2 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v2 )
  {
    if ( v2 <= 1 )
    {
      v8 = *(_BYTE *)(v1 + 164 * a1x->var_u16_29835_40 + 29859);
      dword_AE400_AE3F0(v1);
      if ( v8 == 3 )
      {
        v9 = a1x->var_u16_29835_40;
        a1x->var_u16_29821_26 = -10;
        a1x->var_u16_29941_146 = v9;
      }
    }
    else
    {
      dword_AE400_AE3F0(v1);
      sub_424F0_42830(a1x, 0x28u);
    }
    return;
  }
  dword_AE400_AE3F0(v1);
  sub_196E0(a1x);
  v10 = 164 * a1x->var_u16_29941_146 + dword_AE400_AE3F0() + 29795;
  if ( (a1x->var_u8_29858_63 & 3) == 0 )
    a1x->var_u16_29829_34 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v10 + 72));
  if ( *(int *)(v10 + 12) < 0 || (*(_BYTE *)(v10 + 17) & 4) != 0 )
  {
LABEL_30:
    sub_424F0_42830(a1x, 0x25u);
    return;
  }
  v11 = a1x->var_u16_29821_26;
  v12 = dword_AE400_AE3F0();
  a1x->var_u16_29821_26 = v11 + 1;
  if ( v11 > 40 )
    a1x->var_u16_29821_26 = -90;
  if ( a1x->var_u16_29821_26 > 0 )
  {
    dword_AE400_AE3F0(v12);
    v13 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v10 + 72));
    HIBYTE(v13) = (HIBYTE(v13) + 4) & 7;
    *(_WORD *)(*(_DWORD *)(v10 + 160) + 24) = v13;
    *(_WORD *)(*(_DWORD *)(v10 + 160) + 26) = 256;
    v14x = str_AE400_AE3F0->str_29795;
    *(_WORD *)(*(_DWORD *)(v10 + 160) + 22) = 80;
    sub_55370_558A0(a1x - v14x, -1, 42);
    v12 = dword_AE400_AE3F0();
  }
  //v15 = *(_DWORD *)(a1 + 156);
  v16 = a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26;
  dword_AE400_AE3F0(v12);
  if ( !v16 )
  {
    v17 = a1x->var_u32_29951_156->v_28;
    if ( sub_42340_42680(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v10 + 72)) >= v17 )
      goto LABEL_30;
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 37);
    a1x->var_u8_29866_71 = 5;
  }
  v18 = a1x->var_u8_29866_71;
  if ( v18 )
  {
    v22x = &a1x->var_u32_29867_72;
    a1x->var_u8_29866_71 = v18 - 1;
    v19 = (int)sub_373F0_377B0(&a1x->var_u32_29867_72, 9, 9);
    v20 = v19;
    if ( v19 )
    {
      *(_BYTE *)(v19 + 68) = 10;
      *(_BYTE *)(v19 + 69) = 23;
      *(_WORD *)(v19 + 24) = a1x->id_29819_24;
      *(_WORD *)(v19 + 30) = sub_42150_42490(v22x, (axis_3d*)(_WORD *)(v10 + 72));
      *(_WORD *)(v20 + 32) = sub_42180_424C0(v22x, (axis_3d*)(_WORD *)(v10 + 72));
      *(_WORD *)(v20 + 76) += a1x->var_u16_29873_78.var_u16_29879_84;
      v21 = a1x->var_u16_29941_146;
      *(_DWORD *)(v20 + 156) = (uint32)&unk_98F38[6];
      *(_WORD *)(v20 + 146) = v21;
      *(_BYTE *)(v20 + 67) = *(_BYTE *)(v10 + 67);
      LOBYTE(v21) = *(_BYTE *)(v10 + 66);
      *(_WORD *)(v20 + 44) = 800;
      *(_BYTE *)(v20 + 66) = v21;
    }
  }
}

//SYNCHRONIZED EITH REMC1
void sub_1C880(Type_AE400_29795* a1x)
{
  char v1; // ah

  sub_1A390(a1x, 0x24u);
  v1 = a1x->var_u8_29865_70;
  a1x->actSpeed_29921_126 = 30;
  if ( v1 == 38 )
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 37);
}

//SYNCHRONIZED WITH REMC1
void sub_1C8D0(Type_AE400_29795* a1x)
{
  sub_1A6C0(a1x, 36);
}

//SYNCHRONIZED WITH REMC1
void sub_1C8E0(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//SYNCHRONIZED WITH REMC1
void sub_1C8F0(Type_AE400_29795* a1x)
{
  sub_19B10(a1x, 42);
}

//SYNCHRONIZED WITH REMC1
void sub_1C900(Type_AE400_29795* a1x)
{
  bool v1; // eax
  int v2; // esi

  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
  {
    v1 = a1x->maxLife_29803_8 >> 6 > a1x->maxLife_29803_8;
    v2 = a1x->actLife_29807_12;
    a1x->actLife_29807_12 = v1 + v2;
    if ( v1 + v2 )
        a1x->actLife_29807_12 = a1x->maxLife_29803_8;
  }
  sub_19D70(a1x, 42);
  if (a1x->var_u8_29865_70 == 44 )
      a1x->var_u16_29821_26 = 1;
}

//----- (0001C960) --------------------------------------------------------
void sub_1C960(Type_AE400_29795* a1x)
{
  __int16 v1; // dx
  __int16 result; // ax

  v1 = *(_WORD *)(a1 + 26);
  if ( v1 )
  {
    *(_WORD *)(a1 + 26) = v1 - 1;
    if ( v1 == 1 && *(_WORD *)(a1 + 86) == 198 )
    {
      sub_36FA0_37360(a1, 85);
      *(_WORD *)(a1 + 126) = *(_WORD *)(a1 + 128);
    }
  }
  result = sub_1A120(a1, 42, (unsigned __int16 (*)(int, int))sub_1AE30);
  if ( (_BYTE)result )
  {
    result = *(_WORD *)(a1 + 86);
    if ( result == 85 )
    {
      sub_36FA0_37360(a1, 198);
      *(_WORD *)(a1 + 26) = 30;
      result = *(_WORD *)(a1 + 130);
      *(_WORD *)(a1 + 126) = result;
    }
  }
  if ( *(_BYTE *)(a1 + 70) != 44 )
  {
    result = *(_WORD *)(a1 + 86);
    if ( result == 198 )
    {
      sub_36FA0_37360(a1, 85);
      result = *(_WORD *)(a1 + 128);
      *(_WORD *)(a1 + 126) = result;
    }
  }
}

//SYNCHRONIZED WITH REMC1
void sub_1CA00(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 0x2Au);
  if (a1x->var_u8_29865_70 == 44 )
      a1x->var_u16_29821_26 = 1;
}

//SYNCHRONIZED WITH REMC1
void sub_1CA20(Type_AE400_29795* a1x)
{
  sub_1A6C0(a1x, 42);
}

//SYNCHRONIZED WITH REMC1
void sub_1CA30(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//SYNCHRONIZED WITH REMC1
void sub_1CA40(Type_AE400_29795* a1x)
{
  sub_19B10(a1x, 48);
}

//----- (0001CA50) --------------------------------------------------------
void sub_1CA50(Type_AE400_29795* a1x)
{
  unsigned int v1; // ebp
  __int16 v2; // ax
  unsigned __int16 v3; // cx
  int i; // esi
  int v5; // eax
  unsigned int v6; // eax
  int v7; // ebp
  int v8; // eax
  unsigned int v9; // ebp
  unsigned int j; // esi
  int v11; // eax
  unsigned int v12; // edi
  __int16 v13; // ax
  int v14; // eax
  unsigned int v15; // ebp
  unsigned int v16; // esi
  int v17; // eax
  unsigned int v18; // edi
  __int16 v19; // ax
  int v20; // [esp+0h] [ebp-2Ch]
  int v21; // [esp+0h] [ebp-2Ch]
  unsigned int v22; // [esp+8h] [ebp-24h]
  unsigned int v23; // [esp+Ch] [ebp-20h]
  unsigned int v24; // [esp+14h] [ebp-18h]
  unsigned int v25; // [esp+18h] [ebp-14h]

  v1 = 0;
  if ( *(_BYTE *)(a1 + 58) )
  {
    if ( *(_WORD *)(a1 + 94) )
    {
      *(_DWORD *)(a1 + 12) -= *(_DWORD *)(a1 + 90);
      v2 = *(_WORD *)(a1 + 94);
      *(_WORD *)(a1 + 94) = 0;
      v1 = 1;
      *(_WORD *)(a1 + 40) = v2;
    }
    else
    {
      *(_WORD *)(a1 + 40) = 0;
    }
    v3 = *(_WORD *)(a1 + 54);
    if ( v3 )
    {
      for ( i = 164 * v3 + dword_AE400_AE3F0() + 29795;
            i != dword_AE400_AE3F0() + 29795;
            i = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(i + 54) )
      {
        v5 = *(_DWORD *)(i + 12);
        if ( v5 < *(_DWORD *)(a1 + 12) )
        {
          *(_DWORD *)(a1 + 12) = v5;
          v1 = 1;
          *(_WORD *)(a1 + 40) = *(_WORD *)(i + 40);
          break;
        }
      }
    }
  }
  if ( *(int *)(a1 + 12) < 0 )
  {
    v1 = 2;
    *(_WORD *)(a1 + 38) = *(_WORD *)(a1 + 40);
  }
  if ( v1 )
  {
    if ( v1 <= 1 )
    {
      if ( *(_BYTE *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 40) + 29859) == 3 )
      {
        *(_WORD *)(a1 + 146) = *(_WORD *)(a1 + 40);
        sub_424F0_42830(a1, 0x32u);
      }
    }
    else
    {
      sub_424F0_42830(a1, 0x34u);
    }
  }
  else
  {
    sub_196E0(a1);
    if ( !(*(unsigned __int8 *)(a1 + 63) % *(__int16 *)(*(_DWORD *)(a1 + 156) + 26)) )
    {
      v6 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
      *(_DWORD *)(a1 + 4) = v6;
      v7 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = 9377 * v7 + 9439;
      *(_WORD *)(a1 + 34) += ((unsigned __int8)(-95 * v7 - 33) + 85) * (2 * ((int)(v6 % 0x9D) / 79) - 1);
      LOBYTE(v6) = *(_BYTE *)(a1 + 58);
      *(_BYTE *)(a1 + 35) &= 7u;
      if ( (_BYTE)v6 )
      {
        v8 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 28);
        v9 = -1;
        v23 = v8 * v8;
        v25 = 0;
        for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36462); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
        {
          v11 = (__int16)(*(_WORD *)(j + 72) - *(_WORD *)(a1 + 72));
          v12 = v11 * v11
              + (__int16)(*(_WORD *)(j + 74) - *(_WORD *)(a1 + 74))
              * (__int16)(*(_WORD *)(j + 74) - *(_WORD *)(a1 + 74));
          if ( v12 <= v23 )
          {
            v20 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 30);
            v13 = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(j + 72));
            if ( (unsigned __int16)sub_42210_42550(*(_WORD *)(a1 + 30), v13) < v20 && v12 < v9 )
            {
              v25 = j;
              v9 = v12;
            }
          }
        }
        if ( v25 && *(_BYTE *)(v25 + 65) <= 1u && *(_WORD *)(*(_DWORD *)(v25 + 160) + 528) )
        {
          *(_WORD *)(a1 + 146) = (int)(v25 - (dword_AE400_AE3F0() + 29795)) / 164;
          *(_WORD *)(*(_DWORD *)(v25 + 160) + 528) = 200;
          sub_424F0_42830(a1, 0x32u);
        }
        else
        {
          v14 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 28);
          v15 = -1;
          v22 = v14 * v14;
          v16 = *(_DWORD *)(dword_AE408_AE3F8() + 4 * *(char *)(a1 + 65) + 36382);
          v24 = 0;
          while ( v16 > dword_AE400_AE3F0() + 29795 )
          {
            if ( !*(_WORD *)(v16 + 52) && v16 != a1 )
            {
              v17 = (__int16)(*(_WORD *)(v16 + 72) - *(_WORD *)(a1 + 72));
              v18 = v17 * v17
                  + (__int16)(*(_WORD *)(v16 + 74) - *(_WORD *)(a1 + 74))
                  * (__int16)(*(_WORD *)(v16 + 74) - *(_WORD *)(a1 + 74));
              if ( v18 <= v22 )
              {
                v21 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 30);
                v19 = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v16 + 72));
                if ( (unsigned __int16)sub_42210_42550(*(_WORD *)(a1 + 30), v19) < v21 && v18 < v15 )
                {
                  v24 = v16;
                  v15 = v18;
                }
              }
            }
            v16 = *(_DWORD *)v16;
          }
          if ( v24 )
          {
            *(_WORD *)(a1 + 52) = (int)(v24 - (dword_AE400_AE3F0() + 29795)) / 164;
            sub_424F0_42830(a1, 0x33u);
          }
        }
      }
    }
  }
}
// 1CB20: conditional instruction was optimized away because ebp.4==2
// 1CCC5: conditional instruction was optimized away because %var_14.4!=0
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (0001CE30) --------------------------------------------------------
void sub_1CE30(Type_AE400_29795* a1x)
{
  int v1; // eax

  if ( *(_WORD *)(a1 + 26) )
    *(_WORD *)(a1 + 126) = *(_WORD *)(a1 + 128);
  *(_BYTE *)(a1 + 17) |= 0x80u;
  if ( (unsigned __int16)sub_1A120(a1, 48, (unsigned __int16 (*)(int, int))sub_1AEE0) )
  {
    sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 38);
    v1 = 164 * *(unsigned __int16 *)(a1 + 146);
    if ( v1 + dword_AE400_AE3F0() + 29795 )
    {
      if ( *(_BYTE *)(dword_AE400_AE3F0() + v1 + 29860) <= 1u )
        *(_WORD *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 146) + 29955) + 528) = 200;
    }
  }
  if ( !(*(unsigned __int8 *)(a1 + 63) % *(__int16 *)(*(_DWORD *)(a1 + 156) + 26)) )
    sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 38);
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//SYNCHRONIZED WITH REMC1
void sub_1CF50(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 0x30u);
}

//----- (0001CF60) --------------------------------------------------------
void sub_1CF60(Type_AE400_29795* a1x)
{
  int v1; // eax

  v1 = 164 * *(unsigned __int16 *)(a1 + 38);
  if ( v1 + dword_AE400_AE3F0() + 29795 && *(_BYTE *)(dword_AE400_AE3F0() + v1 + 29860) <= 1u )
    *(_WORD *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 38) + 29955) + 528) = 200;
  return sub_1A6C0(a1, 48);
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//SYNCHRONIZED REMC1
void sub_1CFE0(Type_AE400_29795* a1x)
{
    sub_1A800(a1x);
}

//----- (0001CFF0) --------------------------------------------------------
void sub_1CFF0(Type_AE400_29795* a1x)
{
  __int16 v1; // dx
  __int16 v2; // cx
  int result; // eax

  v1 = *(_WORD *)(a1 + 26);
  v2 = v1 - 1;
  *(_WORD *)(a1 + 26) = v1 - 1;
  if ( v1 )
  {
    if ( v1 == 17 )
    {
      return sub_36FA0_37360(a1, 237);
    }
    else if ( v2 < 16 )
    {
      result = v2 / 2;
      if ( !(v2 % 2) )
        return sub_42510_42850(a1);
    }
  }
  else
  {
    sub_1DD50(a1);
    result = sub_424F0_42830(a1, 0x37u);
    *(_WORD *)(a1 + 26) = 400;
    *(_BYTE *)(a1 + 71) = 0;
  }
}

//----- (0001D060) --------------------------------------------------------
void sub_1D060(Type_AE400_29795* a1x)
{
  __int16 v1; // cx
  char v2; // al
  int v3; // ebp
  unsigned int v4; // edi
  __int16 v5; // ax
  int v6; // esi
  int i; // eax
  int v8; // edx
  unsigned int v9; // edx
  int v10; // ebp
  unsigned int j; // eax
  int v12; // edi
  unsigned int v13; // eax
  int v14; // ecx
  int v15; // eax
  unsigned int k; // esi
  __int16 v17; // ax
  __int16 v18; // di
  int v19; // edi
  unsigned int v20; // edi
  __int16 v21; // ax
  int v22; // esi
  unsigned int v23; // edx
  unsigned int v24; // edi
  unsigned int ii; // eax
  int v26; // edx
  int v27; // esi
  unsigned int v28; // esi
  int v29; // eax
  unsigned int v30; // edi
  unsigned int m; // eax
  int v32; // edx
  unsigned int v33; // esi
  unsigned int v34; // edi
  unsigned int n; // eax
  int v36; // edx
  int v37; // esi
  unsigned int v38; // esi
  int v39; // esi
  unsigned int v40; // [esp+0h] [ebp-48h]
  int v41; // [esp+4h] [ebp-44h]
  unsigned int v42; // [esp+8h] [ebp-40h]
  int v43; // [esp+8h] [ebp-40h]
  unsigned int v44; // [esp+Ch] [ebp-3Ch]
  unsigned int v45; // [esp+10h] [ebp-38h]
  int v46; // [esp+14h] [ebp-34h]
  unsigned int v47; // [esp+18h] [ebp-30h]
  unsigned int v48; // [esp+1Ch] [ebp-2Ch]
  unsigned int v49; // [esp+20h] [ebp-28h]
  unsigned int v50; // [esp+28h] [ebp-20h]
  unsigned int v51; // [esp+2Ch] [ebp-1Ch]
  int v52; // [esp+30h] [ebp-18h]

  v1 = *(_WORD *)(a1 + 26);
  if ( v1 > 0 )
  {
    *(_WORD *)(a1 + 26) = v1 - 1;
    if ( v1 == 1 )
      sub_1DD90(a1);
  }
  v2 = *(_BYTE *)(a1 + 71);
  v3 = dword_AE400_AE3F0();
  if ( v2 )
  {
    if ( v2 == 1 )
      sub_1D6D0(a1);
    goto LABEL_84;
  }
  if ( *(_BYTE *)(a1 + 58) )
    *(_WORD *)(a1 + 26) = 400;
  v4 = 0;
  if ( *(_BYTE *)(a1 + 58) )
  {
    v5 = *(_WORD *)(a1 + 94);
    if ( v5 )
    {
      *(_DWORD *)(a1 + 12) -= *(_DWORD *)(a1 + 90);
      v5 = *(_WORD *)(a1 + 94);
      *(_WORD *)(a1 + 94) = 0;
      v4 = 1;
    }
    *(_WORD *)(a1 + 40) = v5;
    if ( *(_WORD *)(a1 + 54) )
    {
      v6 = v3 + 29795;
      for ( i = 164 * *(unsigned __int16 *)(a1 + 54) + v3 + 29795; i != v6; i = v6 + 164 * *(unsigned __int16 *)(i + 54) )
      {
        v8 = *(_DWORD *)(i + 12);
        if ( v8 < *(_DWORD *)(a1 + 12) )
        {
          *(_DWORD *)(a1 + 12) = v8;
          v4 = 1;
          *(_WORD *)(a1 + 40) = *(_WORD *)(i + 40);
          break;
        }
      }
    }
  }
  if ( *(int *)(a1 + 12) < 0 )
  {
    v4 = 2;
    *(_WORD *)(a1 + 38) = *(_WORD *)(a1 + 40);
  }
  if ( v4 )
  {
    dword_AE400_AE3F0(v3);
    if ( v4 <= 1 )
    {
      *(_WORD *)(a1 + 146) = *(_WORD *)(a1 + 40);
      sub_424F0_42830(a1, 0x38u);
    }
    else
    {
      sub_424F0_42830(a1, 0x3Au);
    }
    goto LABEL_84;
  }
  dword_AE400_AE3F0(v3);
  sub_196E0(a1);
  if ( !(*(unsigned __int8 *)(a1 + 63) % *(__int16 *)(*(_DWORD *)(a1 + 156) + 26)) )
  {
    v9 = -1;
    v10 = dword_AE400_AE3F0();
    v52 = 0;
    for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36462); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
    {
      if ( *(_BYTE *)(j + 65) == 2 && *(_WORD *)(j + 24) != *(_WORD *)(a1 + 24) )
      {
        v12 = (__int16)(*(_WORD *)(j + 72) - *(_WORD *)(a1 + 72));
        if ( v12 * v12
           + (__int16)(*(_WORD *)(j + 74) - *(_WORD *)(a1 + 74)) * (__int16)(*(_WORD *)(j + 74) - *(_WORD *)(a1 + 74)) < v9 )
        {
          v52 = j;
          v9 = v12 * v12
             + (__int16)(*(_WORD *)(j + 74) - *(_WORD *)(a1 + 74)) * (__int16)(*(_WORD *)(j + 74) - *(_WORD *)(a1 + 74));
        }
      }
    }
    v46 = v52;
    if ( v52 )
    {
      *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v52 + 72));
      v42 = *(__int16 *)(v52 + 80) + *(__int16 *)(*(_DWORD *)(a1 + 156) + 28);
      if ( sub_42340_42680((_WORD *)(a1 + 72), (_WORD *)(v52 + 72)) > v42 )
      {
        v10 = dword_AE400_AE3F0();
        v46 = 0;
      }
      else
      {
        *(_WORD *)(a1 + 146) = (v52 - (dword_AE400_AE3F0() + 29795)) / 164;
        sub_424F0_42830(a1, 0x38u);
        v10 = dword_AE400_AE3F0();
      }
    }
    else
    {
      v13 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
      *(_DWORD *)(a1 + 4) = v13;
      v14 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = 9377 * v14 + 9439;
      *(_WORD *)(a1 + 34) += ((unsigned __int8)(-95 * v14 - 33) + 85) * (2 * (v13 % 0x9D / 79i64) - 1);
      *(_BYTE *)(a1 + 35) &= 7u;
    }
    dword_AE400_AE3F0(v10);
    if ( !v46 )
    {
      if ( *(_BYTE *)(a1 + 58) )
      {
        v15 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 28);
        v44 = -1;
        v41 = 0;
        v48 = v15 * v15;
        for ( k = *(_DWORD *)(dword_AE408_AE3F8() + 36462); k > v10 + 29795; k = *(_DWORD *)k )
        {
          v17 = *(_WORD *)(k + 24);
          v18 = *(_WORD *)(a1 + 24);
          dword_AE400_AE3F0(v10);
          if ( v17 != v18 )
          {
            v19 = (__int16)(*(_WORD *)(k + 72) - *(_WORD *)(a1 + 72));
            v20 = (__int16)(*(_WORD *)(k + 74) - *(_WORD *)(a1 + 74))
                * (__int16)(*(_WORD *)(k + 74) - *(_WORD *)(a1 + 74))
                + v19 * v19;
            if ( v20 <= v48 && (*(_BYTE *)(k + 16) & 0x20) == 0 )
            {
              v43 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 30);
              v21 = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(k + 72));
              if ( (unsigned __int16)sub_42210_42550(*(_WORD *)(a1 + 30), v21) < v43 && v20 < v44 )
              {
                v41 = k;
                v44 = v20;
              }
            }
          }
          v10 = dword_AE400_AE3F0();
        }
        dword_AE400_AE3F0(v10);
        v46 = v41;
        if ( v41 )
        {
          *(_WORD *)(a1 + 146) = (v41 - (v10 + 29795)) / 164;
          sub_424F0_42830(a1, 0x38u);
        }
      }
      if ( !v46 )
      {
        v22 = *(_DWORD *)(a1 + 156);
        v23 = *(unsigned __int8 *)(a1 + 63) / *(__int16 *)(v22 + 26) % 3;
        if ( v23 )
        {
          if ( v23 <= 1 )
          {
            v47 = *(__int16 *)(v22 + 28) * *(__int16 *)(v22 + 28);
            v30 = -1;
            v50 = 0;
            for ( m = *(_DWORD *)(dword_AE408_AE3F8() + 36430); m > dword_AE400_AE3F0() + 29795; m = *(_DWORD *)m )
            {
              v32 = (__int16)(*(_WORD *)(m + 72) - *(_WORD *)(a1 + 72));
              v33 = v32 * v32
                  + (__int16)(*(_WORD *)(m + 74) - *(_WORD *)(a1 + 74))
                  * (__int16)(*(_WORD *)(m + 74) - *(_WORD *)(a1 + 74));
              if ( v33 <= v47 && v33 < v30 )
              {
                v50 = m;
                v30 = v32 * v32
                    + (__int16)(*(_WORD *)(m + 74) - *(_WORD *)(a1 + 74))
                    * (__int16)(*(_WORD *)(m + 74) - *(_WORD *)(a1 + 74));
              }
            }
            v29 = v50;
          }
          else
          {
            if ( v23 != 2 )
              goto LABEL_78;
            v40 = *(__int16 *)(v22 + 28) * *(__int16 *)(v22 + 28);
            v34 = -1;
            v51 = 0;
            for ( n = *(_DWORD *)(dword_AE408_AE3F8() + 36434); n > dword_AE400_AE3F0() + 29795; n = *(_DWORD *)n )
            {
              v36 = (__int16)(*(_WORD *)(n + 72) - *(_WORD *)(a1 + 72));
              v37 = (__int16)(*(_WORD *)(n + 74) - *(_WORD *)(a1 + 74));
              v38 = v36 * v36 + v37 * v37;
              if ( v38 <= v40 && v38 < v34 )
              {
                v51 = n;
                v34 = v38;
              }
            }
            v29 = v51;
          }
        }
        else
        {
          v49 = *(__int16 *)(v22 + 28) * *(__int16 *)(v22 + 28);
          v24 = -1;
          v45 = 0;
          for ( ii = *(_DWORD *)(dword_AE408_AE3F8() + 36398); ii > dword_AE400_AE3F0() + 29795; ii = *(_DWORD *)ii )
          {
            v26 = (__int16)(*(_WORD *)(ii + 72) - *(_WORD *)(a1 + 72));
            v27 = (__int16)(*(_WORD *)(ii + 74) - *(_WORD *)(a1 + 74));
            v28 = v26 * v26 + v27 * v27;
            if ( v28 <= v49 && v28 < v24 )
            {
              v45 = ii;
              v24 = v28;
            }
          }
          v29 = v45;
        }
        v46 = v29;
LABEL_78:
        if ( v46 )
        {
          if ( sub_42340_42680((_WORD *)(a1 + 72), (_WORD *)(v46 + 72)) <= 0x600 )
          {
            *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(v46 + 72);
            word_AE454_AE444.z = *(_WORD *)(v46 + 76);
            sub_41E80_421C0(v46);
            v39 = sub_373F0_377B0((int)&word_AE454_AE444, 5, 9);
            if ( v39 )
            {
              if ( *(_BYTE *)(164 * *(__int16 *)(a1 + 24) + dword_AE400_AE3F0() + 29859) == 3 )
                *(_WORD *)(v39 + 24) = *(_WORD *)(a1 + 24);
            }
          }
        }
      }
    }
  }
LABEL_84:
  if ( *(_BYTE *)(a1 + 70) == 56 )
    sub_1DCD0(a1);
}
// 1D174: conditional instruction was optimized away because edi.4==2
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// AE444: using guessed type __int16 word_AE454_AE44X;

//----- (0001D6D0) --------------------------------------------------------
void sub_1D6D0(Type_AE400_29795* a1x)
{
  int v1; // ebp
  unsigned int v2; // esi
  __int16 v3; // ax
  unsigned __int16 v4; // cx
  int v5; // eax
  int i; // edx
  int v7; // ecx
  __int16 v8; // si
  int v9; // esi
  unsigned int v10; // edx
  unsigned int v11; // ecx
  unsigned int m; // eax
  int v13; // esi
  unsigned int v14; // edx
  _WORD *v15; // eax
  unsigned int v16; // ecx
  unsigned int j; // eax
  int v18; // esi
  int v19; // edx
  unsigned int v20; // edx
  unsigned int v21; // ecx
  unsigned int k; // eax
  int v23; // esi
  unsigned int v24; // edx
  int v25; // edx
  int v26; // eax
  unsigned int v27; // [esp+0h] [ebp-2Ch]
  _WORD *v28; // [esp+4h] [ebp-28h]
  unsigned int v29; // [esp+8h] [ebp-24h]
  unsigned int v30; // [esp+Ch] [ebp-20h]
  unsigned int v31; // [esp+10h] [ebp-1Ch]
  unsigned int v32; // [esp+14h] [ebp-18h]
  unsigned int v33; // [esp+18h] [ebp-14h]

  v1 = dword_AE400_AE3F0();
  v2 = 0;
  v28 = 0;
  if ( *(_BYTE *)(a1 + 58) )
  {
    if ( *(_WORD *)(a1 + 94) )
    {
      *(_DWORD *)(a1 + 12) -= *(_DWORD *)(a1 + 90);
      v3 = *(_WORD *)(a1 + 94);
      *(_WORD *)(a1 + 94) = 0;
      v2 = 1;
      *(_WORD *)(a1 + 40) = v3;
    }
    else
    {
      *(_WORD *)(a1 + 40) = 0;
    }
    v4 = *(_WORD *)(a1 + 54);
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < *(_DWORD *)(a1 + 12) )
        {
          *(_DWORD *)(a1 + 12) = v7;
          v2 = 1;
          *(_WORD *)(a1 + 40) = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if ( *(int *)(a1 + 12) < 0 )
  {
    v2 = 2;
    *(_WORD *)(a1 + 38) = *(_WORD *)(a1 + 40);
  }
  if ( v2 )
  {
    dword_AE400_AE3F0(v1);
    if ( v2 <= 1 )
    {
      *(_WORD *)(a1 + 146) = *(_WORD *)(a1 + 40);
      sub_424F0_42830(a1, 0x38u);
    }
    else
    {
      sub_424F0_42830(a1, 0x3Au);
    }
    return;
  }
  dword_AE400_AE3F0(v1);
  v8 = *(_WORD *)(a1 + 26);
  if ( v8 < 0 )
  {
    *(_WORD *)(a1 + 26) = v8 + 1;
    if ( v8 == -1 )
      sub_1DDB0(a1);
    return;
  }
  if ( *(_BYTE *)(a1 + 58) )
  {
    *(_WORD *)(a1 + 26) = -50;
    return;
  }
  v9 = *(_DWORD *)(a1 + 156);
  if ( !(*(unsigned __int8 *)(a1 + 63) % *(__int16 *)(v9 + 26)) )
  {
    v10 = *(unsigned __int8 *)(a1 + 63) / *(__int16 *)(v9 + 26) % 3;
    if ( v10 )
    {
      if ( v10 <= 1 )
      {
        v29 = *(__int16 *)(v9 + 28) * *(__int16 *)(v9 + 28);
        v16 = -1;
        v32 = 0;
        for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36430); j > v1 + 29795; j = *(_DWORD *)j )
        {
          v18 = (__int16)(*(_WORD *)(j + 72) - *(_WORD *)(a1 + 72));
          v19 = (__int16)(*(_WORD *)(j + 74) - *(_WORD *)(a1 + 74));
          v20 = v18 * v18 + v19 * v19;
          if ( v20 <= v29 && v20 < v16 )
          {
            v32 = j;
            v16 = v20;
          }
        }
        v15 = (_WORD *)v32;
      }
      else
      {
        if ( v10 != 2 )
          goto LABEL_50;
        v31 = *(__int16 *)(v9 + 28) * *(__int16 *)(v9 + 28);
        v21 = -1;
        v33 = 0;
        for ( k = *(_DWORD *)(dword_AE408_AE3F8() + 36434); k > v1 + 29795; k = *(_DWORD *)k )
        {
          v23 = (__int16)(*(_WORD *)(k + 72) - *(_WORD *)(a1 + 72));
          v24 = v23 * v23
              + (__int16)(*(_WORD *)(k + 74) - *(_WORD *)(a1 + 74))
              * (__int16)(*(_WORD *)(k + 74) - *(_WORD *)(a1 + 74));
          if ( v24 <= v31 && v24 < v21 )
          {
            v33 = k;
            v21 = v23 * v23
                + (__int16)(*(_WORD *)(k + 74) - *(_WORD *)(a1 + 74))
                * (__int16)(*(_WORD *)(k + 74) - *(_WORD *)(a1 + 74));
          }
        }
        v15 = (_WORD *)v33;
      }
    }
    else
    {
      v30 = *(__int16 *)(v9 + 28) * *(__int16 *)(v9 + 28);
      v11 = -1;
      v27 = 0;
      for ( m = *(_DWORD *)(dword_AE408_AE3F8() + 36398); m > v1 + 29795; m = *(_DWORD *)m )
      {
        v13 = (__int16)(*(_WORD *)(m + 72) - *(_WORD *)(a1 + 72));
        v14 = v13 * v13
            + (__int16)(*(_WORD *)(m + 74) - *(_WORD *)(a1 + 74)) * (__int16)(*(_WORD *)(m + 74) - *(_WORD *)(a1 + 74));
        if ( v14 <= v30 && v14 < v11 )
        {
          v27 = m;
          v11 = v13 * v13
              + (__int16)(*(_WORD *)(m + 74) - *(_WORD *)(a1 + 74))
              * (__int16)(*(_WORD *)(m + 74) - *(_WORD *)(a1 + 74));
        }
      }
      v15 = (_WORD *)v27;
    }
    v28 = v15;
LABEL_50:
    dword_AE400_AE3F0(v1);
    if ( v28 )
    {
      v25 = (__int16)(v28[36] - *(_WORD *)(a1 + 72));
      if ( Distance_410CE_4140E(
             (__int16)(v28[37] - *(_WORD *)(a1 + 74)) * (__int16)(v28[37] - *(_WORD *)(a1 + 74))
           + v25 * v25
           + (__int16)(v28[38] - *(_WORD *)(a1 + 76)) * (__int16)(v28[38] - *(_WORD *)(a1 + 76))) <= 0x600 )
      {
        *(_DWORD *)&word_AE454_AE444 = *((_DWORD *)v28 + 18);
        word_AE454_AE444.z = v28[38];
        sub_41E80_421C0((int)v28);
        v26 = sub_373F0_377B0((int)&word_AE454_AE444, 5, 9);
        if ( v26 )
          *(_WORD *)(v26 + 24) = *(_WORD *)(a1 + 24);
      }
    }
  }
}
// 1D7A5: conditional instruction was optimized away because esi.4==2
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// AE444: using guessed type __int16 word_AE454_AE44X;

//SYNCHRONIZED WITH REMC1
void sub_1DA60(Type_AE400_29795* a1x)
{
  int v1; // esi
  unsigned int v2; // edi
  __int16 v3; // ax
  unsigned __int16 v4; // cx
  int v5; // eax
  int i; // edx
  int v7; // ecx
  char v8; // cl
  int v9; // edi
  unsigned int v11; // ebp

  v1 = dword_AE400_AE3F0();
  v2 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
        a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v3 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v2 = 1;
      a1x->var_u16_29835_40 = v3;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v4 = a1x->var_u16_29849_54;
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v7;
          v2 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v2 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v2 )
  {
    if ( v2 <= 1 )
    {
      v8 = *(_BYTE *)(v1 + 164 * a1x->var_u16_29835_40 + 29859);
      dword_AE400_AE3F0(v1);
      if ( v8 == 3 )
          a1x->var_u16_29941_146 = a1x->var_u16_29835_40;
    }
    else
    {
      dword_AE400_AE3F0(v1);
      sub_424F0_42830(a1x, 0x3Au);
    }
    goto LABEL_31;
  }
  dword_AE400_AE3F0(v1);
  sub_196E0(a1x);
  v9 = 164 * a1x->var_u16_29941_146 + dword_AE400_AE3F0() + 29795;
  if ( *(int *)(v9 + 12) < 0 || (*(_BYTE *)(v9 + 17) & 4) != 0 )
  {
LABEL_29:
    sub_424F0_42830(a1x, 0x37u);
    goto LABEL_31;
  }
  if ( !(a1x->var_u8_29858_63 % 10) )
      a1x->var_u16_29829_34 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v9 + 72));
  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
  {
    v11 = a1x->var_u32_29951_156->v_28;
    if ( *(_BYTE *)(v9 + 64) == 3 && *(_BYTE *)(v9 + 65) == 2 )
      v11 += *(__int16 *)(v9 + 80);
    if ( sub_42340_42680(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v9 + 72)) < v11 )
    {
      sub_1AA40(a1x, v9);
      goto LABEL_31;
    }
    goto LABEL_29;
  }
LABEL_31:
  if (a1x->var_u8_29865_70 != 56 )
    sub_1DD50(a1x);
}

//SYNCHRONIZED WITH REMC1
void sub_1DC80(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 0x36u);
  if ( a1x->var_u8_29865_70 == 56 )
    sub_1DCD0(a1x);
}

//SYNCHRONIZED WITH REMC1
void sub_1DCB0(Type_AE400_29795* a1x)
{
  sub_1A6C0(a1x, 54);
}

//SYNCHRONIZED WITH REMC1
void sub_1DCC0(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//----- (0001DCD0) --------------------------------------------------------
void sub_1DCD0(Type_AE400_29795* a1x)
{
  int v1; // esi
  char result; // al

  v1 = 164 * *(unsigned __int16 *)(a1 + 146) + dword_AE400_AE3F0() + 29795;
  if ( *(_WORD *)(a1 + 24) == *(_WORD *)(v1 + 24) )
    return sub_424F0_42830(a1, 0x37u);
  *(_WORD *)(a1 + 126) = 0;
  sub_36FA0_37360(a1, 202);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(v1 + 64);
  result = *(_BYTE *)(v1 + 65);
  *(_BYTE *)(a1 + 67) = result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (0001DD50) --------------------------------------------------------
void sub_1DD50(Type_AE400_29795* a1x)
{
  int result; // eax

  *(_WORD *)(a1 + 126) = *(_WORD *)(a1 + 128);
  result = sub_36FA0_37360(a1, 201);
  *(_BYTE *)(a1 + 66) = 3;
  *(_BYTE *)(a1 + 67) = -1;
  *(_WORD *)(a1 + 26) = 50;
  *(_BYTE *)(a1 + 71) = 0;
}

//SYNCHRONIZED WITH REMC1
void sub_1DD90(Type_AE400_29795* a1x)
{
  sub_36FA0_37360(a1x, 245);
  a1x->var_u8_29866_71 = 1;
}

//SYNCHRONIZED WITH REMC1
void sub_1DDB0(Type_AE400_29795* a1x)
{
  a1x->var_u8_29866_71 = 0;
  a1x->var_u16_29821_26 = 400;
  sub_36FA0_37360(a1x, 201);
}

//SYNCHRONIZED WITH REMC1
void sub_1DDD0(Type_AE400_29795* a1x)
{
  sub_19B10(a1x, 60);
}

//SYNCHRONIZED WITH REMC1
void sub_1DDE0(Type_AE400_29795* a1x)
{
  sub_19D70(a1x, 60);
}

//----- (0001DDF0) --------------------------------------------------------
int sub_1DDF0(int a1)
{
  return sub_1A120(a1, 60, (unsigned __int16 (*)(int, int))sub_1A990);
}

//SYNCHRONIZED WITH REMC1
void sub_1DE10(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 0x3Cu);
}

//----- (0001DE20) --------------------------------------------------------
int sub_1DE20(int a1)
{
  return sub_1A6C0(a1, 60);
}

//SYNCHRONIZED WITH REMC1
void sub_1DE30(Type_AE400_29795* a1x)
{
    sub_1A800(a1x);
}

//----- (0001DE40) --------------------------------------------------------
__int16 sub_1DE40(int a1)
{
  __int16 v1; // dx
  __int16 result; // ax
  int v3; // ebx
  int v4; // eax
  char v5; // dl
  unsigned int v6; // eax
  int v7; // ebx
  unsigned int v8; // eax

  v1 = *(_WORD *)(a1 + 26);
  if ( v1 )
  {
    result = *(_WORD *)(a1 + 26);
    *(_WORD *)(a1 + 26) = v1 - 1;
    if ( v1 == 1 )
    {
      sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 21);
      if ( (*(_BYTE *)(a1 + 16) & 1) != 0 )
      {
        *(_WORD *)(a1 + 146) = 0;
        *(_WORD *)(a1 + 94) = 0;
        *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
        word_AE454_AE444.z = *(_WORD *)(a1 + 76);
        v6 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = v6;
        v7 = *(_DWORD *)(a1 + 4);
        word_AE454_AE444.x += ((v6 % 0x3C) << 8) + 12800;
        v8 = 9377 * v7 + 9439;
        *(_DWORD *)(a1 + 4) = v8;
        word_AE454_AE444.y += ((v8 % 0x3C) << 8) + 12800;
        sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
        return sub_424F0_42830(a1, 0x43u);
      }
      else
      {
        return sub_424F0_42830(a1, 0x44u);
      }
    }
  }
  else
  {
    *(_WORD *)(a1 + 26) = 12;
    while ( 1 )
    {
      result = *(_WORD *)(a1 + 26);
      *(_WORD *)(a1 + 26) = result - 1;
      if ( !result )
        break;
      *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
      word_AE454_AE444.z = *(_WORD *)(a1 + 76);
      v3 = *(__int16 *)(a1 + 26);
      word_AE454_AE444.x += 40 * (*(__int16 *)(a1 + 26) % 3);
      word_AE454_AE444.y += 40 * (v3 / 3);
      v4 = sub_373F0_377B0((int)&word_AE454_AE444, 10, 1);
      if ( v4 )
      {
        *(_WORD *)(v4 + 24) = *(_WORD *)(a1 + 24);
        *(_BYTE *)(v4 + 18) |= 1u;
      }
    }
    v5 = *(_BYTE *)(a1 + 16);
    *(_WORD *)(a1 + 26) = 1;
    *(_BYTE *)(a1 + 16) = v5 ^ 1;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE446: using guessed type __int16 word_AE454_AE444.y;

//----- (0001DFE0) --------------------------------------------------------
void sub_1DFE0(int a1)
{
  unsigned int v1; // edi
  __int16 v2; // ax
  unsigned __int16 v3; // bx
  int i; // eax
  int v5; // edx
  int v6; // eax
  int v7; // edx
  int v8; // ecx
  int v9; // eax
  unsigned int v10; // ebp
  unsigned int j; // ebx
  int v12; // edi
  unsigned int v13; // edi
  __int16 v14; // ax
  unsigned int v15; // eax
  int v16; // edx
  unsigned int v17; // edi
  int v18; // edx
  unsigned int k; // eax
  int v20; // ebx
  unsigned int v21; // [esp+0h] [ebp-20h]
  int v22; // [esp+4h] [ebp-1Ch]
  unsigned int v23; // [esp+Ch] [ebp-14h]

  v1 = 0;
  if ( *(_BYTE *)(a1 + 58) )
  {
    if ( *(_WORD *)(a1 + 94) )
    {
      *(_DWORD *)(a1 + 12) -= *(_DWORD *)(a1 + 90);
      v2 = *(_WORD *)(a1 + 94);
      *(_WORD *)(a1 + 94) = 0;
      v1 = 1;
      *(_WORD *)(a1 + 40) = v2;
    }
    else
    {
      *(_WORD *)(a1 + 40) = 0;
    }
    v3 = *(_WORD *)(a1 + 54);
    if ( v3 )
    {
      for ( i = 164 * v3 + dword_AE400_AE3F0() + 29795;
            i != dword_AE400_AE3F0() + 29795;
            i = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(i + 54) )
      {
        v5 = *(_DWORD *)(i + 12);
        if ( v5 < *(_DWORD *)(a1 + 12) )
        {
          *(_DWORD *)(a1 + 12) = v5;
          v1 = 1;
          *(_WORD *)(a1 + 40) = *(_WORD *)(i + 40);
          break;
        }
      }
    }
  }
  if ( *(int *)(a1 + 12) < 0 )
  {
    v1 = 2;
    *(_WORD *)(a1 + 38) = *(_WORD *)(a1 + 40);
  }
  if ( v1 )
  {
    if ( v1 > 1 )
    {
      sub_424F0_42830(a1, 0x46u);
      return;
    }
    if ( *(_BYTE *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 40) + 29859) == 3 )
    {
      LOWORD(v6) = *(_WORD *)(a1 + 40);
LABEL_53:
      *(_WORD *)(a1 + 146) = v6;
      sub_1E770((_WORD *)a1);
    }
  }
  else
  {
    sub_196E0(a1);
    if ( !(*(unsigned __int8 *)(a1 + 63) % *(__int16 *)(*(_DWORD *)(a1 + 156) + 26)) )
    {
      v7 = (*(int *)(a1 + 8) >> 6) + *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 12) = v7;
      if ( v7 < -1 )
        *(_DWORD *)(a1 + 12) = -1;
      v8 = *(_DWORD *)(a1 + 8);
      if ( *(_DWORD *)(a1 + 12) > v8 )
        *(_DWORD *)(a1 + 12) = v8;
      if ( *(_BYTE *)(a1 + 58) && *(int *)(a1 + 8) >> 2 < *(_DWORD *)(a1 + 12) )
      {
        v9 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 28);
        v10 = -1;
        v23 = v9 * v9;
        v21 = 0;
        for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36462); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
        {
          if ( *(_BYTE *)(j + 65) <= 1u )
          {
            v12 = (__int16)(*(_WORD *)(j + 72) - *(_WORD *)(a1 + 72));
            v13 = (__int16)(*(_WORD *)(j + 74) - *(_WORD *)(a1 + 74))
                * (__int16)(*(_WORD *)(j + 74) - *(_WORD *)(a1 + 74))
                + v12 * v12;
            if ( v13 <= v23 && (*(_BYTE *)(j + 16) & 0x20) == 0 )
            {
              v22 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 30);
              v14 = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(j + 72));
              if ( (unsigned __int16)sub_42210_42550(*(_WORD *)(a1 + 30), v14) < v22 && v13 < v10 )
              {
                v21 = j;
                v10 = v13;
              }
            }
          }
        }
        if ( v21 )
        {
          *(_WORD *)(a1 + 146) = (int)(v21 - (dword_AE400_AE3F0() + 29795)) / 164;
          sub_1E770((_WORD *)a1);
        }
        else
        {
          sub_1E810(a1);
        }
      }
      if ( !(4 * (*(unsigned __int8 *)(a1 + 63) % *(__int16 *)(*(_DWORD *)(a1 + 156) + 26))) )
      {
        v15 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = v15;
        v16 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = v16;
        *(_WORD *)(a1 + 34) += (2 * ((int)(v15 % 0x9D) / 79) - 1) * ((unsigned __int8)v16 + 85);
        *(_BYTE *)(a1 + 35) &= 7u;
        if ( *(_DWORD *)(a1 + 8) - (*(int *)(a1 + 8) >> 2) < *(_DWORD *)(a1 + 12) )
        {
          v17 = 0;
          v18 = 0;
          for ( k = *(_DWORD *)(dword_AE408_AE3F8() + 36462); k > dword_AE400_AE3F0() + 29795; k = *(_DWORD *)k )
          {
            if ( *(_BYTE *)(k + 65) <= 1u )
            {
              v20 = *(_DWORD *)(k + 140) && (*(_BYTE *)(k + 16) & 0x20) == 0;
              if ( v20 )
              {
                if ( v20 > v18 )
                {
                  v17 = k;
                  v18 = v20;
                }
              }
            }
          }
          if ( v17 )
          {
            v6 = (int)(v17 - (dword_AE400_AE3F0() + 29795)) / 164;
            goto LABEL_53;
          }
        }
      }
    }
  }
}
// 1E0B2: conditional instruction was optimized away because edi.4==2
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (0001E380) --------------------------------------------------------
void sub_1E380(int a1)
{
  int v1; // ebp
  unsigned int v2; // esi
  __int16 v3; // ax
  unsigned __int16 v4; // di
  int v5; // eax
  int i; // edx
  int v7; // ecx
  char v8; // cl
  int v9; // edi
  int v10; // ecx
  unsigned int v11; // esi
  int v12; // ebp
  char v13; // dl
  int v14; // eax
  int v15; // esi
  __int16 v16; // ax
  __int16 v17; // dx
  _WORD *v18; // edi
  __int16 v19; // ax
  int v20; // ebx

  v1 = dword_AE400_AE3F0();
  v2 = 0;
  if ( *(_BYTE *)(a1 + 58) )
  {
    if ( *(_WORD *)(a1 + 94) )
    {
      *(_DWORD *)(a1 + 12) -= *(_DWORD *)(a1 + 90);
      v3 = *(_WORD *)(a1 + 94);
      *(_WORD *)(a1 + 94) = 0;
      v2 = 1;
      *(_WORD *)(a1 + 40) = v3;
    }
    else
    {
      *(_WORD *)(a1 + 40) = 0;
    }
    v4 = *(_WORD *)(a1 + 54);
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < *(_DWORD *)(a1 + 12) )
        {
          *(_DWORD *)(a1 + 12) = v7;
          v2 = 1;
          *(_WORD *)(a1 + 40) = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if ( *(int *)(a1 + 12) < 0 )
  {
    v2 = 2;
    *(_WORD *)(a1 + 38) = *(_WORD *)(a1 + 40);
  }
  if ( v2 )
  {
    if ( v2 <= 1 )
    {
      v8 = *(_BYTE *)(v1 + 164 * *(unsigned __int16 *)(a1 + 40) + 29859);
      dword_AE400_AE3F0(v1);
      if ( v8 == 3 )
        *(_WORD *)(a1 + 146) = *(_WORD *)(a1 + 40);
    }
    else
    {
      dword_AE400_AE3F0(v1);
      sub_424F0_42830(a1, 0x46u);
    }
    return;
  }
  dword_AE400_AE3F0(v1);
  sub_196E0(a1);
  v9 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 146);
  if ( *(int *)(a1 + 8) >> 1 <= *(_DWORD *)(a1 + 12) )
  {
    if ( *(int *)(v9 + 12) >= 0 && (*(_BYTE *)(v9 + 17) & 4) == 0 && *(_BYTE *)(v9 + 64) )
    {
      if ( (*(_BYTE *)(a1 + 63) & 7) == 0 )
        *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v9 + 72));
    }
    else
    {
      sub_1E810(a1);
      sub_1E720(a1);
    }
  }
  else
  {
    sub_1E720(a1);
  }
  v10 = *(_DWORD *)(a1 + 156);
  if ( !(*(unsigned __int8 *)(a1 + 63) % *(__int16 *)(v10 + 26)) )
  {
    v11 = *(__int16 *)(v10 + 28);
    if ( sub_42340_42680((_WORD *)(a1 + 72), (_WORD *)(v9 + 72)) >= v11 )
    {
      sub_1E720(a1);
      return;
    }
    v12 = dword_AE400_AE3F0();
    if ( !(*(unsigned __int8 *)(a1 + 63) % (8 * *(__int16 *)(*(_DWORD *)(a1 + 156) + 26))) )
    {
      sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 11);
      v12 = dword_AE400_AE3F0();
    }
    ++*(_WORD *)(a1 + 26);
    v13 = *(_BYTE *)(v9 + 65);
    dword_AE400_AE3F0(v12);
    if ( v13 || (*(_BYTE *)(a1 + 26) & 1) == 0 )
    {
      v14 = sub_373F0_377B0(a1 + 72, 9, 8);
      v15 = v14;
      if ( !v14 )
        goto LABEL_38;
    }
    else
    {
      v14 = sub_373F0_377B0(a1 + 72, 9, 8);
      v15 = v14;
      if ( !v14 )
        goto LABEL_38;
    }
    *(_BYTE *)(v14 + 69) = 25;
LABEL_38:
    if ( v15 )
    {
      *(_BYTE *)(v15 + 68) = 10;
      *(_WORD *)(v15 + 24) = *(_WORD *)(a1 + 24);
      v16 = *(_WORD *)(a1 + 84);
      *(_WORD *)(v15 + 44) = 3000;
      v17 = *(_WORD *)(v15 + 76);
      *(_WORD *)(v15 + 26) = 20;
      *(_WORD *)(v15 + 76) = v16 + v17;
      v18 = (_WORD *)(v9 + 72);
      *(_WORD *)(v15 + 146) = *(_WORD *)(a1 + 146);
      *(_WORD *)(v15 + 30) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)v18);
      v19 = sub_42180_424C0((_WORD *)(a1 + 72), v18);
      v20 = a1 - (dword_AE400_AE3F0() + 29795);
      *(_WORD *)(v15 + 32) = v19;
      sub_55370_558A0(v20 / 164, -1, 9);
    }
  }
}
// 1E459: conditional instruction was optimized away because esi.4==2
// AE3F0: using guessed type int dword_AE400_AE3F0();

//SYNCHRONIZED WITH REMC1
void sub_1E6F0(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 0x42u);
}

//----- (0001E700) --------------------------------------------------------
int sub_1E700(int a1)
{
  return sub_1A6C0(a1, 66);
}

//SYNCHRONIZED WITH REMC1
void sub_1E710(Type_AE400_29795* a1x)
{
    sub_1A800(a1x);
}

//----- (0001E720) --------------------------------------------------------
void sub_1E720(int a1)
{
  *(_WORD *)(a1 + 146) = 0;
  *(_WORD *)(a1 + 26) = 0;
  sub_424F0_42830(a1, 0x42u);
  sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 11);
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (0001E770) --------------------------------------------------------
void sub_1E770(_WORD *a1)
{
  int v1; // eax
  __int16 v2; // ax

  //fix
  v2 = 0;
  //fix

  if ( a1[73] )
  {
    a1[13] = 0;
    sub_424F0_42830((int)a1, 0x42u);
    v1 = 164 * (unsigned __int16)a1[73] + dword_AE400_AE3F0() + 29795;
    *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(v1 + 72);
    word_AE454_AE444.z = *(_WORD *)(v1 + 76);
    sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, *(_WORD *)(v1 + 30), 0, a1[63] << 6);
    sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  }
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;

//----- (0001E810) --------------------------------------------------------
void sub_1E810(int a1)
{
  int v1; // eax
  unsigned int v2; // esi
  int v3; // ebp
  unsigned int i; // eax
  int v5; // ecx
  int v6; // edx
  unsigned int v7; // edx
  int v8; // eax
  unsigned int v9; // [esp+0h] [ebp-14h]

  if ( *(_DWORD *)(a1 + 140) < *(_DWORD *)(a1 + 136) )
  {
    v1 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 28);
    v9 = v1 * v1;
    v2 = -1;
    v3 = 0;
    for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36466); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
    {
      if ( *(_BYTE *)(i + 65) == 39 )
      {
        v5 = (__int16)(*(_WORD *)(i + 72) - *(_WORD *)(a1 + 72));
        v6 = (__int16)(*(_WORD *)(i + 74) - *(_WORD *)(a1 + 74));
        v7 = v5 * v5 + v6 * v6;
        if ( v7 <= v9 && v7 < v2 )
        {
          v3 = i;
          v2 = v7;
        }
      }
    }
    if ( v3 )
    {
      *(_DWORD *)(a1 + 140) += *(_DWORD *)(v3 + 140);
      *(_WORD *)(v3 + 144) = 0;
      *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(v3 + 72);
      word_AE454_AE444.z = *(_WORD *)(v3 + 76);
      sub_41E80_421C0(v3);
      v8 = sub_373F0_377B0((int)&word_AE454_AE444, 10, 0);
      if ( v8 )
      {
        *(_WORD *)(v8 + 24) = *(_WORD *)(a1 + 24);
        *(_BYTE *)(v8 + 18) |= 1u;
      }
      sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 11);
    }
  }
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// AE444: using guessed type __int16 word_AE454_AE44X;

//----- (0001E920) --------------------------------------------------------
_BOOL1 sub_1E920(_WORD *a1, unsigned __int16 a2, unsigned __int16 a3, unsigned __int16 a4)
{
  unsigned __int8 v4; // bl
  unsigned __int8 v5; // bh

  v4 = HIBYTE(*a1) - ((int)a2 >> 1);
  v5 = HIBYTE(a1[1]) - ((int)a3 >> 1);
  if ( (v4 + v5) % 2 )
    ++v4;
  return (__int16)sub_36260(v4, v5, a3, a2) < (int)a4;
}

//----- (0001E9B0) --------------------------------------------------------
_WORD *sub_1E9B0(unsigned __int16 a1, _WORD *a2, _WORD *a3)
{
  unsigned __int16 v3; // cx
  unsigned __int16 v4; // bx
  _WORD *result; // eax

  v3 = *(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * a1 + 5);
  v4 = *(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * a1 + 4);
  if ( typeResolution_12F02E_12F01E == 1 )
  {
    v3 >>= 1;
    v4 >>= 1;
  }
  *a3 = (v3 << 8) / 2 + 768;
  result = a2;
  *a2 = (v4 << 8) / 2 + 768;
  return result;
}
// AE430: using guessed type int begBuildTab_AE440_AE430_26C440_26C430;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0001EA40) --------------------------------------------------------
char sub_1EA40(int a1)
{
  int v1; // ebx
  __int16 v2; // ax
  int v3; // eax
  unsigned int v4; // eax
  int v5; // edx
  unsigned int v6; // eax
  __int16 v7; // ax
  unsigned int v8; // eax
  int v9; // esi
  unsigned int v10; // eax
  int v11; // edx
  unsigned int v12; // eax
  unsigned int v13; // eax
  int v14; // esi
  __int16 v15; // di
  __int16 v16; // si
  int v17; // eax
  char v18; // cl
  unsigned int v19; // ebx
  unsigned int v20; // ebx
  int v21; // ebx
  char v22; // al
  unsigned __int16 v24; // [esp+4h] [ebp-20h] BYREF
  unsigned __int16 v25; // [esp+8h] [ebp-1Ch] BYREF
  __int16 v26; // [esp+Ch] [ebp-18h]
  unsigned __int8 v27; // [esp+10h] [ebp-14h]

  v26 = 72;
  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 146);
  if ( !*(_BYTE *)(v1 + 64) || *(_BYTE *)(v1 + 65) != 45 )
  {
    *(_WORD *)(a1 + 26) = 5;
LABEL_33:
    v22 = v26;
    *(_WORD *)(a1 + 146) = 0;
    LOBYTE(v17) = sub_424F0_42830(a1, v22 + 1);
    return v17;
  }
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(v1 + 72);
  word_AE454_AE444.z = *(_WORD *)(v1 + 76);
  v2 = *(_WORD *)(a1 + 26);
  *(_WORD *)(a1 + 26) = v2 + 1;
  if ( v2 >= 4 )
  {
    *(_WORD *)(a1 + 26) = 1;
    goto LABEL_33;
  }
  v3 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
  *(_DWORD *)(a1 + 4) = v3;
  v27 = (v3 & 7) + 25;
  sub_1E9B0(v27, &v24, &v25);
  switch ( *(_WORD *)(a1 + 26) )
  {
    case 1:
      v4 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
      *(_DWORD *)(a1 + 4) = v4;
      v5 = *(_DWORD *)(a1 + 4);
      word_AE454_AE444.x += *(_WORD *)(v1 + 80) + v24 + ((v4 % 3) << 8) + 256;
      v6 = 9377 * v5 + 9439;
      *(_DWORD *)(a1 + 4) = v6;
      v7 = ((v6 % 3) << 8) - 1280 + word_AE454_AE444.y;
      goto LABEL_10;
    case 2:
      v8 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
      *(_DWORD *)(a1 + 4) = v8;
      v9 = *(_DWORD *)(a1 + 4);
      word_AE454_AE444.x -= *(_WORD *)(v1 + 80) + v24 + ((v8 % 3) << 8) + 256;
      *(_DWORD *)(a1 + 4) = 9377 * v9 + 9439;
      v7 = (((9377 * v9 + 9439) % 3u) << 8) - 1280 + word_AE454_AE444.y;
      goto LABEL_10;
    case 3:
      v10 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
      *(_DWORD *)(a1 + 4) = v10;
      v11 = *(_DWORD *)(a1 + 4);
      word_AE454_AE444.x += ((v10 % 3) << 8) - 1280;
      v12 = 9377 * v11 + 9439;
      *(_DWORD *)(a1 + 4) = v12;
      v7 = *(_WORD *)(v1 + 82) + v25 + ((v12 % 3) << 8) + 256 + word_AE454_AE444.y;
      goto LABEL_10;
    case 4:
      v13 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
      *(_DWORD *)(a1 + 4) = v13;
      v14 = *(_DWORD *)(a1 + 4);
      word_AE454_AE444.x += ((v13 % 3) << 8) - 1280;
      *(_DWORD *)(a1 + 4) = 9377 * v14 + 9439;
      v7 = word_AE454_AE444.y - (v25 + *(_WORD *)(v1 + 82) + (((9377 * v14 + 9439) % 3u) << 8) + 256);
LABEL_10:
      word_AE454_AE444.y = v7;
      break;
    default:
      break;
  }
  v15 = *(__int16*)&word_AE454_AE444;
  v16 = word_AE454_AE444.y;
  if ( sub_11810((__int16*)&word_AE454_AE444) == 1)
  {
    *(_WORD *)(a1 + 26) = 2;
    goto LABEL_33;
  }
  LOBYTE(v17) = sub_1E920((uint16*)&word_AE454_AE444, (int)v24 >> 8, (int)v25 >> 8, (((int)v25 >> 7) + ((int)v24 >> 7) > 4) + 15);
  if ( (_BYTE)v17 )
  {
    v18 = 0;
    v19 = *(_DWORD *)(dword_AE408_AE3F8() + 36470);
    do
    {
      LOBYTE(v17) = dword_AE400_AE3F0() + 99;
      if ( v19 <= dword_AE400_AE3F0() + 29795 )
        break;
      v17 = abs16(*(_WORD *)(v19 + 72) - v15);
      if ( v17 <= *(__int16 *)(v19 + 80) + v24 )
      {
        v17 = abs16(*(_WORD *)(v19 + 74) - v16);
        if ( v17 <= v25 + *(__int16 *)(v19 + 82) )
          v18 = 1;
      }
      v19 = *(_DWORD *)v19;
    }
    while ( !v18 );
    if ( !v18 )
    {
      v20 = *(_DWORD *)(dword_AE408_AE3F8() + 36462);
      do
      {
        LOBYTE(v17) = dword_AE400_AE3F0() + 99;
        if ( v20 <= dword_AE400_AE3F0() + 29795 )
          break;
        if ( *(_BYTE *)(v20 + 65) == 2 )
        {
          v17 = abs16(*(_WORD *)(v20 + 72) - v15);
          if ( v17 <= *(__int16 *)(v20 + 80) + v24 )
          {
            v17 = abs16(*(_WORD *)(v20 + 74) - v16);
            if ( v17 <= *(__int16 *)(v20 + 82) + v25 )
              v18 = 1;
          }
        }
        v20 = *(_DWORD *)v20;
      }
      while ( !v18 );
    }
    if ( !v18 )
    {
      v21 = sub_373F0_377B0((int)&word_AE454_AE444, 10, 45);
      if ( v21 )
      {
        sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 10);
        sub_371B0(v21, v27);
        *(_BYTE *)(v21 + 70) = 51;
      }
      *(_WORD *)(a1 + 146) = 0;
      LOBYTE(v17) = sub_424F0_42830(a1, 0x4Fu);
    }
  }
  return v17;
}
// 1EDB9: conditional instruction was optimized away because cl.1==0
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE446: using guessed type __int16 word_AE454_AE444.y;

//----- (0001EED0) --------------------------------------------------------
void sub_1EED0(int a1)
{
  int v1; // esi
  unsigned int v2; // edi
  __int16 v3; // ax
  unsigned __int16 v4; // ax
  int v5; // eax
  int i; // edx
  int v7; // ecx
  unsigned __int8 v8; // al
  int v9; // edx
  unsigned int v10; // eax
  __int16 v11; // dx
  int v12; // eax

  v1 = dword_AE400_AE3F0();
  v2 = 0;
  if ( *(_BYTE *)(a1 + 58) )
  {
    if ( *(_WORD *)(a1 + 94) )
    {
      *(_DWORD *)(a1 + 12) -= *(_DWORD *)(a1 + 90);
      v3 = *(_WORD *)(a1 + 94);
      *(_WORD *)(a1 + 94) = 0;
      v2 = 1;
      *(_WORD *)(a1 + 40) = v3;
    }
    else
    {
      *(_WORD *)(a1 + 40) = 0;
    }
    v4 = *(_WORD *)(a1 + 54);
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < *(_DWORD *)(a1 + 12) )
        {
          *(_DWORD *)(a1 + 12) = v7;
          v2 = 1;
          *(_WORD *)(a1 + 40) = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if ( *(int *)(a1 + 12) < 0 )
  {
    v2 = 2;
    *(_WORD *)(a1 + 38) = *(_WORD *)(a1 + 40);
  }
  if ( v2 )
  {
    if ( v2 > 1 )
    {
      dword_AE400_AE3F0(v1);
      v8 = 76;
LABEL_23:
      sub_424F0_42830(a1, v8);
      return;
    }
    v9 = 164 * *(unsigned __int16 *)(a1 + 40);
    dword_AE400_AE3F0(v1);
    if ( v9 + v1 + 29795 )
    {
      if ( *(_BYTE *)(v1 + v9 + 29860) <= 1u )
        *(_WORD *)(*(_DWORD *)(164 * *(unsigned __int16 *)(a1 + 40) + dword_AE400_AE3F0() + 29955) + 528) = 200;
    }
  }
  else
  {
    dword_AE400_AE3F0(v1);
    sub_196E0(a1);
    if ( !(*(unsigned __int8 *)(a1 + 63) % *(__int16 *)(*(_DWORD *)(a1 + 156) + 26)) )
    {
      v10 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
      *(_DWORD *)(a1 + 4) = v10;
      v11 = 2 * (v10 % 0x9D / 79i64);
      v12 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
      *(_DWORD *)(a1 + 4) = v12;
      *(_WORD *)(a1 + 34) += ((unsigned __int8)v12 + 85) * (v11 - 1);
      LOWORD(v12) = *(_WORD *)(a1 + 26);
      *(_BYTE *)(a1 + 35) &= 7u;
      *(_WORD *)(a1 + 26) = v12 - 1;
      if ( !(_WORD)v12 )
      {
        *(_WORD *)(a1 + 26) = 1;
        v8 = 75;
        goto LABEL_23;
      }
    }
  }
}
// 1EFA7: conditional instruction was optimized away because edi.4==2
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (0001F120) --------------------------------------------------------
void sub_1F120(int a1)
{
  int v1; // esi
  unsigned int v2; // edi
  __int16 v3; // ax
  unsigned __int16 v4; // ax
  int v5; // eax
  int i; // edx
  int v7; // ecx
  int v8; // eax
  int v9; // edi
  __int16 v10; // ax
  _WORD *v11; // edi

  v1 = dword_AE400_AE3F0();
  v2 = 0;
  if ( *(_BYTE *)(a1 + 58) )
  {
    if ( *(_WORD *)(a1 + 94) )
    {
      *(_DWORD *)(a1 + 12) -= *(_DWORD *)(a1 + 90);
      v3 = *(_WORD *)(a1 + 94);
      *(_WORD *)(a1 + 94) = 0;
      v2 = 1;
      *(_WORD *)(a1 + 40) = v3;
    }
    else
    {
      *(_WORD *)(a1 + 40) = 0;
    }
    v4 = *(_WORD *)(a1 + 54);
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < *(_DWORD *)(a1 + 12) )
        {
          *(_DWORD *)(a1 + 12) = v7;
          v2 = 1;
          *(_WORD *)(a1 + 40) = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if ( *(int *)(a1 + 12) < 0 )
  {
    v2 = 2;
    *(_WORD *)(a1 + 38) = *(_WORD *)(a1 + 40);
  }
  if ( v2 )
  {
    if ( v2 <= 1 )
    {
      v8 = 164 * *(unsigned __int16 *)(a1 + 40);
      dword_AE400_AE3F0(v1);
      if ( v8 + v1 + 29795 )
      {
        if ( *(_BYTE *)(v1 + v8 + 29860) <= 1u )
          *(_WORD *)(*(_DWORD *)(164 * *(unsigned __int16 *)(a1 + 40) + dword_AE400_AE3F0() + 29955) + 528) = 200;
      }
    }
    else
    {
      dword_AE400_AE3F0(v1);
      sub_424F0_42830(a1, 0x4Cu);
    }
  }
  else
  {
    dword_AE400_AE3F0(v1);
    sub_196E0(a1);
    if ( !(*(unsigned __int8 *)(a1 + 63) % *(__int16 *)(*(_DWORD *)(a1 + 156) + 26) / 2) )
    {
      v9 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 146);
      v10 = *(_WORD *)(a1 + 26);
      *(_WORD *)(a1 + 26) = v10 - 1;
      if ( !v10 || !*(_BYTE *)(v9 + 64) )
      {
        *(_WORD *)(a1 + 26) = 5;
        sub_424F0_42830(a1, 0x49u);
      }
      v11 = (_WORD *)(v9 + 72);
      *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)v11);
      if ( sub_42340_42680((_WORD *)(a1 + 72), v11) < 0xA00 )
      {
        *(_WORD *)(a1 + 26) = 0;
        sub_424F0_42830(a1, 0x48u);
      }
    }
  }
}
// 1F1F8: conditional instruction was optimized away because edi.4==2
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (0001F390) --------------------------------------------------------
void sub_1F390(int a1)
{
  unsigned int v1; // edi
  unsigned int v2; // ebp
  __int16 v3; // ax
  unsigned __int16 v4; // cx
  int i; // eax
  int v6; // edx
  unsigned __int8 v7; // al
  int v8; // edx
  unsigned int j; // ebx
  unsigned int v10; // eax

  v1 = -1;
  v2 = 0;
  if ( *(_BYTE *)(a1 + 58) )
  {
    if ( *(_WORD *)(a1 + 94) )
    {
      *(_DWORD *)(a1 + 12) -= *(_DWORD *)(a1 + 90);
      v3 = *(_WORD *)(a1 + 94);
      *(_WORD *)(a1 + 94) = 0;
      v2 = 1;
      *(_WORD *)(a1 + 40) = v3;
    }
    else
    {
      *(_WORD *)(a1 + 40) = 0;
    }
    v4 = *(_WORD *)(a1 + 54);
    if ( v4 )
    {
      for ( i = dword_AE400_AE3F0() + 29795 + 164 * v4;
            i != dword_AE400_AE3F0() + 29795;
            i = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(i + 54) )
      {
        v6 = *(_DWORD *)(i + 12);
        if ( v6 < *(_DWORD *)(a1 + 12) )
        {
          *(_DWORD *)(a1 + 12) = v6;
          v2 = 1;
          *(_WORD *)(a1 + 40) = *(_WORD *)(i + 40);
          break;
        }
      }
    }
  }
  if ( *(int *)(a1 + 12) < 0 )
  {
    v2 = 2;
    *(_WORD *)(a1 + 38) = *(_WORD *)(a1 + 40);
  }
  if ( !v2 )
  {
    for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36470); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
    {
      v10 = sub_42340_42680((_WORD *)(a1 + 72), (_WORD *)(j + 72));
      if ( v10 && v10 < v1 )
      {
        v2 = j;
        v1 = v10;
      }
    }
    if ( v2 )
    {
      *(_WORD *)(a1 + 146) = (int)(v2 - (dword_AE400_AE3F0() + 29795)) / 164;
      *(_WORD *)(a1 + 26) = 10;
      v7 = 74;
    }
    else
    {
      *(_WORD *)(a1 + 26) = 5;
      v7 = 73;
    }
    goto LABEL_28;
  }
  if ( v2 > 1 )
  {
    v7 = 76;
LABEL_28:
    sub_424F0_42830(a1, v7);
    return;
  }
  v8 = 164 * *(unsigned __int16 *)(a1 + 40);
  if ( v8 + dword_AE400_AE3F0() + 29795 )
  {
    if ( *(_BYTE *)(v8 + dword_AE400_AE3F0() + 29860) <= 1u )
      *(_WORD *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 40) + 29955) + 528) = 200;
  }
}
// 1F46E: conditional instruction was optimized away because ebp.4==2
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (0001F5A0) --------------------------------------------------------
int sub_1F5A0(int a1)
{
  return sub_1A6C0(a1, 72);
}

//SYNCHRONIZED WITH REMC1
void sub_1F5B0(Type_AE400_29795* a1x)
{
  int v1; // eax

  v1 = 164 * a1x->var_u16_29833_38;
  if ( v1 + dword_AE400_AE3F0() + 29795 && *(_BYTE *)(dword_AE400_AE3F0() + v1 + 29860) <= 1u )
    *(_WORD *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29833_38 + 29955) + 528) = 200;
  sub_1A800(a1x);
}

//----- (0001F640) --------------------------------------------------------
char sub_1F640(int a1)
{
  int v1; // edi
  unsigned int v2; // esi
  __int16 v3; // ax
  unsigned __int16 v4; // ax
  int v5; // eax
  int i; // edx
  int v7; // ecx
  unsigned int j; // eax
  int v9; // edx
  int v10; // edi
  int v11; // edx
  unsigned int v12; // ecx
  int v13; // esi
  int v14; // edx
  unsigned int v15; // edx
  int v16; // esi
  unsigned int v18; // [esp+4h] [ebp-1Ch]

  v1 = dword_AE400_AE3F0();
  v2 = 0;
  if ( *(_BYTE *)(a1 + 58) )
  {
    if ( *(_WORD *)(a1 + 94) )
    {
      *(_DWORD *)(a1 + 12) -= *(_DWORD *)(a1 + 90);
      v3 = *(_WORD *)(a1 + 94);
      *(_WORD *)(a1 + 94) = 0;
      v2 = 1;
      *(_WORD *)(a1 + 40) = v3;
    }
    else
    {
      *(_WORD *)(a1 + 40) = 0;
    }
    v4 = *(_WORD *)(a1 + 54);
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < *(_DWORD *)(a1 + 12) )
        {
          *(_DWORD *)(a1 + 12) = v7;
          v2 = 1;
          *(_WORD *)(a1 + 40) = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if ( *(int *)(a1 + 12) < 0 )
  {
    v2 = 2;
    *(_WORD *)(a1 + 38) = *(_WORD *)(a1 + 40);
  }
  if ( v2 )
  {
    if ( v2 <= 1 )
    {
      LOBYTE(j) = v1;
      v9 = 164 * *(unsigned __int16 *)(a1 + 40);
      dword_AE400_AE3F0(v1);
      if ( v9 + v1 + 29795 )
      {
        LOBYTE(j) = v1 + v9;
        if ( *(_BYTE *)(v1 + v9 + 29860) <= 1u )
        {
          j = *(_DWORD *)(164 * *(unsigned __int16 *)(a1 + 40) + dword_AE400_AE3F0() + 29955);
          *(_WORD *)(j + 528) = 200;
        }
      }
    }
    else
    {
      dword_AE400_AE3F0(v1);
      LOBYTE(j) = sub_424F0_42830(a1, 0x52u);
    }
  }
  else
  {
    dword_AE400_AE3F0(v1);
    sub_196E0(a1);
    LOWORD(j) = *(unsigned __int8 *)(a1 + 63) / *(__int16 *)(*(_DWORD *)(a1 + 156) + 26);
    if ( !(*(unsigned __int8 *)(a1 + 63) % *(__int16 *)(*(_DWORD *)(a1 + 156) + 26)) )
    {
      v10 = dword_AE400_AE3F0();
      if ( *(_WORD *)(a1 + 146) )
      {
        v16 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 146);
        if ( *(_BYTE *)(v16 + 64) != 10 || *(_BYTE *)(v16 + 65) != 45 )
          goto LABEL_36;
        if ( sub_42340_42680((_WORD *)(a1 + 72), (_WORD *)(v16 + 72)) > 0x800 )
        {
          LOWORD(j) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v16 + 72));
          *(_WORD *)(a1 + 34) = j;
          return j;
        }
        if ( *(_WORD *)(v16 + 128) <= *(_WORD *)(v16 + 26) )
        {
LABEL_36:
          *(_WORD *)(a1 + 146) = 0;
          LOWORD(j) = *(_WORD *)(a1 + 130);
          *(_WORD *)(a1 + 126) = j;
          return j;
        }
        sub_424F0_42830(a1, 0x52u);
        *(_WORD *)(a1 + 26) = 1;
        LOWORD(j) = *(_WORD *)(v16 + 26) + 1;
        *(_WORD *)(v16 + 26) = j;
      }
      else
      {
        j = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = j;
        v11 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = v11;
        *(_WORD *)(a1 + 34) += (2 * (j % 0x9D / 79i64) - 1) * ((unsigned __int8)v11 + 85);
        *(_BYTE *)(a1 + 35) &= 7u;
        LOWORD(j) = *(unsigned __int8 *)(a1 + 63) / *(__int16 *)(*(_DWORD *)(a1 + 156) + 26);
        if ( !(*(unsigned __int8 *)(a1 + 63) % *(__int16 *)(*(_DWORD *)(a1 + 156) + 26)) )
        {
          v12 = -1;
          v18 = 0;
          for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36470); j > v10 + 29795; j = *(_DWORD *)j )
          {
            v13 = (__int16)(*(_WORD *)(j + 72) - *(_WORD *)(a1 + 72));
            v14 = (__int16)(*(_WORD *)(j + 74) - *(_WORD *)(a1 + 74));
            v15 = v13 * v13 + v14 * v14;
            if ( v15 < v12 )
            {
              v18 = j;
              v12 = v15;
            }
          }
          dword_AE400_AE3F0(v10);
          if ( v18 )
          {
            *(_WORD *)(a1 + 146) = (int)(v18 - (v10 + 29795)) / 164;
            LOWORD(j) = *(_WORD *)(a1 + 128);
            *(_WORD *)(a1 + 126) = j;
          }
        }
      }
    }
  }
  return j;
}
// 1F723: conditional instruction was optimized away because esi.4==2
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (0001FA00) --------------------------------------------------------
int sub_1FA00(int a1)
{
  int v2; // eax

  if ( *(_WORD *)(a1 + 26) )
    return sub_41E80_421C0(a1);
  v2 = 164 * *(unsigned __int16 *)(a1 + 38);
  if ( v2 + dword_AE400_AE3F0() + 29795 )
  {
    if ( *(_BYTE *)(dword_AE400_AE3F0() + v2 + 29860) <= 1u )
      *(_WORD *)(*(_DWORD *)(164 * *(unsigned __int16 *)(a1 + 38) + dword_AE400_AE3F0() + 29955) + 528) = 200;
  }
  return sub_1A6C0(a1, 78);
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//SYNCHRONIZED WITH REMC1
void sub_1FAA0(Type_AE400_29795* a1x)
{
    sub_1A800(a1x);
}

//----- (0001FAC0) --------------------------------------------------------
char sub_1FAC0(int a1)
{
  int v1; // edi
  unsigned int v2; // esi
  __int16 v3; // ax
  unsigned __int16 v4; // ax
  int v5; // eax
  int i; // edx
  int v7; // ecx
  unsigned int j; // eax
  int v9; // edx
  int v10; // edi
  int v11; // ebp
  unsigned int v12; // ecx
  int v13; // esi
  int v14; // edx
  unsigned int v15; // edx
  int v16; // esi
  unsigned int v18; // [esp+4h] [ebp-1Ch]

  v1 = dword_AE400_AE3F0();
  v2 = 0;
  if ( *(_BYTE *)(a1 + 58) )
  {
    if ( *(_WORD *)(a1 + 94) )
    {
      *(_DWORD *)(a1 + 12) -= *(_DWORD *)(a1 + 90);
      v3 = *(_WORD *)(a1 + 94);
      *(_WORD *)(a1 + 94) = 0;
      v2 = 1;
      *(_WORD *)(a1 + 40) = v3;
    }
    else
    {
      *(_WORD *)(a1 + 40) = 0;
    }
    v4 = *(_WORD *)(a1 + 54);
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < *(_DWORD *)(a1 + 12) )
        {
          *(_DWORD *)(a1 + 12) = v7;
          v2 = 1;
          *(_WORD *)(a1 + 40) = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if ( *(int *)(a1 + 12) < 0 )
  {
    v2 = 2;
    *(_WORD *)(a1 + 38) = *(_WORD *)(a1 + 40);
  }
  if ( v2 )
  {
    if ( v2 <= 1 )
    {
      LOBYTE(j) = v1;
      v9 = 164 * *(unsigned __int16 *)(a1 + 40);
      dword_AE400_AE3F0(v1);
      if ( v9 + v1 + 29795 )
      {
        LOBYTE(j) = v1 + v9;
        if ( *(_BYTE *)(v1 + v9 + 29860) <= 1u )
        {
          j = *(_DWORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 40) + 29955);
          *(_WORD *)(j + 528) = 200;
        }
      }
    }
    else
    {
      dword_AE400_AE3F0(v1);
      LOBYTE(j) = sub_424F0_42830(a1, 0x58u);
    }
  }
  else
  {
    dword_AE400_AE3F0(v1);
    sub_196E0(a1);
    LOWORD(j) = *(unsigned __int8 *)(a1 + 63) / *(__int16 *)(*(_DWORD *)(a1 + 156) + 26);
    if ( !(*(unsigned __int8 *)(a1 + 63) % *(__int16 *)(*(_DWORD *)(a1 + 156) + 26)) )
    {
      v10 = dword_AE400_AE3F0();
      if ( *(_WORD *)(a1 + 146) )
      {
        v16 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 146);
        if ( *(_BYTE *)(v16 + 64) != 10 || *(_BYTE *)(v16 + 65) != 45 )
          goto LABEL_37;
        if ( sub_42340_42680((_WORD *)(a1 + 72), (_WORD *)(v16 + 72)) > 0x800 )
        {
          LOWORD(j) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v16 + 72));
          *(_WORD *)(a1 + 34) = j;
          return j;
        }
        if ( *(_WORD *)(v16 + 128) <= *(_WORD *)(v16 + 26) )
        {
LABEL_37:
          *(_WORD *)(a1 + 146) = 0;
          LOWORD(j) = *(_WORD *)(a1 + 130);
          *(_WORD *)(a1 + 126) = j;
          return j;
        }
        sub_424F0_42830(a1, 0x58u);
        *(_WORD *)(a1 + 26) = 1;
        LOWORD(j) = *(_WORD *)(v16 + 26) + 1;
        *(_WORD *)(v16 + 26) = j;
      }
      else
      {
        j = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = j;
        v11 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = 9377 * v11 + 9439;
        *(_WORD *)(a1 + 34) += ((unsigned __int8)(-95 * v11 - 33) + 85) * (2 * (j % 0x9D / 79i64) - 1);
        *(_BYTE *)(a1 + 35) &= 7u;
        LOWORD(j) = *(unsigned __int8 *)(a1 + 63) / *(__int16 *)(*(_DWORD *)(a1 + 156) + 26);
        if ( !(*(unsigned __int8 *)(a1 + 63) % *(__int16 *)(*(_DWORD *)(a1 + 156) + 26)) )
        {
          v12 = -1;
          v18 = 0;
          for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36470); j > v10 + 29795; j = *(_DWORD *)j )
          {
            v13 = (__int16)(*(_WORD *)(j + 72) - *(_WORD *)(a1 + 72));
            v14 = (__int16)(*(_WORD *)(j + 74) - *(_WORD *)(a1 + 74));
            v15 = v13 * v13 + v14 * v14;
            if ( v15 < v12 && v15 > 0xE100000 )
            {
              v18 = j;
              v12 = v15;
            }
          }
          dword_AE400_AE3F0(v10);
          if ( v18 )
          {
            *(_WORD *)(a1 + 146) = (int)(v18 - (v10 + 29795)) / 164;
            LOWORD(j) = *(_WORD *)(a1 + 128);
            *(_WORD *)(a1 + 126) = j;
          }
        }
      }
    }
  }
  return j;
}
// 1FBA3: conditional instruction was optimized away because esi.4==2
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (0001FE90) --------------------------------------------------------
int sub_1FE90(int a1)
{
  if ( *(_WORD *)(a1 + 26) )
    return sub_41E80_421C0(a1);
  else
    return sub_1A6C0(a1, 84);
}

//SYNCHRONIZED WITH REMC1
void sub_1FEC0(Type_AE400_29795* a1x)
{
  int v1; // eax

  v1 = 164 * a1x->var_u16_29833_38;
  if ( v1 + dword_AE400_AE3F0() + 29795 && *(_BYTE *)(dword_AE400_AE3F0() + v1 + 29860) <= 1u )
    *(_WORD *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29833_38 + 29955) + 528) = 200;
  sub_1A800(a1x);
}

//----- (0001FF40) --------------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_1FF40(char a1, int a2, char a3, int a4, int a5)
{
  int v5; // ebx
  int v6; // [esp-8h] [ebp-8h]
  void *retaddr; // [esp+0h] [ebp+0h] BYREF

  //fix
  v6 = 0;
  //fix

  v5 = a4 - (a1 + *(_DWORD *)(v6 + 27));
  *(_BYTE *)(v5 - 1957008686) += a3 - *(_BYTE *)(a5 + 128);
  sub_19B10(a2, (char)&retaddr);
}
// 1FF47: positive sp value 8 has been found
// 1FF41: variable 'v6' is possibly undefined

//SYNCHRONIZED WITH REMC1
void sub_1FF60(Type_AE400_29795* a1x)
{
  unsigned int v1; // ebp
  __int16 v2; // ax
  unsigned __int16 v3; // bx
  int i; // ebx
  int v5; // eax
  int v6; // eax
  int v7; // eax
  //int v8; // ebx
  unsigned int v9; // ebp
  unsigned int j; // ebx
  int v11; // eax
  unsigned int v12; // edi
  __int16 v13; // ax
  unsigned int v14; // [esp+4h] [ebp-1Ch]
  int v15; // [esp+8h] [ebp-18h]
  unsigned int v16; // [esp+Ch] [ebp-14h]

  v1 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
        a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v2 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v1 = 1;
      a1x->var_u16_29835_40 = v2;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v3 = a1x->var_u16_29849_54;
    if ( v3 )
    {
      for ( i = dword_AE400_AE3F0() + 29795 + 164 * v3;
            i != dword_AE400_AE3F0() + 29795;
            i = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(i + 54) )
      {
        v5 = *(_DWORD *)(i + 12);
        if ( v5 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v5;
          v1 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(i + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v1 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v1 )
  {
    if ( v1 > 1 )
    {
      sub_424F0_42830(a1x, 0x5Eu);
      goto LABEL_34;
    }
    v6 = dword_AE400_AE3F0() + 164 * a1x->var_u16_29835_40;
    if ( *(_BYTE *)(v6 + 29859) != 3 || *(_WORD *)(v6 + 29819) == a1x->id_29819_24 )
      goto LABEL_34;
    LOWORD(v7) = a1x->var_u16_29835_40;
    goto LABEL_33;
  }
  sub_20480(a1x);
  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) && a1x->var_u8_29853_58 )
  {
    v9 = -1;
    v14 = a1x->var_u32_29951_156->v_28 * a1x->var_u32_29951_156->v_28;
    v16 = 0;
    for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36462); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
    {
      if ( *(_WORD *)(j + 24) != a1x->id_29819_24)
      {
        v11 = (__int16)(*(_WORD *)(j + 72) - a1x->var_u32_29867_72.x);
        v12 = v11 * v11
            + (__int16)(*(_WORD *)(j + 74) - a1x->var_u32_29867_72.y) * (__int16)(*(_WORD *)(j + 74) - a1x->var_u32_29867_72.y);
        if ( v12 <= v14 && (*(_BYTE *)(j + 16) & 0x20) == 0 )
        {
          v15 = a1x->var_u32_29951_156->v_30;
          v13 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(j + 72));
          if ( (unsigned __int16)sub_42210_42550(a1x->var_u16_29825_30, v13) < v15 && v12 < v9 )
          {
            v16 = j;
            v9 = v12;
          }
        }
      }
    }
    if ( v16 )
    {
      v7 = (int)(v16 - (dword_AE400_AE3F0() + 29795)) / 164;
LABEL_33:
      a1x->var_u16_29941_146 = v7;
      sub_424F0_42830(a1x, 0x5Cu);
    }
  }
LABEL_34:
  if (a1x->var_u8_29865_70 == 92 )
    sub_20410(a1x);
}

//----- (000201D0) --------------------------------------------------------
void sub_201D0(int a1)
{
  int v1; // esi
  unsigned int v2; // edi
  __int16 v3; // ax
  unsigned __int16 v4; // cx
  int v5; // eax
  int i; // edx
  int v7; // ecx
  int v8; // edi
  int v9; // ecx
  int v10; // eax
  int v11; // edi
  unsigned int v12; // [esp+0h] [ebp-18h]
  _WORD *v13; // [esp+4h] [ebp-14h]

  v1 = dword_AE400_AE3F0();
  v2 = 0;
  if ( *(_BYTE *)(a1 + 58) )
  {
    if ( *(_WORD *)(a1 + 94) )
    {
      *(_DWORD *)(a1 + 12) -= *(_DWORD *)(a1 + 90);
      v3 = *(_WORD *)(a1 + 94);
      *(_WORD *)(a1 + 94) = 0;
      v2 = 1;
      *(_WORD *)(a1 + 40) = v3;
    }
    else
    {
      *(_WORD *)(a1 + 40) = 0;
    }
    v4 = *(_WORD *)(a1 + 54);
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < *(_DWORD *)(a1 + 12) )
        {
          *(_DWORD *)(a1 + 12) = v7;
          v2 = 1;
          *(_WORD *)(a1 + 40) = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if ( *(int *)(a1 + 12) < 0 )
  {
    v2 = 2;
    *(_WORD *)(a1 + 38) = *(_WORD *)(a1 + 40);
  }
  dword_AE400_AE3F0(v1);
  if ( v2 > 1 )
  {
    *(_BYTE *)(a1 + 70) = 94;
    goto LABEL_25;
  }
  v8 = v1 + 29795 + 164 * *(unsigned __int16 *)(a1 + 146);
  if ( (*(_BYTE *)(a1 + 63) & 3) == 0 )
    *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v8 + 72));
  if ( *(int *)(v8 + 12) < 0 || (*(_BYTE *)(v8 + 17) & 4) != 0 )
    goto LABEL_22;
  v9 = *(_DWORD *)(a1 + 156);
  if ( *(unsigned __int8 *)(a1 + 63) % *(__int16 *)(v9 + 26) )
    goto LABEL_25;
  v12 = *(__int16 *)(v9 + 28);
  v13 = (_WORD *)(v8 + 72);
  if ( sub_42340_42680((_WORD *)(a1 + 72), (_WORD *)(v8 + 72)) >= v12 )
  {
LABEL_22:
    sub_424F0_42830(a1, 0x5Bu);
  }
  else
  {
    v10 = sub_373F0_377B0(a1 + 72, 9, 13);
    v11 = v10;
    if ( v10 )
    {
      *(_WORD *)(v10 + 24) = *(_WORD *)(a1 + 24);
      *(_WORD *)(v10 + 30) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)v13);
      *(_WORD *)(v11 + 32) = sub_42180_424C0((_WORD *)(a1 + 72), v13);
      *(_WORD *)(v11 + 76) += *(_WORD *)(a1 + 84);
      *(_WORD *)(v11 + 146) = *(_WORD *)(a1 + 146);
      *(_BYTE *)(v11 + 67) = *(_BYTE *)(a1 + 67);
      *(_BYTE *)(v11 + 66) = *(_BYTE *)(a1 + 66);
    }
  }
LABEL_25:
  if ( *(_BYTE *)(a1 + 70) != 92 )
    sub_20450(a1);
}
// 2029D: conditional instruction was optimized away because edi.4==2
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000203E0) --------------------------------------------------------
char sub_203E0(int a1)
{
  return sub_1A390(a1, 0x5Au);
}

//----- (000203F0) --------------------------------------------------------
int sub_203F0(int a1)
{
  return sub_1A6C0(a1, 90);
}

//SYNCHRONIZED WITH REMC1
void sub_20400(Type_AE400_29795* a1x)
{
    sub_1A800(a1x);
}

//----- (00020410) --------------------------------------------------------
int sub_20410(int a1)
{
  signed int v1; // edx

  *(_DWORD *)(a1 + 4) = 9377 * *(_DWORD *)(a1 + 4) + 9439;
  v1 = *(_DWORD *)(a1 + 4) % 0x14u;
  *(_WORD *)(a1 + 126) = 0;
  if ( v1 <= 10 )
    return sub_36FA0_37360(a1, 206);
  else
    return sub_36FA0_37360(a1, 1);
}

//----- (00020450) --------------------------------------------------------
int sub_20450(int a1)
{
  *(_WORD *)(a1 + 126) = *(_WORD *)(a1 + 128);
  return sub_36FA0_37360(a1, 0);
}

//SYNCHRONIZED WITH REMC1
void sub_20480(Type_AE400_29795* a1x)
{
  int v1; // esi
  int result; // eax
  unsigned int v3; // edx
  int v4; // ecx
  int v5; // eax
  unsigned int i; // ecx
  __int64 v7; // rax
  __int64 v8; // rax
  unsigned int v9; // eax
  signed int v10; // et2
  //__int16 *v11; // eax
  __int16 v12; // ax
  __int16 v13; // ax
  unsigned __int16 v14; // [esp-Ch] [ebp-2Ch]
  int v15; // [esp-Ch] [ebp-2Ch]
  int v16; // [esp-8h] [ebp-28h]
  int v17; // [esp-4h] [ebp-24h]
  _DWORD v18[2]; // [esp+0h] [ebp-20h]
  int v19; // [esp+8h] [ebp-18h]
  int v20; // [esp+Ch] [ebp-14h]
  int v21; // [esp+10h] [ebp-10h]

  v20 = 0;
  v18[0] = *(_DWORD *)sub_1FF40;
  v18[1] = *((_DWORD *)sub_1FF40 + 1);
  v19 = 1;
  if ( !(a1x->var_u8_29858_63 % 8) )
  {
    v1 = ~a1x->var_u32_29951_156->v_20;
    result = sub_11810(&a1x->var_u32_29867_72);
    if ( (result & v1) != 0 )
    {
        a1x->var_u8_29865_70 = 94;
      return;
    }
    LOWORD(result) = a1x->var_u16_29825_30;
    v21 = result;
    do
    {
      v14 = v21;
      word_AE454_AE444 = a1x->var_u32_29867_72;
      //word_AE454_AE444.z = *(_WORD *)(a1 + 76);
      sub_41EC0_42200(&word_AE454_AE444, v14, 0, 256);
      a1x->rand_29799_4 = 9377 * a1x->rand_29799_4 + 9439;
      v3 = a1x->rand_29799_4 % (unsigned int)*((unsigned __int16 *)v18 + (unsigned __int16)v20);
      v4 = (v3 + 2) * (sub_11640(a1x, &word_AE454_AE444, 1) == 0);
      if ( (unsigned __int16)v4 > (unsigned __int16)v19 )
      {
        v19 = v4;
        a1x->var_u16_29825_30 = v21;
      }
      v5 = v21;
      BYTE1(v5) = (BYTE1(v21) + 2) & 7;
      ++v20;
      v21 = v5;
    }
    while ( (unsigned __int16)v20 < 4u );
  }
  word_AE454_AE444 = a1x->var_u32_29867_72;
  //word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  if ( !(a1x->var_u8_29858_63 % 16) )
  {
    switch ( ((a1x->var_u16_29825_30 - 256) >> 9) & 3 )
    {
      case 0:
      case 2:
        word_AE454_AE444.y = (word_AE454_AE444.y >> 8 << 8) + 128;
        break;
      case 1:
      case 3:
        word_AE454_AE444.x = (word_AE454_AE444.x >> 8 << 8) + 128;
        break;
      default:
        break;
    }
  }
  for ( i = *(_DWORD *)(4 * a1x->var_u8_29860_65 + dword_AE408_AE3F8() + 36382); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    if ( *(_WORD *)(i + 24) != a1x->id_29819_24)
    {
      v7 = a1x->var_u32_29867_72.x - *(__int16 *)(i + 72);
      if ( (int)((HIDWORD(v7) ^ v7) - HIDWORD(v7)) < 256 )
      {
        v8 = a1x->var_u32_29867_72.y - *(__int16 *)(i + 74);
        if ( (int)((HIDWORD(v8) ^ v8) - HIDWORD(v8)) < 256 )
        {
            a1x->var_u16_29829_34 = sub_42150_42490((axis_3d*)(_WORD *)(i + 72), &a1x->var_u32_29867_72);
          break;
        }
      }
    }
  }
  if (a1x->var_u16_29829_34 == a1x->var_u16_29825_30
    || (v9 = 9377 * a1x->rand_29799_4 + 9439, a1x->rand_29799_4 = v9, v10 = v9 % 0x14, result = v9 / 0x14, v10 <= 10) )
  {
    sub_41EC0_42200(&word_AE454_AE444, a1x->var_u16_29825_30, 0, a1x->actSpeed_29921_126);
    //v11 = *(__int16 **)(a1 + 156);
    v17 = a1x->var_u32_29951_156->v_14;
    v16 = a1x->var_u32_29951_156->v_10;
    v15 = a1x->var_u32_29951_156->v_12;
    v12 = sub_11F50(&word_AE454_AE444);
    v13 = sub_42000_42340(&word_AE454_AE444, v12, v15, v16, v17);
    sub_41C70_41FB0(a1x, &word_AE454_AE444);
  }
}

//----- (00020700) --------------------------------------------------------
void sub_20700(int a1)
{
  sub_19B10(a1, 96);
}

//SYNCHRONIZED WITH REMC1
void sub_20710(Type_AE400_29795* a1x)
{
  //int v1; // esi
  unsigned int v2; // ecx
  unsigned int v3; // edi
  unsigned int i; // eax
  int v5; // esi
  int v6; // edx
  unsigned int v7; // edx
  unsigned int v8; // [esp+0h] [ebp-10h]

  sub_19D70(a1x, 96);
  if (a1x->var_u8_29865_70 == 97 )
  {
    //v1 = *(_DWORD *)(a1 + 156);
    if ( !(a1x->var_u8_29858_63 % (a1x->var_u32_29951_156->v_26 + 1)) )
    {
      v8 = a1x->var_u32_29951_156->v_28 * a1x->var_u32_29951_156->v_28;
      v2 = -1;
      v3 = 0;
      for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36470); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
      {
        v5 = (__int16)(*(_WORD *)(i + 72) - a1x->var_u32_29867_72.x);
        v6 = (__int16)(*(_WORD *)(i + 74) - a1x->var_u32_29867_72.y);
        v7 = v5 * v5 + v6 * v6;
        if ( v7 <= v8 && v7 < v2 )
        {
          v3 = i;
          v2 = v7;
        }
      }
      if ( v3 )
      {
        a1x->var_u16_29941_146 = (int)(v3 - (dword_AE400_AE3F0() + 29795)) / 164;
        sub_424F0_42830(a1x, 0x62u);
      }
    }
  }
}

//----- (000207E0) --------------------------------------------------------
unsigned __int16 sub_207E0(int a1)
{
  int v1; // edi
  int v2; // eax
  unsigned int v3; // esi
  __int16 v4; // ax
  unsigned __int16 v5; // cx
  int v6; // eax
  int i; // edx
  int v8; // ecx
  unsigned __int16 result; // ax
  char v10; // cl
  int v11; // ebp
  __int16 v12; // si
  int v13; // eax
  int v14; // esi
  __int16 v15; // ax
  int v16; // eax
  __int16 v17; // ax
  unsigned int v18; // [esp+4h] [ebp-18h]
  _WORD *v19; // [esp+8h] [ebp-14h]

  v1 = dword_AE400_AE3F0();
  v2 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 28);
  v18 = v2 * v2;
  v3 = 0;
  if ( *(_BYTE *)(a1 + 58) )
  {
    if ( *(_WORD *)(a1 + 94) )
    {
      *(_DWORD *)(a1 + 12) -= *(_DWORD *)(a1 + 90);
      v4 = *(_WORD *)(a1 + 94);
      *(_WORD *)(a1 + 94) = 0;
      v3 = 1;
      *(_WORD *)(a1 + 40) = v4;
    }
    else
    {
      *(_WORD *)(a1 + 40) = 0;
    }
    v5 = *(_WORD *)(a1 + 54);
    if ( v5 )
    {
      v6 = 164 * v5 + v1 + 29795;
      for ( i = v1 + 29795; v6 != i; v6 = i + 164 * *(unsigned __int16 *)(v6 + 54) )
      {
        v8 = *(_DWORD *)(v6 + 12);
        if ( v8 < *(_DWORD *)(a1 + 12) )
        {
          *(_DWORD *)(a1 + 12) = v8;
          v3 = 1;
          *(_WORD *)(a1 + 40) = *(_WORD *)(v6 + 40);
          break;
        }
      }
    }
  }
  if ( *(int *)(a1 + 12) < 0 )
  {
    v3 = 2;
    *(_WORD *)(a1 + 38) = *(_WORD *)(a1 + 40);
  }
  if ( v3 )
  {
    if ( v3 <= 1 )
    {
      result = 41 * *(_WORD *)(a1 + 40);
      v10 = *(_BYTE *)(v1 + 164 * *(unsigned __int16 *)(a1 + 40) + 29859);
      dword_AE400_AE3F0(v1);
      if ( v10 == 3 )
      {
        result = *(_WORD *)(a1 + 40);
        *(_WORD *)(a1 + 146) = result;
      }
    }
    else
    {
      dword_AE400_AE3F0(v1);
      return sub_424F0_42830(a1, 0x64u);
    }
    return result;
  }
  dword_AE400_AE3F0(v1);
  sub_196E0(a1);
  v11 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 146);
  if ( (*(_BYTE *)(a1 + 63) & 7) == 0
    && (*(_BYTE *)(v11 + 64) == 3 || sub_42340_42680((_WORD *)(a1 + 72), (_WORD *)(v11 + 72)) >= 0x200) )
  {
    *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v11 + 72));
  }
  if ( *(int *)(v11 + 12) < 0 || (*(_BYTE *)(v11 + 17) & 4) != 0 )
    return sub_424F0_42830(a1, 0x61u);
  v12 = *(_WORD *)(a1 + 26);
  if ( v12 )
  {
    *(_WORD *)(a1 + 26) = v12 - 1;
    v19 = (_WORD *)(a1 + 72);
    v13 = sub_373F0_377B0(a1 + 72, 9, 0);
    v14 = v13;
    if ( v13 )
    {
      *(_BYTE *)(v13 + 68) = 10;
      *(_BYTE *)(v13 + 69) = 0;
      *(_DWORD *)(v13 + 156) = (uint32)&unk_98F78;
      *(_BYTE *)(v13 + 67) = *(_BYTE *)(a1 + 67);
      *(_BYTE *)(v13 + 66) = *(_BYTE *)(a1 + 66);
      *(_WORD *)(v13 + 24) = *(_WORD *)(a1 + 24);
      *(_WORD *)(v13 + 30) = sub_42150_42490((axis_3d*)v19, (axis_3d*)(_WORD *)(v11 + 72));
      *(_WORD *)(v14 + 32) = sub_42180_424C0(v19, (_WORD *)(v11 + 72));
      *(_WORD *)(v14 + 76) += 4 * *(_WORD *)(a1 + 84);
      v15 = *(_WORD *)(a1 + 146);
      *(_WORD *)(v14 + 44) = 3000;
      *(_DWORD *)(v14 + 140) = 60000;
      *(_WORD *)(v14 + 146) = v15;
    }
  }
  result = *(unsigned __int8 *)(a1 + 63) / *(__int16 *)(*(_DWORD *)(a1 + 156) + 26);
  if ( !(*(unsigned __int8 *)(a1 + 63) % *(__int16 *)(*(_DWORD *)(a1 + 156) + 26)) )
  {
    v16 = (__int16)(*(_WORD *)(v11 + 72) - *(_WORD *)(a1 + 72));
    if ( v16 * v16
       + (__int16)(*(_WORD *)(v11 + 74) - *(_WORD *)(a1 + 74)) * (__int16)(*(_WORD *)(v11 + 74) - *(_WORD *)(a1 + 74)) >= v18 )
      return sub_424F0_42830(a1, 0x61u);
    if ( !(*(unsigned __int8 *)(a1 + 63) % (2 * *(__int16 *)(*(_DWORD *)(a1 + 156) + 26))) )
      sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 39);
    v17 = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v11 + 72));
    result = sub_42210_42550(*(_WORD *)(a1 + 30), v17);
    if ( result < 0xE3u )
      *(_WORD *)(a1 + 26) = 15;
  }
  return result;
}
// 208C0: conditional instruction was optimized away because esi.4==2
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00020B60) --------------------------------------------------------
char sub_20B60(int a1)
{
  return sub_1A390(a1, 0x60u);
}

//----- (00020B70) --------------------------------------------------------
int sub_20B70(int a1)
{
  return sub_1A6C0(a1, 96);
}

//----- (00020B80) --------------------------------------------------------
void sub_20B80(int a1)
{
  sub_1A800(a1);
}

//----- (00020BD0) --------------------------------------------------------
int sub_20BD0()
{
  int v1; // eax
  void *retaddr[2]; // [esp+10h] [ebp+0h]

  if ( word_939D2 || !byte_9008E )
  {
    byte_9008C += byte_9008F;
    byte_ACFE0 = -77;
    byte_ACFE2 = byte_9008C;
    byte_ACFE1 = 7;
    sub_5F2B0(dword_CBFCC, (int)&byte_ACFE0, __DS__, 3);
    byte_ACFE0 = -76;
    byte_ACFE1 = 7;
    byte_ACFE2 = byte_9008C;
    sub_5F2B0(dword_CBFCC, (int)&byte_ACFE0, __DS__, 3);
    byte_ACFE0 = -75;
    byte_ACFE1 = 7;
    byte_ACFE2 = byte_9008C;
    v1 = sub_5F2B0(dword_CBFCC, (int)&byte_ACFE0, __DS__, 3);
    BYTE1(v1) = byte_9008C;
    if ( byte_9008C == 126 && byte_9008D == 2 )
    {
      v1 = sub_5E1A1(dword_80000);
      byte_9008E = 0;
    }
    if ( !byte_9008C && byte_9008D == 1 )
    {
      v1 = sub_5E1A1(dword_80000);
      byte_9008C = 0;
      byte_9008E = 0;
    }
    return 0;//fix return MK_FP(retaddr[0], retaddr[0])(v1);
  }
  else
  {
    sub_5E1A1(dword_80000);
    byte_9008E = 0;
    return 0;//fix return MK_FP(retaddr[0], retaddr[0])();
  }
}
// 80000: using guessed type int dword_80000;
// 9008C: using guessed type char byte_9008C;
// 9008D: using guessed type char byte_9008D;
// 9008E: using guessed type char byte_9008E;
// 9008F: using guessed type char byte_9008F;
// 939D2: using guessed type __int16 word_939D2;
// ACFE0: using guessed type char byte_ACFE0;
// ACFE1: using guessed type char byte_ACFE1;
// ACFE2: using guessed type char byte_ACFE2;
// CBFCC: using guessed type int dword_CBFCC;

//----- (00020D00) --------------------------------------------------------
void sub_20D00(char a1)
{
  if ( byte_939CC )
  {
    if ( word_939D2 || !byte_9008E )
    {
      if ( byte_939CD && word_939D2 )
      {
        if ( sub_5DD00(dword_CBFC8) )
        {
          if ( byte_9008E )
            sub_5E1A1(dword_80000);
          byte_9008C = 0;
          byte_9008F = -2;
          byte_9008D = 1;
          byte_9008E = 0;
          sub_5FA39(dword_CBFC8, (unsigned int)&dword_12F020);
          sub_5F8A8(dword_CBFC8);
          word_939D0 = 100;
        }
        else if ( a1 != byte_9008D )
        {
          if ( byte_9008E )
            sub_5E1A1(dword_80000);
          byte_9008D = a1;
          byte_9008E = 1;
          byte_9008F = -byte_9008F;
          if ( a1 == 1 )
          {
            sub_5DE8B(0x14u, (int)sub_20BD0, __CS__, (unsigned int)&dword_80000);
          }
          else if ( a1 == 2 )
          {
            sub_5DE8B(0x3Cu, (int)sub_20BD0, __CS__, (unsigned int)&dword_80000);
          }
        }
      }
    }
    else
    {
      sub_5E1A1(dword_80000);
      byte_9008E = 0;
    }
  }
}
// 80000: using guessed type int dword_80000;
// 9008C: using guessed type char byte_9008C;
// 9008D: using guessed type char byte_9008D;
// 9008E: using guessed type char byte_9008E;
// 9008F: using guessed type char byte_9008F;
// 939CC: using guessed type char byte_939CC;
// 939CD: using guessed type char byte_939CD;
// 939D0: using guessed type __int16 word_939D0;
// 939D2: using guessed type __int16 word_939D2;
// CBFC8: using guessed type int dword_CBFC8;
// 12F020: using guessed type int dword_12F020;

//----- (00020E60) --------------------------------------------------------
void sub_20E60_20E60()
{
  if ( byte_939CC && byte_939CD && word_939D2 )
  {
    if ( !sub_5DD00(dword_CBFC8) )
      sub_5F930(dword_CBFC8);
    sub_5F865(dword_CBFC8);
    sub_60E2D(dword_CBFCC);
    if ( byte_9AF9C )
      sub_60E2D(dword_12F064);
    word_939D2 = 0;
  }
}
// 939CC: using guessed type char byte_939CC;
// 939CD: using guessed type char byte_939CD;
// 939D2: using guessed type __int16 word_939D2;
// 9AF9C: using guessed type char byte_9AF9C;
// CBFC8: using guessed type int dword_CBFC8;
// CBFCC: using guessed type int dword_CBFCC;
// 12F064: using guessed type int dword_12F064;

//SAME WITH REMC1
//----- (00020FB0) --------------------------------------------------------
void DrawGameFrame_20FB0()//1F1FB0_
{
    __int64 v9; // rax
    __int64 v10; // rax
    const char* textVar; // eax
    unsigned __int8 textIndex; // al
    int locMouseX; // esi
    int locMouseY; // ebx
    int var_132; // edi
    unsigned __int16 var_50; // cx
    int removeItMaybe; // fix it
    char textBuffer[256]; // [esp+0h] [ebp-134h] BYREF
    int tempMouseY; // [esp+114h] [ebp-20h]
    int tempMouseX; // [esp+120h] [ebp-14h]

    int textDrawAxisX;
    int textDrawAxisY;
    int intLetterY;

    int v4x = str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13337_14;

    dword_90098 = 0;
    switch (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_14421_1098)
    {
    case 0:
    case 3:
        if (byte_90094 || str_AE400_AE3F0->set.var_u8_8600 != byte_90096)
        {
            byte_90094 = 0;
            byte_90096 = str_AE400_AE3F0->set.var_u8_8600;
            if (byte_90096 < 40)
            {
                if ((typeResolution_12F02E_12F01E & 1) != 0)
                    sub_411D7_41517((void*)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
                else
                    sub_411FD_4153D((void*)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
            }
        }
        if (str_AE400_AE3F0->set.var_u8_8600 < 40)
        {
            if ((typeResolution_12F02E_12F01E & 1) != 0)
                sub_411D7_41517((void*)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
            else
                sub_411FD_4153D((void*)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
        }
        setViewPort_30A70_30AB0(str_AE400_AE3F0->set.var_u8_8600);//set viewport
        DrawWorld_30D90_30DD0(//draw screen without minimap
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.x,
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.y,
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].yaw_6,
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.z + 128,
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].pitch_8,
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].roll_10,
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].fov_12);
        if (str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].playIndex_13333].actLife_29807_12 >= 0
            && (str_AE408_AE3F8->var_u8_0 & 4) == 0)
        {
            if (str_AE400_AE3F0->set.mapOn_8601)
            {
                DrawMinimap_49300_49640(
                    0,
                    0,
                    str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.x,
                    str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.y,
                    128,
                    128,
                    str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].yaw_6,
                    256,
                    dword_12F000_12EFF0 - 2 * (dword_12F000_12EFF0 / 5u),
                    0);
                sub_48710_48A50(
                    0,
                    0,
                    str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.x,
                    str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.y,
                    128,
                    128,
                    str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].yaw_6,
                    256);
            }
            //adress 1F2257_
            //debug
#ifdef debug1
        //add_compare(0x1F2257, true, true);
#endif debug1
        //debug
            sub_5A3C0_5A8D0(1);
            //adress 1F225E_
            //debug
#ifdef debug1
        //add_compare(0x1F225E, true, true);
#endif debug1
        //debug
            Type_160* v6x = str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].playIndex_13333].var_u32_29955_160;
            if (str_AE400_AE3F0->set.iconsOn_8602)
            {
                sub_23D40(
                    510,
                    2,
                    &str_AE400_AE3F0->str_29795[v6x->var_14958_1635_532[v6x->var_u16_2043_940]],
                    0);
                sub_23D40(
                    574,
                    2,
                    &str_AE400_AE3F0->str_29795[v6x->var_14958_1635_532[v6x->var_u16_2047_944]],
                    0);
                sub_22E50(&str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].playIndex_13333]);
            }

            //adress 1F2341_
            //debug
#ifdef debug1
        //add_compare(0x1F2341, true, true);
#endif debug1
        //debug
            sub_5A3C0_5A8D0(1);
            if ((str_AE408_AE3F8->var_u8_1 & 2) == 0)
            {
                sub_5A3C0_5A8D0(1);
                textDrawAxisY = 50;
                if ((str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 & 2) != 0)
                {
                    if (str_AE400_AE3F0->set.var_u8_8600 == 40)
                    {
                        DrawText_5A180_5A690(dword_AE238_AE228[60], 132, 50, byte_AD167_AD157[1]);
                        textDrawAxisY = GetLetterY_5A3B0_5A8C0() + 50;
                        DrawText_5A180_5A690(dword_AE238_AE228[61], 132, textDrawAxisY, byte_AD167_AD157[1]);
                    }
                    else
                    {
                        v9 = 4080 * str_AE408_AE3F8->str_93.var_u8[2];
                        DrawText_5A180_5A690(
                            dword_AE238_AE228[60],
                            132,
                            50,
                            byte_AD167_AD157[1 + 273 * ((int)(v9 - (__CFSHL__(HIDWORD(v9), 8) + (HIDWORD(v9) << 8))) >> 8)]);
                        textDrawAxisY = GetLetterY_5A3B0_5A8C0() + 50;
                        v10 = 4080 * str_AE408_AE3F8->str_93.var_u8[2];
                        DrawText_5A180_5A690(
                            dword_AE238_AE228[61],
                            132,
                            textDrawAxisY,
                            byte_AD167_AD157[1 + 273 * ((int)(v10 - (__CFSHL__(HIDWORD(v10), 8) + (HIDWORD(v10) << 8))) >> 8)]);
                    }
                    textDrawAxisY += GetLetterY_5A3B0_5A8C0();
                }
                if ((str_AE408_AE3F8->var_u8_2 & 1) != 0)
                {
                    if (str_AE400_AE3F0->set.var_u8_8600 == 40)
                        textIndex = byte_AD167_AD157[1];
                    else
                        textIndex = byte_AD167_AD157[1 + 273
                        * ((int)(4080 * str_AE408_AE3F8->str_93.var_u8[2]
                            - (__CFSHL__(str_AE408_AE3F8->str_93.var_u8[2] / 0x80809u, 8)
                                + ((str_AE408_AE3F8->str_93.var_u8[2] / 0x80809u) << 8))) >> 8)];
                    DrawText_5A180_5A690((char*)"PAUSED!", 132, textDrawAxisY, textIndex);
                    textDrawAxisY += GetLetterY_5A3B0_5A8C0();
                }
                int v13x = 0;
                while (v13x < str_AE400_AE3F0->var_u16_10)
                {
                    textVar = str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13351_28[v13x].var_13351_28;
                    switch (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13351_28[v13x].var_u16_13417)
                    {
                    case 0:
                        if (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13351_28[v13x].var_u16_13415 > 0)
                        {
                            sprintf(textBuffer, "%s %s", str_AE400_AE3F0->str_13323[v13x].str_14357, textVar);
                            DrawText_5A180_5A690(textBuffer, 132, textDrawAxisY, byte_AD167_AD157[3841]);
                            goto LABEL_41;
                        }
                        break;
                    case 1:
                        sprintf(textBuffer, ">%s?", textVar);
                        DrawText_5A180_5A690(textBuffer, 132, textDrawAxisY, byte_AD167_AD157[3841]);
                        textDrawAxisY += GetLetterY_5A3B0_5A8C0();
                        break;
                    case 2:
                        if (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13351_28[v13x].var_u16_13415 > 0)
                        {
                            sprintf(textBuffer, "%s", textVar);
                            DrawText_5A180_5A690(textBuffer, 132, textDrawAxisY, byte_AD167_AD157[3841]);
                            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
                            goto LABEL_42;
                        }
                        break;
                    case 3:
                        if (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13351_28[v13x].var_u16_13415 > 0)
                        {
                            sprintf(textBuffer, "[%s] %s", str_AE400_AE3F0->str_13323[v13x].str_14357, textVar);
                            if (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13351_28[v13x].var_u16_13415 <= 100)
                                textIndex = byte_AD167_AD157[3841];
                            else
                                textIndex = byte_AD167_AD157[1 + 256
                                * ((int)(4080 * str_AE408_AE3F8->str_93.var_u8[2]
                                    - (__CFSHL__(str_AE408_AE3F8->str_93.var_u8[2] / 0x80809u, 8)
                                        + ((str_AE408_AE3F8->str_93.var_u8[2] / 0x80809u) << 8))) >> 8)];
                            DrawText_5A180_5A690(textBuffer, 132, textDrawAxisY, textIndex);
                        LABEL_41:
                            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
                        LABEL_42:
                            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13351_28[v13x].var_u16_13415--;
                        }
                        break;
                    default:
                        break;
                    }
                    v13x++;
                }
            }
            if ((str_AE408_AE3F8->var_u8_1 & 2) != 0)
                sub_5A3C0_5A8D0(1);

        }
        goto LABEL_139;
    case 1:
        if (byte_90094 || str_AE400_AE3F0->set.var_u8_8600 != byte_90096)
        {
            memset((void*)begWscreen_2ECFF4_2ECFE4, 0, scrHeight_12EFF8_12EFE8 * scrWidth_12EFF0_12EFE0);
            byte_90094 = 0;
            byte_90096 = str_AE400_AE3F0->set.var_u8_8600;
        }
        setViewPort_30A70_30AB0(str_AE400_AE3F0->set.var_u8_8600);
        DrawWorld_30D90_30DD0(
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.x,
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.y,
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].yaw_6,
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.z + 128,
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].pitch_8,
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].roll_10,
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].fov_12);
        sub_5A3C0_5A8D0(1);
        textDrawAxisX = GetLetterX_5A3A0_5A8B0();
        intLetterY = -GetLetterY_5A3B0_5A8C0() / 2;
        if ((typeResolution_12F02E_12F01E & 1) != 0)
        {
            textDrawAxisY = GetLetterY_5A3B0_5A8C0() + intLetterY;
            DrawText_5A180_5A690((char*)"Cursor up       Move forwards.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        else
        {
            textDrawAxisY = GetLetterY_5A3B0_5A8C0() + intLetterY;
            DrawText_5A180_5A690((char*)"Cursor up       Move forwards.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        if ((typeResolution_12F02E_12F01E & 1) != 0)
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"Cursor down     Move backwards.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        else
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"Cursor down     Move backwards.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        textDrawAxisY += GetLetterY_5A3B0_5A8C0();
        DrawText_5A180_5A690((char*)"Cursor left     Move left.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        textDrawAxisY += GetLetterY_5A3B0_5A8C0();
        DrawText_5A180_5A690((char*)"Cursor right    Move right.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        if ((typeResolution_12F02E_12F01E & 1) != 0)
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"Left button     Use spell to the left.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        else
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"Left button     Use spell to the left.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        if ((typeResolution_12F02E_12F01E & 1) != 0)
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"Right button    Use spell to the right.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        else
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"Right button    Use spell to the right.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        if ((typeResolution_12F02E_12F01E & 1) != 0)
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"1 - 0           Select assigned spells.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        else
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"1 - 0           Select assigned spells.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        textDrawAxisY += GetLetterY_5A3B0_5A8C0();
        DrawText_5A180_5A690((char*)"Space           Rebirth.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        textDrawAxisY += GetLetterY_5A3B0_5A8C0();
        DrawText_5A180_5A690((char*)"Shift Q         Exit to dos.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        if ((typeResolution_12F02E_12F01E & 1) != 0)
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"F5              Reflections toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        else
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"F5              Reflections toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        textDrawAxisY += GetLetterY_5A3B0_5A8C0();
        DrawText_5A180_5A690((char*)"F6              Sky toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        if ((typeResolution_12F02E_12F01E & 1) != 0)
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"F7              Shadows toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        else
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"F7              Shadows toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        if ((typeResolution_12F02E_12F01E & 1) != 0)
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"F8              Icons toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        else
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"F8              Icons toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        if ((typeResolution_12F02E_12F01E & 1) != 0)
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"F9              Speed blur toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        else
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"F9              Speed blur toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        if ((typeResolution_12F02E_12F01E & 1) != 0)
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"F10             Stereo modes toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        else
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"F10             Stereo modes toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        textDrawAxisY += GetLetterY_5A3B0_5A8C0();
        DrawText_5A180_5A690((char*)"Return          ", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        if ((typeResolution_12F02E_12F01E & 1) != 0)
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"Left and Right  Spell selection.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        else
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"Left and Right  Spell selection.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        textDrawAxisY += GetLetterY_5A3B0_5A8C0() * 2;
        if ((typeResolution_12F02E_12F01E & 1) != 0)
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"If you are experiencing slowness, try Pressing F5,F6,F7.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        else
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"If you are experiencing slowness, try Pressing F5,F6,F7.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        textDrawAxisY += GetLetterY_5A3B0_5A8C0() * 2;
        if ((typeResolution_12F02E_12F01E & 1) != 0)
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"Magic Carpet comes to you from Bullfrog Productions Ltd.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        else
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"Magic Carpet comes to you from Bullfrog Productions Ltd.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        if ((typeResolution_12F02E_12F01E & 1) != 0)
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"And will be released on the 15th November 1994.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        else
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"And will be released on the 15th November 1994.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        if ((typeResolution_12F02E_12F01E & 1) != 0)
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"Copyright 1994 Bullfrog Productions Ltd.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        else
        {
            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
            DrawText_5A180_5A690((char*)"Copyright 1994 Bullfrog Productions Ltd.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        }
        textDrawAxisY += GetLetterY_5A3B0_5A8C0();
        textDrawAxisY += GetLetterY_5A3B0_5A8C0();
        DrawText_5A180_5A690((char*)"Good Luck!", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
        goto LABEL_139;
    case 2:
        if ((typeResolution_12F02E_12F01E & 1) != 0)
            sub_411D7_41517((void*)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
        else
            sub_411FD_4153D((void*)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
        locMouseX = 384;
        if (typeResolution_12F02E_12F01E == 1)
            locMouseY = 162;
        else
            locMouseY = 194;
        str_AE408_AE3F8->var_u8_22 = -1;
        break;
    case 4:
    LABEL_132:
        if (byte_90094 != 2)
        {
            memset((void*)begWscreen_2ECFF4_2ECFE4, 0, scrHeight_12EFF8_12EFE8 * scrWidth_12EFF0_12EFE0);
            byte_90094 = 2;
        }
        sub_309D0_30A10(16);
        DrawWorld_30D90_30DD0(
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.x,
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.y,
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].yaw_6,
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.z + 128,
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].pitch_8,
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].roll_10,
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].fov_12);
        if (typeResolution_12F02E_12F01E == 1)
        {
            DrawMinimap_49300_49640(
                0,
                0,
                str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.x,
                str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.y,
                382,
                378,
                str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].yaw_6,
                170,
                dword_12F000_12EFF0 - 192,
                1);
            sub_48710_48A50(
                0,
                0,
                str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.x,
                str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.y,
                382,
                382,
                str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].yaw_6,
                170);
        }
        else
        {
            DrawMinimap_49300_49640(
                0,
                0,
                str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.x,
                str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.y,
                382,
                414,
                str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].yaw_6,
                170,
                dword_12F000_12EFF0 - 192,
                1);
            sub_48710_48A50(
                0,
                0,
                str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.x,
                str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.y,
                382,
                414,
                str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].yaw_6,
                170);
        }
        if (mouse_9AD90.y >= 382)
            sub_22880();
        goto LABEL_139;
    default:
    LABEL_139:
        //adress 1F256A_
        //debug
#ifdef debug1
        //add_compare(0x1F356A, true, true);
#endif debug1
        //debug
        sub_5A3C0_5A8D0(1);
        if ((str_AE408_AE3F8->var_u8_0 & 0x20) == 0
            && (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u32_13341_18 & 2) != 0
            && (str_AE408_AE3F8->var_u8_0 & 2) != 0)
        {
            sprintf(textBuffer, "MOVIE: %d", str_AE408_AE3F8->var_u16_13);
            DrawText_5A180_5A690(textBuffer, 0, 0, byte_AD167_AD157[3841]);
        }
        if ((str_AE408_AE3F8->var_u8_0 & 4) != 0)
        {
            if (str_AE408_AE3F8->var_u8_161 == 3)
            {
                if (str_AE408_AE3F8->var_u32_162 <= 0)
                    str_AE408_AE3F8->var_u8_161 = 2;
                else
                    str_AE408_AE3F8->var_u32_162--;
            }
            if (str_AE408_AE3F8->var_u8_161 == 2)
            {
                str_AE408_AE3F8->var_u8_161 = 1;
                str_AE408_AE3F8->var_u16_166 = 0;
                str_AE408_AE3F8->var_u32_162 = 50;
            }
            if (str_AE408_AE3F8->var_u8_161 == 1)
            {
                if (str_AE408_AE3F8->var_u32_162 <= 0)
                {
                    while (1)
                    {
                        if (*off_9AB44[str_AE408_AE3F8->var_u16_166] == 33)
                            break;
                        ++str_AE408_AE3F8->var_u16_166;
                    }
                    str_AE408_AE3F8->var_u16_166++;
                    if (*off_9AB44[str_AE408_AE3F8->var_u16_166] == 35)
                    {
                        str_AE408_AE3F8->var_u8_161 = 3;
                        str_AE408_AE3F8->var_u32_162 = 200;
                    }
                    else
                    {
                        str_AE408_AE3F8->var_u32_162 = 50;
                    }
                }
                else
                {
                    removeItMaybe = 380;
                    int i;
                    for (i = 0; *(&off_9AB44[i])[str_AE408_AE3F8->var_u16_166] != 33; i++)
                        removeItMaybe -= GetLetterY_5A3B0_5A8C0();
                    int k = 0;
                    for (int j = 8; i > 0; j += GetLetterY_5A3B0_5A8C0())
                    {
                        if (k)
                            DrawText_5A180_5A690(((&off_9AB44[k])[str_AE408_AE3F8->var_u16_166]), 8, j, byte_AD167_AD157[1]);
                        else
                            DrawText_5A180_5A690((off_9AB44[str_AE408_AE3F8->var_u16_166]), 8, j, byte_AE167_AE157);
                        i--;
                        k++;
                    }
                    str_AE408_AE3F8->var_u32_162--;
                }
            }
        }
        return;
    }
    //adress 1F2090_
    int index323 = str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].playIndex_13333;
    int index295;
    int spellIndex = 0;
    while (1)
    {
        index295 = str_AE400_AE3F0->str_29795[index323].var_u32_29955_160->var_676.var_u16[byte_99B88[spellIndex]];
        if (&str_AE400_AE3F0->str_29795[index295] <= str_AE400_AE3F0->str_29795)
            break;
        var_132 = str_AE400_AE3F0->str_29795[index295].var_u16_29927_132;
        var_50 = str_AE400_AE3F0->str_29795[index323].var_u32_29955_160->var_50;
        if (var_132 && (var_50 == 0 || var_132 > str_AE400_AE3F0->str_29795[var_50].var_u32_29935_140)
            || mouse_9AD90.x < locMouseX
            || mouse_9AD90.x >= locMouseX + 64
            || mouse_9AD90.y < locMouseY
            || mouse_9AD90.y >= locMouseY + begSprTab_AE42C_AE41C_26C42C_26C41C[3].dim.y)
        {
            sub_24230(locMouseX, locMouseY, (unsigned int)&str_AE400_AE3F0->str_29795[index295], 0);
            if (!byte_B7700_B76F0)
                goto LABEL_126;
            if (mouse_9AD90.x < locMouseX)
                goto LABEL_126;
            if (mouse_9AD90.x >= locMouseX + 64)
                goto LABEL_126;
            if (mouse_9AD90.y < locMouseY)
                goto LABEL_126;
            if (mouse_9AD90.y >= locMouseY + begSprTab_AE42C_AE41C_26C42C_26C41C[3].dim.y)
                goto LABEL_126;
            if ((typeResolution_12F02E_12F01E & 1) == 0)
            {
            LABEL_125:
                sub_24DA0(locMouseX, locMouseY, begSprTab_AE42C_AE41C_26C42C_26C41C[3].dim.x, begSprTab_AE42C_AE41C_26C42C_26C41C[3].dim.y, byte_AE167_AE157);
                goto LABEL_126;
            }
            goto LABEL_118;
        }
        tempMouseX = locMouseX;
        tempMouseY = locMouseY;
        str_AE408_AE3F8->var_u8_22 = spellIndex;
    LABEL_126:
        locMouseX += 64;
        if (locMouseX >= 640)
        {
            locMouseX = 384;
            locMouseY += begSprTab_AE42C_AE41C_26C42C_26C41C[3].dim.y;
        }
        spellIndex++;
        if (spellIndex >= 24)
        {
            if (str_AE408_AE3F8->var_u8_22 != -1)
            {
                if (&str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_29795[index323].var_u32_29955_160->var_676.var_u16[byte_99B88[str_AE408_AE3F8->var_u8_22]]] > str_AE400_AE3F0->str_29795)
                    sub_23D40(tempMouseX, tempMouseY, &str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].playIndex_13333].var_u32_29955_160->var_676.var_u16[byte_99B88[str_AE408_AE3F8->var_u8_22]]], 1);
            }
            goto LABEL_132;
        }
    }
    sub_23CF0(locMouseX, locMouseY, byte_99B88[spellIndex]);
    if (!byte_B7700_B76F0)
        goto LABEL_126;
    if (mouse_9AD90.x < locMouseX)
        goto LABEL_126;
    if (mouse_9AD90.x >= locMouseX + 64)
        goto LABEL_126;
    if (mouse_9AD90.y < locMouseY)
        goto LABEL_126;
    if (mouse_9AD90.y >= locMouseY + begSprTab_AE42C_AE41C_26C42C_26C41C[3].dim.y)
        goto LABEL_126;
    if ((typeResolution_12F02E_12F01E & 1) == 0)
        goto LABEL_125;
LABEL_118:
    sub_24D20(locMouseX, locMouseY, begSprTab_AE42C_AE41C_26C42C_26C41C[3].dim.x, begSprTab_AE42C_AE41C_26C42C_26C41C[3].dim.y, byte_AE167_AE157);
    goto LABEL_126;
}

//----- (00022810) --------------------------------------------------------
void sub_22810(int a1, int a2, int a3, int a4, int a5, unsigned __int8 a6)
{
  int v6; // eax

  v6 = a5;
  if ( a5 >= a3 )
    v6 = a3;
  if ( v6 >= 2 && a4 >= 2 )
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_24C20(a1, a2, v6, a4, a6);
    else
      sub_24CA0(a1, a2, v6, a4, a6);
  }
}
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00022880) --------------------------------------------------------
int sub_22880()
{
  int v0; // esi
  int v1; // edx
  int v2; // eax
  __int64 v3; // rax
  int v4; // edx
  int v5; // esi
  char v6; // bh
  __int16 v7; // bx
  int v8; // edi
  __int16 v9; // bx
  int v10; // ebp
  int v11; // eax
  int result; // eax
  char v13[256]; // [esp+0h] [ebp-140h] BYREF
  int v14; // [esp+100h] [ebp-40h]
  int v15; // [esp+104h] [ebp-3Ch]
  int v16; // [esp+108h] [ebp-38h]
  int v17; // [esp+10Ch] [ebp-34h]
  _BYTE *v18; // [esp+110h] [ebp-30h]
  int v19; // [esp+114h] [ebp-2Ch]
  int v20; // [esp+118h] [ebp-28h]
  int v21; // [esp+11Ch] [ebp-24h]
  unsigned __int8 v22; // [esp+120h] [ebp-20h]
  unsigned __int8 v23; // [esp+124h] [ebp-1Ch]
  unsigned __int8 v24; // [esp+128h] [ebp-18h]
  unsigned __int8 v25; // [esp+12Ch] [ebp-14h]

  sub_5A3C0_5A8D0(1);
  v0 = 0;
  v1 = 0;
  v2 = dword_AE400_AE3F0() + 13323;
  while ( v1 < *(unsigned __int16 *)(dword_AE400_AE3F0() + 10) )
  {
    if ( *(_BYTE *)(v2 + 6) )
      ++v0;
    ++v1;
    v2 += 2049;
  }
  v3 = 640 - (v0 * *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 520) + *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 514));
  v21 = ((int)v3 - HIDWORD(v3)) >> 1;
  if ( typeResolution_12F02E_12F01E == 1 )
    v4 = 400;
  else
    v4 = 480;
  v5 = (v4 - v0 * *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 515)) / 2;
  v19 = 0;
  v14 = dword_AE400_AE3F0() + 13323;
  v16 = 0;
  v18 = (_BYTE *)(dword_AE400_AE3F0() + 14357);
  while ( 1 )
  {
    result = dword_AE400_AE3F0();
    if ( *(unsigned __int16 *)(dword_AE400_AE3F0() + 10) <= v19 )
      break;
    v6 = *(_BYTE *)(v14 + 6);
    v17 = 164 * *(unsigned __int16 *)(v14 + 10) + dword_AE400_AE3F0() + 29795;
    if ( v6 == 1 )
    {
      v23 = byte_99B58[1+v16];
      v7 = v21;
      v22 = byte_99B58[v16];
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        DrawBitmap_60CE0_611F0(v21, v5, (TypeTab*)(begSprTab_AE42C_AE41C_26C42C_26C41C + 510));
      else
        DrawBitmap_60D18_61228(v21, v5, (TypeTab*)(begSprTab_AE42C_AE41C_26C42C_26C41C + 510));
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        sub_24C20(
          v7 + 4,
          (__int16)v5 + 4,
          *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 514) - 8,
          *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 515) - 8,
          v22);
      else
        sub_24CA0(
          v7 + 4,
          (__int16)v5 + 4,
          *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 514) - 8,
          *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 515) - 8,
          v22);
      DrawText_5A180_5A690((char*)v18, (__int16)(v7 + 8), v5 + 6, v23);
      sprintf(v13, "%d", *(_DWORD *)(v17 + 136));
      DrawText_5A180_5A690((char*)v13, (__int16)(v7 + 8), v5 + 20, v23);
      v8 = 0;
      v9 = *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 514) + v7;
      v10 = 0;
      v15 = 0;
      v20 = v5 + 10;
      do
      {
        if ( v8 == v19 || *(_BYTE *)(v15 + dword_AE400_AE3F0() + 13329) != 1 )
        {
          if ( v8 == v19 )
          {
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              DrawBitmap_60CE0_611F0(v9, v5, (TypeTab*)(begSprTab_AE42C_AE41C_26C42C_26C41C + 516));
            else
              DrawBitmap_60D18_61228(v9, v5, (TypeTab*)(begSprTab_AE42C_AE41C_26C42C_26C41C + 516));
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              sub_24C20(
                v9 + 4,
                (__int16)v5 + 4,
                *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 520) - 8,
                *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 521) - 8,
                (unsigned __int8)byte_AD167_AD157[1]);
            else
              sub_24CA0(
                v9 + 4,
                (__int16)v5 + 4,
                *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 520) - 8,
                *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 521) - 8,
                (unsigned __int8)byte_AD167_AD157[1]);
          }
        }
        else
        {
          v25 = byte_99B58[1+v10];
          v24 = byte_99B58[v10];
          if ( (typeResolution_12F02E_12F01E & 1) != 0 )
            DrawBitmap_60CE0_611F0(v9, v5, (TypeTab*)(begSprTab_AE42C_AE41C_26C42C_26C41C + 516));
          else
            DrawBitmap_60D18_61228(v9, v5, (TypeTab*)(begSprTab_AE42C_AE41C_26C42C_26C41C + 516));
          if ( (typeResolution_12F02E_12F01E & 1) != 0 )
            sub_24C20(
              v9 + 4,
              (__int16)v5 + 4,
              *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 520) - 8,
              *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 521) - 8,
              v24);
          else
            sub_24CA0(
              v9 + 4,
              (__int16)v5 + 4,
              *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 520) - 8,
              *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 521) - 8,
              v24);
          sprintf(v13, "%03d", *(__int16 *)(*(_DWORD *)(v17 + 160) + v10 + 30));
          DrawText_5A180_5A690((char*)v13, (__int16)(v9 + 8), v20, v25);
        }
        HIWORD(v11) = HIWORD(begSprTab_AE42C_AE41C_26C42C_26C41C);
        v9 += *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 520);
        v10 += 2;
        ++v8;
        v15 += 2049;
      }
      while ( v8 < 8 );
      LOWORD(v11) = *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 515);
      v5 += v11;
    }
    v16 += 2;
    ++v19;
    v18 += 2049;
    v14 += 2049;
  }
  return result;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// AD158: using guessed type char byte_AD158;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE41C: using guessed type int begSprTab_AE42C_AE41C_26C42C_26C41C;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//same with REMC1
void sub_22E50(Type_AE400_29795* a1x)//1F3E50_
{
  int v1; // eax
  int v2; // eax
  //int v3; // edi
  Type_AE400_29795* v4x; // ebx
  __int16 v5; // cx
  __int16 v6; // ax
  int v7; // edi
  int v8; // edx
  int v9; // eax
  //int v10; // ecx
  int v11; // edx
  int v12; // eax
  __int64 v13; // rtt
  __int16 v14; // dx
  __int16 v15; // ax
  __int16 v16; // si
  Type_AE400_29795* v17x; // ebx
  __int16 v18; // ax
  __int16 v19; // ax
  int v20; // ebx
  unsigned __int8 v21; // [esp-4h] [ebp-48h]
  int v22; // [esp+4h] [ebp-40h]
  int v23; // [esp+4h] [ebp-40h]
  int v24; // [esp+4h] [ebp-40h]
  int v25; // [esp+18h] [ebp-2Ch]
  __int16 v26; // [esp+1Ch] [ebp-28h]
  unsigned __int8 v27; // [esp+28h] [ebp-1Ch]
  unsigned __int8 v28; // [esp+2Ch] [ebp-18h]
  unsigned __int8 v29; // [esp+30h] [ebp-14h]

  v1 = a1x - str_AE400_AE3F0->str_29795;
  if ( !v1 || v1 >= 1000 )
    return;
  v2 = a1x->var_u32_29955_160->var_48;
  v29 = byte_99B58[2 * v2];
  v27 = byte_99B58[1+2 * v2];
  v28 = byte_99B58[2 * v2 + str_AE408_AE3F8->str_93.var_u8[2]];
  sub_23940(2, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[40]);
  //v3 = *(_DWORD *)(a1 + 160);
  v22 = begSprTab_AE42C_AE41C_26C42C_26C41C[40].dim.x + 2;
  v4x = &str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_50];
  if ( v4x > str_AE400_AE3F0->str_29795 && v4x->var_u16_29821_26 > 0 )
  {
    if ( a1x->var_u32_29955_160->u8_391 > 0 && str_AE408_AE3F8->str_93.var_u8[1])
    {
      sub_23940(v22, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[55]);
      a1x->var_u32_29955_160->u8_391--;
    }
    else
    {
      sub_23940(v22, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[41]);
    }
    v5 = v22 + 2;
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(v5, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[(v4x->var_u16_29821_26 + 43)]);
    else
      DrawBitmap_60D18_61228(v5, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[(v4x->var_u16_29821_26 + 43)]);
    v6 = v22 + 38;
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(v6, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[42]);
    else
      DrawBitmap_60D18_61228(v6, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[42]);
    v7 = v22 + 58;
    sub_22810(v22 + 58, 10, 64, 10, (v4x->actLife_29807_12 << 6) / v4x->maxLife_29803_8, 0x7Bu);
    v8 = v4x->var_u32_29931_136;
    v9 = a1x->var_u32_29955_160->u32_308 + v4x->var_u32_29935_140;
    if ( v9 == v8 )
    {
      //v10 = dword_AE408_AE3F8();
      if ( str_AE408_AE3F8->str_93.var_u8[2] != 1 )
      {
        v12 = v9 << 6;
        v21 = v29;
        v11 = v12;
        goto LABEL_21;
      }
      v11 = v4x->var_u32_29931_136 << 6;
      v21 = v27;
    }
    else
    {
      sub_22810(v7, 28, 64, 10, (v8 << 6) / str_AE408_AE3F8->str_184.var_u32_188, v27);
      v21 = v29;
      v11 = (v4x->var_u32_29935_140 + a1x->var_u32_29955_160->u32_308) << 6;
      //v10 = dword_AE408_AE3F8();
    }
    v12 = v11;
LABEL_21:
    LODWORD(v13) = v12;
    HIDWORD(v13) = v11 >> 31;
    sub_22810(v7, 28, 64, 10, v13 / str_AE408_AE3F8->str_184.var_u32_188, v21);
    if ( (str_AE408_AE3F8->var_u8_0 & 0x10) == 0 )
    {
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        sub_24C20(v7 + (str_AE400_AE3F0->str_193795.var_u16_232595_38800 << 6) / 100, 26, 2, 2, v28);
      else
        sub_24CA0(v7 + (str_AE400_AE3F0->str_193795.var_u16_232595_38800 << 6) / 100, 26, 2, 2, v28);
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        sub_24C20(v7 + (str_AE400_AE3F0->str_193795.var_u16_232595_38800 << 6) / 100, 38, 2, 2, v28);
      else
        sub_24CA0(v7 + (str_AE400_AE3F0->str_193795.var_u16_232595_38800 << 6) / 100, 38, 2, 2, v28);
    }
    goto LABEL_29;
  }
  sub_23940(v22, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[54]);
LABEL_29:
  v23 = begSprTab_AE42C_AE41C_26C42C_26C41C[41].dim.x + v22;
  if ( v4x <= str_AE400_AE3F0->str_29795)
  {
    sub_23940(v23, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[54]);
  }
  else
  {
    if ( a1x->var_u32_29955_160->u8_393 > 0 && str_AE408_AE3F8->str_93.var_u8[1] )
    {
      sub_23940(v23, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[55]);
      a1x->var_u32_29955_160->u8_393--;
    }
    else
    {
      sub_23940(v23, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[41]);
    }
    switch ( v4x->var_u16_29821_26 )
    {
      case 1:
      case 2:
      case 3:
        v26 = 1;
        break;
      case 4:
      case 5:
        v26 = 2;
        break;
      case 6:
      case 7:
        v26 = 3;
        break;
      default:
        v26 = 0;
        break;
    }
    if ( v26 )
    {
      v14 = v23 + 2;
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        DrawBitmap_60CE0_611F0(v14, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[(v26 + 50)]);
      else
        DrawBitmap_60D18_61228(v14, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[(v26 + 50)]);
      v15 = v23 + 38;
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        DrawBitmap_60CE0_611F0(v15, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[42]);
      else
        DrawBitmap_60D18_61228(v15, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[42]);
    }
    v16 = 0;
    if ( v26 > 0 )
    {
      v25 = v23 + 58;
      do
      {
        v17x = &str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_52[v16]];
        if ( v17x > str_AE400_AE3F0->str_29795)
        {
          if (v17x->actLife_29807_12 >= 0 )
            sub_22810(v25, 2 * v16 + 12, 64, 2, (v17x->actLife_29807_12 << 6) / v17x->maxLife_29803_8, 0x7Bu);
          sub_22810(v25, 2 * v16 + 30, 64, 2, (v17x->var_u32_29935_140 << 6) / v17x->var_u32_29931_136, v29);
        }
        v16++;
      }
      while ( v16 < v26 );
    }
  }
  v24 = begSprTab_AE42C_AE41C_26C42C_26C41C[41].dim.x + v23;
  if ( a1x->var_u32_29955_160->u8_392 > 0 && str_AE408_AE3F8->str_93.var_u8[1] )
  {
    sub_23940(v24, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[55]);
    a1x->var_u32_29955_160->u8_392--;
  }
  else
  {
    sub_23940(v24, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[41]);
  }
  if ((a1x->var_29811_16.byte[0] & 0x30) != 0 || a1x->var_u32_29955_160->u16_331 && str_AE408_AE3F8->str_93.var_u8[1] )
  {
    sub_23940(v24 + 2, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[43]);
    sub_23940(v24 + 38, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[42]);
  }
  else
  {
    v18 = v24 + 2;
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(v18, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[43]);
    else
      DrawBitmap_60D18_61228(v18, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[43]);
    v19 = v24 + 38;
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(v19, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[42]);
    else
      DrawBitmap_60D18_61228(v19, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[42]);
  }
  v20 = v24 + 58;
  sub_22810(v24 + 58, 10, 64, 10, (a1x->actLife_29807_12 << 6) / a1x->maxLife_29803_8, 0x7Bu);
  sub_22810(v24 + 58, 28, 64, 10, (a1x->var_u32_29931_136 << 6) / str_AE408_AE3F8->str_184.var_u32_188, v27);
  sub_22810(v24 + 58, 28, 64, 10, (a1x->var_u32_29935_140 << 6) / str_AE408_AE3F8->str_184.var_u32_188, v29);
  if ( (str_AE408_AE3F8->var_u8_0 & 0x10) == 0 )
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_24C20(v20 + (str_AE400_AE3F0->str_193795.var_u16_232595_38800 << 6) / 100, 26, 2, 2, v28);
    else
      sub_24CA0(v20 + (str_AE400_AE3F0->str_193795.var_u16_232595_38800 << 6) / 100, 26, 2, 2, v28);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_24C20(v20 + (str_AE400_AE3F0->str_193795.var_u16_232595_38800 << 6) / 100, 38, 2, 2, v28);
    else
      sub_24CA0(v20 + (str_AE400_AE3F0->str_193795.var_u16_232595_38800 << 6) / 100, 38, 2, 2, v28);
  }
}

//----- (00023940) --------------------------------------------------------
char sub_23940(__int16 a1, __int16 a2, TypeTab* a3)
{
  int v3; // eax
  int v4; // edx
  char *v5; // edx
  _BYTE *v6; // edi
  _BYTE *v7; // ebp
  _BOOL1 v8; // zf
  int v9; // ebx
  char *v10; // esi
  int v11; // ecx
  int v12; // ebp
  char *v13; // edx
  char v14; // bl
  char *v15; // esi
  _BYTE *v16; // edi
  int v17; // ecx
  __int16 v19; // [esp+0h] [ebp-18h]
  int v20; // [esp+4h] [ebp-14h]

  LOBYTE(v3) = a2;
  if ( typeResolution_12F02E_12F01E == 1 )
  {
    if ( a1 >= 0 && a2 >= 0 && a1 + *(unsigned __int8 *)(a3 + 4) <= 640 )
    {
      v4 = *(unsigned __int8 *)(a3 + 5);
      v3 = v4 + a2;
      if ( v3 <= 400 )
      {
        v20 = v4 / 2;
        v5 = *(char **)a3;
        v6 = (_BYTE *)(a2 / 2 * scrWidth_12EFF0_12EFE0 + a1 / 2 + begWscreen_2ECFF4_2ECFE4);
        LOBYTE(v3) = v20;
        v7 = v6;
        v8 = (_WORD)v20 == 0;
        while ( 1 )
        {
          if ( v8 )
            return v3;
          LOBYTE(v3) = *v5++;
          if ( !(_BYTE)v3 )
            break;
          if ( (v3 & 0x80u) == 0 )
          {
            v9 = (char)v3;
            v10 = v5;
            v11 = (char)v3;
            HIWORD(v3) = 0;
            do
            {
              LOBYTE(v3) = *v10++;
              BYTE1(v3) = *v6;
              LOBYTE(v3) = strPal.byte_BB934_BB924[v3];
              *v6++ = v3;
              --v11;
            }
            while ( v11 );
            v5 += v9;
LABEL_15:
            v8 = (_WORD)v20 == 0;
          }
          else
          {
            v6 -= (char)v3;
            v8 = (_WORD)v20 == 0;
          }
        }
        v7 += scrWidth_12EFF0_12EFE0;
        LOBYTE(v3) = v20 - 1;
        v6 = v7;
        LOWORD(v20) = v20 - 1;
        goto LABEL_15;
      }
    }
  }
  else if ( a1 >= 0 && a2 >= 0 && a1 + *(unsigned __int8 *)(a3 + 4) <= 640 )
  {
    LOBYTE(v3) = a2;
    if ( a2 + *(unsigned __int8 *)(a3 + 5) <= 480 )
    {
      v3 = (int)begWscreen_2ECFF4_2ECFE4 + a1 + scrWidth_12EFF0_12EFE0 * a2;
      v19 = *(unsigned __int8 *)(a3 + 5);
      v12 = v3;
      v13 = *(char **)a3;
      if ( *(_BYTE *)(a3 + 5) )
      {
        do
        {
          v14 = *v13++;
          if ( v14 )
          {
            if ( v14 >= 0 )
            {
              v15 = v13;
              v16 = (_BYTE *)v3;
              v17 = v14;
              HIWORD(v3) = 0;
              do
              {
                LOBYTE(v3) = *v15++;
                BYTE1(v3) = *v16;
                *v16++ = strPal.byte_BB934_BB924[v3];
                --v17;
              }
              while ( v17 );
              v13 += v14;
              v3 = (int)v16;
            }
            else
            {
              v3 -= v14;
            }
          }
          else
          {
            v12 += scrWidth_12EFF0_12EFE0;
            v3 = v12;
            --v19;
          }
        }
        while ( v19 );
      }
    }
  }
  return v3;
}
// 12EFE0: using guessed type int scrWidth_12EFF0_12EFE0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00023AE0) --------------------------------------------------------
void sub_23AE0(__int16 a1, __int16 a2, int a3, unsigned __int8 a4)
{
  int v4; // eax
  _BYTE *v5; // edi
  char *v6; // edx
  _BOOL1 v7; // zf
  int v8; // ebp
  int v9; // ebx
  int v10; // ecx
  char *v11; // edx
  char v12; // bl
  _BYTE *v13; // edi
  int v14; // ecx
  int v15; // ebx
  int v17; // [esp+0h] [ebp-20h]
  _BYTE *v18; // [esp+4h] [ebp-1Ch]
  int v19; // [esp+8h] [ebp-18h]
  __int16 v20; // [esp+Ch] [ebp-14h]

  if ( typeResolution_12F02E_12F01E == 1 )
  {
    v19 = (int)*(unsigned __int8 *)(a3 + 5) >> 1;
    LOBYTE(v4) = (int)begWscreen_2ECFF4_2ECFE4;
    v5 = (_BYTE *)(begWscreen_2ECFF4_2ECFE4 + a1 / 2 + a2 / 2 * scrWidth_12EFF0_12EFE0);
    v6 = *(char **)a3;
    v18 = v5;
    v7 = (_WORD)v19 == 0;
    while ( 1 )
    {
      if ( v7 )
        return;
      LOBYTE(v4) = *v6++;
      if ( !(_BYTE)v4 )
        break;
      if ( (v4 & 0x80u) == 0 )
      {
        v8 = (char)v4;
        v9 = a4;
        v10 = (char)v4;
        do
        {
          BYTE1(v9) = *v5;
          LOBYTE(v4) = strPal.byte_BB934_BB924[v9];
          *v5++ = v4;
          --v10;
        }
        while ( v10 );
        v6 += v8;
LABEL_11:
        v7 = (_WORD)v19 == 0;
      }
      else
      {
        v5 -= (char)v4;
        v7 = (_WORD)v19 == 0;
      }
    }
    LOBYTE(v4) = scrWidth_12EFF0_12EFE0;
    v18 += scrWidth_12EFF0_12EFE0;
    v5 = v18;
    LOWORD(v19) = v19 - 1;
    goto LABEL_11;
  }
  v20 = *(unsigned __int8 *)(a3 + 5);
  v4 = scrWidth_12EFF0_12EFE0 * a2 + a1 + (int)begWscreen_2ECFF4_2ECFE4;
  v11 = *(char **)a3;
  v17 = v4;
  if ( *(_BYTE *)(a3 + 5) )
  {
    do
    {
      v12 = *v11++;
      if ( v12 )
      {
        if ( v12 >= 0 )
        {
          v13 = (_BYTE *)v4;
          v14 = v12;
          v15 = a4;
          v11 += v14;
          do
          {
            BYTE1(v15) = *v13;
            *v13++ = strPal.byte_BB934_BB924[v15];
            --v14;
          }
          while ( v14 );
          v4 = (int)v13;
        }
        else
        {
          v4 -= v12;
        }
      }
      else
      {
        v17 += scrWidth_12EFF0_12EFE0;
        v4 = v17;
        --v20;
      }
    }
    while ( v20 );
  }
}
// 12EFE0: using guessed type int scrWidth_12EFF0_12EFE0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00023CF0) --------------------------------------------------------
void sub_23CF0(__int16 a1, __int16 a2, int a3)
{
  sub_23940(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[3]);
  sub_23AE0(a1, a2, (int)&begSprTab_AE42C_AE41C_26C42C_26C41C[a3 + 6], 0xA6u);
}
// AE41C: using guessed type int begSprTab_AE42C_AE41C_26C42C_26C41C;

//----- (00023D40) --------------------------------------------------------
void sub_23D40(int a1, int a2, Type_AE400_29795* a3x, char a4)
{
  int v4; // eax
  unsigned int v5; // ebx
  int v6; // eax
  __int16 v7; // dx
  TypeTab* v8; // eax
  int v9; // edx
  int v10; // edi
  char v11; // dl
  unsigned __int16 v12; // bx
  int v13; // esi
  int v14; // ebx
  int v15; // edx
  int v16; // esi
  int v17; // edi
  int v18; // esi
  unsigned __int16 v19; // cx
  unsigned int v21; // [esp+8h] [ebp-28h]
  int v22; // [esp+Ch] [ebp-24h]
  __int16 v23; // [esp+10h] [ebp-20h]
  unsigned __int16 v24; // [esp+14h] [ebp-1Ch]
  unsigned __int8 v25; // [esp+18h] [ebp-18h]
  unsigned __int8 v26; // [esp+1Ch] [ebp-14h]

  LOBYTE(v4) = dword_AE400_AE3F0() + 99;
  if ( a3x > str_AE400_AE3F0->str_29795)
  {
    sub_5A3C0_5A8D0(1);
    LOBYTE(v4) = dword_AE400_AE3F0() + 99;
    v5 = dword_AE400_AE3F0() + 29795 + 164 * a3x->var_u16_29837_42;
    v21 = v5;
    if ( dword_AE400_AE3F0() + 29795 < v5 )
    {
      v6 = *(__int16 *)(*(_DWORD *)(v5 + 160) + 48);
      v25 = byte_99B58[2 * v6];
      v26 = byte_99B58[1 + 2 * v6];
      v7 = a3x->var_48;
      if ( v7 >= 64 || !v7 || a3x->var_50 <= 64 || (LOBYTE(v4) = dword_AE408_AE3F8(), !*(_BYTE *)(dword_AE408_AE3F8() + 94)) )
      {
        if ( a4 )
        {
          if (a3x->var_48)
          {
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              DrawBitmap_60CE0_611F0(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[2]);
            else
              DrawBitmap_60D18_61228(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[2]);
          }
          else if ( (typeResolution_12F02E_12F01E & 1) != 0 )
          {
            DrawBitmap_60CE0_611F0(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[1]);
          }
          else
          {
            DrawBitmap_60D18_61228(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[1]);
          }
        }
        else
        {
          if (a3x->var_48)
            v8 = &begSprTab_AE42C_AE41C_26C42C_26C41C[2];
          else
            v8 = &begSprTab_AE42C_AE41C_26C42C_26C41C[1];
          sub_23940(a1, a2, v8);
        }
        if ( (typeResolution_12F02E_12F01E & 1) != 0 )
          DrawBitmap_60CE0_611F0(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[a3x->var_u8_29860_65 + 6]);
        else
          DrawBitmap_60D18_61228(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[a3x->var_u8_29860_65 + 6]);
        v9 = 56 * (*(_DWORD *)(v5 + 140) % a3x->var_u32_29931_136);
        if ( (typeResolution_12F02E_12F01E & 1) != 0 )
          sub_24C20(a1 + 4, a2 + 36, v9 / a3x->var_u32_29931_136, 4, v26);
        else
          sub_24CA0(a1 + 4, a2 + 36, v9 / a3x->var_u32_29931_136, 4, v26);
        v22 = 0;
        v10 = *(_DWORD *)(v5 + 140) / a3x->var_u32_29931_136;
        v23 = 4;
        do
        {
          if ( !v10 )
            break;
          v13 = 0;
          v12 = a2 + 36;
          v24 = v23 + a1;
          do
          {
            if ( !v10 )
              break;
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              sub_61AA4(v24, v12, v25);
            else
              sub_61AE4(v24, v12, v25);
            v12 += 2;
            ++v13;
            --v10;
          }
          while ( v13 < 2 );
          v23 += 2;
          ++v22;
        }
        while ( v22 < 27 );
        if (a3x->var_u8_29857_62)
        {
          v11 = a3x->var_u8_29856_61;
          if ( v11 > 0 )
          {
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              sub_24C20(a1 + 4, a2 + 36, 55 * v11 / a3x->var_u8_29857_62, 4, (unsigned __int8)byte_AD167_AD157[241]);
            else
              sub_24CA0(a1 + 4, a2 + 36, 55 * v11 / a3x->var_u8_29857_62, 4, (unsigned __int8)byte_AD167_AD157[241]);
          }
        }
        v14 = *(_DWORD *)(v21 + 160);
        if ( *(_BYTE *)(dword_AE400_AE3F0() + 2049 * *(__int16 *)(v14 + 48) + 14421)
          || (v4 = a3x->var_u8_29860_65, *(char *)(v14 + v4 + 844) > 0) )
        {
          v15 = a3x->var_u8_29860_65 + *(_DWORD *)(v21 + 160);
          --*(_BYTE *)(v15 + 844);
          v4 = 0;
          v16 = *(_DWORD *)(v21 + 160);
          while ( 1 )
          {
            v17 = *(char *)(v16 + 772);
            if ( v17 != -1 && &str_AE400_AE3F0->str_29795[*(_DWORD*)(*(_DWORD*)(v21 + 160) + 4 * v17 + 532)] == a3x )
              break;
            ++v4;
            ++v16;
            if ( v4 >= 10 )
              goto LABEL_48;
          }
          sub_23AE0(a1, a2, 6 * (v4 + 30) + (int)begSprTab_AE42C_AE41C_26C42C_26C41C, (unsigned char)byte_AD167_AD157[1]);
        }
LABEL_48:
        v18 = a3x->var_u16_29927_132;
        if ( v18 )
        {
          v19 = *(_WORD *)(*(_DWORD *)(v21 + 160) + 50);
          if ( !v19 || (LOBYTE(v4) = dword_AE400_AE3F0(), v18 > *(_DWORD *)(164 * v19 + dword_AE400_AE3F0() + 29935)) )
            LOBYTE(v4) = sub_247C0(
                           (__int16)a1,
                           (__int16)a1,
                           a2,
                           *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 10),
                           *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 11),
                           0x30u);
        }
      }
    }
  }
}
// AD158: using guessed type char byte_AD158;
// AD248: using guessed type char byte_AD248;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// AE41C: using guessed type int begSprTab_AE42C_AE41C_26C42C_26C41C;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00024230) --------------------------------------------------------
char sub_24230(__int16 a1, __int16 a2, unsigned int a3, char a4)
{
  int v4; // eax
  unsigned int v5; // ebp
  __int16 v6; // dx
  int v7; // eax
  int v8; // edx
  int v9; // edx
  int v10; // edx
  int v11; // ebx
  int v12; // eax

  LOBYTE(v4) = dword_AE400_AE3F0() + 99;
  if ( a3 > dword_AE400_AE3F0() + 29795 )
  {
    sub_5A3C0_5A8D0(1);
    LOBYTE(v4) = dword_AE400_AE3F0() + 99;
    v5 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a3 + 42);
    if ( v5 > dword_AE400_AE3F0() + 29795 )
    {
      v6 = *(_WORD *)(a3 + 48);
      if ( v6 >= 64 || !v6 || *(__int16 *)(a3 + 50) <= 64 || (LOBYTE(v4) = dword_AE408_AE3F8(), !*(_BYTE *)(dword_AE408_AE3F8() + 94)) )
      {
        if ( a4 )
        {
          if ( *(_WORD *)(a3 + 48) )
          {
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              DrawBitmap_60CE0_611F0(a1, a2, (TypeTab*)(begSprTab_AE42C_AE41C_26C42C_26C41C + 24));
            else
              DrawBitmap_60D18_61228(a1, a2, (TypeTab*)(begSprTab_AE42C_AE41C_26C42C_26C41C + 24));
          }
          else if ( (typeResolution_12F02E_12F01E & 1) != 0 )
          {
            DrawBitmap_60CE0_611F0(a1, a2, (TypeTab*)(begSprTab_AE42C_AE41C_26C42C_26C41C + 18));
          }
          else
          {
            DrawBitmap_60D18_61228(a1, a2, (TypeTab*)(begSprTab_AE42C_AE41C_26C42C_26C41C + 18));
          }
        }
        else
        {
          if ( *(_WORD *)(a3 + 48) )
            v7 = (int)begSprTab_AE42C_AE41C_26C42C_26C41C + 24;
          else
            v7 = (int)begSprTab_AE42C_AE41C_26C42C_26C41C + 18;
          sub_23940(a1, a2, (TypeTab*)v7);
        }
        if ( (typeResolution_12F02E_12F01E & 1) != 0 )
          DrawBitmap_60CE0_611F0(a1, a2, (TypeTab*)(begSprTab_AE42C_AE41C_26C42C_26C41C + 6 * (*(char *)(a3 + 65) + 6)));
        else
          DrawBitmap_60D18_61228(a1, a2, (TypeTab*)(begSprTab_AE42C_AE41C_26C42C_26C41C + 6 * (*(char *)(a3 + 65) + 6)));
        v8 = *(_DWORD *)(v5 + 160);
        if ( *(_BYTE *)(dword_AE400_AE3F0() + 2049 * *(__int16 *)(v8 + 48) + 14421)
          || (v4 = *(char *)(a3 + 65), *(char *)(v8 + v4 + 844) > 0) )
        {
          v9 = *(_DWORD *)(v5 + 160) + *(char *)(a3 + 65);
          --*(_BYTE *)(v9 + 844);
          v4 = 0;
          v10 = *(_DWORD *)(v5 + 160);
          while ( 1 )
          {
            v11 = *(char *)(v10 + 772);
            if ( v11 != -1 && 164 * *(_DWORD *)(*(_DWORD *)(v5 + 160) + 4 * v11 + 532) + dword_AE400_AE3F0() + 29795 == a3 )
              break;
            ++v4;
            ++v10;
            if ( v4 >= 10 )
              goto LABEL_29;
          }
          sub_23AE0(a1, a2, (int)begSprTab_AE42C_AE41C_26C42C_26C41C + 6 * (v4 + 30), (unsigned char)byte_AD167_AD157[1]);
        }
LABEL_29:
        if ( *(_DWORD *)(a3 + 132) )
        {
          v12 = *(_DWORD *)(v5 + 160);
          if ( !*(_WORD *)(v12 + 50)
            || (v4 = 41 * *(unsigned __int16 *)(v12 + 50),
                *(_DWORD *)(a3 + 132) > *(_DWORD *)(dword_AE400_AE3F0() + 4 * v4 + 29935)) )
          {
            LOBYTE(v4) = sub_247C0(
                           a1,
                           a1,
                           a2,
                           *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 22),
                           *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 23),
                           0x30u);
          }
        }
      }
    }
  }
  return v4;
}
// AD158: using guessed type char byte_AD158;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// AE41C: using guessed type int begSprTab_AE42C_AE41C_26C42C_26C41C;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (000247C0) --------------------------------------------------------
int sub_247C0(int result, int a2, __int16 a3, __int16 a4, int a5, unsigned __int8 a6)
{
  int v6; // edi
  int v7; // eax
  __int16 i; // si
  _BYTE *v9; // edx

  v6 = a2;
  if ( typeResolution_12F02E_12F01E == 1 )
  {
    HIWORD(v7) = HIWORD(a2);
    LOWORD(v7) = (__int16)a2 / 2;
    v6 = v7;
    a3 /= 2;
    a4 /= 2;
    HIWORD(result) = HIWORD(a5);
    LOWORD(result) = (__int16)a5 / 2;
    LOWORD(a5) = (__int16)a5 / 2;
  }
  for ( i = a3; i < (__int16)a5 + a3; ++i )
  {
    for ( result = v6; (__int16)result < a4 + (__int16)v6; ++result )
    {
      v9 = (_BYTE *)(begWscreen_2ECFF4_2ECFE4 + scrWidth_12EFF0_12EFE0 * i + (__int16)result);
      *v9 = strPal.fog_B7934_B7924[256 * a6 + (unsigned __int8)*v9];
    }
  }
  return result;
}
// 12EFE0: using guessed type int scrWidth_12EFF0_12EFE0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00024AB0) --------------------------------------------------------
void sub_24AB0()
{
  if ( !byte_9009E )
  {
    byte_9009E = 1;
    byte_90091 = 1;
    sub_40440_40780((Pathstruct*)"data\\screens\\sfont1.dat");
    sub_516A0(10, 180, 300, 50);
    sub_51480_517C0((int)byte_AE450, &dword_B3278, begPalDat_AE428_AE418_26C428_26C418);
    byte_AE456 = sub_5CC70_5D180(begPalDat_AE428_AE418_26C428_26C418, 0x3Fu, 0x3Fu, 0x3Fu);
    word_B328C = 19200;
    dword_B3284 = (int)begWscreen_2ECFF4_2ECFE4 + 57600;
    sub_24B80();
  }
}
// 90091: using guessed type char byte_90091;
// 9009E: using guessed type char byte_9009E;
// AE418: using guessed type int begPalDat_AE428_AE418_26C428_26C418;
// AE450: using guessed type _BYTE byte_AE450[6];
// AE456: using guessed type char byte_AE456;
// B3278: using guessed type _DWORD dword_B3278;
// B3284: using guessed type int dword_B3284;
// B328C: using guessed type __int16 word_B328C;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//----- (00024B50) --------------------------------------------------------
unsigned __int8 *sub_24B50(unsigned __int8 *a1)
{
  unsigned __int8 *result; // eax

  //fix
  result = 0;
  //fix

  if ( byte_9009E )
  {
    sub_24B80();
    sub_518A0(byte_AE450, 0, 0, a1);
    result = a1;
    dword_900A0 = (int)a1;
  }
  return result;
}
// 9009E: using guessed type char byte_9009E;
// 900A0: using guessed type int dword_900A0;
// AE450: using guessed type _BYTE byte_AE450[6];

//----- (00024B80) --------------------------------------------------------
int sub_24B80()
{
  int result; // eax

  //fix
  result = 0;
  //fix

  if ( byte_9009E )
    return (int)memset((void*)dword_B3284, 0, (unsigned __int16)word_B328C);
  return result;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 9009E: using guessed type char byte_9009E;
// B3284: using guessed type int dword_B3284;
// B328C: using guessed type __int16 word_B328C;

//----- (00024BB0) --------------------------------------------------------
void sub_24BB0()
{
  if ( byte_9009E )
  {
    sub_24B80();
    sub_61610_61B20((Pathstruct*)(char*)"data\\screens\\sfont1.dat");
    byte_90091 = 0;
    byte_9009E = 0;
    dword_900A0 = 0;
  }
}
// 90091: using guessed type char byte_90091;
// 9009E: using guessed type char byte_9009E;
// 900A0: using guessed type int dword_900A0;

//----- (00024BF0) --------------------------------------------------------
unsigned __int8 sub_24BF0(unsigned __int8 a1)
{
  unsigned __int8 result; // al

  if ( byte_9009E )
  {
    result = a1;
    byte_AE456 = a1;
    if ( dword_900A0 )
      return (unsigned __int8)sub_24B50((unsigned __int8 *)dword_900A0);
  }
  return result;
}
// 9009E: using guessed type char byte_9009E;
// 900A0: using guessed type int dword_900A0;
// AE456: using guessed type char byte_AE456;

//----- (00024C20) --------------------------------------------------------
void sub_24C20(int a1, int a2, int a3, int a4, unsigned __int16 a5)
{
  if ( a3 >= 2
    && a4 >= 2
    && a1 >= 0
    && a1 + a3 < 640
    && (a1 + a3 >= 0 || a1 < 640)
    && a2 >= 0
    && a2 + a4 < 400
    && (a2 + a4 >= 0 || a2 < 400) )
  {
    sub_61B50(a1, a2, a3, a4, a5);
  }
}

//----- (00024CA0) --------------------------------------------------------
void sub_24CA0(int a1, int a2, int a3, int a4, unsigned __int16 a5)
{
  if ( a3 >= 2
    && a4 >= 2
    && a1 >= 0
    && a1 + a3 < 640
    && (a1 + a3 >= 0 || a1 < 640)
    && a2 >= 0
    && a2 + a4 < 480
    && (a2 + a4 >= 0 || a2 < 480) )
  {
    sub_61BD0(a1, a2, a3, a4, a5);
  }
}

//----- (00024D20) --------------------------------------------------------
void sub_24D20(int a1, int a2, int a3, int a4, unsigned __int16 a5)
{
  if ( a3 >= 2
    && a4 >= 2
    && a1 >= 0
    && a1 + a3 < 640
    && (a1 + a3 >= 0 || a1 < 640)
    && a2 >= 0
    && a2 + a4 < 400
    && (a2 + a4 >= 0 || a2 < 400) )
  {
    sub_61C50(a1, a2, a3, a4, a5);
  }
}

//----- (00024DA0) --------------------------------------------------------
void sub_24DA0(int a1, int a2, int a3, int a4, unsigned __int16 a5)
{
  if ( a3 >= 2
    && a4 >= 2
    && a1 >= 0
    && a1 + a3 < 640
    && (a1 + a3 >= 0 || a1 < 640)
    && a2 >= 0
    && a2 + a4 < 480
    && (a2 + a4 >= 0 || a2 < 480) )
  {
    sub_61D20(a1, a2, a3, a4, a5);
  }
}

//SYNCHRONIZED WITH REMC1
void sub_24F60(Type_AE400_29795* a1x)
{
  int v1; // eax
  char v2; // dl
  int v3; // esi
  char v4; // cl
  char v5; // ch
  unsigned int v6; // eax
  unsigned int v7; // eax
  __int16 v8; // dx
  Type_AE400_29795* v9x; // eax
  unsigned __int16 v10; // [esp+0h] [ebp-Ch]

  if ( (a1x->var_u16_29821_26 & 3) != 0 )
  {
      a1x->var_u16_29821_26--;
  }
  else
  {
    v1 = a1x->actLife_29807_12;
    a1x->actLife_29807_12 = v1 - 1;
    if ( v1 >= 0 )
    {
      v2 = a1x->var_29811_16.byte[0] & 0xFE;
      a1x->var_29811_16.byte[0] = v2;
      v3 = (__int16)sub_11F50(&a1x->var_u32_29867_72);
      if ( (a1x->var_29811_16.byte[0] & 2) == 0 )
      {
        LOBYTE(v10) = (unsigned __int16)(a1x->var_u32_29867_72.x + 128) >> 8;
        v4 = a1x->var_29811_16.byte[2];
        HIBYTE(v10) = (unsigned __int16)(a1x->var_u32_29867_72.y + 128) >> 8;
        if ( (v4 & 1) == 0 )
          sub_120B0(a1x, 0, a1x->var_u16_29839_44);
        v5 = mapTerrainType_CC1E0_CC1D0[v10];
        if ( v5 )
        {
          switch ( v5 )
          {
            case 26:
              sub_33800_33BF0(v2, v4, v10, 0x14u);
              break;
            case 10:
              sub_33800_33BF0(v2, v4, v10, 0x15u);
              break;
            case 11:
              sub_33800_33BF0(v2, v4, v10, 0x16u);
              break;
            default:
              if ( ((unsigned __int8)v5 < 6u || (unsigned __int8)v5 > 0x22u)
                && (mapAngle_FC1E0_FC1D0[v10] & 7) != 1
                && a1x->var_u32_29867_72.z - v3 <= 128
                && (sub_11760(&a1x->var_u32_29867_72) & 1) == 0 )
              {
                v6 = 9377 * a1x->rand_29799_4 + 9439;
                a1x->rand_29799_4 = v6;
                sub_40D30_41070(a1x, 0, 0, 0-(v6 % 7), 1);
              }
              break;
          }
        }
        v7 = 9377 * a1x->rand_29799_4;
        a1x->var_29811_16.byte[0] |= 2u;
        v7 += 9439;
        a1x->rand_29799_4 = v7;
        v8 = v7 % 0x41;
        v9x = str_AE400_AE3F0->str_29795;
        a1x->var_u16_29841_46 = v8 - 32;
        sub_55370_558A0(a1x - v9x, -1, 3);
      }
      sub_42000_42340(&a1x->var_u32_29867_72, v3, 0, 0, a1x->var_u16_29841_46);
      sub_42510_42850(a1x);
    }
    else
    {
      sub_41E80_421C0(a1x);
    }
  }
}

//----- (00025130) --------------------------------------------------------
int sub_25130(int a1)
{
  int v1; // eax
  int result; // eax
  char v3; // ah
  int v4; // esi
  unsigned int v5; // eax
  unsigned int v6; // eax
  unsigned int v7; // eax
  int v8; // eax
  unsigned int v9; // edx
  __int16 v10[4]; // [esp+0h] [ebp-1Ch] BYREF
  int v11; // [esp+8h] [ebp-14h] BYREF
  int v12[4]; // [esp+Ch] [ebp-10h] BYREF

  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( v1 < 0 )
    return sub_41E80_421C0(a1);
  v3 = *(_BYTE *)(a1 + 16);
  if ( (v3 & 2) == 0 )
  {
    *(_BYTE *)(a1 + 16) = v3 | 2;
    sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 3);
  }
  result = sub_11410(*(__int16 *)(a1 + 26), *(__int16 *)(a1 + 26));
  v4 = result;
  if ( result )
  {
    while ( sub_114B0(v4, (uint32*)v12, (uint32*)&v11) == 1 )
    {
      v5 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
      *(_DWORD *)(a1 + 4) = v5;
      if ( (int)(2 * (v5 % 0x9D / 79i64) - 1) > 0 )
      {
        v6 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = v6;
        v10[0] = *(_WORD *)(a1 + 72) - 96 + 192 * LOWORD(v12[0]) + v6 % 0x81 - 64;
        v7 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = v7;
        v10[1] = *(_WORD *)(a1 + 74) - 96 + 192 * v11 + v7 % 0x81 - 64;
        v10[2] = *(_WORD *)(a1 + 76);
        v8 = sub_373F0_377B0((int)v10, 10, 0);
        if ( v8 )
        {
          *(_WORD *)(v8 + 24) = *(_WORD *)(a1 + 24);
          *(_WORD *)(v8 + 30) = *(_WORD *)(a1 + 30);
          v9 = (unsigned int)sub_10000 & *(_DWORD *)(a1 + 16);
          LOBYTE(v9) = v9 | 0x80;
          *(_DWORD *)(v8 + 16) |= v9;
        }
      }
    }
    return sub_11490(v4);
  }
  return result;
}
// 10000: using guessed type void sub_10000();
// AE3F0: using guessed type int dword_AE400_AE3F0();
// 25130: using guessed type int var_10[4];

//----- (000252B0) --------------------------------------------------------
int sub_252B0(int a1)
{
  int result; // eax

  result = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = result - 1;
  if ( result < 0 )
    return sub_41E80_421C0(a1);
  return result;
}

//----- (000252D0) --------------------------------------------------------
int sub_252D0(int a1)
{
  int v1; // eax
  __int16 v2; // cx
  __int16 v3; // si
  char v4; // ah
  unsigned int v5; // eax
  int v6; // eax
  __int16 v7; // dx
  __int16 v8; // di
  int result; // eax

  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( v1 < 0 )
    goto LABEL_11;
  sub_44F50(a1);
  if ( *(int *)(a1 + 12) < 12 )
  {
    if ( *(__int16 *)(a1 + 26) > 0 )
    {
      v3 = *(_WORD *)(a1 + 26);
      --*(_WORD *)(a1 + 86);
      v4 = *(_BYTE *)(a1 + 16);
      *(_WORD *)(a1 + 26) = v3 - 1;
      if ( v4 >= 0 )
      {
        v5 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = v5;
        if ( !(v5 % 7) )
        {
          v6 = sub_373F0_377B0(a1 + 72, 10, 13);
          if ( v6 )
          {
            v7 = *(_WORD *)(a1 + 24);
            *(_WORD *)(v6 + 26) = 100;
            v8 = *(_WORD *)(v6 + 86);
            *(_DWORD *)(v6 + 12) = 15;
            *(_WORD *)(v6 + 24) = v7;
            *(_WORD *)(v6 + 86) = v8 + 2;
          }
        }
      }
    }
  }
  else if ( *(__int16 *)(a1 + 26) <= 6 )
  {
    v2 = *(_WORD *)(a1 + 26) + 1;
    ++*(_WORD *)(a1 + 86);
    *(_WORD *)(a1 + 26) = v2;
  }
  *(_WORD *)(a1 + 76) = *(_WORD *)(a1 + 46) + sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  result = sub_11810((__int16 *)(a1 + 72));
  if ( result == 1 )
LABEL_11:
    result = sub_41E80_421C0(a1);
  if ( (*(_BYTE *)(a1 + 18) & 1) == 0 )
    return sub_124F0(a1, 0, *(_WORD *)(a1 + 44));
  return result;
}

//----- (000253E0) --------------------------------------------------------
int sub_253E0(int a1)
{
  return sub_41E80_421C0(a1);
}

//----- (000253F0) --------------------------------------------------------
int sub_253F0(int a1)
{
  int result; // eax

  result = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = result - 1;
  if ( result < 0 )
    return sub_41E80_421C0(a1);
  return result;
}

//----- (00025410) --------------------------------------------------------
void sub_25410(int a1)
{
  int v1; // edx
  int v2; // eax

  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( v1 >= 0 )
  {
    sub_42510_42850(a1);
    if ( (*(_BYTE *)(a1 + 16) & 2) == 0 )
    {
      v2 = dword_AE400_AE3F0() + 29795;
      *(_BYTE *)(a1 + 16) |= 2u;
      sub_55370_558A0((a1 - v2) / 164, -1, 27);
    }
  }
  else
  {
    sub_41E80_421C0(a1);
  }
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00025470) --------------------------------------------------------
void sub_25470(int a1)
{
  int v1; // eax
  unsigned int v2; // eax
  int v3; // eax

  v1 = *(_DWORD *)(a1 + 12);
  ++*(_WORD *)(a1 + 26);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( v1 < 0
    || (v2 = 9377 * *(_DWORD *)(a1 + 4) + 9439,
        *(_DWORD *)(a1 + 4) = v2,
        (unsigned __int8)sub_40D30_41070((__int16 *)a1, 0, *(__int16 *)(a1 + 26) / 6, v2 % 9, 0)) )
  {
    sub_40D30_41070((__int16 *)a1, 0, 0, -40, 0);
    *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
    word_AE454_AE444.z = *(_WORD *)(a1 + 76);
    word_AE454_AE444.z = sub_11F50((axis_3d*)(__int16*)&word_AE454_AE444);
    v3 = sub_373F0_377B0((int)&word_AE454_AE444, 10, 18);
    if ( v3 )
      *(_WORD *)(v3 + 24) = *(_WORD *)(a1 + 24);
    sub_41E80_421C0(a1);
  }
  else
  {
    sub_127E0(a1, 0, *(_WORD *)(a1 + 44));
    sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 10);
  }
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//SYNCHRONIZE WITH REMC1
void sub_25570(Type_AE400_29795* a1x)
{
  unsigned int v1; // eax

  if ( (sub_11760(&a1x->var_u32_29867_72) & 1) == 0 )
  {
    v1 = 9377 * a1x->rand_29799_4 + 9439;
    a1x->rand_29799_4 = v1;
    sub_40D30_41070(a1x,
      0,
      (int)(a1x->var_u16_29873_78.var_u16_29875_80
          - (__CFSHL__((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32, 8)
           + ((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32 << 8))) >> 8,
      0-(v1 % 7),
      1);
  }
  sub_41E80_421C0(a1x);
}

//----- (000255D0) --------------------------------------------------------
int sub_255D0(__int16 *a1, __int16 a2, __int16 a3)
{
  int v3; // ebx
  int v4; // edi
  int v5; // esi
  int result; // eax
  int v7; // ebx
  int v8; // [esp+0h] [ebp-14h] BYREF
  int v9[4]; // [esp+4h] [ebp-10h] BYREF

  LOWORD(v3) = a3;
  v4 = (a1[36] + 128) >> 8;
  v5 = (a1[37] + 128) >> 8;
  if ( a3 > (int)(a1[40] - (__CFSHL__((unsigned __int64)a1[40] >> 32, 8) + ((unsigned __int64)a1[40] >> 32 << 8))) >> 8 )
    v3 = (int)(a1[40] - (__CFSHL__((unsigned __int64)a1[40] >> 32, 8) + ((unsigned __int64)a1[40] >> 32 << 8))) >> 8;
  result = sub_11410(a2, (__int16)v3);
  v7 = result;
  if ( result )
  {
    while ( sub_114B0(v7, (uint32*)v9, (uint32*)&v8) == 1 )
      sub_40D50(v4 + LOWORD(v9[0]), v5 + v8, -3, 0);
    return sub_11490(v7);
  }
  return result;
}
// 255D0: using guessed type int var_10[4];

//SYNCHRONIZE WITH REMC1
void sub_25670(Type_AE400_29795* a1x)
{
  int v1; // eax
  int v2; // eax
  int v3; // esi
  __int16 v4; // [esp-8h] [ebp-10h]

  if ( !(a1x->var_u8_29858_63 % 3) )
      a1x->var_u16_29821_26++;
  v1 = a1x->actLife_29807_12;
  a1x->actLife_29807_12 = v1 - 1;
  if ( v1 < 0 || (sub_11760(&a1x->var_u32_29867_72) & 1) != 0 )
  {
    sub_41E80_421C0(a1x);
  }
  else
  {
    if ( (a1x->var_29811_16.byte[0] & 2) != 0 )
      v2 = a1x->var_u16_29839_44 / 25;
    else
      LOWORD(v2) = a1x->var_u16_29839_44;
    sub_127E0(a1x, 0, v2);
    LOWORD(v3) = a1x->var_u16_29821_26;
    if ( (__int16)v3 > ((int)(a1x->var_u16_29873_78.var_u16_29875_80
                            - (__CFSHL__((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32, 8)
                             + ((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32 << 8))) >> 8)
                     - 1 )
    {
      v3 = ((int)(a1x->var_u16_29873_78.var_u16_29875_80
                - (__CFSHL__((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32, 8)
                 + ((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32 << 8))) >> 8)
         - 1;
      if ( (a1x->var_29811_16.byte[0] & 2) == 0 )
      {
        v4 = (int)(a1x->var_u16_29873_78.var_u16_29875_80
                 - (__CFSHL__((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32, 8)
                  + ((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32 << 8))) >> 8;
        sub_255D0(a1x, v4, v4);
      }
    }
    a1x->var_29811_16.byte[0] |= 2u;
    sub_255D0(a1x, 0, v3);
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 10);
  }
}

//----- (00025760) --------------------------------------------------------
int sub_25760(int a1)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 12);
  ++*(_WORD *)(a1 + 26);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( v1 < 0 )
    return sub_41E80_421C0(a1);
  sub_42510_42850(a1);
  return sub_120B0(a1, 1u, *(_WORD *)(a1 + 44));
}

//----- (000257B0) --------------------------------------------------------
int sub_257B0(int a1)
{
  int v1; // eax
  __int16 v3; // dx
  __int16 v4; // ax
  __int16 v5; // ax
  __int16 v6; // si
  __int16 v7; // ax

  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( v1 < 0 )
    return sub_41E80_421C0(a1);
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  v3 = *(_WORD *)(a1 + 126) - 4;
  *(_WORD *)(a1 + 126) = v3;
  if ( v3 < 64 )
    *(_WORD *)(a1 + 126) = 64;
  if ( *(__int16 *)(a1 + 126) > 128 )
    *(_WORD *)(a1 + 126) = 128;
  word_AE454_AE444.z += *(_WORD *)(a1 + 126);
  v4 = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  if ( word_AE454_AE444.z < v4 )
    word_AE454_AE444.z = v4;
  v5 = *(_WORD *)(a1 + 26) + 1;
  *(_WORD *)(a1 + 26) = v5;
  if ( v5 < 16 )
  {
    sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, *(_WORD *)(a1 + 30), 0, 30);
    if ( (*(_BYTE *)(a1 + 26) & 1) == 0 )
      ++*(_WORD *)(a1 + 86);
  }
  if ( *(int *)(a1 + 12) < 6 )
  {
    v6 = *(_WORD *)(a1 + 86);
    if ( v6 > 67 )
      *(_WORD *)(a1 + 86) = v6 - 1;
  }
  v7 = nullsub_11((uint32)&word_AE454_AE444);
  return sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
}
// 5BAE0: using guessed type int nullsub_11(_DWORD);
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (000258A0) --------------------------------------------------------
int sub_258A0(int a1)
{
  int v1; // eax
  __int16 v3; // dx
  __int16 v4; // ax
  __int16 v5; // ax
  __int16 v6; // ax
  int v7; // eax

  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( v1 < 0 )
    return sub_41E80_421C0(a1);
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  v3 = *(_WORD *)(a1 + 126) - 4;
  *(_WORD *)(a1 + 126) = v3;
  if ( v3 < 64 )
    *(_WORD *)(a1 + 126) = 64;
  if ( *(__int16 *)(a1 + 126) > 128 )
    *(_WORD *)(a1 + 126) = 128;
  word_AE454_AE444.z += *(_WORD *)(a1 + 126);
  v4 = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  if ( word_AE454_AE444.z < v4 )
    word_AE454_AE444.z = v4;
  v5 = *(_WORD *)(a1 + 26) + 1;
  *(_WORD *)(a1 + 26) = v5;
  if ( v5 < 16 )
  {
    sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, *(_WORD *)(a1 + 30), 0, 30);
    if ( (*(_BYTE *)(a1 + 26) & 1) == 0 )
      ++*(_WORD *)(a1 + 86);
  }
  if ( *(int *)(a1 + 12) < 6 )
    --*(_WORD *)(a1 + 86);
  v6 = nullsub_11((uint32)&word_AE454_AE444);
  v7 = sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  return nullsub_19(v7);
}
// 25980: using guessed type int nullsub_19(_DWORD);
// 5BAE0: using guessed type int nullsub_11(_DWORD);
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//SYNCHRONIZED WITH REMC1
void sub_25990(Type_AE400_29795* a1x)
{
  __int16 v1; // dx
  int v2; // eax
  int result; // eax
  unsigned int v4; // eax

  if ( (sub_11760(&a1x->var_u32_29867_72) & 1) != 0 )
  {
      a1x->var_u16_29821_26++;
  }
  else
  {
    v1 = a1x->var_u16_29821_26;
    if ( v1 > 0 )
        a1x->var_u16_29821_26 = v1 - 1;
  }
  v2 = a1x->actLife_29807_12;
  a1x->actLife_29807_12 = v2 - 1;
  if (v2 < 0 || a1x->var_u16_29821_26 > 8)
  {
      sub_41E80_421C0(a1x);
      return;
  }
  v4 = 9377 * a1x->rand_29799_4 + 9439;
  a1x->rand_29799_4 = v4;
  a1x->var_u16_29825_30 = (v4 % 0x5B + a1x->var_u16_29825_30 - 45) & 0x7FF;
  sub_41EC0_42200(&a1x->var_u32_29867_72, a1x->var_u16_29825_30, 0, 256);
  result = (int)sub_373F0_377B0(&a1x->var_u32_29867_72, 10, 11);
  if ( result )
  {
    *(_DWORD *)(result + 80) = a1x->var_u16_29873_78.var_u16_29875_80;
    *(_WORD *)(result + 84) = a1x->var_u16_29873_78.var_u16_29879_84;
    *(_DWORD *)(result + 12) = 10;
    *(_WORD *)(result + 24) = a1x->id_29819_24;
  }
}

//----- (00025A60) --------------------------------------------------------
int sub_25A60(int a1)
{
  int v1; // eax
  int result; // eax
  char v3; // ah
  __int16 v4; // di
  __int16 v5; // ax
  __int16 v6; // ax
  __int16 v7; // si
  int v8; // edx
  int v9; // eax
  int v10; // eax
  __int16 v11; // cx
  __int16 v12; // ax
  int v13; // eax
  int v14; // edx

  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( v1 < 0 )
    return sub_41E80_421C0(a1);
  v3 = *(_BYTE *)(a1 + 16);
  if ( (v3 & 2) == 0 )
    *(_BYTE *)(a1 + 16) = v3 | 2;
  if ( *(__int16 *)(a1 + 150) < -80 )
    *(_WORD *)(a1 + 150) = -80;
  if ( *(__int16 *)(a1 + 150) > 80 )
    *(_WORD *)(a1 + 150) = 80;
  if ( *(__int16 *)(a1 + 152) < -80 )
    *(_WORD *)(a1 + 152) = -80;
  if ( *(__int16 *)(a1 + 152) > 80 )
    *(_WORD *)(a1 + 152) = 80;
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  v4 = *(_WORD *)(a1 + 152);
  word_AE454_AE444.x = *(_WORD *)(a1 + 150) + *(_WORD *)(a1 + 72);
  word_AE454_AE444.y = v4 + *(_WORD *)(a1 + 74);
  v5 = *(_WORD *)(a1 + 46);
  word_AE454_AE444.z += v5;
  *(_WORD *)(a1 + 46) = v5 - 28;
  if ( (__int16)(v5 - 28) < -384 )
    *(_WORD *)(a1 + 46) = -384;
  if ( *(__int16 *)(a1 + 46) > 256 )
    *(_WORD *)(a1 + 46) = 256;
  v6 = sub_11F50((axis_3d*)(__int16*)&word_AE454_AE444);
  v7 = v6;
  if ( v6 > word_AE454_AE444.z )
  {
    v8 = *(__int16 *)(a1 + 46);
    word_AE454_AE444.z = v6;
    *(_WORD *)(a1 + 46) = -(__int16)((v8 - (__CFSHL__(v8 >> 31, 2) + 4 * (v8 >> 31))) >> 2);
    if ( sub_11810((__int16 *)(a1 + 72)) == 1 )
    {
      v9 = sub_373F0_377B0((int)&word_AE454_AE444, 10, 5);
      if ( v9 )
      {
        *(_WORD *)(v9 + 24) = *(_WORD *)(a1 + 24);
        sub_41E80_421C0(a1);
      }
    }
    else
    {
      if ( !sub_11E50((__int16*)&word_AE454_AE444, 10, 6))
      {
        v10 = sub_373F0_377B0((int)&word_AE454_AE444, 10, 6);
        if ( v10 )
        {
          v11 = *(_WORD *)(v10 + 44);
          *(_WORD *)(v10 + 24) = *(_WORD *)(a1 + 24);
          *(_DWORD *)(v10 + 12) = 30;
          *(_WORD *)(v10 + 44) = 3 * v11;
          *(_WORD *)(a1 + 26) = 0;
        }
      }
      if ( *(__int16 *)(a1 + 46) <= 28 )
        *(_WORD *)(a1 + 46) = 0;
    }
  }
  v12 = *(_WORD *)(a1 + 26) + 1;
  *(_WORD *)(a1 + 26) = v12;
  result = sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  if ( v7 == word_AE454_AE444.z )
  {
    sub_41F50_42290(a1 + 72, (uint16*)&word_AE454_AE444);
    *(_WORD *)(a1 + 150) += word_AE454_AE444.x;
    v13 = 250 * *(__int16 *)(a1 + 150);
    *(_WORD *)(a1 + 152) += word_AE454_AE444.y;
    v14 = *(__int16 *)(a1 + 152);
    *(_WORD *)(a1 + 150) = (v13 - (__CFSHL__(v13 >> 31, 8) + (v13 >> 31 << 8))) >> 8;
    result = (250 * v14 - (__CFSHL__((250 * v14) >> 31, 8) + ((250 * v14) >> 31 << 8))) >> 8;
    *(_WORD *)(a1 + 152) = result;
  }
  return result;
}
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE446: using guessed type __int16 word_AE454_AE444.y;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (00025CE0) --------------------------------------------------------
__int16 sub_25CE0(int a1)
{
  int v1; // eax
  __int16 result; // ax
  __int64 v3; // rax
  int v4; // edi
  unsigned int v5; // eax
  unsigned int v6; // eax
  int v7; // eax
  int v8; // esi
  __int16 v9[4]; // [esp+0h] [ebp-1Ch] BYREF
  int v10; // [esp+8h] [ebp-14h] BYREF
  int v11[4]; // [esp+Ch] [ebp-10h] BYREF

  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( v1 < 0 )
    return sub_41E80_421C0(a1);
  if ( (*(_BYTE *)(a1 + 16) & 2) == 0 )
  {
    *(_DWORD *)(a1 + 16) |= 0x10002u;
    sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 30);
  }
  v3 = 768 * *(__int16 *)(a1 + 26);
  sub_374F0((_WORD *)a1, (int)(v3 - (__CFSHL__(HIDWORD(v3), 2) + 4 * HIDWORD(v3))) >> 2, 512);
  sub_120B0(a1, 0, *(unsigned __int16 *)(a1 + 44) / *(int *)(a1 + 8));
  v4 = sub_11410(*(__int16 *)(a1 + 26), *(__int16 *)(a1 + 26));
  if ( v4 )
  {
    *(_DWORD *)(a1 + 4) = 9377 * *(_DWORD *)(a1 + 4) + 9439;
    while ( sub_114B0(v4, (uint32*)v11, (uint32*)&v10) == 1 )
    {
      v5 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
      *(_DWORD *)(a1 + 4) = v5;
      v9[0] = *(_WORD *)(a1 + 72) - 96 + 160 * LOWORD(v11[0]) + v5 % 0x81 - 64;
      v6 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
      *(_DWORD *)(a1 + 4) = v6;
      v9[1] = v6 % 0x81 + 160 * v10 + *(_WORD *)(a1 + 74) - 96 - 64;
      v9[2] = *(_WORD *)(a1 + 76);
      v7 = sub_373F0_377B0((int)v9, 10, 0);
      v8 = v7;
      if ( v7 )
      {
        *(_WORD *)(v7 + 24) = *(_WORD *)(a1 + 24);
        *(_WORD *)(v7 + 30) = *(_WORD *)(a1 + 30);
        *(_DWORD *)(v7 + 16) |= (unsigned int)&loc_10080;
        sub_374F0((_WORD *)v7, 512, 512);
        *(_WORD *)(v8 + 26) = 0;
      }
    }
    sub_11490(v4);
  }
  result = (__int16)(*(_WORD *)(a1 + 26) + 2) / 11;
  *(_WORD *)(a1 + 26) = (__int16)(*(_WORD *)(a1 + 26) + 2) % 11;
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// 25CE0: using guessed type int var_10[4];

//----- (00025EC0) --------------------------------------------------------
void sub_25EC0(int a1)
{
  unsigned int v1; // eax
  __int16 v2; // si
  __int16 v3; // ax
  unsigned int v4; // eax
  __int16 v5; // si
  __int16 v6; // ax
  unsigned int v7; // edx
  int v8; // eax
  int v9; // edi
  int v10; // ebp
  int v11; // eax
  int v12; // edx
  __int16 v13; // di
  int v14; // eax
  int v15; // ebp
  __int16 v16; // ax

  if ( *(__int16 *)(a1 + 26) > 2500 )
  {
    v1 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
    *(_DWORD *)(a1 + 4) = v1;
    if ( !(v1 % 0x64) && !*(_WORD *)(dword_AE400_AE3F0() + 36) )
    {
      v2 = *(_WORD *)(a1 + 76);
      v3 = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
      *(_WORD *)(a1 + 76) = v3;
      if ( v2 != v3 )
      {
LABEL_5:
        sub_41E80_421C0(a1);
        return;
      }
      *(_WORD *)(a1 + 26) = 0;
    }
  }
  if ( *(__int16 *)(a1 + 26) < 128
    && (*(_BYTE *)(a1 + 26) & 0xF) != 0
    && (v4 = 9377 * *(_DWORD *)(a1 + 4) + 9439, *(_DWORD *)(a1 + 4) = v4, !(v4 % 5))
    || !*(_WORD *)(a1 + 26) )
  {
    v5 = *(_WORD *)(a1 + 76);
    v6 = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
    *(_WORD *)(a1 + 76) = v6;
    if ( v5 != v6 )
      goto LABEL_5;
    if ( !*(_WORD *)(a1 + 26) )
    {
      v7 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 36);
      if ( v7 > dword_AE400_AE3F0() + 29795 )
        *(_WORD *)(v7 + 26) = 250;
      *(_WORD *)(dword_AE400_AE3F0() + 36) = (a1 - (dword_AE400_AE3F0() + 29795)) / 164;
      v8 = sub_373F0_377B0(a1 + 72, 10, 19);
      v9 = v8;
      if ( v8 )
      {
        *(_WORD *)(v8 + 24) = *(_WORD *)(a1 + 24);
        v10 = 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 38);
        if ( dword_AE400_AE3F0() + 29795 + v10 > (unsigned int)(dword_AE400_AE3F0() + 29795) )
          sub_41E80_421C0(dword_AE400_AE3F0() + 29795 + v10);
        *(_WORD *)(dword_AE400_AE3F0() + 38) = (v9 - (dword_AE400_AE3F0() + 29795)) / 164;
      }
    }
    v11 = sub_373F0_377B0(a1 + 72, 10, 16);
    if ( v11 )
    {
      *(_WORD *)(v11 + 24) = *(_WORD *)(a1 + 24);
      v12 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
      *(_DWORD *)(a1 + 4) = v12;
      *(_DWORD *)(v11 + 4) = v12;
    }
    v13 = *(_WORD *)(a1 + 26);
    *(_BYTE *)(a1 + 31) += 5;
    if ( !v13 )
    {
      v14 = sub_373F0_377B0(a1 + 72, 9, 0);
      v15 = v14;
      if ( v14 )
      {
        *(_WORD *)(v14 + 24) = *(_WORD *)(a1 + 24);
        v16 = *(_WORD *)(a1 + 30);
        *(_WORD *)(v15 + 32) = -386;
        *(_BYTE *)(v15 + 68) = 10;
        *(_BYTE *)(v15 + 69) = 17;
        HIBYTE(v16) &= 7u;
        *(_DWORD *)(v15 + 12) = 1;
        *(_WORD *)(v15 + 30) = v16;
        *(_DWORD *)(v15 + 150) = *(_DWORD *)(a1 + 72);
        *(_WORD *)(v15 + 154) = *(_WORD *)(a1 + 76);
        sub_41EC0_42200((axis_3d*)(_WORD *)(v15 + 150), *(_WORD *)(v15 + 30), 0, 1536);
        *(_WORD *)(v15 + 154) = sub_11F50((axis_3d*)(__int16 *)(v15 + 150));
      }
    }
    if ( *(__int16 *)(a1 + 26) >= 127 )
    {
      sub_41E80_421C0(a1);
      *(_WORD *)(dword_AE400_AE3F0() + 36) = 0;
    }
  }
  ++*(_WORD *)(a1 + 26);
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00026140) --------------------------------------------------------
int sub_26140(int a1)
{
  int v1; // eax
  int v2; // edi
  unsigned int v3; // eax
  unsigned int v4; // eax
  unsigned int v5; // eax
  int v6; // esi
  _BOOL1 i; // cf
  int v8; // eax
  __int16 v10[4]; // [esp+0h] [ebp-20h] BYREF
  int v11; // [esp+8h] [ebp-18h] BYREF
  int v12[5]; // [esp+Ch] [ebp-14h] BYREF

  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( v1 >= 0 )
  {
    *(_WORD *)(a1 + 26) = 0;
    v2 = sub_11410(0, *(__int16 *)(a1 + 26));
    if ( v2 )
    {
      while ( sub_114B0(v2, (uint32*)v12, (uint32*)&v11) == 1 )
      {
        v3 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = v3;
        if ( (int)(2 * (v3 % 0x9D / 79i64) - 1) > 0 )
        {
          v4 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
          *(_DWORD *)(a1 + 4) = v4;
          v10[0] = v4 % 0x81 + *(_WORD *)(a1 + 72) - 96 + 192 * LOWORD(v12[0]) - 64;
          v5 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
          *(_DWORD *)(a1 + 4) = v5;
          v10[1] = v5 % 0x81 + 192 * v11 + *(_WORD *)(a1 + 74) - 96 - 64;
          v10[2] = *(_WORD *)(a1 + 76);
          if ( (*(_BYTE *)(a1 + 12) & 1) != 0 )
          {
            v6 = ((*(_DWORD *)(a1 + 12) / 2) & 1) << 8;
            for ( i = (unsigned __int16)v6 < 0x800u; i; i = (unsigned __int16)v6 < 0x800u )
            {
              v8 = sub_373F0_377B0((int)v10, 10, 13);
              if ( v8 )
              {
                *(_WORD *)(v8 + 24) = *(_WORD *)(a1 + 24);
                *(_WORD *)(v8 + 30) = v6;
              }
              LOWORD(v6) = v6 + 512;
            }
          }
        }
      }
      sub_11490(v2);
    }
    *(_WORD *)(a1 + 76) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  }
  else
  {
    sub_41E80_421C0(a1);
  }
  return sub_120B0(a1, 0, *(_WORD *)(a1 + 44));
}
// 26140: using guessed type int var_14[5];

//----- (000262D0) --------------------------------------------------------
void sub_262D0(int a1)
{
  int v1; // eax
  char v2; // dl

  v1 = *(_DWORD *)(a1 + 12);
  ++*(_WORD *)(a1 + 26);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( v1 >= 0 )
  {
    if ( (*(_BYTE *)(a1 + 16) & 2) == 0 )
    {
      sub_120B0(a1, 0, *(_WORD *)(a1 + 44));
      sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 24);
      v2 = *(_BYTE *)(a1 + 16);
      *(_DWORD *)(a1 + 12) = 1;
      *(_BYTE *)(a1 + 16) = v2 | 2;
    }
  }
  else
  {
    sub_41E80_421C0(a1);
  }
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00026360) --------------------------------------------------------
int sub_26360(int a1)
{
  int v1; // eax
  int result; // eax
  unsigned __int16 v3; // [esp-4h] [ebp-8h]

  v1 = *(_DWORD *)(a1 + 12);
  ++*(_WORD *)(a1 + 26);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( v1 < 0 )
    return sub_41E80_421C0(a1);
  result = sub_42510_42850(a1);
  BYTE1(result) = *(_BYTE *)(a1 + 16);
  if ( (result & 0x200) == 0 )
  {
    v3 = *(_WORD *)(a1 + 44);
    *(_BYTE *)(a1 + 16) |= 2u;
    return sub_120B0(a1, 3u, v3);
  }
  return result;
}

//----- (000263C0) --------------------------------------------------------
int sub_263C0(int a1)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 12);
  ++*(_WORD *)(a1 + 26);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( v1 < 0 )
    return sub_41E80_421C0(a1);
  sub_42510_42850(a1);
  return sub_120B0(a1, 4u, *(_WORD *)(a1 + 44));
}

//----- (000264D0) --------------------------------------------------------
_BOOL1 sub_264D0(unsigned __int16 a1)
{
  unsigned __int16 v1; // ax
  int v2; // edx
  unsigned __int16 v3; // ax
  _BOOL1 result; // al

  HIBYTE(v1) = HIBYTE(a1);
  LOBYTE(v1) = a1 - 1;
  result = 1;
  if ( mapTerrainType_CC1E0_CC1D0[v1] == 8 )
  {
    v2 = (unsigned __int16)((unsigned __int8)mapHeightmap_DC1E0_DC1D0[a1] + 30);
    if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v1] <= (int)(unsigned __int16)v2 )
    {
      LOBYTE(v1) = v1 + 2;
      if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v1] <= v2 )
      {
        LOBYTE(v3) = v1 - 1;
        HIBYTE(v3) = HIBYTE(a1) + 1;
        if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] <= v2 )
        {
          HIBYTE(v3) = HIBYTE(a1) - 1;
          if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] <= v2 )
            return 0;
        }
      }
    }
  }
  return result;
}

//----- (00026560) --------------------------------------------------------
int sub_26560(int a1, int a2)
{
  __int16 i; // di
  unsigned __int16 v4; // [esp+0h] [ebp-18h]
  unsigned __int16 v5; // [esp+4h] [ebp-14h]

  LOBYTE(v4) = (unsigned __int16)(*(_WORD *)(a2 + 72) + 128) >> 8;
  HIBYTE(v4) = (unsigned __int16)(*(_WORD *)(a2 + 74) + 128) >> 8;
  if ( v4 % 2 )
    LOBYTE(v4) = v4 + 1;
  LOBYTE(v4) = v4 - *(_BYTE *)(a2 + 12) + 1;
  for ( i = *(_WORD *)(a2 + 12) + *(_WORD *)(a2 + 26); i; --i )
  {
    HIBYTE(v5) = HIBYTE(v4);
    LOBYTE(v5) = v4 - 1;
    mapAngle_FC1E0_FC1D0[v5] |= 0x80u;
    LOWORD(a1) = *(_WORD *)(a2 + 12);
    for ( LOBYTE(v5) = v4; (_WORD)a1; ++v5 )
    {
      if ( mapTerrainType_CC1E0_CC1D0[v5] != 8 || sub_264D0(v5) )
        mapHeightmap_DC1E0_DC1D0[v5] += 48;
      sub_33ED0(v5, 8);
      --a1;
    }
    mapAngle_FC1E0_FC1D0[v5] |= 0x80u;
    ++HIBYTE(v4);
  }
  return sub_41E80_421C0(a2);
}

//----- (00026670) --------------------------------------------------------
int sub_26670(int a1, _WORD *a2)
{
  __int16 i; // di
  unsigned __int16 v4; // [esp+0h] [ebp-18h]
  char v5; // [esp+4h] [ebp-14h]
  char v6; // [esp+5h] [ebp-13h]

  v5 = (unsigned __int16)(a2[36] + 128) >> 8;
  v6 = ((unsigned __int16)(a2[37] + 128) >> 8) + 2;
  for ( i = a2[6] + a2[13]; i; --i )
  {
    HIBYTE(v4) = v6;
    LOBYTE(v4) = v5 - 1;
    mapAngle_FC1E0_FC1D0[v4] |= 0x80u;
    LOWORD(a1) = a2[6];
    for ( LOBYTE(v4) = v5; (_WORD)a1; ++v4 )
    {
      if ( mapTerrainType_CC1E0_CC1D0[v4] != 8 || sub_264D0(v4) )
        mapHeightmap_DC1E0_DC1D0[v4] += 48;
      sub_33ED0(v4, 8);
      --a1;
    }
    mapAngle_FC1E0_FC1D0[v4] |= 0x80u;
    --v6;
  }
  return sub_41E80_421C0((int)a2);
}

//----- (00026760) --------------------------------------------------------
int sub_26760(int a1, _WORD *a2)
{
  int v2; // eax
  __int16 j; // di
  unsigned __int16 v5; // [esp+0h] [ebp-18h]
  __int16 v6; // [esp+2h] [ebp-16h]
  unsigned __int16 i; // [esp+4h] [ebp-14h]
  unsigned __int16 k; // [esp+4h] [ebp-14h]
  unsigned __int16 m; // [esp+4h] [ebp-14h]

  //fix
  v6 = 0;
  //fix

  LOBYTE(v5) = (unsigned __int16)(a2[36] + 128) >> 8;
  HIBYTE(v5) = (unsigned __int16)(a2[37] + 128) >> 8;
  if ( ((unsigned __int8)v5 + HIBYTE(v5)) % 2 )
    LOBYTE(v5) = v5 + 1;
  HIWORD(v2) = v6;
  LOWORD(v2) = a2[13];
  for ( i = v5 - 256; (_WORD)v2; ++i )
  {
    mapAngle_FC1E0_FC1D0[i] |= 0x80u;
    --v2;
  }
  for ( j = a2[6]; j; --j )
  {
    LOWORD(a1) = a2[13];
    for ( k = v5; (_WORD)a1; ++k )
    {
      if ( mapTerrainType_CC1E0_CC1D0[k] != 8 || sub_264D0(k) )
        mapHeightmap_DC1E0_DC1D0[k] += 48;
      sub_33ED0(k, 8);
      --a1;
    }
    ++HIBYTE(v5);
  }
  LOWORD(a1) = a2[13];
  for ( m = v5; (_WORD)a1; ++m )
  {
    mapAngle_FC1E0_FC1D0[m] |= 0x80u;
    --a1;
  }
  return sub_41E80_421C0((int)a2);
}
// 267A8: variable 'v6' is possibly undefined

//----- (00026890) --------------------------------------------------------
int sub_26890(_WORD *a1)
{
  int v1; // ebx
  __int16 v2; // si
  __int16 v4; // [esp+0h] [ebp-14h]
  __int16 i; // [esp+4h] [ebp-10h]

  v1 = ((__int16)a1[36] + 128) >> 8;
  BYTE1(v1) = (unsigned __int16)(a1[37] + 128) >> 8;
  v4 = a1[15];
  v2 = a1[13];
  for ( i = a1[16]; v2; --v2 )
  {
    mapAngle_FC1E0_FC1D0[(unsigned __int16)v1] = mapAngle_FC1E0_FC1D0[(unsigned __int16)v1] & 0xF0 | 1;
    sub_33F80(v1, v1);
    LOBYTE(v1) = v4 + v1;
    BYTE1(v1) += i;
  }
  return sub_41E80_421C0((int)a1);
}

//----- (00026920) --------------------------------------------------------
void sub_26920(int a1)
{
  int v1; // eax
  int v3; // eax
  __int16 v4; // si

  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if (v1 < 0 || (sub_11760(a1 + 72) & 1) != 0)
  {
      sub_41E80_421C0(a1);
      return;
  }
  v3 = sub_373F0_377B0(a1 + 72, 10, 11);
  if ( v3 )
  {
    v4 = *(_WORD *)(a1 + 84);
    *(_DWORD *)(v3 + 12) = 2;
    *(_WORD *)(v3 + 84) = v4;
    *(_WORD *)(v3 + 24) = *(_WORD *)(a1 + 24);
  }
  sub_41EC0_42200((axis_3d*)(_WORD *)(a1 + 72), *(_WORD *)(a1 + 30), 0, *(_WORD *)(a1 + 126));
}

//----- (000269A0) --------------------------------------------------------
void sub_269A0(int a1)
{
  int v1; // eax
  unsigned int v3; // eax

  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if (v1 < 0 || (sub_11760(a1 + 72) & 1) != 0)
  {
      sub_41E80_421C0(a1);
      return;
  }
  v3 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
  *(_DWORD *)(a1 + 4) = v3;
  if ( !(unsigned __int8)sub_40D30_41070((__int16 *)a1, 0, 1024, v3 % 0xF + 10, 0) )
  {
    sub_120B0(a1, 0, *(_WORD *)(a1 + 44));
    sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 10);
  }
  sub_41EC0_42200((axis_3d*)(_WORD *)(a1 + 72), *(_WORD *)(a1 + 30), 0, *(_WORD *)(a1 + 126));
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00026A60) --------------------------------------------------------
void sub_26A60(int a1)
{
  int v1; // eax
  int v2; // edx
  int v3; // edi
  int v4; // ebx
  __int16 v5; // ax
  __int16 v6; // ax
  int v7; // [esp+0h] [ebp-1Ch]
  __int16 *v8; // [esp+4h] [ebp-18h]
  unsigned __int16 v9; // [esp+8h] [ebp-14h]

  //fix
  v6 = 0;
  //fix

  if ( (*(_BYTE *)(a1 + 16) & 2) == 0 )
  {
    v1 = dword_AE400_AE3F0() + 29795;
    *(_BYTE *)(a1 + 16) |= 2u;
    sub_55370_558A0((a1 - v1) / 164, -1, 21);
  }
  v2 = *(_DWORD *)(a1 + 12);
  if ( v2 > 0 && (*(_DWORD *)(a1 + 12) = v2 - 1, v2 == 1) )
  {
    sub_41E80_421C0(a1);
    sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 20);
  }
  else
  {
    v3 = dword_AE400_AE3F0() + 13323;
    v9 = 0;
    v8 = (__int16 *)(a1 + 72);
    while ( v9 < *(_WORD *)(dword_AE400_AE3F0() + 10) )
    {
      v4 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(v3 + 10);
      if ( sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)v4) )
      {
        v5 = sub_42150_42490((axis_3d*)(_WORD *)(v4 + 72), (axis_3d*)(uint16*)v8);
        if ( (unsigned __int16)sub_42210_42550(*(_WORD *)(v4 + 30), v5) < 0xAAu )
        {
          v7 = *(_DWORD *)(a1 + 156);
          *(_WORD *)(a1 + 154) = *(_WORD *)(v7 + 12) + sub_11F50((axis_3d*)(__int16 *)(a1 + 150));
          sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 22);
          sub_41C70_41FB0((Type_AE400_29795*)v4, (axis_3d*)(a1 + 150));
          sub_44BE0_44F20(v4, 6);
        }
      }
      v3 += 2049;
      ++v9;
    }
    *(_WORD *)(a1 + 76) = sub_11F50((axis_3d*)v8);
  }
}
// 26BAF: variable 'v6' is possibly undefined
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00026C00) --------------------------------------------------------
int sub_26C00(int a1)
{
  int result; // eax
  unsigned int v2; // esi
  unsigned int v3; // esi
  __int16 v4; // ax
  __int16 v5; // ax

  result = dword_AE400_AE3F0() + 29795;
  v2 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42);
  if ( v2 > dword_AE400_AE3F0() + 29795 )
  {
    if ( *(_DWORD *)(v2 + 12) == 1 )
    {
      return sub_41E80_421C0(a1);
    }
    else
    {
      v3 = v2 + 72;
      *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)v3;
      word_AE454_AE444.z = *(_WORD *)(v3 + 4);
      sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
      v4 = *(_WORD *)(a1 + 30) + 45;
      HIBYTE(v4) &= 7u;
      *(_WORD *)(a1 + 30) = v4;
      v5 = sub_11F50((axis_3d*)(__int16*)&word_AE454_AE444);
      ++HIBYTE(v5);
      word_AE454_AE444.z = v5;
      return sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
    }
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (00026CE0) --------------------------------------------------------
int sub_26CE0(int a1)
{
  int result; // eax
  int v2; // edx
  char v3; // dl

  result = a1;
  ++*(_WORD *)(a1 + 26);
  v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v2 - 1;
  if ( v2 < 0 )
    return sub_41E80_421C0(a1);
  v3 = *(_BYTE *)(a1 + 16);
  if ( (v3 & 2) == 0 )
    *(_BYTE *)(a1 + 16) = v3 | 2;
  return result;
}

//----- (00026D20) --------------------------------------------------------
void sub_26D20(int a1)
{
  __int16 v1; // bx
  __int16 v2; // dx
  int v3; // edx
  int v4; // eax
  __int16 v5; // ax
  int v6; // eax
  int v7; // ebx
  int v8; // esi
  __int16 v9; // ax
  int v10; // [esp-8h] [ebp-20h]
  int v11; // [esp-4h] [ebp-1Ch]
  int i; // [esp+4h] [ebp-14h]

  v1 = 0;
  v2 = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  if ( *(__int16 *)(a1 + 76) < v2 + 1024 )
  {
    v1 = 1;
    *(_WORD *)(a1 + 76) += 64;
  }
  if ( *(__int16 *)(a1 + 76) > v2 + 1024 )
  {
    HIBYTE(v2) += 4;
    v1 = 1;
    *(_WORD *)(a1 + 76) = v2;
  }
  if ( !v1 )
  {
    v3 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3 - 1;
    if ( v3 >= 0 )
    {
      v4 = 9377 * *(_DWORD *)(a1 + 4);
      *(_WORD *)(a1 + 32) = 56;
      v4 += 9439;
      *(_DWORD *)(a1 + 4) = v4;
      *(_WORD *)(a1 + 30) = v4 & 0x7FF;
      for ( i = 0; i < 2; ++i )
      {
        v5 = *(_WORD *)(a1 + 30);
        HIBYTE(v5) = (HIBYTE(v5) + 4) & 7;
        *(_WORD *)(a1 + 30) = v5;
        *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
        word_AE454_AE444.z = *(_WORD *)(a1 + 76);
        v11 = *(char *)(a1 + 69);
        v10 = *(char *)(a1 + 68);
        word_AE454_AE444.z += *(_WORD *)(a1 + 78);
        v6 = sub_373F0_377B0(a1 + 72, v10, v11);
        v7 = v6;
        v8 = v6;
        if ( v6 )
        {
          *(_WORD *)(v6 + 24) = *(_WORD *)(a1 + 24);
          *(int *)(v6 + 12) /= 3;
          *(_WORD *)(v6 + 30) = *(_WORD *)(a1 + 30);
          *(_WORD *)(v6 + 32) = *(_WORD *)(a1 + 32);
          v9 = *(_WORD *)(a1 + 44);
          *(_BYTE *)(v7 + 68) = 10;
          *(_BYTE *)(v7 + 69) = 23;
          *(_WORD *)(v7 + 44) = v9;
        }
      }
      sub_55370_558A0((v8 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 23);
    }
    else
    {
      sub_41E80_421C0(a1);
    }
  }
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (00026E90) --------------------------------------------------------
int sub_26E90(int a1)
{
  int v1; // eax
  unsigned int i; // edx
  int v3; // eax
  int v4; // ebx
  __int16 v5; // ax
  __int16 v7; // [esp+0h] [ebp-24h]
  int v8; // [esp+4h] [ebp-20h]
  int v9; // [esp+8h] [ebp-1Ch]
  unsigned __int16 v10; // [esp+Ch] [ebp-18h]
  int v11; // [esp+10h] [ebp-14h]

  *(_WORD *)(a1 + 44) = 10000;
  if ( *(_WORD *)(a1 + 44) )
  {
    v9 = sub_37AD0();
    if ( (v9 & 0x8000u) != 0 )
      v9 = 0;
    if ( (__int16)v9 > 8 )
      v9 = 8;
    v1 = 0;
    for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36418); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
    {
      if ( *(unsigned __int16 *)(i + 144) == *(__int16 *)(a1 + 24) )
        ++v1;
    }
    if ( (__int16)v9 > 64 - (unsigned __int16)v1 )
      v9 = 64 - v1;
    if ( (__int16)v9 > 0 )
    {
      LOWORD(v1) = *(_WORD *)(a1 + 44);
      v8 = v1;
      v11 = (__int16)v1 / (__int16)v9;
      v10 = 0;
      v7 = 2048 / (__int16)v9;
      do
      {
        *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
        word_AE454_AE444.z = *(_WORD *)(a1 + 76);
        sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, v10, 0, 512);
        v3 = sub_373F0_377B0((int)&word_AE454_AE444, 5, 9);
        v4 = v3;
        if ( v3 )
        {
          *(_DWORD *)(v3 + 140) = (__int16)v8 % (__int16)v11;
          *(_WORD *)(v3 + 144) = *(_WORD *)(a1 + 24);
          LOBYTE(v5) = v10;
          HIBYTE(v5) = (HIBYTE(v10) + 4) & 7;
          *(_WORD *)(v4 + 34) = v5;
          *(_WORD *)(v4 + 30) = v5;
          v8 -= v11;
        }
        --v9;
        v10 += v7;
      }
      while ( (__int16)v9 > 0 );
    }
  }
  return sub_41E80_421C0(a1);
}
// 26F74: conditional instruction was optimized away because %var_1C.2>=1
// 26F0A: conditional instruction was optimized away because %var_1C.2<9u
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// AE444: using guessed type __int16 word_AE454_AE44X;

//SYNCHRONIZED WITH REMC1
void sub_27030(int a1)
{
  __int16 v1; // dx
  unsigned __int16 v2; // si
  __int16 v3; // si
  int v4; // eax
  __int16 v5; // ax
  unsigned __int16 v6; // dx
  signed int v7; // eax
  int v8; // eax
  __int16 v9; // si
  __int16 v10; // ax
  __int16 v11; // cx
  __int16 v12; // ax
  int v13; // eax
  __int16 v14; // si
  int v15; // eax
  int v16; // eax
  int v17; // edx
  unsigned __int16 v18; // [esp-Ch] [ebp-18h]
  _WORD *v19; // [esp-4h] [ebp-10h]

  v1 = *(_WORD *)(a1 + 100);
  if ( v1 )
  {
    if ( v1 != *(_WORD *)(a1 + 144) )
    {
      *(_WORD *)(a1 + 144) = v1;
      sub_55370_558A0(v1, -1, 4);
      *(_BYTE *)(a1 + 16) &= ~0x40u;
    }
    *(_WORD *)(a1 + 100) = 0;
    *(_DWORD *)(a1 + 96) = 0;
  }
  v2 = *(_WORD *)(a1 + 118);
  if ( v2 )
  {
    *(_WORD *)(a1 + 30) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(164 * v2 + dword_AE400_AE3F0() + 29795 + 72));
    v18 = *(_WORD *)(a1 + 30);
    word_AE454_AE444.x = 0;
    word_AE454_AE444.y = 0;
    word_AE454_AE444.z = 0;
    sub_41EC0_42200(&word_AE454_AE444, v18, 0, 4);
    *(_WORD *)(a1 + 150) += word_AE454_AE444.x;
    v3 = word_AE454_AE444.y + *(_WORD *)(a1 + 152);
    *(_WORD *)(a1 + 118) = 0;
    *(_WORD *)(a1 + 152) = v3;
  }
  if ( (*(_BYTE *)(a1 + 16) & 0x40) != 0 )
  {
    v4 = dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 146);
    if ( *(_BYTE *)(v4 + 29859) == 3 && *(_BYTE *)(v4 + 29860) == 3 )
    {
      v19 = (_WORD *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 146) + 72);
      *(_WORD *)(a1 + 46) = 128;
      v5 = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)v19);
      v6 = *(_WORD *)(a1 + 146);
      *(_WORD *)(a1 + 30) = v5;
      v7 = sub_423D0_42710((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(164 * v6 + dword_AE400_AE3F0() + 29795 + 72));
      if ( v7 <= 1024 )
      {
        if ( v7 >= 16 )
        {
          *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
          word_AE454_AE444.z = *(_WORD *)(a1 + 76);
          sub_41EC0_42200(&word_AE454_AE444, *(_WORD *)(a1 + 30), 0, 16);
        }
        else
        {
          *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
          word_AE454_AE444.z = *(_WORD *)(a1 + 76);
          v8 = dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 146);
          word_AE454_AE444.x = *(_WORD *)(v8 + 29867);
          v9 = *(_WORD *)(v8 + 29871);
          word_AE454_AE444.y = *(_WORD *)(v8 + 29869);
          if ( word_AE454_AE444.z >= v9 )
          {
            if ( word_AE454_AE444.z > v9 + 512 )
              word_AE454_AE444.z -= 32;
          }
          else
          {
            word_AE454_AE444.z += 32;
          }
        }
        v10 = sub_11F50(&word_AE454_AE444);
        if ( v10 > word_AE454_AE444.z )
          word_AE454_AE444.z = v10;
        sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
      }
      else
      {
        *(_BYTE *)(a1 + 16) &= ~0x40u;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 16) &= ~0x40u;
    }
  }
  else if ( *(_BYTE *)(a1 + 58) )
  {
    if ( *(__int16 *)(a1 + 150) < -64 )
      *(_WORD *)(a1 + 150) = -64;
    if ( *(__int16 *)(a1 + 150) > 64 )
      *(_WORD *)(a1 + 150) = 64;
    if ( *(__int16 *)(a1 + 152) < -64 )
      *(_WORD *)(a1 + 152) = -64;
    if ( *(__int16 *)(a1 + 152) > 64 )
      *(_WORD *)(a1 + 152) = 64;
    *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
    word_AE454_AE444.z = *(_WORD *)(a1 + 76);
    v11 = *(_WORD *)(a1 + 152);
    word_AE454_AE444.x = *(_WORD *)(a1 + 150) + *(_WORD *)(a1 + 72);
    word_AE454_AE444.y = v11 + *(_WORD *)(a1 + 74);
    v12 = *(_WORD *)(a1 + 46);
    word_AE454_AE444.z += v12;
    *(_WORD *)(a1 + 46) = v12 - 16;
    if ( (__int16)(v12 - 16) < -128 )
      *(_WORD *)(a1 + 46) = -128;
    LOWORD(v13) = sub_11F50(&word_AE454_AE444);
    v14 = v13;
    if ( (__int16)v13 > word_AE454_AE444.z )
    {
      v13 = -((int)(*(__int16 *)(a1 + 46)
                  - (__CFSHL__((unsigned __int64)*(__int16 *)(a1 + 46) >> 32, 2)
                   + 4 * ((unsigned __int64)*(__int16 *)(a1 + 46) >> 32))) >> 2);
      *(_WORD *)(a1 + 46) = v13;
      if ( (__int16)v13 <= 16 )
        *(_WORD *)(a1 + 46) = 0;
      word_AE454_AE444.z = v14;
    }
    sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
    if ( v14 == word_AE454_AE444.z )
    {
      v15 = sub_11D10(a1);
      if ( v15 )
        sub_277D0(a1, v15);
      sub_41F50_42290(a1 + 72, (uint16*)&word_AE454_AE444);
      *(_WORD *)(a1 + 150) += word_AE454_AE444.x;
      v16 = 250 * *(__int16 *)(a1 + 150);
      *(_WORD *)(a1 + 152) += word_AE454_AE444.y;
      v17 = *(__int16 *)(a1 + 152);
      *(_WORD *)(a1 + 150) = (v16 - (__CFSHL__(v16 >> 31, 8) + (v16 >> 31 << 8))) >> 8;
      *(_WORD *)(a1 + 152) = (250 * v17 - (__CFSHL__((250 * v17) >> 31, 8) + ((250 * v17) >> 31 << 8))) >> 8;
    }
    sub_274D0(a1);
  }
}

//----- (000274D0) --------------------------------------------------------
__int16 sub_274D0(int a1)
{
  __int16 v1; // cx
  __int16 i; // bx
  unsigned int v3; // eax
  int v4; // eax

  for ( i = 0; i < 7; ++i )
  {
    if ( *(_DWORD *)(a1 + 140) <= dword_900A4[i] )
      break;
  }
  v3 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 144);
  if ( v3 > dword_AE400_AE3F0() + 29795 && *(_BYTE *)(v3 + 64) == 3 )
  {
    switch ( *(_WORD *)(*(_DWORD *)(v3 + 160) + 48) )
    {
      case 0xFFFF:
        goto LABEL_15;
      case 0:
        v1 = 105;
        break;
      case 1:
        v1 = 113;
        break;
      case 2:
        v1 = 121;
        break;
      case 3:
        v1 = 129;
        break;
      case 4:
        v1 = 137;
        break;
      case 5:
        v1 = 145;
        break;
      case 6:
        v1 = 153;
        break;
      case 7:
        v1 = 161;
        break;
      default:
        break;
    }
  }
  else
  {
LABEL_15:
    v1 = 52;
  }
  v4 = *(__int16 *)(a1 + 86);
  if ( v4 != v1 + i )
  {
    LOWORD(v4) = sub_36FA0_37360(a1, v1 + i);
    if ( i )
      LOWORD(v4) = sub_374A0((__int16 *)a1, v1 + i);
  }
  return v4;
}
// 27589: variable 'v1' is possibly undefined
// 900A4: using guessed type int dword_900A4[8];
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000275C0) --------------------------------------------------------
int sub_275C0(__int16 *a1)
{
  int result; // eax
  __int16 v2; // dx
  int v3; // edi
  unsigned int i; // ebx

  result = sub_11F50((axis_3d*)(a1 + 36));
  v2 = a1[50];
  a1[38] = result;
  if ( v2 )
  {
    v3 = 164 * (unsigned __int16)a1[50] + dword_AE400_AE3F0() + 29795;
    if ( *(_BYTE *)(v3 + 64) == 3 && !a1[72] )
    {
      for ( i = dword_AE400_AE3F0() + 29959; i < dword_AE400_AE3F0() + 193795; i += 164 )
      {
        if ( *(unsigned __int16 *)(i + 144) == ((int)a1 - dword_AE400_AE3F0() - 29795) / 164 )
          *(_WORD *)(i + 144) = (v3 - (dword_AE400_AE3F0() + 29795)) / 164;
      }
    }
    a1[50] = 0;
    return sub_41E80_421C0((int)a1);
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//SYNCHRONIZED WITH REMC1
void sub_27690(_WORD *result, Type_AE400_29795* a2x)
{
  _WORD *v2; // ebx
  int v3; // ecx
  unsigned int v4; // eax
  int v5; // ebp
  int v6; // ebp
  __int16 v7; // ax

  if (a2x->var_u32_29935_140 > 0 )
  {
    a2x->rand_29799_4 = 9377 * a2x->rand_29799_4 + 9439;
    result = (_WORD *)sub_373F0_377B0(&a2x->var_u32_29867_72, 10, 39);
    v2 = result;
    if ( result )
    {
      *((_DWORD *)result + 35) = a2x->var_u32_29935_140;
      v3 = *((_DWORD *)result + 1);
      result[72] = a2x->var_u16_29939_144;
      v4 = 9377 * v3 + 9439;
      *((_DWORD *)v2 + 1) = v4;
      v5 = *((_DWORD *)v2 + 1);
      v2[15] = (v4 % 0x71 + a2x->var_u16_29825_30 - 56) & 0x7FF;
      *((_DWORD *)v2 + 1) = 9377 * v5 + 9439;
      v2[75] = 0;
      v2[76] = 0;
      v2[63] = (9377 * v5 + 9439) % 0x30u + 16;
      v6 = a2x->var_u32_29867_72.z;
      v7 = sub_11F50(&a2x->var_u32_29867_72);
      v2[23] = (1024 - (v6 - v7) - (__CFSHL__((1024 - (v6 - v7)) >> 31, 3) + 8 * ((1024 - (v6 - v7)) >> 31))) >> 3;
      sub_41EC0_42200((axis_3d*)(v2 + 75), v2[15], 0, v2[63]);
    }
    a2x->var_u16_29939_144 = 0;
  }
}

//SYNCHRONIZED WITH REMC1
void sub_277D0(int a1, int a2)
{
  int v2; // eax
  unsigned __int16 v3; // si
  int v4; // edx
  int v5; // eax
  int v6; // ebp
  int v7; // edx
  int v8; // eax
  int v9; // eax
  int v11; // eax
  __int64 v12; // rtt

  if ( *(_WORD *)(a1 + 144) || *(_WORD *)(a2 + 144) )
  {
    if ( !*(_WORD *)(a1 + 144) )
    {
      *(_DWORD *)(a1 + 140) += *(_DWORD *)(a2 + 140);
      LOWORD(v2) = *(_WORD *)(a2 + 144);
LABEL_20:
      *(_WORD *)(a1 + 144) = v2;
      sub_41E90_421D0((Type_AE400_29795*)a2);
      return;
    }
    if ( *(_WORD *)(a2 + 144) )
    {
      v3 = *(_WORD *)(a2 + 144);
      v4 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 144);
      v5 = dword_AE400_AE3F0() + 29795 + 164 * v3;
      if ( *(_BYTE *)(v4 + 64) != 10 || *(_BYTE *)(v5 + 64) != 10 )
      {
        if ( *(_BYTE *)(v4 + 64) == 10 )
        {
          *(_DWORD *)(a1 + 140) += *(_DWORD *)(a2 + 140);
          v2 = 164 * v3 / 164;
          goto LABEL_20;
        }
        if ( *(_BYTE *)(v5 + 64) == 10 )
        {
          v6 = *(_DWORD *)(a2 + 140) + *(_DWORD *)(a1 + 140);
          v7 = 164 * *(unsigned __int16 *)(a1 + 144);
          v8 = v7;
          goto LABEL_19;
        }
        if ( v4 != v5 )
        {
          if ( *(_DWORD *)(v4 + 136) > *(_DWORD *)(v5 + 136) )
          {
            v11 = dword_AE400_AE3F0() + 29795;
            *(_DWORD *)(a1 + 140) += *(_DWORD *)(a2 + 140);
            v2 = (v4 - v11) / 164;
            goto LABEL_20;
          }
          v6 = *(_DWORD *)(a2 + 140) + *(_DWORD *)(a1 + 140);
          v8 = 164 * v3;
          v7 = v8;
LABEL_19:
          LODWORD(v12) = v8;
          HIDWORD(v12) = v7 >> 31;
          v2 = v12 / 164;
          *(_DWORD *)(a1 + 140) = v6;
          goto LABEL_20;
        }
      }
    }
    v9 = *(_DWORD *)(a2 + 140);
    *(_DWORD *)(a1 + 140) += v9;
    sub_41E90_421D0((Type_AE400_29795*)a2);
    return;
  }
  v2 = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 140) += v2;
  sub_41E90_421D0((Type_AE400_29795*)a2);
}

//----- (000279D0) --------------------------------------------------------
char sub_279D0(int a1)
{
  int v1; // eax
  int v2; // esi
  int v3; // edi
  unsigned int v4; // eax
  unsigned __int16 v5; // bx
  char v6; // al
  int v7; // ebp
  unsigned __int8 v8; // al
  int v9; // eax
  char v10; // ch
  char v11; // dl
  __int16 v12; // dx
  __int16 v13; // dx
  char v14; // cl
  unsigned __int16 v15; // bx
  char result; // al
  int v17; // esi
  int v18; // ebp
  char v19; // cl
  __int16 v20; // dx
  unsigned int v21; // eax
  unsigned __int8 v22; // al
  unsigned int v23; // [esp+0h] [ebp-38h]
  unsigned int v24; // [esp+8h] [ebp-30h]
  unsigned int v25; // [esp+Ch] [ebp-2Ch]
  unsigned __int16 v26; // [esp+10h] [ebp-28h]
  __int16 v27; // [esp+14h] [ebp-24h]
  unsigned __int16 v28; // [esp+18h] [ebp-20h]
  unsigned __int16 v29; // [esp+18h] [ebp-20h]
  unsigned __int8 v30; // [esp+20h] [ebp-18h]

  v27 = *(__int16 *)(a1 + 76) >> 5;
  v1 = (int)begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(unsigned __int8 *)(a1 + 71);
  v2 = 0;
  v3 = *(_DWORD *)v1;
  v25 = *(unsigned __int8 *)(v1 + 5);
  v4 = *(unsigned __int8 *)(v1 + 4);
  if ( typeResolution_12F02E_12F01E == 1 )
  {
    v4 >>= 1;
    v25 >>= 1;
  }
  LOBYTE(v28) = ((unsigned __int16)(*(_WORD *)(a1 + 72) + 128) >> 8) - (v4 >> 1);
  HIBYTE(v28) = ((unsigned __int16)(*(_WORD *)(a1 + 74) + 128) >> 8) - (v25 >> 1);
  v26 = v28;
  v5 = v28;
  v24 = v25;
  if ( v25 )
  {
    while ( 1 )
    {
      v6 = *(_BYTE *)(v3 + v2++);
      if ( v6 )
        break;
      ++HIBYTE(v28);
      --v25;
      v5 = v28;
LABEL_26:
      if ( !v25 )
        goto LABEL_27;
    }
    if ( v6 < 0 )
    {
      LOBYTE(v5) = v5 - v6;
      goto LABEL_26;
    }
    v7 = v6;
    while ( 1 )
    {
      v8 = *(_BYTE *)(v3 + v2++);
      if ( v8 < 0xFu )
      {
        if ( v8 <= 6u )
          goto LABEL_25;
        v9 = v5;
        v10 = mapAngle_FC1E0_FC1D0[v5];
        mapHeightmap_DC1E0_DC1D0[v5] = v27;
        if ( (v10 & 7) != 0 )
          goto LABEL_25;
        v11 = v10;
        goto LABEL_24;
      }
      v12 = v8 % 16;
      if ( (int)v8 >> 4 != 3 )
        break;
      v13 = (unsigned __int8)v12 % 3;
      if ( (_BYTE)v13 )
      {
        if ( (unsigned __int8)v13 > 1u )
        {
          if ( (_BYTE)v13 != 2 )
            goto LABEL_25;
          v9 = v5;
          mapHeightmap_DC1E0_DC1D0[v5] = v27 + 16;
          if ( (mapAngle_FC1E0_FC1D0[v5] & 7) != 0 )
            goto LABEL_25;
          v11 = mapAngle_FC1E0_FC1D0[v5];
          goto LABEL_24;
        }
        v9 = v5;
        v14 = mapAngle_FC1E0_FC1D0[v5];
        mapHeightmap_DC1E0_DC1D0[v5] = v27 + 12;
        if ( (v14 & 7) == 0 )
        {
          v11 = v14;
LABEL_24:
          mapAngle_FC1E0_FC1D0[v9] = v11 & 0xF8 | 1;
          sub_33F80(v5, v5);
        }
      }
LABEL_25:
      LOBYTE(v5) = v5 + 1;
      if ( !--v7 )
        goto LABEL_26;
    }
    if ( !(_BYTE)v12 )
      goto LABEL_25;
    v9 = v5;
    mapHeightmap_DC1E0_DC1D0[v5] = 4 * (v12 - 1) + v27;
    v11 = mapAngle_FC1E0_FC1D0[v5];
    if ( (v11 & 7) != 0 )
      goto LABEL_25;
    goto LABEL_24;
  }
LABEL_27:
  v23 = v24;
  v29 = v26;
  v15 = v26;
  result = v24;
  v17 = 0;
  if ( v24 )
  {
    while ( 1 )
    {
      while ( 1 )
      {
        result = *(_BYTE *)(v3 + v17++);
        if ( result )
          break;
        ++HIBYTE(v29);
        result = v23 - 1;
        v15 = v29;
        --v23;
LABEL_44:
        if ( !v23 )
          return result;
      }
      if ( result >= 0 )
        break;
      LOBYTE(v15) = v15 - result;
      if ( !v23 )
        return result;
    }
    v18 = result;
    while ( 1 )
    {
      v30 = *(_BYTE *)(v3 + v17);
      v19 = v30;
      LOBYTE(v20) = 0;
      v21 = (int)v30 >> 4;
      ++v17;
      if ( v21 )
        break;
      v19 = 7;
      v20 = v30 % 7;
      result = v20;
      if ( (_BYTE)v20 )
      {
        v22 = v20 - 1;
LABEL_42:
        result = sub_33800_33BF0(v20, v19, v15, v22);
      }
      LOBYTE(v15) = v15 + 1;
      if ( !--v18 )
        goto LABEL_44;
    }
    if ( v21 <= 2 )
    {
      v22 = v21 + 7;
    }
    else if ( v21 == 3 )
    {
      v20 = v30 % 16 % 3;
      v19 = v30 % 16 / 3 + 10;
      v22 = v19;
    }
    else
    {
      LOBYTE(v20) = 0;
      v22 = ((int)v30 >> 4) + 11;
    }
    goto LABEL_42;
  }
  return result;
}
// 27AD5: conditional instruction was optimized away because al.1>=1
// 27C5D: conditional instruction was optimized away because al.1>=1
// AE430: using guessed type int begBuildTab_AE440_AE430_26C440_26C430;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00027D30) --------------------------------------------------------
char sub_27D30(int a1)
{
  int v1; // eax
  int v2; // esi
  int v3; // ebp
  unsigned int v4; // eax
  unsigned int v5; // ebx
  unsigned __int16 v6; // bx
  char v7; // al
  unsigned __int8 v8; // al
  int v9; // ecx
  char v10; // dl
  char v11; // al
  __int16 v12; // ax
  __int16 v13; // dx
  char v14; // dh
  unsigned __int16 v15; // bx
  int v16; // eax
  int v17; // esi
  int v18; // edi
  _BOOL1 i; // zf
  char v20; // cl
  __int16 v21; // dx
  unsigned int v22; // eax
  unsigned __int8 v23; // al
  unsigned __int16 v24; // dx
  __int16 v25; // ax
  int v26; // ebx
  unsigned int v28; // [esp+0h] [ebp-38h]
  unsigned int v29; // [esp+4h] [ebp-34h]
  unsigned int v30; // [esp+8h] [ebp-30h]
  int v31; // [esp+Ch] [ebp-2Ch]
  unsigned int v32; // [esp+10h] [ebp-28h]
  int v33; // [esp+14h] [ebp-24h]
  unsigned __int16 v34; // [esp+18h] [ebp-20h]
  char v35; // [esp+1Ch] [ebp-1Ch]
  unsigned __int16 v36; // [esp+1Ch] [ebp-1Ch]
  unsigned __int16 v37; // [esp+1Ch] [ebp-1Ch]
  unsigned __int8 v38; // [esp+1Dh] [ebp-1Bh]
  int v39; // [esp+20h] [ebp-18h]
  unsigned __int8 v40; // [esp+24h] [ebp-14h]

  v35 = (unsigned __int16)(*(_WORD *)(a1 + 72) + 128) >> 8;
  v38 = (unsigned __int16)(*(_WORD *)(a1 + 74) + 128) >> 8;
  v39 = *(__int16 *)(a1 + 76) >> 5;
  v1 = (int)begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(unsigned __int8 *)(a1 + 71);
  v2 = 0;
  v3 = *(_DWORD *)v1;
  v29 = *(unsigned __int8 *)(v1 + 5);
  v4 = *(unsigned __int8 *)(v1 + 4);
  if ( typeResolution_12F02E_12F01E == 1 )
  {
    v4 >>= 1;
    v29 >>= 1;
  }
  v32 = v4 >> 1;
  --*(_DWORD *)(a1 + 12);
  v5 = v29 >> 1;
  if ( *(_DWORD *)(a1 + 12) )
  {
    LOBYTE(v36) = v35 - v32;
    HIBYTE(v36) = v38 - v5;
    v34 = v36;
    v6 = v36;
    v28 = v29;
    if ( v29 )
    {
      while ( 1 )
      {
        v7 = *(_BYTE *)(v2 + v3);
        ++v2;
        if ( v7 )
          break;
        ++HIBYTE(v36);
        --v29;
        v6 = v36;
LABEL_28:
        if ( !v29 )
          goto LABEL_29;
      }
      if ( v7 < 0 )
      {
        LOBYTE(v6) = v6 - v7;
        goto LABEL_28;
      }
      v33 = v7;
      while ( 1 )
      {
        v8 = *(_BYTE *)(v2 + v3);
        ++v2;
        if ( v8 < 0xFu )
        {
          if ( v8 <= 6u )
            goto LABEL_27;
          v9 = v6;
          v10 = mapAngle_FC1E0_FC1D0[v6];
          mapHeightmap_DC1E0_DC1D0[v6] += ((__int16)v39 - (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v6]) / *(_DWORD *)(a1 + 12);
          if ( (v10 & 7) != 0 )
            goto LABEL_27;
          v11 = v10;
          goto LABEL_26;
        }
        v31 = (int)v8 >> 4;
        v12 = v8 % 16;
        if ( v31 != 3 )
          break;
        v13 = (unsigned __int8)v12 % 3;
        if ( (_BYTE)v13 )
        {
          if ( (unsigned __int8)v13 > 1u )
          {
            if ( (_BYTE)v13 != 2 )
              goto LABEL_27;
            v9 = v6;
            mapHeightmap_DC1E0_DC1D0[v6] += ((__int16)v39 + 16 - (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v6]) / *(_DWORD *)(a1 + 12);
            v11 = mapAngle_FC1E0_FC1D0[v6];
            if ( (v11 & 7) != 0 )
              goto LABEL_27;
            goto LABEL_26;
          }
          v9 = v6;
          mapHeightmap_DC1E0_DC1D0[v6] += ((__int16)v39 + 12 - (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v6]) / *(_DWORD *)(a1 + 12);
          if ( (mapAngle_FC1E0_FC1D0[v6] & 7) == 0 )
          {
            v11 = mapAngle_FC1E0_FC1D0[v6];
LABEL_26:
            mapAngle_FC1E0_FC1D0[v9] = v11 & 0xF0 | 1;
            sub_33F80(v6, v6);
          }
        }
LABEL_27:
        LOBYTE(v6) = v6 + 1;
        if ( !--v33 )
          goto LABEL_28;
      }
      if ( !(_BYTE)v12 )
        goto LABEL_27;
      v9 = v6;
      v14 = mapAngle_FC1E0_FC1D0[v6];
      mapHeightmap_DC1E0_DC1D0[v6] += (4 * (unsigned __int8)(v12 - 1) + (__int16)v39 - (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v6])
                      / *(_DWORD *)(a1 + 12);
      if ( (v14 & 7) != 0 )
        goto LABEL_27;
      v11 = v14;
      goto LABEL_26;
    }
LABEL_29:
    v30 = v28;
    v37 = v34;
    v15 = v34;
    v16 = *(_DWORD *)(a1 + 12) / 5;
    v17 = 0;
    if ( !(*(_DWORD *)(a1 + 12) % 5) || *(_DWORD *)(a1 + 12) == 1 )
    {
      while ( 1 )
      {
        while ( 1 )
        {
LABEL_31:
          if ( !v30 )
            return v16;
          LOBYTE(v16) = *(_BYTE *)(v17 + v3);
          ++v17;
          if ( (_BYTE)v16 )
            break;
          ++HIBYTE(v37);
          --v30;
          v15 = v37;
        }
        if ( (v16 & 0x80u) == 0 )
          break;
        LOBYTE(v15) = v15 - v16;
      }
      v18 = (char)v16;
      for ( i = (char)v16 == 0; ; i = v18 == 0 )
      {
        if ( i )
          goto LABEL_31;
        v40 = *(_BYTE *)(v17 + v3);
        v20 = v40;
        LOBYTE(v21) = 0;
        v22 = (int)v40 >> 4;
        ++v17;
        if ( v22 )
        {
          if ( v22 <= 2 )
          {
            v23 = v22 + 7;
          }
          else if ( v22 == 3 )
          {
            v21 = v40 % 16 % 3;
            v20 = v40 % 16 / 3 + 10;
            v23 = v20;
          }
          else
          {
            LOBYTE(v21) = 0;
            v23 = ((int)v40 >> 4) + 11;
          }
        }
        else
        {
          v20 = 7;
          LOWORD(v16) = v40 / 7;
          v21 = v40 % 7;
          if ( !(_BYTE)v21 )
            goto LABEL_47;
          v23 = v21 - 1;
        }
        LOBYTE(v16) = sub_33800_33BF0(v21, v20, v15, v23);
LABEL_47:
        LOBYTE(v15) = v15 + 1;
        --v18;
      }
    }
  }
  else
  {
    LOBYTE(v24) = v35 - v32;
    HIBYTE(v24) = v38 - v5;
    LOBYTE(v25) = v32 + v35;
    HIBYTE(v25) = v5 + v38;
    sub_33F80(v24, v25);
    LOBYTE(v16) = *(_BYTE *)(a1 + 70);
    if ( (unsigned __int8)v16 >= 0x30u )
    {
      if ( (unsigned __int8)v16 <= 0x30u )
      {
        *(_WORD *)(164 * *(unsigned __int16 *)(a1 + 42) + dword_AE400_AE3F0() + 29843) = 2;
        LOBYTE(v16) = sub_41E80_421C0(a1);
      }
      else if ( (_BYTE)v16 == 51 )
      {
        *(_DWORD *)(a1 + 12) = *(unsigned __int16 *)(a1 + 44);
        *(_BYTE *)(a1 + 16) |= 1u;
        *(_BYTE *)(a1 + 70) = 52;
        *(_WORD *)(a1 + 76) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
        v26 = (unsigned __int16)(v29 >> 1);
        sub_35F30_362F0(v38, v35, v38, v26, (unsigned __int16)v32, 2u);
        LOBYTE(v16) = sub_35F30_362F0(v38, v35, v38, v26, (unsigned __int16)v32, 5u);
      }
    }
  }
  return v16;
}
// 27E39: conditional instruction was optimized away because al.1>=1
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE430: using guessed type int begBuildTab_AE440_AE430_26C440_26C430;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00028200) --------------------------------------------------------
unsigned __int16 sub_28200(int a1)
{
  char v1; // cl
  char v2; // ch
  unsigned int v3; // edx
  unsigned int v4; // ebx
  unsigned int v5; // esi
  char v6; // dh
  unsigned int v7; // edi
  __int16 v8; // ax
  unsigned __int16 result; // ax
  int v10; // eax
  unsigned __int16 v11; // si
  unsigned __int16 v12; // ax
  unsigned int v13; // ebp
  unsigned int i; // esi
  char v15; // cl
  unsigned __int16 v16; // dx
  char v17; // ch
  unsigned __int16 v18; // ax
  unsigned int v19; // ebp
  unsigned int j; // esi
  char v21; // cl
  __int16 v22; // cx
  unsigned __int16 v23; // ax
  unsigned int v24; // ebp
  unsigned int k; // edx
  unsigned __int16 v26; // si
  char v27; // ch
  int v28; // [esp+0h] [ebp-24h]
  __int16 v29; // [esp+4h] [ebp-20h]

  v1 = (unsigned __int16)(*(_WORD *)(a1 + 72) + 128) >> 8;
  v2 = (unsigned __int16)(*(_WORD *)(a1 + 74) + 128) >> 8;
  if ( typeResolution_12F02E_12F01E == 1 )
    v3 = (int)*(unsigned __int8 *)(6 * *(char *)(a1 + 71) + begBuildTab_AE440_AE430_26C440_26C430 + 4) >> 1;
  else
    v3 = *(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 4);
  v4 = v3;
  if ( typeResolution_12F02E_12F01E == 1 )
    v5 = (int)*(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 5) >> 1;
  else
    v5 = *(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 5);
  LOBYTE(v29) = v1 - (v3 >> 1);
  HIBYTE(v29) = v2 - (v5 >> 1);
  v6 = *(_BYTE *)(a1 + 16);
  v7 = v5;
  if ( (v6 & 2) != 0 )
  {
    if ( !*(_WORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 42) + 29845) && *(_WORD *)(a1 + 26) )
    {
      v28 = (*(unsigned __int16 *)(a1 + 44) - *(__int16 *)(a1 + 48)) / *(__int16 *)(a1 + 26);
      *(_WORD *)(a1 + 48) += v28;
      if ( *(_WORD *)(a1 + 26) == 1 )
      {
        v12 = v29;
        v13 = 0;
        if ( v5 )
        {
          do
          {
            for ( i = 0; i < v4; mapHeightmap_DC1E0_DC1D0[v16] = v17 )
            {
              v15 = mapAngle_FC1E0_FC1D0[v12];
              if ( v15 < 0 )
                mapAngle_FC1E0_FC1D0[v12] = v15 & 0x77 | 8;
              v16 = v12;
              ++i;
              v17 = v28 + mapHeightmap_DC1E0_DC1D0[v12];
              LOBYTE(v12) = v12 + 1;
            }
            ++v13;
            v12 = __PAIR16__(HIBYTE(v12), v29) + 256;
          }
          while ( v13 < v7 );
        }
        result = -10;
        *(_WORD *)(a1 + 26) = -10;
      }
      else if ( *(__int16 *)(a1 + 26) == -1 )
      {
        v18 = v29;
        v19 = 0;
        if ( v5 )
        {
          do
          {
            for ( j = 0; j < v4; LOBYTE(v18) = v18 + 1 )
            {
              v21 = mapAngle_FC1E0_FC1D0[v18];
              if ( (v21 & 8) != 0 )
                mapAngle_FC1E0_FC1D0[v18] = v21 & 0x77 | 0x80;
              ++j;
            }
            ++v19;
            v18 = __PAIR16__(HIBYTE(v18), v29) + 256;
          }
          while ( v19 < v7 );
        }
        result = a1;
        ++*(_WORD *)(a1 + 26);
      }
      else
      {
        result = a1;
        v22 = *(_WORD *)(a1 + 26);
        if ( v22 <= 0 )
        {
          *(_WORD *)(a1 + 26) = v22 + 1;
        }
        else
        {
          v23 = v29;
          v24 = 0;
          if ( v5 )
          {
            do
            {
              for ( k = 0; k < v4; mapHeightmap_DC1E0_DC1D0[v26] = v27 )
              {
                v26 = v23;
                ++k;
                v27 = v28 + mapHeightmap_DC1E0_DC1D0[v23];
                LOBYTE(v23) = v23 + 1;
              }
              ++v24;
              v23 = __PAIR16__(HIBYTE(v23), v29) + 256;
            }
            while ( v24 < v7 );
          }
          result = a1;
          --*(_WORD *)(a1 + 26);
        }
      }
    }
    else
    {
      v10 = dword_AE400_AE3F0();
      *(_WORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 42) + 29843) = 2;
      v11 = *(_WORD *)(a1 + 42);
      *(_WORD *)(164 * v11 + v10 + 29949) = 32 * *(_WORD *)(a1 + 48);
      sub_35F30_362F0(v11, v1, v2, (unsigned __int16)(v7 >> 1), (unsigned __int16)(v4 >> 1), 3u);
      return sub_41E80_421C0(a1);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 16) = v6 | 2;
    *(_WORD *)(a1 + 26) = 10;
    *(_WORD *)(a1 + 48) = *(__int16 *)(a1 + 76) >> 5;
    v8 = sub_36580(v29 - 1, HIBYTE(v29) - 1, v5 + 2, v4 + 2);
    *(_WORD *)(a1 + 44) = v8;
    if ( (unsigned __int16)v8 > 0xDCu )
      *(_WORD *)(a1 + 44) = 220;
    result = *(_WORD *)(a1 + 44);
    if ( *(__int16 *)(a1 + 48) == result )
      *(_WORD *)(a1 + 26) = 0;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE430: using guessed type int begBuildTab_AE440_AE430_26C440_26C430;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (000285C0) --------------------------------------------------------
char sub_285C0(int a1)
{
  __int16 v1; // ax
  __int16 v2; // dx
  int v3; // eax
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // eax
  int v7; // eax
  unsigned int v8; // eax
  unsigned int v9; // ebx
  unsigned int v10; // ebx
  unsigned __int16 v11; // dx
  unsigned int v12; // edi
  int v13; // esi
  char v14; // al
  unsigned __int8 v15; // cl
  __int16 v16; // dx
  __int16 v17; // dx
  unsigned int v18; // eax
  unsigned __int8 v19; // al
  unsigned int v20; // edi
  __int16 *v21; // esi
  char v22; // dh
  int v23; // eax
  unsigned int v24; // ebx
  unsigned int v25; // eax
  unsigned int v26; // esi
  unsigned int m; // edx
  char v28; // cl
  int v30; // [esp+4h] [ebp-60h]
  unsigned int v31; // [esp+8h] [ebp-5Ch]
  int v32; // [esp+Ch] [ebp-58h]
  unsigned int v33; // [esp+10h] [ebp-54h]
  unsigned int v34; // [esp+14h] [ebp-50h]
  unsigned int v35; // [esp+18h] [ebp-4Ch]
  int v36; // [esp+1Ch] [ebp-48h]
  unsigned int v37; // [esp+20h] [ebp-44h]
  int j; // [esp+24h] [ebp-40h]
  _WORD *v39; // [esp+28h] [ebp-3Ch]
  int v40; // [esp+2Ch] [ebp-38h]
  unsigned __int16 v41; // [esp+30h] [ebp-34h]
  __int16 v42; // [esp+30h] [ebp-34h]
  unsigned __int16 v43; // [esp+34h] [ebp-30h]
  int v44; // [esp+38h] [ebp-2Ch]
  unsigned __int16 v45; // [esp+3Ch] [ebp-28h]
  unsigned __int16 v46; // [esp+3Ch] [ebp-28h]
  unsigned __int16 k; // [esp+3Ch] [ebp-28h]
  char v48; // [esp+44h] [ebp-20h]
  unsigned __int8 v49; // [esp+48h] [ebp-1Ch]
  char v50; // [esp+4Ch] [ebp-18h]
  unsigned __int8 i; // [esp+50h] [ebp-14h]

  LOBYTE(v1) = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  v30 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  HIBYTE(v1) = *(_BYTE *)(a1 + 16);
  if ( (v1 & 0x200) == 0 )
  {
    *(_WORD *)(a1 + 26) = 19;
    *(_BYTE *)(a1 + 16) = HIBYTE(v1) | 2;
  }
  v2 = *(_WORD *)(a1 + 26);
  if ( v2 > 0 )
  {
    LOBYTE(v1) = v2 - 1;
    *(_WORD *)(a1 + 26) = v2 - 1;
    if ( v2 == 1 )
    {
      if ( *(_BYTE *)(a1 + 60) )
        *(_WORD *)(a1 + 26) = -25;
      else
        *(_WORD *)(a1 + 26) = -1;
      return v1;
    }
    v1 = 41 * *(_WORD *)(a1 + 42);
    if ( *(_WORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 42) + 29845) )
      return v1;
    v48 = (unsigned __int16)(*(_WORD *)(a1 + 72) + 128) >> 8;
    v50 = (unsigned __int16)(*(_WORD *)(a1 + 74) + 128) >> 8;
    v44 = *(__int16 *)(a1 + 76) >> 5;
    if ( typeResolution_12F02E_12F01E == 1 )
      v3 = (int)*(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 4) >> 1;
    else
      v3 = *(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 4);
    v35 = v3;
    if ( typeResolution_12F02E_12F01E == 1 )
      v4 = (int)*(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 5) >> 1;
    else
      v4 = *(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 5);
    v5 = 2 * v4 * v35;
    v33 = v4;
    v6 = v4 >> 1;
    HIBYTE(v41) = v50 - v6;
    v49 = v6;
    memset((void*)v30, 0, v5);
    for ( i = 1; ; ++i )
    {
      if ( i > *(char *)(a1 + 71) )
      {
        LOBYTE(v1) = v48 - (v35 >> 1);
        LOBYTE(v41) = v1;
        v46 = v41;
        v37 = 0;
        for ( j = 0; v37 < v33; ++v37 )
        {
          v20 = 0;
          if ( v35 )
          {
            v21 = (__int16 *)(v30 + 2 * j);
            do
            {
              if ( *v21 )
              {
                if ( !mapHeightmap_DC1E0_DC1D0[v46] )
                {
                  mapAngle_FC1E0_FC1D0[v46] = mapAngle_FC1E0_FC1D0[v46] & 0xF8 | 1;
                  sub_34200(v46, v46);
                }
                mapHeightmap_DC1E0_DC1D0[v46] += *v21 / *(__int16 *)(a1 + 26);
                if ( *(_WORD *)(a1 + 26) == 1 )
                {
                  v22 = mapAngle_FC1E0_FC1D0[v46];
                  if ( v22 < 0 )
                    mapAngle_FC1E0_FC1D0[v46] = v22 & 0x77 | 8;
                }
              }
              if ( *(_WORD *)(a1 + 26) == 2 )
                mapAngle_FC1E0_FC1D0[v46] &= ~8u;
              ++v21;
              ++v20;
              LOBYTE(v46) = v46 + 1;
              ++j;
            }
            while ( v20 < v35 );
          }
          LOBYTE(v1) = v48 - (v35 >> 1);
          ++HIBYTE(v46);
          LOBYTE(v46) = v1;
        }
        return v1;
      }
      v7 = 6 * i;
      v8 = typeResolution_12F02E_12F01E == 1
         ? (int)*(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + v7 + 4) >> 1
         : *(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + v7 + 4);
      v9 = typeResolution_12F02E_12F01E == 1
         ? (int)*(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * i + 5) >> 1
         : *(unsigned __int8 *)(6 * i + begBuildTab_AE440_AE430_26C440_26C430 + 5);
      v10 = v9 >> 1;
      v36 = *(_DWORD *)(6 * i + begBuildTab_AE440_AE430_26C440_26C430);
      LOBYTE(v11) = v48 - v10;
      HIBYTE(v11) = v50 - (v8 >> 1);
      v31 = v8;
      v43 = v11;
      v45 = v11;
      v34 = (unsigned __int8)(v35 >> 1) - v10;
      v12 = v34 + v35 * (v49 - (v8 >> 1));
      v32 = v35 * (v49 - (v8 >> 1));
      v13 = 0;
      if ( v8 )
        break;
LABEL_46:
      ;
    }
    while ( 1 )
    {
      v14 = *(_BYTE *)(v36 + v13++);
      if ( v14 )
        break;
      ++HIBYTE(v43);
      v45 = v43;
      v32 += v35;
      --v31;
      v12 = v32 + v34;
LABEL_45:
      if ( !v31 )
        goto LABEL_46;
    }
    if ( v14 < 0 )
    {
      LOBYTE(v45) = v45 - v14;
      v12 -= v14;
      goto LABEL_45;
    }
    v40 = v14;
    v39 = (_WORD *)(v30 + 2 * v12);
    while ( 1 )
    {
      if ( (*(_BYTE *)(a1 + 18) & 1) != 0 )
        sub_41160(v45, *(_WORD *)(a1 + 24));
      v15 = *(_BYTE *)(v36 + v13++);
      if ( v15 >= 0xFu )
      {
        v16 = v15 % 16;
        if ( (_BYTE)v16 )
          *v39 = 4 * (unsigned __int8)(v16 - 1) + v44 - (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v45];
      }
      else if ( v15 > 6u )
      {
        *v39 = v44 - (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v45];
      }
      if ( *(__int16 *)(a1 + 26) % 7 && *(_WORD *)(a1 + 26) != 1 )
        goto LABEL_44;
      LOBYTE(v17) = 0;
      v18 = (int)v15 >> 4;
      if ( v18 )
        break;
      v17 = v15 % 7;
      if ( (_BYTE)v17 )
      {
        v19 = v17 - 1;
LABEL_43:
        sub_33800_33BF0(v17, v15, v45, v19);
      }
LABEL_44:
      ++v12;
      LOBYTE(v45) = v45 + 1;
      ++v39;
      if ( !--v40 )
        goto LABEL_45;
    }
    if ( v18 <= 2 )
    {
      v19 = v18 + 7;
    }
    else if ( v18 == 3 )
    {
      v17 = v15 % 16 % 3;
      v19 = v15 % 16 / 3 + 10;
    }
    else
    {
      LOBYTE(v17) = 0;
      v19 = ((int)v15 >> 4) + 11;
    }
    goto LABEL_43;
  }
  *(_WORD *)(a1 + 26) = v2 + 1;
  if ( v2 == -1 )
  {
    if ( typeResolution_12F02E_12F01E == 1 )
      v23 = (int)*(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 4) >> 1;
    else
      v23 = *(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 4);
    v24 = v23;
    if ( typeResolution_12F02E_12F01E == 1 )
      v25 = (int)*(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 5) >> 1;
    else
      v25 = *(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 5);
    LOBYTE(v42) = ((unsigned __int16)(*(_WORD *)(a1 + 72) + 128) >> 8) - (v24 >> 1);
    HIBYTE(v42) = ((unsigned __int16)(*(_WORD *)(a1 + 74) + 128) >> 8) - (v25 >> 1);
    v26 = 0;
    for ( k = v42; v26 < v25; k = __PAIR16__(HIBYTE(k), v42) + 256 )
    {
      for ( m = 0; m < v24; LOBYTE(k) = k + 1 )
      {
        v28 = mapAngle_FC1E0_FC1D0[k];
        if ( (v28 & 8) != 0 )
          mapAngle_FC1E0_FC1D0[k] = v28 & 0x77 | 0x80;
        ++m;
      }
      ++v26;
    }
    *(_WORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 42) + 29843) = 5;
    LOBYTE(v1) = sub_41E80_421C0(a1);
  }
  return v1;
}
// 28880: conditional instruction was optimized away because al.1>=1
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE430: using guessed type int begBuildTab_AE440_AE430_26C440_26C430;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00028D10) --------------------------------------------------------
int sub_28D10(int a1, int a2)
{
  unsigned int v2; // eax
  int result; // eax
  int v4; // eax

  v2 = 9377 * *(_DWORD *)(a2 + 4) + 9439;
  *(_DWORD *)(a2 + 4) = v2;
  switch ( v2 % 0xC )
  {
    case 0u:
    case 1u:
      result = sub_373F0_377B0((int)&word_AE454_AE444, 5, 4);
      a1 = result;
      if ( !result )
        goto LABEL_10;
      *(_BYTE *)(result + 70) = 25;
      break;
    case 2u:
    case 3u:
      result = sub_373F0_377B0((int)&word_AE454_AE444, 5, 14);
      a1 = result;
      if ( !result )
        goto LABEL_10;
      *(_BYTE *)(result + 70) = 85;
      break;
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
      result = sub_373F0_377B0((int)&word_AE454_AE444, 5, 13);
      a1 = result;
      if ( !result )
        goto LABEL_10;
      *(_BYTE *)(result + 70) = 79;
      break;
    case 9u:
    case 0xAu:
    case 0xBu:
      v4 = sub_373F0_377B0((int)&word_AE454_AE444, 5, 12);
      a1 = v4;
      if ( v4 )
        *(_BYTE *)(v4 + 70) = 73;
      goto LABEL_10;
    default:
LABEL_10:
      result = a1;
      break;
  }
  return result;
}
// AE444: using guessed type __int16 word_AE454_AE44X;

//----- (00028DC0) --------------------------------------------------------
unsigned int sub_28DC0(int a1)
{
  unsigned int result; // eax
  __int16 v2; // dx
  int v3; // eax
  int v4; // edx
  __int16 v5; // di
  __int16 v6; // si
  unsigned int v7; // ecx
  unsigned int v8; // eax

  result = sub_29640(a1);
  if ( result )
  {
    if ( result > 1 )
    {
      if ( result == 2 )
        *(_BYTE *)(a1 + 70) = 53;
      return result;
    }
    v2 = *(_WORD *)(a1 + 26);
    if ( v2 > 2 )
    {
      *(_WORD *)(a1 + 26) = v2 - 1;
      *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
      word_AE454_AE444.z = *(_WORD *)(a1 + 76);
      word_AE454_AE444.x += *(_WORD *)(a1 + 80);
      v3 = sub_373F0_377B0((int)&word_AE454_AE444, 5, 4);
      if ( v3 )
        *(_BYTE *)(v3 + 70) = 25;
      v4 = 164 * *(unsigned __int16 *)(a1 + 40);
      if ( v4 + dword_AE400_AE3F0() + 29795 && *(_BYTE *)(v4 + dword_AE400_AE3F0() + 29860) <= 1u )
        *(_WORD *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 40) + 29955) + 528) = 200;
    }
  }
  v5 = *(_WORD *)(a1 + 100);
  if ( v5 )
  {
    if ( v5 != *(_WORD *)(a1 + 144) )
    {
      *(_WORD *)(a1 + 144) = v5;
      sub_55370_558A0(v5, -1, 4);
      *(_BYTE *)(a1 + 16) &= ~1u;
      sub_36FA0_37360(a1, 177);
      *(_WORD *)(a1 + 86) += *(_WORD *)(*(_DWORD *)(164 * *(unsigned __int16 *)(a1 + 100) + dword_AE400_AE3F0() + 29955) + 48);
    }
    *(_WORD *)(a1 + 100) = 0;
    *(_DWORD *)(a1 + 96) = 0;
  }
  if ( !(*(unsigned __int8 *)(a1 + 63) % 40) )
  {
    v6 = *(_WORD *)(a1 + 128);
    *(_DWORD *)(a1 + 140) = *(__int16 *)(a1 + 26) << 8;
    if ( v6 > 5 && v6 == *(_WORD *)(a1 + 26) )
    {
      v7 = *(__int16 *)(a1 + 128);
      v8 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
      *(_DWORD *)(a1 + 4) = v8;
      if ( (int)(v8 % v7) > *(__int16 *)(a1 + 128) - (*(__int16 *)(a1 + 128) >> 4) - 2 )
      {
        *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
        word_AE454_AE444.z = *(_WORD *)(a1 + 76);
        word_AE454_AE444.x += *(_WORD *)(a1 + 80);
        sub_28D10(a1, a1);
      }
    }
  }
  return sub_44FD0(a1);
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;

//----- (00028FE0) --------------------------------------------------------
int sub_28FE0(int a1)
{
  int v1; // eax
  int v2; // ebp
  unsigned int v3; // eax
  int v4; // eax
  int v5; // ebx
  char v6; // al
  unsigned __int8 v7; // al
  __int16 v8; // cx
  int v9; // eax
  int v10; // eax
  int v11; // eax
  __int16 v12; // dx
  char v13; // ch
  char v14; // dh
  char v15; // al
  __int16 v16; // dx
  int v17; // ecx
  unsigned int v18; // eax
  unsigned int v19; // eax
  int v21; // [esp+0h] [ebp-3Ch]
  int v22; // [esp+4h] [ebp-38h]
  unsigned int v23; // [esp+Ch] [ebp-30h]
  unsigned int v24; // [esp+10h] [ebp-2Ch]
  unsigned int v25; // [esp+18h] [ebp-24h]
  int v26; // [esp+1Ch] [ebp-20h]
  __int16 v27; // [esp+20h] [ebp-1Ch]
  __int16 v28; // [esp+24h] [ebp-18h]
  unsigned __int8 v29; // [esp+28h] [ebp-14h]

  v1 = (int)begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(unsigned __int8 *)(a1 + 71);
  v21 = *(_DWORD *)v1;
  v2 = 0;
  v23 = *(unsigned __int8 *)(v1 + 5);
  v3 = *(unsigned __int8 *)(v1 + 4);
  v24 = v3;
  if ( typeResolution_12F02E_12F01E == 1 )
  {
    v23 >>= 1;
    v24 = v3 >> 1;
  }
  LOBYTE(v26) = ((unsigned __int16)(*(_WORD *)(a1 + 72) + 128) >> 8) - (v24 >> 1);
  BYTE1(v26) = ((unsigned __int16)(*(_WORD *)(a1 + 74) + 128) >> 8) - (v23 >> 1);
  if ( *(_BYTE *)(a1 + 65) )
    LOWORD(v4) = sub_36580(v26, SBYTE1(v26), v23, v24);
  else
    v4 = *(__int16 *)(a1 + 76) >> 5;
  v5 = v26;
  v25 = v23;
  if ( v23 )
  {
    v27 = 32 * v4;
    v28 = 32 * (v4 - 10);
    while ( 1 )
    {
      v6 = *(_BYTE *)(v21 + v2++);
      if ( v6 )
        break;
      ++BYTE1(v26);
      v5 = v26;
      --v25;
LABEL_44:
      if ( !v25 )
        goto LABEL_45;
    }
    if ( v6 < 0 )
    {
      LOBYTE(v5) = v5 - v6;
      goto LABEL_44;
    }
    v22 = v6;
    while ( 1 )
    {
      v7 = *(_BYTE *)(v21 + v2++);
      v29 = v7;
      if ( v7 )
      {
        word_AE454_AE444.x = (unsigned __int8)v5 << 8;
        word_AE454_AE444.y = BYTE1(v5) << 8;
        word_AE454_AE444.z = v27;
        if ( (v2 & 7) == 0 )
          word_AE454_AE444.z = v28;
        v8 = *(_WORD *)(a1 + 26);
        if ( v8 > 0 )
        {
          *(_WORD *)(a1 + 26) = v8 - 1;
          if ( v8 == 1 )
          {
            v9 = sub_373F0_377B0((int)&word_AE454_AE444, 5, 12);
            if ( v9 )
              *(_BYTE *)(v9 + 70) = 73;
          }
          else if ( (__int16)(v8 - 1) >= 4 )
          {
            sub_28D10(v5, a1);
          }
          else
          {
            v10 = sub_373F0_377B0((int)&word_AE454_AE444, 5, 4);
            if ( v10 )
              *(_BYTE *)(v10 + 70) = 25;
          }
        }
        v11 = (int)v29 >> 4;
        if ( v11 )
        {
          if ( v11 != 3 )
          {
            v15 = mapAngle_FC1E0_FC1D0[(unsigned __int16)v5] & 0x70;
            mapAngle_FC1E0_FC1D0[(unsigned __int16)v5] &= ~0x80u;
            mapAngle_FC1E0_FC1D0[(unsigned __int16)v5] = v15 | 1;
            sub_34200(v5, v5);
            v16 = v29 % 16;
            if ( (_BYTE)v16 )
            {
              v17 = 4 * (unsigned __int8)(v16 - 1);
              if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v5] <= v17 )
              {
                mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v5] = 0;
              }
              else
              {
                v18 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
                *(_DWORD *)(a1 + 4) = v18;
                if ( (int)(v18 % 0x32) <= 20 )
                {
                  mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v5] -= 4 * (v16 - 1);
                }
                else
                {
                  v19 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
                  *(_DWORD *)(a1 + 4) = v19;
                  mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v5] -= v17 - v19 % 0x14;
                }
              }
            }
            goto LABEL_43;
          }
          mapAngle_FC1E0_FC1D0[(unsigned __int16)v5] &= ~0x80u;
          v12 = v29 % 16 % 3;
          if ( !(_BYTE)v12 )
            goto LABEL_36;
          if ( (unsigned __int8)v12 <= 1u )
          {
            v13 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v5];
            if ( (unsigned __int8)v13 > 0xCu )
              mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v5] = v13 - 12;
          }
          else if ( (_BYTE)v12 != 2 )
          {
LABEL_36:
            sub_34200(v5, v5);
            goto LABEL_43;
          }
          v14 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v5];
          if ( (unsigned __int8)v14 > 0x10u )
            mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v5] = v14 - 16;
          goto LABEL_36;
        }
        mapAngle_FC1E0_FC1D0[(unsigned __int16)v5] &= ~0x80u;
      }
LABEL_43:
      LOBYTE(v5) = v5 + 1;
      if ( !--v22 )
        goto LABEL_44;
    }
  }
LABEL_45:
  sub_36440(v26, BYTE1(v26) - v23, (unsigned __int16)v23, (unsigned __int16)v24);
  return sub_41E80_421C0(a1);
}
// 29110: conditional instruction was optimized away because al.1>=1
// 290B7: variable 'v26' is possibly undefined
// AE430: using guessed type int begBuildTab_AE440_AE430_26C440_26C430;
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE446: using guessed type __int16 word_AE454_AE444.y;
// AE448: using guessed type __int16 word_AE454_AE444.z;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (000293D0) --------------------------------------------------------
int sub_293D0(int a1)
{
  int v1; // eax
  int v2; // edx
  __int16 v3; // ax

  v1 = *(_DWORD *)(a1 + 12);
  ++*(_WORD *)(a1 + 26);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( v1 >= 0 )
  {
    sub_42510_42850(a1);
    if ( (*(_BYTE *)(a1 + 16) & 2) == 0 )
    {
      *(_BYTE *)(a1 + 16) |= 2u;
      sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
      if ( sub_11950(
          (Type_AE400_29795*)a1,
          (Type_AE400_29795*)(dword_AE400_AE3F0()
           + 29795
           + 164 * *(unsigned __int16 *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * *(__int16 *)(a1 + 24) + 29955) + 50))) )
      {
        v2 = dword_AE400_AE3F0();
        v3 = *(_WORD *)(a1 + 24);
        *(_WORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * v3 + 29955) + 50) + 29919) = v3;
        *(_DWORD *)(v2 + 164 * *(unsigned __int16 *)(*(_DWORD *)(v2 + 164 * v3 + 29955) + 50) + 29915) = 10;
        return sub_41E80_421C0(a1);
      }
      sub_47060(a1, 0);
    }
  }
  return sub_41E80_421C0(a1);
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00029540) --------------------------------------------------------
int sub_29540(int a1)
{
  int v1; // eax
  __int16 v2; // ax

  sub_41F50_42290(a1 + 72, (uint16*)&word_AE454_AE444);
  *(_WORD *)(a1 + 150) += word_AE454_AE444.x;
  v1 = *(__int16 *)(a1 + 150);
  *(_WORD *)(a1 + 152) += word_AE454_AE444.y;
  if ( v1 < -128 )
    *(_WORD *)(a1 + 150) = -128;
  if ( *(__int16 *)(a1 + 150) > 128 )
    *(_WORD *)(a1 + 150) = 128;
  if ( *(__int16 *)(a1 + 152) < -128 )
    *(_WORD *)(a1 + 152) = -128;
  if ( *(__int16 *)(a1 + 152) > 128 )
    *(_WORD *)(a1 + 152) = 128;
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  v2 = *(_WORD *)(a1 + 152);
  word_AE454_AE444.x += *(_WORD *)(a1 + 150);
  word_AE454_AE444.y += v2;
  word_AE454_AE444.z = sub_11F50((axis_3d*)(__int16*)&word_AE454_AE444);
  sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  return sub_120B0(a1, 0, *(_WORD *)(a1 + 44));
}
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE446: using guessed type __int16 word_AE454_AE444.y;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (00029640) --------------------------------------------------------
int sub_29640(int a1)
{
  int v1; // ebx
  int v3; // ecx

  *(_WORD *)(a1 + 40) = 0;
  v1 = 0;
  if ( *(int *)(a1 + 12) < 0 )
    return 2;
  if ( *(_WORD *)(a1 + 94) )
  {
    v3 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 90);
    *(_DWORD *)(a1 + 12) = v3;
    if ( v3 < 0 )
    {
      *(_WORD *)(a1 + 38) = *(_WORD *)(a1 + 94);
      return 2;
    }
    *(_WORD *)(a1 + 40) = *(_WORD *)(a1 + 94);
    *(_DWORD *)(a1 + 90) = 0;
    v1 = 1;
    *(_WORD *)(a1 + 94) = 0;
  }
  return v1;
}

//----- (000296A0) --------------------------------------------------------
__int16 sub_296A0(int a1)
{
  int v1; // eax
  __int16 result; // ax

  *(_WORD *)(a1 + 76) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( v1 < 0 )
    return sub_41E80_421C0(a1);
  result = *(_WORD *)(a1 + 26);
  *(_WORD *)(a1 + 26) = result - 1;
  if ( !result )
  {
    result = sub_424F0_42830(a1, 0x39u);
    *(_DWORD *)(a1 + 8) = 5000;
  }
  return result;
}

//----- (00029700) --------------------------------------------------------
int sub_29700(int a1)
{
  int v1; // ebx
  int v2; // eax

  *(_WORD *)(a1 + 76) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  v1 = sub_373F0_377B0((int)&word_AE454_AE444, 5, 5);
  if ( v1 )
  {
    ++*(int *)((char *)&dword_38C9F + dword_AE400_AE3F0());
    v2 = sub_373F0_377B0((int)&word_AE454_AE444, 10, 1);
    if ( v2 )
      *(_WORD *)(v2 + 24) = *(_WORD *)(v1 + 24);
  }
  return sub_41E80_421C0(a1);
}
// 38C9F: using guessed type int dword_38C9F;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;

//----- (00029780) --------------------------------------------------------
__int16 sub_29780(int a1)
{
  int v1; // eax
  __int16 result; // ax
  __int64 v3; // rax
  int v4; // edi
  unsigned int v5; // eax
  unsigned int v6; // eax
  int v7; // eax
  int v8; // esi
  __int16 v9[4]; // [esp+0h] [ebp-1Ch] BYREF
  int v10; // [esp+8h] [ebp-14h] BYREF
  int v11[4]; // [esp+Ch] [ebp-10h] BYREF

  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( v1 < 0 )
    return sub_41E80_421C0(a1);
  if ( (*(_BYTE *)(a1 + 16) & 2) == 0 )
  {
    *(_DWORD *)(a1 + 16) |= 0x10002u;
    sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 30);
  }
  v3 = 768 * *(__int16 *)(a1 + 26);
  sub_374F0((_WORD *)a1, (int)(v3 - (__CFSHL__(HIDWORD(v3), 2) + 4 * HIDWORD(v3))) >> 2, 512);
  sub_120B0(a1, 0, *(unsigned __int16 *)(a1 + 44) / *(int *)(a1 + 8));
  v4 = sub_11410(*(__int16 *)(a1 + 26), *(__int16 *)(a1 + 26));
  if ( v4 )
  {
    *(_DWORD *)(a1 + 4) = 9377 * *(_DWORD *)(a1 + 4) + 9439;
    while ( sub_114B0(v4, (uint32*)v11, (uint32*)&v10) == 1 )
    {
      v5 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
      *(_DWORD *)(a1 + 4) = v5;
      v9[0] = *(_WORD *)(a1 + 72) - 96 + 160 * LOWORD(v11[0]) + v5 % 0x81 - 64;
      v6 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
      *(_DWORD *)(a1 + 4) = v6;
      v9[1] = v6 % 0x81 + 160 * v10 + *(_WORD *)(a1 + 74) - 96 - 64;
      v9[2] = *(_WORD *)(a1 + 76);
      v7 = sub_373F0_377B0((int)v9, 10, 0);
      v8 = v7;
      if ( v7 )
      {
        *(_WORD *)(v7 + 24) = *(_WORD *)(a1 + 24);
        *(_WORD *)(v7 + 30) = *(_WORD *)(a1 + 30);
        *(_DWORD *)(v7 + 16) |= (unsigned int)&loc_10080;
        sub_374F0((_WORD *)v7, 512, 512);
        *(_WORD *)(v8 + 26) = 0;
      }
    }
    sub_11490(v4);
  }
  result = (__int16)(*(_WORD *)(a1 + 26) + 2) / 7;
  *(_WORD *)(a1 + 26) = (__int16)(*(_WORD *)(a1 + 26) + 2) % 7;
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// 29780: using guessed type int var_10[4];

//----- (00029960) --------------------------------------------------------
int sub_29920_29960(int a1)
{
  int v1; // eax
  int result; // eax
  unsigned int i; // ebx
  int v4; // eax

  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( v1 < 0 )
    return sub_41E80_421C0(a1);
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36466); ; i = *(_DWORD *)i )
  {
    result = dword_AE400_AE3F0() + 29795;
    if ( i <= dword_AE400_AE3F0() + 29795 )
      break;
    if ( *(_BYTE *)(i + 65) == 39 && sub_42750((_WORD *)(a1 + 72), (_WORD *)(i + 72)) < 12845056 )
    {
      v4 = (a1 - (dword_AE400_AE3F0() + 29795)) / 164;
      *(_DWORD *)(i + 114) = 100;
      *(_WORD *)(i + 118) = v4;
    }
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00029A10) --------------------------------------------------------
void sub_299D0_29A10(int a1)
{
  int v1; // eax
  _WORD *v2; // esi
  unsigned int i; // ebx
  int v4; // edx

  if ( *(_WORD *)(a1 + 26) )
  {
    v4 = dword_AE400_AE3F0() + 29795;
    --*(_WORD *)(a1 + 26);
    sub_55370_558A0((a1 - v4) / 164, -1, 43);
  }
  else
  {
    v1 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v1 - 1;
    if ( v1 >= 0 )
    {
      v2 = (_WORD *)(dword_AE400_AE3F0() + 29867);
      for ( i = dword_AE400_AE3F0() + 29795; i < dword_AE400_AE3F0() + 193795; i += 164 )
      {
        if ( *(_BYTE *)(i + 64) && *(_WORD *)(i + 24) != *(_WORD *)(a1 + 24) )
        {
          switch ( *(_BYTE *)(i + 64) )
          {
            case 2:
            case 5:
              if ( sub_423D0_42710((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)v2) < 0xA00 )
                *(_DWORD *)(i + 12) = -1;
              break;
            case 3:
              if ( sub_423D0_42710((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)v2) < 0xA00 )
                sub_12B50(a1, i, 0, *(_WORD *)(a1 + 44));
              break;
            case 9:
            case 0xA:
              if ( sub_423D0_42710((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)v2) < 0xA00 )
                *(_DWORD *)(a1 + 12) = 0;
              break;
            default:
              break;
          }
        }
        v2 += 82;
      }
      sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 44);
      sub_55370_558A0(*(_WORD *)(a1 + 24), -1, 44);
      sub_44BE0_44F20(164 * *(__int16 *)(a1 + 24) + dword_AE400_AE3F0() + 29795, 3);
      sub_41E80_421C0(a1);
    }
    else
    {
      sub_41E80_421C0(a1);
    }
  }
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00029BE0) --------------------------------------------------------
void sub_29BA0_29BE0(int a1)
{
    for (int i = 0; i < 256; i++)
    {
        if (unk_902DC[i])
            unk_902DC[i] = (a1 << 16) - 1;
    }
}

//SYNCHRONIZED WITH REMC1
void PrepRot_29C30_29C70(__int16 roll)//1FAC30_
{
  int v1; // edx
  int v2; // edi
  int v3; // eax
  int v4; // ebx
  _DWORD *v5; // edi
  int *v6; // esi
  int v7; // eax
  __int16 v8; // bx
  int v9; // ecx
  int v10; // edx
  _BOOL1 v11; // cf
  int v12; // ebx
  int v13; // edx
  int v14; // eax
  _DWORD *v15; // edi
  int *v16; // esi
  int v17; // eax
  int v18; // ecx
  int v19; // edx
  _DWORD *v20; // edi
  int *v21; // esi
  int v22; // eax
  __int16 v23; // bx
  int v24; // ecx
  int v25; // edx
  int v26; // edx
  int v27; // eax
  _DWORD *v28; // edi
  int *v29; // esi
  int v30; // eax
  __int16 v31; // bx
  int v32; // ecx
  int v33; // edx
  int v34; // edx
  void (*v35)(); // eax
  int32 v35x;
  _DWORD *v36; // edi
  int *v37; // esi
  int v38; // eax
  int v39; // ecx
  int v40; // edx
  _DWORD *v41; // edi
  int *v42; // esi
  int v43; // eax
  __int16 v44; // bx
  int v45; // ecx
  int v46; // edx
  int v47; // eax
  _DWORD *v48; // edi
  int *v49; // esi
  int v50; // eax
  __int16 v51; // bx
  int v52; // ecx
  int v53; // edx
  int *v54; // esi
  _DWORD *v55; // edi
  int v56; // eax
  int v57; // ecx
  int v58; // edx
  _DWORD *v59; // edi
  int *v60; // esi
  int v61; // eax
  __int16 v62; // bx
  int v63; // ecx
  int v64; // edx
  _DWORD *v65; // edi
  int *v66; // esi
  int v67; // eax
  __int16 v68; // bx
  int v69; // ecx
  int v70; // edx
  _DWORD *v71; // edi
  int *v72; // esi
  int v73; // eax
  int v74; // ecx
  int v75; // edx
  _DWORD *v76; // edi
  int *v77; // esi
  int v78; // eax
  __int16 v79; // bx
  int v80; // ecx
  int v81; // edx
  _DWORD *result; // eax
  int v83; // edx
  int v84; // ebx
  int v85; // [esp+0h] [ebp-1Ch]
  int v86; // [esp+0h] [ebp-1Ch]
  int v87; // [esp+0h] [ebp-1Ch]
  int v88; // [esp+0h] [ebp-1Ch]
  int v89; // [esp+4h] [ebp-18h]
  int v90; // [esp+4h] [ebp-18h]
  int v91; // [esp+4h] [ebp-18h]
  int v92; // [esp+4h] [ebp-18h]
  int v93; // [esp+8h] [ebp-14h]
  int v94; // [esp+8h] [ebp-14h]
  int v95; // [esp+8h] [ebp-14h]
  int v96; // [esp+8h] [ebp-14h]
  int v97; // [esp+8h] [ebp-14h]
  int v98; // [esp+8h] [ebp-14h]
  int v99; // [esp+8h] [ebp-14h]
  int v100; // [esp+8h] [ebp-14h]
  int v101; // [esp+8h] [ebp-14h]
  int v102; // [esp+Ch] [ebp-10h]
  __int16 v103; // [esp+18h] [ebp-4h]
  __int16 v104; // [esp+18h] [ebp-4h]
  __int16 v105; // [esp+18h] [ebp-4h]
  __int16 v106; // [esp+18h] [ebp-4h]
  __int16 v107; // [esp+18h] [ebp-4h]
  __int16 v108; // [esp+18h] [ebp-4h]
  __int16 v109; // [esp+18h] [ebp-4h]
  __int16 v110; // [esp+18h] [ebp-4h]

  //fix
  v11 = 0;
  //fix

  v1 = roll & 0x7FF;
  dword_B5D28_B5D18 = v1 >> 8;
  v102 = v1 - 512;
  v2 = v1 - 1024;
  v3 = v1 - 512;
  v4 = v1 - 1536;
  switch ( v1 >> 8 )
  {
    case 0:
      sinRoll_B5D18_B5D08 = cos_90B4C[v1];
      cosRoll_B5CE0_B5CD0 = sin_9134C[v1];
      v89 = pitchViewPort_93AD4;
      v93 = (unsigned __int16)widthViewPort_93AD8;
      dword_B5CF4_B5CE4 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
      v103 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
      v5 = (_DWORD*)dword_B3EA0_B3E90x;
      v6 = (int *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
      v7 = 0;
      v8 = 0;
      v9 = 1;
      v10 = 0;
      do
      {
        v5[1] = v7;
        v5[2] = v10;
        v11 = __CFADD__(v103, v8);
        v8 += v103;
        if ( v11 )
        {
          v7 += v89;
          ++v10;
          *v6++ = v9;
        }
        v5 += 3;
        ++v7;
        ++v9;
        --v93;
      }
      while ( v93 );
      dword_B5D24_B5D14 = v10;
      dword_B5D2C_B5D1C = -v10;
      v12 = (unsigned __int16)heightViewPort_93ADC - v10;
      dword_B5D30_B5D20 = (unsigned __int16)heightViewPort_93ADC;
      dword_B5D34_B5D24 = (unsigned __int16)widthViewPort_93AD8;
      v13 = (unsigned __int16)heightViewPort_93ADC + (unsigned __int16)widthViewPort_93AD8;
      v14 = -1 - dword_B5D2C_B5D1C;
      goto LABEL_62;
    case 1:
      sinRoll_B5D18_B5D08 = cos_90B4C[v1];
      cosRoll_B5CE0_B5CD0 = sin_9134C[v1];
      v85 = pitchViewPort_93AD4;
      v94 = (unsigned __int16)heightViewPort_93ADC;
      if ( v1 == 256 )
      {
        v15 = (_DWORD*)dword_B3EA0_B3E90x;
        v16 = (int *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
        dword_B5CF4_B5CE4 = 0x10000;
        v17 = 0;
        v18 = 1;
        v19 = 0;
        do
        {
          v15[1] = v17;
          v15[2] = v19++;
          *v16++ = v18;
          v15 += 3;
          v17 += v85 + 1;
          ++v18;
          --v94;
        }
        while ( v94 );
        dword_B5D24_B5D14 = (unsigned __int16)heightViewPort_93ADC;
        dword_B5D2C_B5D1C = -(unsigned __int16)heightViewPort_93ADC;
      }
      else
      {
        dword_B5CF4_B5CE4 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
        v104 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
        v20 = (_DWORD*)dword_B3EA0_B3E90x;
        v21 = (int *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
        v22 = 0;
        v23 = 0;
        v24 = 1;
        v25 = 0;
        do
        {
          v20[1] = v22;
          v20[2] = v25;
          v11 = __CFADD__(v104, v23);
          v23 += v104;
          if ( v11 )
          {
            ++v22;
            ++v25;
            *v21++ = v24;
          }
          v20 += 3;
          v22 += v85;
          ++v24;
          --v94;
        }
        while ( v94 );
        dword_B5D24_B5D14 = v25;
        dword_B5D2C_B5D1C = -v25;
      }
      dword_B5D1C_B5D0C = (unsigned __int16)widthViewPort_93AD8 + dword_B5D2C_B5D1C;
      dword_B5D30_B5D20 = (unsigned __int16)widthViewPort_93AD8;
      dword_B5D20_B5D10 = (unsigned __int16)heightViewPort_93ADC + (unsigned __int16)widthViewPort_93AD8;
      dword_B5D34_B5D24 = (unsigned __int16)heightViewPort_93ADC;
      dword_B5D04_B5CF4 = -1;
      dword_B5CD8_B5CC8 = 4 * (-1 - dword_B5D2C_B5D1C) + (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360;
      break;
    case 2:
      v26 = cos_90B4C[v3];
      v27 = sin_9134C[v3];
      sinRoll_B5D18_B5D08 = v26;
      cosRoll_B5CE0_B5CD0 = v27;
      v86 = pitchViewPort_93AD4;
      v95 = (unsigned __int16)heightViewPort_93ADC;
      dword_B5CF4_B5CE4 = (v26 << 8) / (v27 >> 8);
      v105 = (v26 << 8) / (v27 >> 8);
      v28 = (_DWORD*)dword_B3EA0_B3E90x;
      v29 = (int *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = 0;
      do
      {
        v28[1] = v30;
        v28[2] = v33;
        v11 = __CFADD__(v105, v31);
        v31 += v105;
        if ( v11 )
        {
          --v30;
          ++v33;
          *v29++ = v32;
        }
        v28 += 3;
        v30 += v86;
        ++v32;
        --v95;
      }
      while ( v95 );
      dword_B5D24_B5D14 = v33;
      dword_B5D2C_B5D1C = -v33;
      dword_B5D30_B5D20 = (unsigned __int16)widthViewPort_93AD8;
      dword_B5D34_B5D24 = (unsigned __int16)heightViewPort_93ADC;
      dword_B5D20_B5D10 = (unsigned __int16)heightViewPort_93ADC + (unsigned __int16)widthViewPort_93AD8;
      dword_B5D04_B5CF4 = -1;
      dword_B5D1C_B5D0C = (unsigned __int16)widthViewPort_93AD8 - v33;
      dword_B5CD8_B5CC8 = 4 * (v33 - 1) + (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360;
      break;
    case 3:
      v34 = cos_90B4C[v3];
      v35x = sin_9134C[v3];
      sinRoll_B5D18_B5D08 = v34;
      cosRoll_B5CE0_B5CD0 = v35x;
      v90 = pitchViewPort_93AD4;
      v96 = (unsigned __int16)widthViewPort_93AD8;
      if ( v102 == 256 )
      {
        v36 = (_DWORD*)dword_B3EA0_B3E90x;
        v37 = (int *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
        dword_B5CF4_B5CE4 = 0x10000;
        v38 = 0;
        v39 = 1;
        v40 = 0;
        do
        {
          v36[1] = v38;
          v36[2] = v40++;
          *v37++ = v39;
          v36 += 3;
          v38 = v90 + v38 - 1;
          ++v39;
          --v96;
        }
        while ( v96 );
        dword_B5D24_B5D14 = (unsigned __int16)widthViewPort_93AD8;
        dword_B5D2C_B5D1C = -(unsigned __int16)widthViewPort_93AD8;
      }
      else
      {
        dword_B5CF4_B5CE4 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
        v106 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
        v41 = (_DWORD*)dword_B3EA0_B3E90x;
        v42 = (int *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
        v43 = 0;
        v44 = 0;
        v45 = 1;
        v46 = 0;
        do
        {
          v41[1] = v43;
          v41[2] = v46;
          v11 = __CFADD__(v106, v44);
          v44 += v106;
          if ( v11 )
          {
            v43 += v90;
            ++v46;
            *v42++ = v45;
          }
          v41 += 3;
          --v43;
          ++v45;
          --v96;
        }
        while ( v96 );
        dword_B5D24_B5D14 = v46;
        dword_B5D2C_B5D1C = -v46;
      }
      dword_B5D1C_B5D0C = (unsigned __int16)heightViewPort_93ADC + dword_B5D2C_B5D1C;
      dword_B5D30_B5D20 = (unsigned __int16)heightViewPort_93ADC;
      dword_B5D34_B5D24 = (unsigned __int16)widthViewPort_93AD8;
      dword_B5D20_B5D10 = (unsigned __int16)heightViewPort_93ADC + (unsigned __int16)widthViewPort_93AD8;
      dword_B5CD8_B5CC8 = 4 * (-1 - dword_B5D2C_B5D1C) + (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360;
      v47 = -pitchViewPort_93AD4;
      goto LABEL_63;
    case 4:
      sinRoll_B5D18_B5D08 = cos_90B4C[v2];
      cosRoll_B5CE0_B5CD0 = sin_9134C[v2];
      v91 = -pitchViewPort_93AD4;
      v97 = (unsigned __int16)widthViewPort_93AD8;
      dword_B5CF4_B5CE4 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
      v107 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
      v48 = (_DWORD*)dword_B3EA0_B3E90x;
      v49 = (int *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
      v50 = 0;
      v51 = 0;
      v52 = 1;
      v53 = 0;
      do
      {
        v48[1] = v50;
        v48[2] = v53;
        v11 = __CFADD__(v107, v51);
        v51 += v107;
        if ( v11 )
        {
          v50 += v91;
          ++v53;
          *v49++ = v52;
        }
        v48 += 3;
        --v50;
        ++v52;
        --v97;
      }
      while ( v97 );
      dword_B5D24_B5D14 = v53;
      dword_B5D2C_B5D1C = -v53;
      dword_B5D30_B5D20 = (unsigned __int16)heightViewPort_93ADC;
      dword_B5D34_B5D24 = (unsigned __int16)widthViewPort_93AD8;
      dword_B5D20_B5D10 = (unsigned __int16)heightViewPort_93ADC + (unsigned __int16)widthViewPort_93AD8;
      dword_B5D1C_B5D0C = (unsigned __int16)heightViewPort_93ADC - v53;
      v47 = -pitchViewPort_93AD4;
      dword_B5CD8_B5CC8 = 4 * (v53 - 1) + (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360;
      goto LABEL_63;
    case 5:
      sinRoll_B5D18_B5D08 = cos_90B4C[v2];
      cosRoll_B5CE0_B5CD0 = sin_9134C[v2];
      v87 = -pitchViewPort_93AD4;
      v98 = (unsigned __int16)heightViewPort_93ADC;
      if ( v1 == 1280 )
      {
        dword_B5CF4_B5CE4 = 0x10000;
        v54 = (int *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
        v55 = (_DWORD*)dword_B3EA0_B3E90x;
        v56 = 0;
        v57 = 1;
        v58 = 0;
        do
        {
          v55[1] = v56;
          v55[2] = v58++;
          *v54++ = v57;
          v55 += 3;
          v56 = v87 + v56 - 1;
          ++v57;
          --v98;
        }
        while ( v98 );
        dword_B5D24_B5D14 = (unsigned __int16)heightViewPort_93ADC;
        dword_B5D2C_B5D1C = -(unsigned __int16)heightViewPort_93ADC;
      }
      else
      {
        dword_B5CF4_B5CE4 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
        v108 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
        v59 = (_DWORD*)dword_B3EA0_B3E90x;
        v60 = (int *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
        v61 = 0;
        v62 = 0;
        v63 = 1;
        v64 = 0;
        do
        {
          v59[1] = v61;
          v59[2] = v64;
          v11 = __CFADD__(v108, v62);
          v62 += v108;
          if ( v11 )
          {
            --v61;
            ++v64;
            *v60++ = v63;
          }
          v59 += 3;
          v61 += v87;
          ++v63;
          --v98;
        }
        while ( v98 );
        dword_B5D24_B5D14 = v64;
        dword_B5D2C_B5D1C = -v64;
      }
      dword_B5D30_B5D20 = (unsigned __int16)widthViewPort_93AD8;
      dword_B5D34_B5D24 = (unsigned __int16)heightViewPort_93ADC;
      dword_B5D20_B5D10 = (unsigned __int16)heightViewPort_93ADC + (unsigned __int16)widthViewPort_93AD8;
      dword_B5D1C_B5D0C = (unsigned __int16)widthViewPort_93AD8 + dword_B5D2C_B5D1C;
      dword_B5D04_B5CF4 = 1;
      dword_B5CD8_B5CC8 = 4 * (-1 - dword_B5D2C_B5D1C) + (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360;
      break;
    case 6:
      sinRoll_B5D18_B5D08 = cos_90B4C[v4];
      cosRoll_B5CE0_B5CD0 = sin_9134C[v4];
      v88 = -pitchViewPort_93AD4;
      v99 = (unsigned __int16)heightViewPort_93ADC;
      dword_B5CF4_B5CE4 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
      v109 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
      v65 = (_DWORD*)dword_B3EA0_B3E90x;
      v66 = (int *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
      v67 = 0;
      v68 = 0;
      v69 = 1;
      v70 = 0;
      do
      {
        v65[1] = v67;
        v65[2] = v70;
        v11 = __CFADD__(v109, v68);
        v68 += v109;
        if ( v11 )
        {
          ++v67;
          ++v70;
          *v66++ = v69;
        }
        v65 += 3;
        v67 += v88;
        ++v69;
        --v99;
      }
      while ( v99 );
      dword_B5D24_B5D14 = v70;
      dword_B5D2C_B5D1C = -v70;
      dword_B5D30_B5D20 = (unsigned __int16)widthViewPort_93AD8;
      dword_B5D34_B5D24 = (unsigned __int16)heightViewPort_93ADC;
      dword_B5D20_B5D10 = (unsigned __int16)heightViewPort_93ADC + (unsigned __int16)widthViewPort_93AD8;
      dword_B5D1C_B5D0C = (unsigned __int16)widthViewPort_93AD8 - v70;
      dword_B5D04_B5CF4 = 1;
      dword_B5CD8_B5CC8 = 4 * (v70 - 1) + (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360;
      break;
    case 7:
      sinRoll_B5D18_B5D08 = cos_90B4C[v4];
      cosRoll_B5CE0_B5CD0 = sin_9134C[v4];
      v92 = -pitchViewPort_93AD4;
      v100 = (unsigned __int16)widthViewPort_93AD8;
      if ( v1 == 1792 )
      {
        v71 = (_DWORD*)dword_B3EA0_B3E90x;
        v72 = (int *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
        dword_B5CF4_B5CE4 = 0x10000;
        v73 = 0;
        v74 = 1;
        v75 = 0;
        do
        {
          v71[1] = v73;
          v71[2] = v75++;
          *v72++ = v74;
          v71 += 3;
          v73 += v92 + 1;
          ++v74;
          --v100;
        }
        while ( v100 );
        dword_B5D24_B5D14 = (unsigned __int16)widthViewPort_93AD8;
        dword_B5D2C_B5D1C = -(unsigned __int16)widthViewPort_93AD8;
      }
      else
      {
        dword_B5CF4_B5CE4 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
        v110 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
        v76 = (_DWORD*)dword_B3EA0_B3E90x;
        v77 = (int *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
        v78 = 0;
        v79 = 0;
        v80 = 1;
        v81 = 0;
        do
        {
          v76[1] = v78;
          v76[2] = v81;
          v11 = __CFADD__(v110, v79);
          v79 += v110;
          if ( v11 )
          {
            v78 += v92;
            ++v81;
            *v77++ = v80;
          }
          v76 += 3;
          ++v78;
          ++v80;
          --v100;
        }
        while ( v100 );
        dword_B5D24_B5D14 = v81;
        dword_B5D2C_B5D1C = -v81;
      }
      v12 = (unsigned __int16)heightViewPort_93ADC + dword_B5D2C_B5D1C;
      dword_B5D30_B5D20 = (unsigned __int16)heightViewPort_93ADC;
      dword_B5D34_B5D24 = (unsigned __int16)widthViewPort_93AD8;
      v13 = (unsigned __int16)heightViewPort_93ADC + (unsigned __int16)widthViewPort_93AD8;
      v14 = -1 - dword_B5D2C_B5D1C;
LABEL_62:
      dword_B5D20_B5D10 = v13;
      dword_B5CD8_B5CC8 = 4 * v14 + (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360;
      v47 = pitchViewPort_93AD4;
      dword_B5D1C_B5D0C = v12;
LABEL_63:
      dword_B5D04_B5CF4 = v47;
      break;
    default:
      break;
  }
  //fix it - size of dword_B3EA0_B3E90
  if (dword_B5D34_B5D24 > 0x140)
      allert_error();
  //fix it
  v101 = dword_B5D34_B5D24 - 1;
  for ( result = (_DWORD*)dword_B3EA0_B3E90x; v101 >= 0; --v101 )
  {
    v83 = result[1];
    v84 = *(result - 2);
    result += 3;
    *(result - 3) = v83 - v84;
  }
}

int compare_index_2A700 = 0;
int compare_index_1FBB90 = 0;
int compare_index_1FBFF0 = 0;
int compare_index_next1 = 0;
int compare_index_1FC68A = 0;
int compare_index_1FBBA0 = 0;
int compare_index_1FBFCB = 0;

void DrawSkyTerrainParticles_2A700_2A740(int a1, __int16 a2, __int16 a3, __int16 a4, int a5, int a6, __int16 a7, int a8)//1FB700_
{
  int v8; // eax
  int v9; // edx
  int v10; // ecx
  int v11; // eax
  int v12; // edx
  int v13; // edx
  int v14; // eax
  int v15; // ebp
  int v16; // eax
  int v17; // edi
  char v18; // dl
  int v19; // ecx
  int v20; // edi
  int v21; // esi
  _DWORD *v22; // eax
  char v23; // dl
  int v24; // ebp
  unsigned int v25; // edx
  char v26; // cl
  int v27; // eax
  int v28; // ebx
  int v29; // ebp
  int v30; // ebx
  __int16 v31; // si
  char *v32; // edi
  int v33; // eax
  __int16 v34; // cx
  int v35; // eax
  int v36; // ebx
  int v37; // esi
  int v38; // ebx
  unsigned __int16 v39; // dx
  __int16 v40; // ax
  int v41; // eax
  int v42; // eax
  int v43; // edx
  unsigned __int16 v44; // bx
  unsigned __int8 v45; // al
  char v46; // dl
  _BYTE *v47; // eax
  char v48; // dl
  char v49; // bh
  int v50; // ebx
  int v51; // eax
  int v52; // edi
  int v53; // ecx
  int v54; // esi
  int v55; // edx
  int v56; // edx
  int v57; // ecx
  int v58; // ecx
  int v59; // edi
  int v60; // esi
  int v61; // edi
  int v62; // ebx
  int v63; // eax
  char v64; // dl
  char v65; // ch
  char v66; // dl
  int v67; // eax
  int v68; // ebx
  int v69; // eax
  char v70; // ch
  int v71; // ebx
  char v72; // dl
  int *v73; // esi
  char v74; // dl
  unsigned int v75; // ebp
  unsigned int v76; // ebx
  char v77; // dl
  char v78; // dl
  int v79; // eax
  unsigned int v80; // ebx
  int v81; // eax
  char v82; // cl
  int v83; // eax
  int v84; // ebx
  char v85; // dl
  int *v86; // esi
  int v87; // eax
  char v88; // dh
  int v89; // edi
  int *v90; // esi
  int v91; // ebx
  int v92; // eax
  char v93; // dl
  char v94; // dh
  char v95; // ah
  char v96; // dl
  char v97; // dh
  int v98; // eax
  int v99; // ebx
  char v100; // ch
  int v101; // eax
  int v102; // ebx
  char v103; // dl
  char v104; // dh
  int *v105; // ebp
  int v106; // ebp
  char v107; // ch
  unsigned int v108; // ebp
  unsigned int v109; // ebx
  char v110; // dl
  char v111; // ch
  char v112; // dh
  char v113; // ah
  char v114; // dl
  char v115; // dh
  int v116; // eax
  unsigned int v117; // ebx
  int v118; // eax
  int v119; // eax
  char v120; // ch
  int v121; // ebx
  char v122; // dl
  char v123; // dh
  char v124; // ch
  int v125; // eax
  int v126; // ebx
  int v127; // esi
  int v128; // eax
  int v129; // ebx
  unsigned __int16 v130; // dx
  __int16 v131; // ax
  int v132; // eax
  int v133; // eax
  unsigned __int16 v134; // bx
  unsigned int v135; // eax
  _BYTE *v136; // eax
  char v137; // ch
  int v138; // eax
  int v139; // ebx
  int v140; // edx
  void (*v141)(); // eax
  int32 v141x;
  int v142; // eax
  int v143; // ecx
  int v144; // edx
  int v145; // ecx
  int v146; // edx
  int *v147; // esi
  int v148; // ebp
  int v149; // ebx
  char v150; // dl
  char v151; // dh
  char v152; // al
  char v153; // cl
  unsigned __int8 v154; // dl
  char v155; // dh
  char v156; // dh
  int v157; // ebx
  unsigned int v158; // esi
  unsigned int v159; // ebx
  char v160; // dl
  char v161; // al
  char v162; // dh
  char v163; // cl
  unsigned __int8 v164; // dl
  unsigned int v165; // ebx
  char v166; // dh
  int v167; // ebx
  int v168; // edi
  int v169; // ebx
  char v170; // dl
  char v171; // dh
  char v172; // ah
  char v173; // dl
  char v174; // dh
  int v175; // eax
  int v176; // ebx
  char v177; // ch
  int v178; // eax
  int v179; // ebx
  char v180; // dl
  char v181; // dh
  char v182; // dl
  unsigned int v183; // ebp
  unsigned int v184; // ebx
  char v185; // dl
  char v186; // dh
  char v187; // al
  char v188; // dl
  char v189; // dh
  int v190; // eax
  unsigned int v191; // ebx
  int v192; // eax
  char v193; // cl
  int v194; // ebx
  char v195; // dl
  char v196; // dh
  int v198x[5]; // [esp+0h] [ebp-E0h] BYREF
  //int v199; // [esp+4h] [ebp-DCh]
  //int v200; // [esp+8h] [ebp-D8h]
  //int v201; // [esp+Ch] [ebp-D4h]
  //int *v202; // [esp+10h] [ebp-D0h]
  int v203x[5]; // [esp+18h] [ebp-C8h] BYREF
  //int v204; // [esp+1Ch] [ebp-C4h]
  //int v205; // [esp+20h] [ebp-C0h]
  //int v206; // [esp+24h] [ebp-BCh]
  //int *v207; // [esp+28h] [ebp-B8h]
  int v208x[5]; // [esp+30h] [ebp-B0h] BYREF
  //int v209; // [esp+34h] [ebp-ACh]
  //int v210; // [esp+38h] [ebp-A8h]
  //int v211; // [esp+3Ch] [ebp-A4h]
  //int v212; // [esp+40h] [ebp-A0h]
  int v213x[5]; // [esp+48h] [ebp-98h] BYREF
  //int v214; // [esp+4Ch] [ebp-94h]
  //int v215; // [esp+50h] [ebp-90h]
  //int v216; // [esp+54h] [ebp-8Ch]
  //int v217; // [esp+58h] [ebp-88h]
  int v218; // [esp+60h] [ebp-80h]
  int v219; // [esp+64h] [ebp-7Ch]
  int v220; // [esp+68h] [ebp-78h]
  _BYTE *v221; // [esp+6Ch] [ebp-74h]
  int v222; // [esp+70h] [ebp-70h]
  int v223; // [esp+74h] [ebp-6Ch]
  void (*v224)(); // [esp+78h] [ebp-68h]
  int32 v224x;
  int v225; // [esp+7Ch] [ebp-64h]
  int v226; // [esp+80h] [ebp-60h]
  int v227; // [esp+84h] [ebp-5Ch]
  int v228; // [esp+88h] [ebp-58h]
  int v229; // [esp+8Ch] [ebp-54h]
  int v230; // [esp+90h] [ebp-50h]
  unsigned __int16 v231; // [esp+94h] [ebp-4Ch]
  char v232; // [esp+98h] [ebp-48h]
  char v233; // [esp+9Ch] [ebp-44h]
  char v234; // [esp+A0h] [ebp-40h]
  char v235; // [esp+A4h] [ebp-3Ch]
  char v236; // [esp+A8h] [ebp-38h]
  char v237; // [esp+ACh] [ebp-34h]
  char v238; // [esp+B0h] [ebp-30h]
  char v239; // [esp+B4h] [ebp-2Ch]
  char v240; // [esp+B8h] [ebp-28h]
  char v241; // [esp+BCh] [ebp-24h]
  char v242; // [esp+C0h] [ebp-20h]
  char v243; // [esp+C4h] [ebp-1Ch]
  char v244; // [esp+C8h] [ebp-18h]
  char v245; // [esp+CCh] [ebp-14h]

  byte_B5D3F_B5D2F = *(_BYTE *)(dword_AE400_AE3F0() + 8598);
  heightViewPort_B5CE4_B5CD4 = (int)(unsigned __int16)heightViewPort_93ADC >> 1;
  posX_B5D3C_B5D2C = a2;
  yaw_B5D38_B5D28 = a4 & 0x7FF;
  posY_B5D3A_B5D2A = a3;
  v8 = (a4 & 0x7FF) + 256;
  posZ_B5CF8_B5CE8 = a5;
  v9 = cos_90B4C[v8 + 0x100];
  dword_B5D08_B5CF8 = dword_902B0 + ((int)(unsigned __int16)widthViewPort_93AD8 >> 1);
  sin_B5CDC_B5CCC = v9;
  v10 = dword_9074C[v8];
  v223 = (v8 >> 9) & 3;
  v11 = ((((a4 & 0x7FF) + 256) & 0x1FF) - 256) & 0x7FF;
  v12 = cos_90B4C[v11];
  v224x = sin_9134C[v11];
  cos_B5D10_B5D00 = v10;
  v225 = v12;
  PrepRot_29C30_29C70(-a7 & 0x7FF);
  fowDist_B5D14_B5D04 = (a8
               * Distance_410CE_4140E(
                   (unsigned __int16)widthViewPort_93AD8 * (unsigned __int16)widthViewPort_93AD8
                 + (unsigned __int16)heightViewPort_93ADC * (unsigned __int16)heightViewPort_93ADC)) >> 8;
  v221 = (uint8*)&unk_902B4 + 10 * v223;
  v13 = (unsigned __int8)a3;
  switch ( v223 )
  {
    case 0:
      a1 = -(unsigned __int8)a2 - 4864;
      v226 = (unsigned __int8)a3 - 256;
      break;
    case 1:
      v13 = -(unsigned __int8)a3;
      v14 = -(unsigned __int8)a2;
      goto LABEL_6;
    case 2:
      a1 = (unsigned __int8)a2 - 4864;
      v226 = -(unsigned __int8)a3;
      break;
    case 3:
      v14 = (unsigned __int8)a2 - 256;
LABEL_6:
      a1 = v13 - 4864;
      v226 = v14;
      break;
    default:
      break;
  }
  v15 = a1 * v225;
  v235 = 40;
  v218 = v224x << 8;
  v228 = a1 * v224x;
  v229 = v225 << 8;
  v16 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  v17 = v225 << 8;
  do
  {
    v18 = 21;
    v19 = v228 >> 16;
    do
    {
      *(_DWORD *)v16 = v19;
      *(_DWORD *)(v16 + 12) = v15 >> 16;
      if ( a1 < 0 )
        *(_WORD *)(v16 + 38) = 0;
      else
        *(_WORD *)(v16 + 38) = 4;
      v16 += 1760;
      --v18;
    }
    while ( v18 );
    v16 -= 36916;
    a1 += 256;
    v15 += v17;
    v228 += v218;
    --v235;
  }
  while ( v235 );
  v20 = v224x * v226;
  v230 = v224x << 8;
  v219 = v225 << 8;
  v21 = v225 * v226;
  v22 = (_DWORD *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  v234 = 21;//test next of this
  do
  {
    v23 = 40;
    do
    {
      *v22 -= v21 >> 16;
      v24 = v22[3];
      v22 += 11;
      *(v22 - 8) = (v20 >> 16) + v24;
      --v23;
    }
    while ( v23 );
    v20 += v230;
    v21 += v219;
    v226 += 256;
    --v234;
  }
  while ( v234 );
  dword_B5D0C_B5CFC = 23658496;
  dword_B5CF0_B5CE0 = 14745600;
  v25 = (unsigned __int16)widthViewPort_93AD8;
  dword_B5D00_B5CF0 = 26214400;
  dword_B5CEC_B5CDC = 8912896;
  v26 = *v221;
  dword_B5CFC_B5CEC = ((unsigned __int16)widthViewPort_93AD8 * a6) >> 8;
  //  adress 1FBA52_
  LOBYTE(v231) = v26 + HIBYTE(a2);
  HIBYTE(v231) = v221[1] + HIBYTE(a3);
  v27 = a7 & 0x7FF;
  v28 = cos_90B4C[v27];
  cos_B5CE8_B5CD8 = sin_9134C[v27];
  sin_B5CD4_B5CC4 = v28;
  v29 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  if ( str_AE400_AE3F0->set.mod3D_8603 == 2 && !str_AE400_AE3F0->set.var_u8_8606 )
  {
    v30 = pitchViewPort_93AD4 - (unsigned __int16)widthViewPort_93AD8;
    v33 = (int)(unsigned __int16)widthViewPort_93AD8 >> 2;
    v31 = heightViewPort_93ADC;
    v32 = (char *)beginFrame_93ACC;
    v25 = v33;
    LOBYTE(v33) = 64;
    goto LABEL_24;
  }
  if ( !*(_BYTE *)(dword_AE400_AE3F0() + 8599) )
  {
    v30 = pitchViewPort_93AD4 - (unsigned __int16)widthViewPort_93AD8;
    v33 = (int)(unsigned __int16)widthViewPort_93AD8 >> 2;
    v31 = heightViewPort_93ADC;
    v32 = (char *)beginFrame_93ACC;
    v25 = v33;
    LOBYTE(v33) = -1;
LABEL_24:
    BYTE1(v33) = v33;
    v34 = v33;
    v35 = v33 << 16;
    LOWORD(v35) = v34;
    do
    {
      memset(v32, v35, v25);
      v32 += 4 * v25 + v30;
      --v31;
    }
    while ( v31 );
    goto LABEL_26;
  }
  DrawSky_30730_30770(a7);//draw sky
  //adress 1FBB02_
 //debug
#ifdef debug1
  //add_compare(0x1FBB02, true, true);
#endif debug1
  //debug
LABEL_26:
  if ( *(_BYTE *)(dword_AE400_AE3F0() + 8597) && (str_AE400_AE3F0->set.mod3D_8603 != 2 || str_AE400_AE3F0->set.var_u8_8606) )
  {
    v233 = 21;
    while ( 1 )
    {
      //  adress 1FBB90_
         //debug
#ifdef debug1
        if (compare_index_1FBB90 == 0x11)
        {
            compare_index_1FBB90++;
            compare_index_1FBB90--;
        }
        //add_compare(0x1FBB90, true, true);
        compare_index_1FBB90++;
#endif debug1
        //debug
      v242 = 40;
      do
      {
#ifdef debug1
          /*if (compare_index_1FBBA0 == 0x183a)
          {
              compare_index_1FBBA0++;
              compare_index_1FBBA0--;
          }
          add_compare(0x1FBBA0, true, true);
          compare_index_1FBBA0++;*/
#endif debug1
        v36 = *(_DWORD *)v29 * *(_DWORD *)v29;
        v37 = *(_DWORD *)(v29 + 12);
        v220 = ((unsigned __int8)mapShading_EC1E0_EC1D0[v231] << 8) + 128;
        *(_WORD *)(v29 + 36) = 0;
        v38 = v37 * v37 + v36;
        if ( v37 <= -256 || v38 >= dword_B5D00_B5CF0 )
        {
          *(_BYTE *)(v29 + 38) |= 2u;
          goto LABEL_49;
        }
        if ( v37 < 128 )
          v37 = 128;
        v39 = v231;
        *(_DWORD *)(v29 + 16) = fowDist_B5D14_B5D04 * *(int32*)v29 / v37;
        *(_DWORD *)(v29 + 4) = 32 * mapHeightmap_DC1E0_DC1D0[v39] - a5;
        v40 = (unsigned __int16)*(_DWORD *)(2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 13341) << 6;
        v227 = cos_90B4C[(v40 + (HIBYTE(v231) << 7)) & 0x7FF] >> 8;
        v41 = v227 * (cos_90B4C[(((unsigned __int8)v231 << 7) + v40) & 0x7FF] >> 8);
        v227 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v39];
        *(_DWORD *)(v29 + 8) = -((v227 * ((v41 >> 4) + 0x8000)) >> 10) - a5;
        if ( (mapAngle_FC1E0_FC1D0[v39] & 8) != 0 )
          *(_DWORD *)(v29 + 4) -= v41 >> 10;
        else
          v41 = 0;
        v42 = (v220 << 8) + 8 * v41;
        if ( v38 <= dword_B5CF0_B5CE0 )
          goto LABEL_42;
        if ( v38 < dword_B5D0C_B5CFC )
        {
          v42 = v42 * (__int64)(dword_B5D0C_B5CFC - v38) / dword_B5CEC_B5CDC;
LABEL_42:
          *(_DWORD *)(v29 + 32) = v42;
          goto LABEL_43;
        }
        *(_DWORD *)(v29 + 32) = 0;
LABEL_43:
        v43 = fowDist_B5D14_B5D04 * *(_DWORD *)(v29 + 8);
        *(_DWORD *)(v29 + 20) = dword_B5CFC_B5CEC + fowDist_B5D14_B5D04 * *(int32 *)(v29 + 4) / v37;
        *(_DWORD *)(v29 + 28) = dword_B5CFC_B5CEC + v43 / v37;
        LOBYTE(v44) = v221[2] + v231;
        HIBYTE(v44) = v221[3] + HIBYTE(v231);
        v45 = mapTerrainType_CC1E0_CC1D0[v44];
        *(_BYTE *)(v29 + 41) = v45;
        if ( byte_9020C[v45] )
          *(_BYTE *)(v29 + 38) |= 0x80u;
        if ( byte_90168[*(unsigned __int8 *)(v29 + 41)] )
          *(_BYTE *)(v29 + 39) |= 0x10u;
        *(_BYTE *)(v29 + 43) = byte_900C4[*(unsigned __int8 *)(v29 + 41)];
        *(_BYTE *)(v29 + 42) = v223 + (((int)(unsigned __int8)mapAngle_FC1E0_FC1D0[v44] >> 2) & 0x1C);
        LOBYTE(v44) = v221[4] + v44;
        HIBYTE(v44) += v221[5];
        *(_WORD *)(v29 + 36) = mapEntityIndex_10C1E0_10C1D0[v44];
LABEL_49:
        v46 = v231;
        v47 = v221;
        *(_WORD *)(v29 + 38) |= ((_BYTE)v231 + HIBYTE(v231)) & 1;
        LOBYTE(v231) = v47[8] + v46;
        v48 = v221[9] + HIBYTE(v231);
        HIBYTE(v231) = v48;
        v29 += 44;
        --v242;
      }
      while ( v242 );
      v49 = v221[6] + v231;
      HIBYTE(v231) = v221[7] + v48;
      LOBYTE(v231) = v49;
      if ( !--v233 )
      {
        v50 = 840;
        v51 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
        do
        {
            //adress 1FBEB6_
            if (compare_index_next1 == 0x347)
            {
                compare_index_next1++;
                compare_index_next1--;
            }
            compare_index_next1++;
          v52 = ((cos_B5CE8_B5CD8 * *(int32*)(v51 + 16) - sin_B5CD4_B5CC4 * *(int32*)(v51 + 28)) >> 16) + dword_B5D08_B5CF8;
          v53 = *(_DWORD *)(v51 + 16) * sin_B5CD4_B5CC4;
          v54 = heightViewPort_B5CE4_B5CD4 - ((v53 + cos_B5CE8_B5CD8 * *(int32*)(v51 + 20)) >> 16);
          v55 = cos_B5CE8_B5CD8 * *(_DWORD *)(v51 + 28);
          *(_DWORD *)(v51 + 16) = ((cos_B5CE8_B5CD8 * *(int32*)(v51 + 16) - sin_B5CD4_B5CC4 * *(int32*)(v51 + 20)) >> 16)
                                + dword_B5D08_B5CF8;
          v56 = v53 + v55;
          v57 = heightViewPort_B5CE4_B5CD4;
          *(_DWORD *)(v51 + 24) = v52;
          *(_DWORD *)(v51 + 28) = v57 - (v56 >> 16);
          v58 = *(_DWORD *)(v51 + 16);
          *(_DWORD *)(v51 + 20) = v54;
          if ( v58 >= 0 )
          {
            if ( (unsigned __int16)widthViewPort_93AD8 <= v58 )
              *(_BYTE *)(v51 + 38) |= 0x10u;
          }
          else
          {
            *(_BYTE *)(v51 + 38) |= 8u;
          }
          v59 = *(_DWORD *)(v51 + 20);
          if ( v59 >= 0 )
          {
            if ( (unsigned __int16)heightViewPort_93ADC <= v59 )
              *(_BYTE *)(v51 + 38) |= 0x40u;
          }
          else
          {
            *(_BYTE *)(v51 + 38) |= 0x20u;
          }
          if ( *(int *)(v51 + 24) >= 0 )
          {
            if ( (unsigned __int16)widthViewPort_93AD8 <= *(int *)(v51 + 24) )
              *(_BYTE *)(v51 + 39) |= 2u;
          }
          else
          {
            *(_BYTE *)(v51 + 39) |= 1u;
          }
          v60 = *(_DWORD *)(v51 + 28);
          if ( v60 >= 0 )
          {
            if ( (unsigned __int16)heightViewPort_93ADC <= v60 )
              *(_BYTE *)(v51 + 39) |= 8u;
          }
          else
          {
            *(_BYTE *)(v51 + 39) |= 4u;
          }
          v51 += 44;
          --v50;
        }
        while ( v50 );
        if ( a5 < 4096 )
        {

//adress 0x1FBFCB_
//debug
#ifdef debug1
            if (compare_index_1FBFCB == 0x0)
            {
                compare_index_1FBFCB++;
                compare_index_1FBFCB--;
            }
            //add_compare(0x1FBFCB, true, true);
            compare_index_1FBFCB++;
#endif debug1
            //debug
          v61 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 35200;
          v240 = 20;
          while ( 1 )
          {
            v62 = v61;
            v241 = 39;
            do
            {
              //adress 0x1FBFF0_
                         //debug
#ifdef debug1
                if (compare_index_1FBFF0 == 0x18f)
                {
                    compare_index_1FBFF0++;
                    compare_index_1FBFF0--;
                }
                //add_compare(0x1FBFF0, true, true);
                compare_index_1FBFF0++;
#endif debug1
                //debug

              v213x[0] = *(_DWORD *)(v62 + 24);
              v213x[1] = *(_DWORD *)(v62 + 28);
              v63 = *(_DWORD *)(v62 + 32);
              v62 += 44;
              v213x[4] = v63;
              v64 = *(_BYTE *)(v62 - 6);
              if ( (*(_BYTE *)(v62 + 38) & 4) != 0 )
                break;
              v208x[0] = *(_DWORD *)(v62 + 24);
              v208x[1] = *(_DWORD *)(v62 + 28);
              v208x[4] = *(_DWORD *)(v62 + 32);
              v65 = *(_BYTE *)(v62 + 38);
              v203x[0] = *(_DWORD *)(v62 - 1736);
              v203x[1] = *(_DWORD *)(v62 - 1732);
              v203x[4] = (int)*(int **)(v62 - 1728);
              v66 = *(_BYTE *)(v62 - 1722) | v65 | v64;
              v198x[0] = *(_DWORD *)(v62 - 1780);
              v67 = *(_DWORD *)(v62 - 1776);
              v68 = v62 - 1760;
              v198x[1] = v67;
              v69 = *(_DWORD *)(v68 - 12);
              v68 -= 44;
              v198x[4] = (int)(int *)v69;
              v70 = *(_BYTE *)(v68 + 38);
              v71 = v68 + 1760;
              v72 = v70 | v66;
              if ( *(_BYTE *)(v71 + 41) )
              {
                if ( (*(_BYTE *)(v71 + 39) & 0x10) != 0 )
                {
                  byte_967E1 = 7;
                  byte_967E0 = ((int)v198x[4] + (int)v203x[4] + v208x[4] + v213x[4]) >> 18;
                }
                else
                {
                  byte_967E1 = 5;
                }
                if ( (v72 & 2) == 0 )
                {
                  v73 = (int *)((char *)&unk_902DC + 32 * *(unsigned __int8 *)(v71 + 42));
                  v213x[2] = *v73;
                  v213x[3] = v73[1];
                  v208x[2] = v73[2];
                  v208x[3] = v73[3];
                  v203x[2] = v73[4];
                  v203x[3] = v73[5];
                  v198x[2] = v73[6];
                  v198x[3] = v73[7];
                  dword_93AD0 = dword_9334C[*(unsigned __int8 *)(v71 + 41)];
                  v74 = *(_BYTE *)(v71 + 38);
                  byte_967E1 = 5;
                  if ( (v74 & 1) != 0 )
                  {
                    DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v198x[0], (uint32*)&v208x[0]);
                    DrawTriangle_729A3_72EB3((uint32*)&v198x[0], (uint32*)&v203x[0], (uint32*)&v208x[0]);
                  }
                  else
                  {
                    DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v208x[0]);
                    DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v198x[0], (uint32*)&v203x[0]);
                  }
                }
                if ( !*(_WORD *)(v71 + 36) )
                  goto LABEL_85;
LABEL_84:
                DrawSprite_2FC50_2FC90((Type_BegBscreen*)v71);
                goto LABEL_85;
              }
              if ( *(_WORD *)(v71 + 36) )
                goto LABEL_84;
LABEL_85:
              v62 = v71 + 44;
              --v241;
            }
            while ( v241 );
            if ( v241 )
              break;
LABEL_101:
            v61 -= 1760;
            if ( !--v240 )
              goto LABEL_102;
          }
          v75 = v62 - 44;
          v76 = v61 + 1672;
          while ( 2 )
          {
            v213x[0] = *(_DWORD *)(v76 + 24);
            v213x[1] = *(_DWORD *)(v76 + 28);
            v213x[4] = *(_DWORD *)(v76 + 32);
            v77 = *(_BYTE *)(v76 + 38);
            v208x[0] = *(_DWORD *)(v76 + 68);
            v208x[1] = *(_DWORD *)(v76 + 72);
            v208x[4] = *(_DWORD *)(v76 + 76);
            v78 = *(_BYTE *)(v76 + 82) | v77;
            v203x[0] = *(_DWORD *)(v76 - 1692);
            v79 = *(_DWORD *)(v76 - 1688);
            v80 = v76 + 44;
            v203x[1] = v79;
            v81 = *(_DWORD *)(v80 - 1728);
            v80 -= 1760;
            v203x[4] = (int)(int *)v81;
            v82 = *(_BYTE *)(v80 + 38);
            v198x[0] = *(_DWORD *)(v80 - 20);
            v83 = *(_DWORD *)(v80 - 16);
            v80 -= 44;
            v198x[1] = v83;
            v198x[4] = (int)*(int **)(v80 + 32);
            LOBYTE(v83) = *(_BYTE *)(v80 + 38);
            v84 = v80 + 1760;
            v85 = v83 | v82 | v78;
            if ( *(_BYTE *)(v84 + 41) )
            {
              if ( (*(_BYTE *)(v84 + 39) & 0x10) != 0 )
              {
                byte_967E1 = 7;
                byte_967E0 = ((int)v198x[4] + (int)v203x[4] + v208x[4] + v213x[4]) >> 18;
              }
              else
              {
                byte_967E1 = 5;
              }
              if ( (v85 & 2) == 0 )
              {
                v86 = (int *)((char *)&unk_902DC + 32 * *(unsigned __int8 *)(v84 + 42));
                v213x[2] = *v86;
                v213x[3] = v86[1];
                v208x[2] = v86[2];
                v208x[3] = v86[3];
                v203x[2] = v86[4];
                v203x[3] = v86[5];
                v198x[2] = v86[6];
                v198x[3] = v86[7];
                v87 = *(unsigned __int8 *)(v84 + 41);
                byte_967E1 = 5;
                v88 = *(_BYTE *)(v84 + 38);
                dword_93AD0 = dword_9334C[v87];
                if ( (v88 & 1) != 0 )
                {
                  DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v198x[0], (uint32*)&v208x[0]);
                  DrawTriangle_729A3_72EB3((uint32*)&v198x[0], (uint32*)&v203x[0], (uint32*)&v208x[0]);
                }
                else
                {
                  DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v208x[0]);
                  DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v198x[0], (uint32*)&v203x[0]);
                }
              }
              if ( *(_WORD *)(v84 + 36) )
LABEL_99:
                DrawSprite_2FC50_2FC90((Type_BegBscreen*)v84);
            }
            else if ( *(_WORD *)(v84 + 36) )
            {
              goto LABEL_99;
            }
            v76 = v84 - 44;
            if ( v76 < v75 )
              goto LABEL_101;
            continue;
          }
        }
LABEL_102:
        v89 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 35200;
        v239 = 20;
        while ( 2 )
        {
            //  adress 1FC3D0_
   //debug
#ifdef debug1
            //add_compare(0x1FC3D0, true, true);
#endif debug1
            //debug
          v90 = (int *)&unk_902DC;
          v91 = v89;
          v237 = 39;
LABEL_104:
          //  adress 1FC3E0_
//debug
#ifdef debug1
          /*if (compare_index_2A700 == 0xad6)
          {
              compare_index_2A700++;
              compare_index_2A700--;
          }
          add_compare(0x1FC3E0, true, true);
          compare_index_2A700++;*/
#endif debug1
          //debug
          v213x[0] = *(_DWORD *)(v91 + 16);
          v213x[1] = *(_DWORD *)(v91 + 20);
          v92 = *(_DWORD *)(v91 + 32);
          v91 += 44;
          v213x[4] = v92;
          v93 = *(_BYTE *)(v91 - 6);
          v94 = v93;
          if ( (*(_BYTE *)(v91 + 38) & 4) != 0 )
          {
LABEL_124:
            if ( !v237 )
            {
LABEL_145:
              v89 -= 1760;
              LOBYTE(v125) = --v239;
              if ( !v239 )
                return;
              continue;
            }
            v108 = v91 - 44;
            v109 = v89 + 1672;
            while ( 2 )
            {
//  adress 1FC68A_
//debug
#ifdef debug1
if (compare_index_1FC68A == 0x45)
{
    compare_index_1FC68A++;
    compare_index_1FC68A--;
}
                //add_compare(0x1FC68A, true, true);
                compare_index_1FC68A++;
#endif debug1
//debug
              v213x[0] = *(_DWORD *)(v109 + 16);
              v213x[1] = *(_DWORD *)(v109 + 20);
              v213x[4] = *(_DWORD *)(v109 + 32);
              v110 = *(_BYTE *)(v109 + 38);
              v208x[0] = *(_DWORD *)(v109 + 60);
              v208x[1] = *(_DWORD *)(v109 + 64);
              v208x[4] = *(_DWORD *)(v109 + 76);
              v111 = *(_BYTE *)(v109 + 82);
              v203x[0] = *(_DWORD *)(v109 - 1700);
              v203x[1] = *(_DWORD *)(v109 - 1696);
              v112 = v110;
              v203x[4] = (int)*(int **)(v109 - 1684);
              v113 = *(_BYTE *)(v109 - 1678);
              v114 = v113 | v111 | v110;
              v115 = v113 & v111 & v112;
              v116 = *(_DWORD *)(v109 - 1744);
              v117 = v109 + 44;
              v198x[0] = v116;
              v118 = *(_DWORD *)(v117 - 1784);
              v117 -= 1760;
              v198x[1] = v118;
              v119 = *(_DWORD *)(v117 - 12);
              v117 -= 44;
              v198x[4] = (int)(int *)v119;
              v120 = *(_BYTE *)(v117 + 38);
              v121 = v117 + 1760;
              v122 = v120 | v114;
              v123 = v120 & v115;
              if ( *(char *)(v121 + 38) >= 0 )
              {
                if ( (*(_BYTE *)(v121 + 39) & 0x10) != 0 )
                {
                  byte_967E1 = 7;
                  v90 = (int*)v203x[4];
                  byte_967E0 = ((int)v198x[4] + (int)v203x[4] + v208x[4] + v213x[4]) >> 18;
                }
                else
                {
                  byte_967E1 = 5;
                }
                if ( (v122 & 2) == 0 && (v123 & 0x78) == 0 )
                {
                  v90 = (int *)((char *)&unk_902DC + 32 * *(unsigned __int8 *)(v121 + 42));
                  v213x[2] = *v90;
                  v213x[3] = v90[1];
                  v208x[2] = v90[2];
                  v208x[3] = v90[3];
                  v203x[2] = v90[4];
                  v203x[3] = v90[5];
                  v198x[2] = v90[6];
                  v198x[3] = v90[7];
                  dword_93AD0 = dword_9334C[*(unsigned __int8 *)(v121 + 41)];
                  if ( (*(_BYTE *)(v121 + 38) & 1) != 0 )
                  {
                    DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v198x[0]);
                    DrawTriangle_729A3_72EB3((uint32*)&v198x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                  }
                  else
                  {
                    DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                    DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v198x[0]);
                  }
                }
                if ( *(_WORD *)(v121 + 36) )
LABEL_143:
                  DrawSprite_2DCB0_2DCF0((Type_BegBscreen*)v121);
              }
              else
              {
                byte_967E1 = 26;
                if ( (v122 & 2) == 0 && (v123 & 0x78) == 0 )
                {
                  v90 = (int *)((char *)&unk_902DC + 32 * *(unsigned __int8 *)(v121 + 42));
                  v213x[2] = *v90;
                  v213x[3] = v90[1];
                  v208x[2] = v90[2];
                  v208x[3] = v90[3];
                  v203x[2] = v90[4];
                  v203x[3] = v90[5];
                  v198x[2] = v90[6];
                  v198x[3] = v90[7];
                  v124 = *(_BYTE *)(v121 + 38);
                  dword_93AD0 = dword_9334C[*(unsigned __int8 *)(v121 + 41)];
                  if ( (v124 & 1) != 0 )
                  {
                    DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v198x[0]);
                    DrawTriangle_729A3_72EB3((uint32*)&v198x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                  }
                  else
                  {
                    DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                    DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v198x[0]);
                  }
                }
                if ( *(_WORD *)(v121 + 36) )
                  goto LABEL_143;
              }
              v109 = v121 - 44;
              if ( v109 < v108 )
                goto LABEL_145;
              continue;
            }
          }
          break;
        }
        v208x[0] = *(_DWORD *)(v91 + 16);
        v208x[1] = *(_DWORD *)(v91 + 20);
        v208x[4] = *(_DWORD *)(v91 + 32);
        v95 = *(_BYTE *)(v91 + 38);
        v96 = v95 | v93;
        v97 = v95 & v94;
        v203x[0] = *(_DWORD *)(v91 - 1744);
        v203x[1] = *(_DWORD *)(v91 - 1740);
        v98 = *(_DWORD *)(v91 - 1728);
        v99 = v91 - 1760;
        v203x[4] = (int)(int *)v98;
        v100 = *(_BYTE *)(v99 + 38);
        v198x[0] = *(_DWORD *)(v99 - 28);
        v101 = *(_DWORD *)(v99 - 24);
        v99 -= 44;
        v198x[1] = v101;
        v198x[4] = (int)*(int **)(v99 + 32);
        BYTE1(v101) = *(_BYTE *)(v99 + 38);
        v102 = v99 + 1760;
        v103 = BYTE1(v101) | v100 | v96;
        v104 = BYTE1(v101) & v100 & v97;
        if ( *(char *)(v102 + 38) >= 0 )
        {
          if ( (*(_BYTE *)(v102 + 39) & 0x10) != 0 )
          {
            byte_967E1 = 7;
            byte_967E0 = ((int)v198x[4] + (int)v203x[4] + v208x[4] + v213x[4]) >> 18;
          }
          else
          {
            byte_967E1 = 5;
          }
          if ( (v103 & 2) == 0 && (v104 & 0x78) == 0 )
          {
            v106 = 32 * *(unsigned __int8 *)(v102 + 42);
            v213x[2] = *(_DWORD *)((char *)&unk_902DC + v106);
            v213x[3] = *(_DWORD *)((char *)&unk_902DC + v106 + 4);
            v208x[2] = *(_DWORD *)((char *)&unk_902DC + v106 + 8);
            v208x[3] = *(_DWORD *)((char *)&unk_902DC + v106 + 12);
            v203x[2] = *(_DWORD *)((char *)&unk_902DC + v106 + 16);
            v203x[3] = *(_DWORD *)((char *)&unk_902DC + v106 + 20);
            v198x[2] = *(_DWORD *)((char *)&unk_902DC + v106 + 24);
            v198x[3] = *(_DWORD *)((char *)&unk_902DC + v106 + 28);
            v107 = *(_BYTE *)(v102 + 38);
            dword_93AD0 = dword_9334C[*(unsigned __int8 *)(v102 + 41)];
            if ( (v107 & 1) != 0 )
            {
              DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v198x[0]);
              DrawTriangle_729A3_72EB3((uint32*)&v198x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
            }
            else
            {
              DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
              DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v198x[0]);
            }
          }
          if ( *(_WORD *)(v102 + 36) )
LABEL_122:
            DrawSprite_2DCB0_2DCF0((Type_BegBscreen*)v102);
        }
        else
        {
          byte_967E1 = 26;
          if ( (v103 & 2) == 0 && (v104 & 0x78) == 0 )
          {
            v105 = (int *)((char *)&unk_902DC + 32 * *(unsigned __int8 *)(v102 + 42));
            v213x[2] = *v105;
            v213x[3] = v105[1];
            v208x[2] = v105[2];
            v208x[3] = v105[3];
            v203x[2] = v105[4];
            v203x[3] = v105[5];
            v198x[2] = v105[6];
            v198x[3] = v105[7];
            dword_93AD0 = dword_9334C[*(unsigned __int8 *)(v102 + 41)];
            if ( (*(_BYTE *)(v102 + 38) & 1) != 0 )
            {
              DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v198x[0]);
              DrawTriangle_729A3_72EB3((uint32*)&v198x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
            }
            else
            {
              DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
              DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v198x[0]);
            }
          }
          if ( *(_WORD *)(v102 + 36) )
            goto LABEL_122;
        }
        v91 = v102 + 44;
        if ( !--v237 )
          goto LABEL_124;
        goto LABEL_104;
      }
    }
  }
  //adress 1FC930_
//debug
#ifdef debug1
  add_compare(0x1FC930, true, true);
#endif debug1
  //debug
  v238 = 21;
  do
  {
    v243 = 40;
    do
    {
      v126 = *(_DWORD *)v29 * *(_DWORD *)v29;
      v127 = *(_DWORD *)(v29 + 12);
      v222 = ((unsigned __int8)mapShading_EC1E0_EC1D0[v231] << 8) + 128;
      v128 = v127 * v127;
      *(_WORD *)(v29 + 36) = 0;
      v129 = v127 * v127 + v126;
      if ( v127 > -256 && v129 < dword_B5D00_B5CF0 )
      {
        if ( v127 < 128 )
          v127 = 128;
        v130 = v231;
        *(_DWORD *)(v29 + 16) = fowDist_B5D14_B5D04 * *(_DWORD *)v29 / v127;
        *(_DWORD *)(v29 + 4) = 32 * (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v130] - a5;
        v131 = (unsigned __int16)*(_DWORD *)(2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 13341) << 6;
        v227 = cos_90B4C[(v131 + (HIBYTE(v231) << 7)) & 0x7FF] >> 8;
        v132 = v227 * (cos_90B4C[(((unsigned __int8)v231 << 7) + v131) & 0x7FF] >> 8);
        if ( (mapAngle_FC1E0_FC1D0[v130] & 8) != 0 )
          *(_DWORD *)(v29 + 4) -= v132 >> 10;
        else
          v132 = 0;
        v133 = (v222 << 8) + 8 * v132;
        if ( v129 > dword_B5CF0_B5CE0 )
        {
          if ( v129 >= dword_B5D0C_B5CFC )
          {
            *(_DWORD *)(v29 + 32) = 0;
LABEL_161:
            *(_DWORD *)(v29 + 20) = dword_B5CFC_B5CEC + fowDist_B5D14_B5D04 * *(_DWORD *)(v29 + 4) / v127;
            LOBYTE(v134) = v221[2] + v231;
            HIBYTE(v134) = v221[3] + HIBYTE(v231);
            *(_BYTE *)(v29 + 41) = mapTerrainType_CC1E0_CC1D0[v134];
            *(_BYTE *)(v29 + 43) = byte_900C4[*(unsigned __int8 *)(v29 + 41)];
            HIWORD(v25) = HIWORD(v223);
            *(_BYTE *)(v29 + 42) = v223 + (((int)(unsigned __int8)mapAngle_FC1E0_FC1D0[v134] >> 2) & 0x1C);
            LOBYTE(v134) = v221[4] + v134;
            HIWORD(v128) = 0;
            HIBYTE(v134) += v221[5];
            *(_WORD *)(v29 + 36) = mapEntityIndex_10C1E0_10C1D0[v134];
            goto LABEL_163;
          }
          v133 = v133 * (__int64)(dword_B5D0C_B5CFC - v129) / dword_B5CEC_B5CDC;
        }
        *(_DWORD *)(v29 + 32) = v133;
        goto LABEL_161;
      }
      *(_BYTE *)(v29 + 38) |= 2u;
LABEL_163:
      LOWORD(v128) = HIBYTE(v231);
      LOWORD(v25) = (unsigned __int8)v231;
      v135 = v25 + v128;
      LOWORD(v25) = *(_WORD *)(v29 + 38);
      LOWORD(v135) = v135 & 1;
      v25 |= v135;
      v136 = v221;
      *(_WORD *)(v29 + 38) = v25;
      v137 = v136[8] + v231;
      LOBYTE(v136) = v221[9];
      v29 += 44;
      LOBYTE(v231) = v137;
      HIBYTE(v231) += (_BYTE)v136;
      --v243;
    }
    while ( v243 );
    LOBYTE(v231) = v221[6] + v137;
    HIBYTE(v231) += v221[7];
    --v238;
  }
  while ( v238 );
  //adress 1FCBE3_
//debug
#ifdef debug1
  add_compare(0x1FCBE3, true, true);
#endif debug1
  //debug
  v138 = a7 & 0x7FF;
  v139 = 840;
  v140 = cos_90B4C[v138];
  v141x = sin_9134C[v138];
  sin_B5CD4_B5CC4 = v140;
  cos_B5CE8_B5CD8 = v141x;
  v142 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  do
  {
    v143 = heightViewPort_B5CE4_B5CD4;
    v144 = (sin_B5CD4_B5CC4 * *(_DWORD *)(v142 + 16) + cos_B5CE8_B5CD8 * *(_DWORD *)(v142 + 20)) >> 16;
    *(_DWORD *)(v142 + 16) = ((*(_DWORD *)(v142 + 16) * cos_B5CE8_B5CD8 - sin_B5CD4_B5CC4 * *(_DWORD *)(v142 + 20)) >> 16)
                           + dword_B5D08_B5CF8;
    v145 = v143 - v144;
    v146 = *(_DWORD *)(v142 + 16);
    *(_DWORD *)(v142 + 20) = v145;
    if ( v146 >= 0 )
    {
      if ( (unsigned __int16)widthViewPort_93AD8 <= *(int *)(v142 + 16) )
        *(_BYTE *)(v142 + 38) |= 0x10u;
    }
    else
    {
      *(_BYTE *)(v142 + 38) |= 8u;
    }
    v147 = *(int **)(v142 + 20);
    if ( (int)v147 >= 0 )
    {
      if ( (unsigned __int16)heightViewPort_93ADC <= (int)v147 )
        *(_BYTE *)(v142 + 38) |= 0x40u;
    }
    else
    {
      *(_BYTE *)(v142 + 38) |= 0x20u;
    }
    v142 += 44;
    --v139;
  }
  while ( v139 );
  //adress 1FCCA3_
//debug
#ifdef debug1
  add_compare(0x1FCCA3, true, true);
#endif debug1
  //debug
  if ( str_AE400_AE3F0->set.mod3D_8603 != 2 || str_AE400_AE3F0->set.var_u8_8606 )
  {
    v168 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 35200;
    v244 = 20;
    do
    {
      v169 = v168;
      v232 = 39;
      do
      {
        v213x[0] = *(_DWORD *)(v169 + 16);
        v213x[1] = *(_DWORD *)(v169 + 20);
        v125 = *(_DWORD *)(v169 + 32);
        v169 += 44;
        v213x[4] = v125;
        v170 = *(_BYTE *)(v169 - 6);
        LOBYTE(v125) = *(_BYTE *)(v169 + 38);
        v171 = v170;
        if ( (v125 & 4) != 0 )
          break;
        v208x[0] = *(_DWORD *)(v169 + 16);
        v208x[1] = *(_DWORD *)(v169 + 20);
        v208x[4] = *(_DWORD *)(v169 + 32);
        v172 = *(_BYTE *)(v169 + 38);
        v173 = v172 | v170;
        v174 = v172 & v171;
        v203x[0] = *(_DWORD *)(v169 - 1744);
        v203x[1] = *(_DWORD *)(v169 - 1740);
        v175 = *(_DWORD *)(v169 - 1728);
        v176 = v169 - 1760;
        v203x[4] = (int)(int *)v175;
        v177 = *(_BYTE *)(v176 + 38);
        v198x[0] = *(_DWORD *)(v176 - 28);
        v178 = *(_DWORD *)(v176 - 24);
        v176 -= 44;
        v198x[1] = v178;
        v125 = *(_DWORD *)(v176 + 32);
        v198x[4] = (int)(int *)v125;
        BYTE1(v125) = *(_BYTE *)(v176 + 38);
        v179 = v176 + 1760;
        v180 = BYTE1(v125) | v177 | v173;
        v181 = BYTE1(v125) & v177 & v174;
        if ( (*(_BYTE *)(v179 + 39) & 0x10) != 0 )
        {
          byte_967E1 = 7;
          v147 = (int*)v203x[4];
          v125 = ((int)v198x[4] + (int)v203x[4] + v208x[4] + v213x[4]) >> 18;
          byte_967E0 = v125;
        }
        else
        {
          byte_967E1 = 5;
        }
        if ( (v180 & 2) == 0 && (v181 & 0x78) == 0 )
        {
          v147 = (int *)((char *)&unk_902DC + 32 * *(unsigned __int8 *)(v179 + 42));
          v213x[2] = *v147;
          v213x[3] = v147[1];
          v208x[2] = v147[2];
          v208x[3] = v147[3];
          v203x[2] = v147[4];
          v203x[3] = v147[5];
          v198x[2] = v147[6];
          v198x[3] = v147[7];
          v182 = *(_BYTE *)(v179 + 38);
          dword_93AD0 = dword_9334C[*(unsigned __int8 *)(v179 + 41)];
          if ( (v182 & 1) != 0 )
          {
            DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v198x[0]);
            v125 = (int)&v198x[0];
            DrawTriangle_729A3_72EB3((uint32*)&v198x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
          }
          else
          {
            DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
            v125 = (int)&v213x[0];
            DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v198x[0]);
          }
        }
        if ( *(_WORD *)(v179 + 36) )
          DrawSprite_2DCB0_2DCF0((Type_BegBscreen*)v179);
        v169 = v179 + 44;
        --v232;
      }
      while ( v232 );
      if ( v232 )
      {
        v183 = v169 - 44;
        v184 = v168 + 1672;
        do
        {
            v213x[0] = *(_DWORD *)(v184 + 16);
            v213x[1] = *(_DWORD *)(v184 + 20);
            v213x[4] = *(_DWORD *)(v184 + 32);
          v185 = *(_BYTE *)(v184 + 38);
          v208x[0] = *(_DWORD *)(v184 + 60);
          v208x[1] = *(_DWORD *)(v184 + 64);
          v208x[4] = *(_DWORD *)(v184 + 76);
          v186 = v185;
          v187 = *(_BYTE *)(v184 + 82);
          v188 = v187 | v185;
          v189 = v187 & v186;
          v203x[0] = *(_DWORD *)(v184 - 1700);
          v190 = *(_DWORD *)(v184 - 1696);
          v191 = v184 + 44;
          v203x[1] = v190;
          v192 = *(_DWORD *)(v191 - 1728);
          v191 -= 1760;
          v203x[4] = (int)(int *)v192;
          v193 = *(_BYTE *)(v191 + 38);
          v198x[0] = *(_DWORD *)(v191 - 28);
          v125 = *(_DWORD *)(v191 - 24);
          v191 -= 44;
          v198x[1] = v125;
          v198x[4] = (int)(int)*(int **)(v191 + 32);
          LOBYTE(v125) = *(_BYTE *)(v191 + 38);
          v194 = v191 + 1760;
          v195 = v125 | v193 | v188;
          v196 = v125 & v193 & v189;
          if ( (*(_BYTE *)(v194 + 39) & 0x10) != 0 )
          {
            byte_967E1 = 7;
            v147 = (int*)v198x[4];
            v125 = ((int)v198x[4] + (int)v203x[4] + v208x[4] + v213x[4]) >> 18;
            byte_967E0 = v125;
          }
          else
          {
            byte_967E1 = 5;
          }
          if ( (v195 & 2) == 0 && (v196 & 0x78) == 0 )
          {
            v147 = (int *)((char *)&unk_902DC + 32 * *(unsigned __int8 *)(v194 + 42));
            v213x[2] = *v147;
            v213x[3] = v147[1];
            v208x[2] = v147[2];
            v208x[3] = v147[3];
            v203x[2] = v147[4];
            v203x[3] = v147[5];
            v198x[2] = v147[6];
            v198x[3] = v147[7];
            dword_93AD0 = dword_9334C[*(unsigned __int8 *)(v194 + 41)];
            if ( (*(_BYTE *)(v194 + 38) & 1) != 0 )
            {
              DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v198x[0]);
              v125 = (int)&v198x[0];
              DrawTriangle_729A3_72EB3((uint32*)&v198x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
            }
            else
            {
              DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
              v125 = (int)&v213x[0];
              DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v198x[0]);
            }
          }
          if ( *(_WORD *)(v194 + 36) )
            DrawSprite_2DCB0_2DCF0((Type_BegBscreen*)v194);
          v184 = v194 - 44;
        }
        while ( v184 >= v183 );
      }
      v168 -= 1760;
      --v244;
    }
    while ( v244 );
  }
  else
  {
    byte_967E1 = 1;
    v148 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 35200;
    v245 = 20;
    do
    {
      v149 = v148;
      v236 = 39;
      do
      {
        v213x[0] = *(_DWORD *)(v149 + 16);
        v213x[1] = *(_DWORD *)(v149 + 20);
        v125 = 350 * (5120 - *(_DWORD *)(v149 + 12));
        v149 += 44;
        v213x[4] = 0x400000 - v125;
        v150 = *(_BYTE *)(v149 - 6);
        v151 = v150;
        if ( (*(_BYTE *)(v149 + 38) & 4) != 0 )
          break;
        v208x[0] = *(_DWORD *)(v149 + 16);
        v208x[1] = *(_DWORD *)(v149 + 20);
        v208x[4] = 0x400000 - 350 * (5120 - *(_DWORD *)(v149 + 12));
        v152 = *(_BYTE *)(v149 + 38);
        v203x[0] = *(_DWORD *)(v149 - 1744);
        v203x[1] = *(_DWORD *)(v149 - 1740);
        v203x[4] = (int)(int *)(0x400000 - 350 * (5120 - *(_DWORD *)(v149 - 1748)));
        v153 = *(_BYTE *)(v149 - 1722);
        v198x[0] = *(_DWORD *)(v149 - 1788);
        v154 = v153 | v152 | v150;
        v155 = v153 & v152 & v151;
        v198x[1] = *(_DWORD *)(v149 - 1784);
        v198x[4] = (int)(int *)(0x400000 - 350 * (5120 - *(_DWORD *)(v149 - 1792)));
        LOBYTE(v125) = *(_BYTE *)(v149 - 1766);
        v156 = v125 & v155;
        v157 = v149 - 1804 + 1760;
        if ( (((unsigned __int8)v125 | v154) & 2) == 0 && (v156 & 0x78) == 0 )
        {
          if ( (*(_BYTE *)(v157 + 38) & 1) != 0 )
          {
            DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v198x[0]);
            v125 = (int)&v198x[0];
            DrawTriangle_729A3_72EB3((uint32*)&v198x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
          }
          else
          {
            DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
            v125 = (int)&v213x[0];
            DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v198x[0]);
          }
        }
        if ( *(_WORD *)(v157 + 36) )
          DrawSprite_2F170_2F1B0(/*5120, */(Type_BegBscreen*)v157);
        v149 = v157 + 44;
        --v236;
      }
      while ( v236 );
      if ( v236 )
      {
        v158 = v149 - 44;
        v159 = v148 + 1672;
        do
        {
          v213x[0] = *(_DWORD *)(v159 + 16);
          v213x[1] = *(_DWORD *)(v159 + 20);
          v213x[4] = 0x400000 - 350 * (5120 - *(_DWORD *)(v159 + 12));
          v160 = *(_BYTE *)(v159 + 38);
          v208x[0] = *(_DWORD *)(v159 + 60);
          v208x[1] = *(_DWORD *)(v159 + 64);
          v208x[4] = 0x400000 - 350 * (5120 - *(_DWORD *)(v159 + 56));
          v161 = *(_BYTE *)(v159 + 82);
          v162 = v161 & v160;
          v203x[0] = *(_DWORD *)(v159 - 1700);
          v203x[1] = *(_DWORD *)(v159 - 1696);
          v203x[4] = (int)(int *)(0x400000 - 350 * (5120 - *(_DWORD *)(v159 - 1704)));
          v163 = *(_BYTE *)(v159 - 1678);
          v198x[0] = *(_DWORD *)(v159 - 1744);
          v164 = v163 | v161 | v160;
          v198x[1] = *(_DWORD *)(v159 - 1740);
          v125 = 350 * (5120 - *(_DWORD *)(v159 - 1748));
          v165 = v159 + 44;
          v198x[4] = (int)(int *)(0x400000 - v125);
          LOBYTE(v125) = *(_BYTE *)(v165 - 1766);
          v166 = v125 & v163 & v162;
          v167 = v165 - 1804 + 1760;
          if ( (((unsigned __int8)v125 | v164) & 2) == 0 && (v166 & 0x78) == 0 )
          {
            if ( (*(_BYTE *)(v167 + 38) & 1) != 0 )
            {
              DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v198x[0]);
              v125 = (int)&v198x[0];
              DrawTriangle_729A3_72EB3((uint32*)&v198x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
            }
            else
            {
              DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
              v125 = (int)&v213x[0];
              DrawTriangle_729A3_72EB3((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v198x[0]);
            }
          }
          if ( *(_WORD *)(v167 + 36) )
            DrawSprite_2F170_2F1B0(/*5120,*/ (Type_BegBscreen*)v167);
          v159 = v167 - 44;
        }
        while ( v159 >= v158 );
      }
      v148 -= 1760;
      --v245;
    }
    while ( v245 );
  }
}

int counter_sub_2C410_2C450 = 0;
//SYNCHRONIZED WITH REMC2
void sub_2C410_2C450(unsigned int a1)//1FD410_
{
    int v1; // eax
    int v2; // edx
    int v3; // ecx
    int v4; // ebx
    int v5; // edi
    int v6; // esi
    int v7; // ecx
    int v8; // ebx
    int v9; // edi
    int v10; // ecx
    _DWORD* v11; // ebx
    char* v12; // ebx
    int v13; // eax
    _DWORD* v14; // esi
    _BYTE* v15; // edi
    int v16; // ecx
    char v17; // cf
    int v18; // ecx
    int v19; // ecx
    char v20; // al
    char v21; // al
    char v22; // al
    char v23; // al
    _BYTE* v24; // edi
    int v25; // eax
    int v26; // ecx
    _BYTE* v27; // edi
    int v28; // eax
    int v29; // ecx
    _BYTE* v30; // edi
    int v31; // eax
    int v32; // ecx
    _BYTE* v33; // edi
    int v34; // ecx
    _BYTE* v35; // edi
    int v36; // ecx
    _BYTE* v37; // edi
    int v38; // edx
    int v39; // eax
    int v40; // ecx
    _BYTE* v41; // edi
    int v42; // edx
    int v43; // eax
    int v44; // ecx
    _BYTE* v45; // edi
    int v46; // eax
    int v47; // ecx
    int v48; // ecx
    int v49; // ecx
    char v50; // al
    char v51; // al
    char v52; // al
    char v53; // al
    int result; // eax
    int v55; // esi
    int v56; // esi
    int v57; // edx
    int v58; // ecx
    int v59; // eax
    int v60; // edi
    int v61; // esi
    int v62; // edx
    int* v63; // eax
    int v64; // edx
    int v65; // ecx
    int v66; // ebx
    int v67; // ebx
    int v68; // ebx
    int v69; // ebx
    _DWORD* v70; // eax
    _DWORD* v71; // ebx
    int v72; // ecx
    _DWORD* v73; // eax
    _DWORD* v74; // ebx
    int v75; // ecx
    int v76; // ebx
    int i; // eax
    int v78; // ecx
    int v79; // edx
    int v80; // edi
    _BOOL1 j; // zf
    _DWORD* v82; // esi
    int v83; // eax
    _DWORD* v84; // edi
    char* v85; // ebx
    _BYTE* v86; // edx
    int v87; // ecx
    int v88; // ecx
    int v89; // ecx
    char v90; // al
    char v91; // al
    char v92; // al
    char v93; // al
    _BYTE* v94; // ebx
    _BYTE* v95; // edx
    int v96; // eax
    int v97; // ecx
    _BYTE* v98; // ebx
    _BYTE* v99; // edx
    int v100; // ecx
    _BYTE* v101; // ebx
    _BYTE* v102; // edx
    int v103; // ecx
    _BYTE* v104; // ebx
    _BYTE* v105; // edx
    int v106; // eax
    int v107; // ecx
    _BYTE* v108; // ebx
    _BYTE* v109; // edx
    int v110; // eax
    int v111; // ecx
    _BYTE* v112; // ebx
    int v113; // ecx
    _BYTE* v114; // edx
    _DWORD* v115; // esi
    _DWORD* v116; // edi
    _BYTE* v117; // ebx
    int v118; // ecx
    _BYTE* v119; // edx
    _DWORD* v120; // esi
    _DWORD* v121; // edi
    char* v122; // ebx
    int v123; // eax
    _BYTE* v124; // edx
    int v125; // ecx
    char v126; // al
    char v127; // al
    char* v128; // ebx
    int v129; // eax
    _BYTE* v130; // edx
    int v131; // ecx
    int v132; // ecx
    int v133; // ecx
    char v134; // al
    char v135; // al
    char v136; // al
    char v137; // al
    int v138; // ecx
    int* v139; // eax
    int v140; // edx
    uint8* v141; // edx
    int v142; // edx
    int v143; // ebx
    int v144; // ebx
    int v145; // ebx
    _DWORD* v146; // eax
    _DWORD* v147; // ecx
    int v148; // ebx
    _DWORD* v149; // eax
    int v150; // ebx
    int v151; // edx
    int v152; // ebx
    int v153; // edx
    int v154; // ebx
    int v155; // ecx
    int v156; // edx
    int v157; // ecx
    int v158; // edx
    int v159; // edx
    int v160; // ecx
    int v161; // edx
    int v162; // edx
    int v163; // ebx
    int v164; // edx
    int v165; // ecx
    int v166; // edx
    int v167; // edx
    int v168; // edx
    int k; // [esp+0h] [ebp-50h]
    int v170; // [esp+0h] [ebp-50h]
    int v171; // [esp+0h] [ebp-50h]
    int v172; // [esp+10h] [ebp-40h]
    int v173; // [esp+14h] [ebp-3Ch]
    int v174; // [esp+18h] [ebp-38h]
    int v175; // [esp+1Ch] [ebp-34h]
    int v176; // [esp+20h] [ebp-30h]
    _DWORD* v177; // [esp+24h] [ebp-2Ch]
    int v178; // [esp+28h] [ebp-28h]
    int v179; // [esp+2Ch] [ebp-24h]
    int v180; // [esp+30h] [ebp-20h]
    int v181; // [esp+34h] [ebp-1Ch]
    int v182; // [esp+38h] [ebp-18h]
    _DWORD* v183; // [esp+3Ch] [ebp-14h]
    int v184; // [esp+40h] [ebp-10h]
    uint8* v185; // [esp+44h] [ebp-Ch]
    uint8* v186; // [esp+48h] [ebp-8h]

    //debug
#ifdef debug1
    if (counter_sub_2C410_2C450 == 0x67)
    {
        counter_sub_2C410_2C450++;
        counter_sub_2C410_2C450--;
    }
    //add_compare(0x1FD410, true,true);
    // dword_B5CA8_B5C98 273CA8

    uint8_t origbyte20 = 0;
    uint8_t remakebyte20 = 0;
    char buffer1[500];
    sprintf(buffer1, "%08X-00273CA8", 0x1FD414);
    //int comp20 = compare_with_sequence(buffer1, (uint8_t*)&dword_B5CA8_B5C98, 0x1FD414, counter_sub_2C410_2C450 - 0, 4, 4, &origbyte20, &remakebyte20, 0, true);

#endif debug1

    counter_sub_2C410_2C450++;
    //debug

    //fix
    v63 = 0;
    v68 = 0;
    v180 = 0;
    v184 = 0;
    //fix

    if (!byte_B5D3E_B5D2E)
    {
        if (a1)
        {
            if (a1 <= 1)
            {
                dword_B5CB8_B5CA8 -= (((dword_B5CA8_B5C98 * cos_B5CE8_B5CD8) >> 1) + sin_B5CD4_B5CC4 * dword_B5CC8_B5CB8) >> 16;
                v55 = dword_B5CB4_B5CA4 - ((cos_B5CE8_B5CD8 * dword_B5CC8_B5CB8 - ((sin_B5CD4_B5CC4 * dword_B5CA8_B5C98) >> 1)) >> 16);
            LABEL_136:
                dword_B5CB4_B5CA4 = v55;
                goto LABEL_137;
            }
            if (a1 != 2)
            {
            LABEL_137:
                v56 = (cosRoll_B5CE0_B5CD0 * dword_B5CA8_B5C98) >> 16;
                v57 = dword_B5CC8_B5CB8 << 16;
                v58 = dword_B5CCC_B5CCC << 16;
                v59 = (sinRoll_B5D18_B5D08 * dword_B5CA8_B5C98) >> 16;
                switch (dword_B5D28_B5D18)
                {
                case 0:
                    v60 = (cosRoll_B5CE0_B5CD0 * dword_B5CA8_B5C98) >> 16;
                    if (v60 <= 0)
                        goto LABEL_404;
                    v61 = (dword_B5CC8_B5CB8 << 16) / cosRoll_B5CE0_B5CD0;
                    if (v61 <= 0)
                        goto LABEL_404;
                    v176 = (dword_B5CCC_B5CCC << 16) / v61;
                    if (a1 == 1)
                    {
                        dword_B5CC0_B5CB0 = 0;
                    }
                    else
                    {
                        dword_B5CC0_B5CB0 = (v61 - 1) * v176;
                        v176 = -v176;
                    }
                    v182 = dword_B5CB8_B5CA8 << 16;
                    v174 = sinRoll_B5D18_B5D08 * dword_B5CC8_B5CB8 / v61;
                    v62 = dword_B5CB4_B5CA4 - ((dword_B5CF4_B5CE4 * dword_B5CB8_B5CA8) >> 16);
                    v63 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920);
                    if (v62 >= dword_B5D2C_B5D1C)
                        goto LABEL_146;
                    v64 = dword_B5D2C_B5D1C - v62;
                    v61 -= v64;
                    if (v61 <= 0)
                        goto LABEL_404;
                    dword_B5CC0_B5CB0 += v64 * v176;
                    v65 = v182 - v174 * v64;
                    v62 = dword_B5D2C_B5D1C;
                    v182 = v65;
                LABEL_146:
                    v186 = v62 * pitchViewPort_93AD4 + beginFrame_93ACC;
                    goto LABEL_147;
                case 1:
                    v60 = (sinRoll_B5D18_B5D08 * dword_B5CA8_B5C98) >> 16;
                    if (v60 <= 0)
                        goto LABEL_404;
                    v61 = (dword_B5CC8_B5CB8 << 16) / sinRoll_B5D18_B5D08;
                    if (v61 <= 0)
                        goto LABEL_404;
                    v176 = (dword_B5CCC_B5CCC << 16) / v61;
                    if (a1 == 1)
                    {
                        dword_B5CC0_B5CB0 = 0;
                    }
                    else
                    {
                        dword_B5CC0_B5CB0 = (v61 - 1) * v176;
                        v176 = -v176;
                    }
                    v138 = dword_B5CB4_B5CA4 << 16;
                    v173 = cosRoll_B5CE0_B5CD0 * dword_B5CC8_B5CB8 / v61;
                    v175 = dword_B5CB8_B5CA8 - ((dword_B5CF4_B5CE4 * dword_B5CB4_B5CA4) >> 16);
                    v139 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920);
                    if (v175 < dword_B5D30_B5D20)
                    {
                        if (v175 < dword_B5D2C_B5D1C)
                            goto LABEL_404;
                    }
                    else
                    {
                        v140 = v175 - dword_B5D30_B5D20;
                        v61 -= v175 - dword_B5D30_B5D20;
                        if (v61 <= 0)
                            goto LABEL_404;
                        dword_B5CC0_B5CB0 += v140 * v176;
                        v138 += v173 * v140;
                        v175 = dword_B5D30_B5D20;
                    }
                    v141 = v175 + beginFrame_93ACC;
                    goto LABEL_310;
                case 2:
                    v60 = (cosRoll_B5CE0_B5CD0 * dword_B5CA8_B5C98) >> 16;
                    if (v56 <= 0)
                        goto LABEL_404;
                    v61 = v57 / cosRoll_B5CE0_B5CD0;
                    if (v57 / cosRoll_B5CE0_B5CD0 <= 0)
                        goto LABEL_404;
                    v176 = v58 / v61;
                    if (a1 == 1)
                    {
                        dword_B5CC0_B5CB0 = 0;
                    }
                    else
                    {
                        dword_B5CC0_B5CB0 = (v61 - 1) * v176;
                        v176 = -v176;
                    }
                    v182 = dword_B5CB4_B5CA4 << 16;
                    v174 = sinRoll_B5D18_B5D08 * dword_B5CC8_B5CB8 / v61;
                    v62 = dword_B5D30_B5D20 - dword_B5CB8_B5CA8 - ((dword_B5CF4_B5CE4 * dword_B5CB4_B5CA4) >> 16);
                    v63 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920);
                    if (v62 >= dword_B5D2C_B5D1C)
                        goto LABEL_354;
                    v156 = dword_B5D2C_B5D1C - v62;
                    v61 -= v156;
                    if (v61 <= 0)
                        goto LABEL_404;
                    dword_B5CC0_B5CB0 += v156 * v176;
                    v157 = v182 - v174 * v156;
                    v62 = dword_B5D2C_B5D1C;
                    v182 = v157;
                LABEL_354:
                    v186 = dword_B5D30_B5D20 + beginFrame_93ACC - 1 - v62;
                    goto LABEL_147;
                case 3:
                    v60 = (sinRoll_B5D18_B5D08 * dword_B5CA8_B5C98) >> 16;
                    if (v59 <= 0)
                        goto LABEL_404;
                    v61 = v57 / sinRoll_B5D18_B5D08;
                    if (v57 / sinRoll_B5D18_B5D08 <= 0)
                        goto LABEL_404;
                    v176 = v58 / v61;
                    if (a1 == 1)
                    {
                        dword_B5CC0_B5CB0 = 0;
                    }
                    else
                    {
                        dword_B5CC0_B5CB0 = (v61 - 1) * v176;
                        v176 = -v176;
                    }
                    v173 = cosRoll_B5CE0_B5CD0 * dword_B5CC8_B5CB8 / v61;
                    v139 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920);
                    v175 = dword_B5CB4_B5CA4 - ((dword_B5CF4_B5CE4 * (dword_B5D34_B5D24 - dword_B5CB8_B5CA8)) >> 16);
                    v138 = (dword_B5D34_B5D24 - dword_B5CB8_B5CA8) << 16;
                    if (v175 < dword_B5D30_B5D20)
                    {
                        if (v175 < dword_B5D2C_B5D1C)
                            goto LABEL_404;
                    }
                    else
                    {
                        v158 = v175 - dword_B5D30_B5D20;
                        v61 -= v175 - dword_B5D30_B5D20;
                        if (v61 <= 0)
                            goto LABEL_404;
                        dword_B5CC0_B5CB0 += v158 * v176;
                        v138 += v173 * v158;
                        v175 = dword_B5D30_B5D20;
                    }
                    v186 = dword_B5D34_B5D24 + pitchViewPort_93AD4 * v175 - 1 + beginFrame_93ACC;
                    goto LABEL_311;
                case 4:
                    v60 = (cosRoll_B5CE0_B5CD0 * dword_B5CA8_B5C98) >> 16;
                    if (v56 <= 0)
                        goto LABEL_404;
                    v61 = v57 / cosRoll_B5CE0_B5CD0;
                    if (v57 / cosRoll_B5CE0_B5CD0 <= 0)
                        goto LABEL_404;
                    v176 = v58 / v61;
                    if (a1 == 1)
                    {
                        dword_B5CC0_B5CB0 = 0;
                    }
                    else
                    {
                        dword_B5CC0_B5CB0 = (v61 - 1) * v176;
                        v176 = -v176;
                    }
                    v182 = (dword_B5D34_B5D24 - dword_B5CB8_B5CA8) << 16;
                    v174 = sinRoll_B5D18_B5D08 * dword_B5CC8_B5CB8 / v61;
                    v62 = dword_B5D30_B5D20 - dword_B5CB4_B5CA4 - (((dword_B5D34_B5D24 - dword_B5CB8_B5CA8) * dword_B5CF4_B5CE4) >> 16);
                    v63 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920);
                    if (v62 >= dword_B5D2C_B5D1C)
                        goto LABEL_373;
                    v159 = dword_B5D2C_B5D1C - v62;
                    v61 -= v159;
                    if (v61 <= 0)
                        goto LABEL_404;
                    dword_B5CC0_B5CB0 += v159 * v176;
                    v160 = v182 - v174 * v159;
                    v62 = dword_B5D2C_B5D1C;
                    v182 = v160;
                LABEL_373:
                    v186 = dword_B5D34_B5D24 + beginFrame_93ACC + pitchViewPort_93AD4 * (dword_B5D30_B5D20 - v62 - 1) - 1;
                    goto LABEL_147;
                case 5:
                    v60 = (sinRoll_B5D18_B5D08 * dword_B5CA8_B5C98) >> 16;
                    if (v59 <= 0)
                        goto LABEL_404;
                    v61 = v57 / sinRoll_B5D18_B5D08;
                    if (v57 / sinRoll_B5D18_B5D08 <= 0)
                        goto LABEL_404;
                    v176 = v58 / v61;
                    if (a1 == 1)
                    {
                        dword_B5CC0_B5CB0 = 0;
                    }
                    else
                    {
                        dword_B5CC0_B5CB0 = (v61 - 1) * v176;
                        v176 = -v176;
                    }
                    v173 = cosRoll_B5CE0_B5CD0 * dword_B5CC8_B5CB8 / v61;
                    v139 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920);
                    v138 = (dword_B5D34_B5D24 - dword_B5CB4_B5CA4) << 16;
                    v161 = dword_B5D30_B5D20 - dword_B5CB8_B5CA8 - ((dword_B5CF4_B5CE4 * (dword_B5D34_B5D24 - dword_B5CB4_B5CA4)) >> 16);
                    v175 = v161;
                    if (v161 < dword_B5D30_B5D20)
                    {
                        if (v161 < dword_B5D2C_B5D1C)
                            goto LABEL_404;
                    }
                    else
                    {
                        v162 = v161 - dword_B5D30_B5D20;
                        v61 -= v162;
                        if (v61 <= 0)
                            goto LABEL_404;
                        dword_B5CC0_B5CB0 += v162 * v176;
                        v138 += v173 * v162;
                        v175 = dword_B5D30_B5D20;
                    }
                    v141 = (dword_B5D34_B5D24 - 1) * pitchViewPort_93AD4 + dword_B5D30_B5D20 + beginFrame_93ACC - 1 - v175;
                LABEL_310:
                    v186 = v141;
                    goto LABEL_311;
                case 6:
                    v60 = (cosRoll_B5CE0_B5CD0 * dword_B5CA8_B5C98) >> 16;
                    if (v56 <= 0)
                        goto LABEL_404;
                    v61 = v57 / cosRoll_B5CE0_B5CD0;
                    if (v57 / cosRoll_B5CE0_B5CD0 <= 0)
                        goto LABEL_404;
                    v176 = v58 / v61;
                    if (a1 == 1)
                    {
                        dword_B5CC0_B5CB0 = 0;
                    }
                    else
                    {
                        dword_B5CC0_B5CB0 = (v61 - 1) * v176;
                        v176 = -v176;
                    }
                    v182 = (dword_B5D34_B5D24 - dword_B5CB4_B5CA4) << 16;
                    v174 = sinRoll_B5D18_B5D08 * dword_B5CC8_B5CB8 / v61;
                    v163 = dword_B5CB8_B5CA8 - ((dword_B5CF4_B5CE4 * (dword_B5D34_B5D24 - dword_B5CB4_B5CA4)) >> 16);
                    v63 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920);
                    v62 = v163;
                    if (v163 >= dword_B5D2C_B5D1C)
                        goto LABEL_392;
                    v164 = dword_B5D2C_B5D1C - v163;
                    v61 -= dword_B5D2C_B5D1C - v163;
                    if (v61 <= 0)
                        goto LABEL_404;
                    dword_B5CC0_B5CB0 += v164 * v176;
                    v165 = v182 - v174 * v164;
                    v62 = dword_B5D2C_B5D1C;
                    v182 = v165;
                LABEL_392:
                    v186 = v62 + beginFrame_93ACC + pitchViewPort_93AD4 * (dword_B5D34_B5D24 - 1);
                LABEL_147:
                    v66 = dword_B5D30_B5D20 - dword_B5D2C_B5D1C;
                    if (v62 <= 0)
                    {
                        if (v61 > v66)
                            v61 = dword_B5D30_B5D20 - dword_B5D2C_B5D1C;
                    }
                    else if (v66 < v61 + v62)
                    {
                        v61 = v66 - v62;
                        if (v66 - v62 <= 0)
                            goto LABEL_404;
                    }
                    v180 = v61;
                    v184 = 9999999;
                    if (!v61)
                        goto LABEL_163;
                    while (1)
                    {
                        v67 = v182 >> 16;
                        if (v182 >> 16 >= 0)
                            break;
                        v68 = -v67;
                        *v63 = 0;
                        v63[1] = v60 - v68;
                        if (v60 - v68 <= 0)
                        {
                            v61 -= v180;
                        LABEL_163:
                            if (v61 + v62 > dword_B5D1C_B5D0C)
                            {
                                v69 = dword_B5D1C_B5D0C - v62;
                                if (dword_B5D1C_B5D0C - v62 <= 0)
                                {
                                    v71 = (_DWORD*)(dword_B5CD8_B5CC8 + 4 * v69);
                                    v72 = v61;
                                    v70 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920);
                                    goto LABEL_172;
                                }
                                v181 = v61 + v62 - dword_B5D1C_B5D0C;
                                v70 = (_DWORD*)(12 * v69 + begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920);
                                v71 = (_DWORD*)dword_B5CD8_B5CC8;
                                while (v181)
                                {
                                    if (*v70 + v70[1] > *v71)
                                    {
                                        if (*v70 >= *v71)
                                        {
                                            v61 -= v181;
                                            break;
                                        }
                                        v70[1] = *v71 - *v70;
                                    }
                                    v70 += 3;
                                    v72 = v181 - 1;
                                    --v71;
                                LABEL_172:
                                    v181 = v72;
                                }
                            }
                            if (v62 < 0)
                            {
                                v73 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920);
                                v74 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360 + 4 * (-1 - v62));
                                do
                                {
                                    if (*v74 > *v73)
                                    {
                                        if (*v74 <= v73[1] + *v73)
                                        {
                                            v75 = *v74 - *v73;
                                            *v73 = *v74;
                                            v73[2] += v75;
                                            v73[1] -= v75;
                                        }
                                        else
                                        {
                                            v73[1] = 0;
                                        }
                                    }
                                    --v74;
                                    v73 += 3;
                                    ++v62;
                                } while (v62);
                            }
                        LABEL_181:
                            v76 = (dword_B5CBC_B5CAC << 16) / v60;
                            dword_B5CC4_B5CB4 = 0;
                            if (dword_B5CBC_B5CAC < 0)
                                dword_B5CC4_B5CB4 = -(v76 * (v60 - 1));
                            v170 = v60 - v184;
                            if (v60 - v184 > 0)
                            {
                                if (v170 > dword_B5D20_B5D10)
                                    v170 = dword_B5D20_B5D10;
                                dword_B5CC4_B5CB4 += v76 * v184;
                                for (i = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36960; v170 >= 0; --v170)
                                {
                                    v78 = *(_DWORD*)(i - 4);
                                    i += 8;
                                    v79 = dword_B5CC4_B5CB4 >> 16;
                                    v80 = v76 + dword_B5CC4_B5CB4;
                                    *(_DWORD*)(i - 4) = dword_B5CC4_B5CB4 >> 16;
                                    dword_B5CC4_B5CB4 = v80;
                                    *(_DWORD*)(i - 8) = v79 - v78;
                                }
                                v178 = v61;
                                v183 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920);
                                for (j = v61 == 0; !j; j = v178-- == 1)
                                {
                                    v171 = v183[1];
                                    if (v171 > 0)
                                    {
                                        v82 = (_DWORD*)(8 * (v183[2] - v184) + begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36960);
                                        v83 = (dword_B5CC0_B5CB0 >> 16) * dword_B5CD0_B5CC0 + (int)dword_B5CB0_B5CA0;
                                        v84 = (_DWORD*)(dword_B3EA0_B3E90x[*v183]);
                                        switch (dword_B5CAC_B5C9C)
                                        {
                                        case 0:
                                            v85 = (char*)(v83 + v82[1]);
                                            v86 = (_BYTE*)(v84[1] + v186);
                                            v87 = v171 >> 1;
                                            if (!(v171 & 1))
                                            {
                                                v17 = v87 & 1;
                                                v88 = v171 >> 2;
                                                if (v17)
                                                {
                                                    ++v88;
                                                    v82 -= 2;
                                                    v84 -= 3;
                                                    goto LABEL_204;
                                                }
                                                v82 += 2;
                                                v84 += 3;
                                                goto LABEL_198;
                                            }
                                            v89 = v87 + 2;
                                            v17 = v89 & 1;
                                            v88 = v89 >> 1;
                                            if (v17)
                                                goto LABEL_201;
                                            v82 -= 4;
                                            for (v84 -= 6; ; v86 += v84[6])
                                            {
                                                v93 = *v85;
                                                v85 += v82[6];
                                                if (v93)
                                                    *v86 = v93;
                                                v86 += v84[9];
                                                v82 += 8;
                                                v84 += 12;
                                                if (!--v88)
                                                    break;
                                            LABEL_198:
                                                v90 = *v85;
                                                v85 += *v82;
                                                if (v90)
                                                    *v86 = v90;
                                                v86 += *v84;
                                            LABEL_201:
                                                v91 = *v85;
                                                v85 += v82[2];
                                                if (v91)
                                                    *v86 = v91;
                                                v86 += v84[3];
                                            LABEL_204:
                                                v92 = *v85;
                                                v85 += v82[4];
                                                if (v92)
                                                    *v86 = v92;
                                            }
                                            break;
                                        case 1:
                                            v94 = (_BYTE*)(v83 + v82[1]);
                                            v95 = (_BYTE*)(v84[1] + v186);
                                            v96 = dword_B5CA4_B5C94;
                                            v97 = v171 >> 1;
                                            if (!(v171 & 1))
                                            {
                                                v82 += 2;
                                                v84 += 3;
                                                goto LABEL_214;
                                            }
                                            ++v97;
                                            while (1)
                                            {
                                                LOBYTE(v96) = *v94;
                                                v94 += v82[2];
                                                if ((_BYTE)v96)
                                                    *v95 = strPal.fog_B7934_B7924[v96];
                                                v95 += v84[3];
                                                v82 += 4;
                                                v84 += 6;
                                                if (!--v97)
                                                    break;
                                            LABEL_214:
                                                LOBYTE(v96) = *v94;
                                                v94 += *v82;
                                                if ((_BYTE)v96)
                                                    *v95 = strPal.fog_B7934_B7924[v96];
                                                v95 += *v84;
                                            }
                                            break;
                                        case 2:
                                            v98 = (_BYTE*)(v83 + v82[1]);
                                            v99 = (_BYTE*)(v84[1] + v186);
                                            HIWORD(v83) = 0;
                                            v100 = v171 >> 1;
                                            if (!(v171 & 1))
                                            {
                                                v82 += 2;
                                                v84 += 3;
                                                goto LABEL_224;
                                            }
                                            ++v100;
                                            while (1)
                                            {
                                                BYTE1(v83) = *v98;
                                                v98 += v82[2];
                                                if (BYTE1(v83))
                                                {
                                                    LOBYTE(v83) = *v99;
                                                    *v99 = strPal.byte_BB934_BB924[v83];
                                                }
                                                v99 += v84[3];
                                                v82 += 4;
                                                v84 += 6;
                                                if (!--v100)
                                                    break;
                                            LABEL_224:
                                                BYTE1(v83) = *v98;
                                                v98 += *v82;
                                                if (BYTE1(v83))
                                                {
                                                    LOBYTE(v83) = *v99;
                                                    *v99 = strPal.byte_BB934_BB924[v83];
                                                }
                                                v99 += *v84;
                                            }
                                            break;
                                        case 3:
                                            v101 = (_BYTE*)(v83 + v82[1]);
                                            v102 = (_BYTE*)(v84[1] + v186);
                                            HIWORD(v83) = 0;
                                            v103 = v171 >> 1;
                                            if (!(v171 & 1))
                                            {
                                                v82 += 2;
                                                v84 += 3;
                                                goto LABEL_234;
                                            }
                                            ++v103;
                                            while (1)
                                            {
                                                LOBYTE(v83) = *v101;
                                                v101 += v82[2];
                                                if ((_BYTE)v83)
                                                {
                                                    BYTE1(v83) = *v102;
                                                    *v102 = strPal.byte_BB934_BB924[v83];
                                                }
                                                v102 += v84[3];
                                                v82 += 4;
                                                v84 += 6;
                                                if (!--v103)
                                                    break;
                                            LABEL_234:
                                                LOBYTE(v83) = *v101;
                                                v101 += *v82;
                                                if ((_BYTE)v83)
                                                {
                                                    BYTE1(v83) = *v102;
                                                    *v102 = strPal.byte_BB934_BB924[v83];
                                                }
                                                v102 += *v84;
                                            }
                                            break;
                                        case 4:
                                            v104 = (_BYTE*)(v83 + v82[1]);
                                            v105 = (_BYTE*)(v84[1] + v186);
                                            v106 = 0;
                                            v107 = v171 >> 1;
                                            if (!(v171 & 1))
                                            {
                                                v82 += 2;
                                                v84 += 3;
                                                goto LABEL_244;
                                            }
                                            ++v107;
                                            while (1)
                                            {
                                                LOBYTE(v106) = *v104;
                                                v104 += v82[2];
                                                if ((_BYTE)v106)
                                                    *v105 = strPal.byte_BB934_BB924[v106];
                                                v105 += v84[3];
                                                v82 += 4;
                                                v84 += 6;
                                                if (!--v107)
                                                    break;
                                            LABEL_244:
                                                LOBYTE(v106) = *v104;
                                                v104 += *v82;
                                                if ((_BYTE)v106)
                                                    *v105 = strPal.byte_BB934_BB924[v106];
                                                v105 += *v84;
                                            }
                                            break;
                                        case 5:
                                            v108 = (_BYTE*)(v83 + v82[1]);
                                            v109 = (_BYTE*)(v84[1] + v186);
                                            v110 = 0;
                                            v111 = v171 >> 1;
                                            if (!(v171 & 1))
                                            {
                                                v82 += 2;
                                                v84 += 3;
                                                goto LABEL_254;
                                            }
                                            ++v111;
                                            while (1)
                                            {
                                                BYTE1(v110) = *v108;
                                                v108 += v82[2];
                                                if (BYTE1(v110))
                                                    *v109 = strPal.byte_BB934_BB924[v110];
                                                v109 += v84[3];
                                                v82 += 4;
                                                v84 += 6;
                                                if (!--v111)
                                                    break;
                                            LABEL_254:
                                                BYTE1(v110) = *v108;
                                                v108 += *v82;
                                                if (BYTE1(v110))
                                                    *v109 = strPal.byte_BB934_BB924[v110];
                                                v109 += *v84;
                                            }
                                            break;
                                        case 6:
                                            v112 = (_BYTE*)(v83 + v82[1]);
                                            v113 = dword_B5CA4_B5C94;
                                            v114 = (_BYTE*)(v84[1] + v186);
                                            HIWORD(v83) = 0;
                                            v115 = v82 + 2;
                                            v116 = v84 + 3;
                                            do
                                            {
                                                BYTE1(v83) = *v112;
                                                v112 += *v115;
                                                if (BYTE1(v83))
                                                {
                                                    LOBYTE(v83) = *v114;
                                                    LOBYTE(v113) = strPal.byte_BB934_BB924[v83];
                                                    *v114 = strPal.fog_B7934_B7924[v113];
                                                }
                                                v114 += *v116;
                                                v115 += 2;
                                                v116 += 3;
                                                --v171;
                                            } while (v171);
                                            break;
                                        case 7:
                                            v117 = (_BYTE*)(v83 + v82[1]);
                                            v118 = dword_B5CA4_B5C94;
                                            v119 = (_BYTE*)(v84[1] + v186);
                                            HIWORD(v83) = 0;
                                            v120 = v82 + 2;
                                            v121 = v84 + 3;
                                            do
                                            {
                                                LOBYTE(v83) = *v117;
                                                v117 += *v120;
                                                if ((_BYTE)v83)
                                                {
                                                    BYTE1(v83) = *v119;
                                                    LOBYTE(v118) = strPal.byte_BB934_BB924[v83];
                                                    *v119 = strPal.fog_B7934_B7924[v118];
                                                }
                                                v119 += *v121;
                                                v120 += 2;
                                                v121 += 3;
                                                --v171;
                                            } while (v171);
                                            break;
                                        case 8:
                                            v122 = (char*)(v83 + v82[1]);
                                            v123 = dword_B5CA4_B5C94;
                                            v124 = (_BYTE*)(v84[1] + v186);
                                            v125 = v171 >> 1;
                                            if (!(v171 & 1))
                                            {
                                                v82 += 2;
                                                v84 += 3;
                                                goto LABEL_274;
                                            }
                                            ++v125;
                                            while (1)
                                            {
                                                v127 = *v122;
                                                v122 += v82[2];
                                                if (v127)
                                                {
                                                    LOBYTE(v123) = *v124;
                                                    *v124 = strPal.fog_B7934_B7924[v123];
                                                }
                                                v124 += v84[3];
                                                v82 += 4;
                                                v84 += 6;
                                                if (!--v125)
                                                    break;
                                            LABEL_274:
                                                v126 = *v122;
                                                v122 += *v82;
                                                if (v126)
                                                {
                                                    LOBYTE(v123) = *v124;
                                                    *v124 = strPal.fog_B7934_B7924[v123];
                                                }
                                                v124 += *v84;
                                            }
                                            break;
                                        case 9:
                                            v128 = (char*)(v83 + v82[1]);
                                            v129 = dword_B5CA4_B5C94 >> 8;
                                            v130 = (_BYTE*)(v84[1] + v186);
                                            v131 = v171 >> 1;
                                            if (!(v171 & 1))
                                            {
                                                v17 = v131 & 1;
                                                v132 = v171 >> 2;
                                                if (v17)
                                                {
                                                    ++v132;
                                                    v82 -= 2;
                                                    v84 -= 3;
                                                    goto LABEL_293;
                                                }
                                                v82 += 2;
                                                v84 += 3;
                                                goto LABEL_287;
                                            }
                                            v133 = v131 + 2;
                                            v17 = v133 & 1;
                                            v132 = v133 >> 1;
                                            if (v17)
                                                goto LABEL_290;
                                            v82 -= 4;
                                            for (v84 -= 6; ; v130 += v84[6])
                                            {
                                                v137 = *v128;
                                                v128 += v82[6];
                                                if (v137)
                                                    *v130 = BYTE1(v129);
                                                v130 += v84[9];
                                                v82 += 8;
                                                v84 += 12;
                                                if (!--v132)
                                                    break;
                                            LABEL_287:
                                                v134 = *v128;
                                                v128 += *v82;
                                                if (v134)
                                                    *v130 = BYTE1(v129);
                                                v130 += *v84;
                                            LABEL_290:
                                                v135 = *v128;
                                                v128 += v82[2];
                                                if (v135)
                                                    *v130 = BYTE1(v129);
                                                v130 += v84[3];
                                            LABEL_293:
                                                v136 = *v128;
                                                v128 += v82[4];
                                                if (v136)
                                                    *v130 = BYTE1(v129);
                                            }
                                            break;
                                        default:
                                            break;
                                        }
                                    }
                                    dword_B5CC0_B5CB0 += v176;
                                    v186 += dword_B5D04_B5CF4;
                                    v183 += 3;
                                }
                            }
                        LABEL_404:
                            //JUMPOUT(0x2A6E8_2A728);
                            return;
                        }
                        v63[2] = v68;
                        if (v68 < v184)
                            goto LABEL_159;
                    LABEL_160:
                        if (v63[1] + *v63 > dword_B5D34_B5D24)
                            v63[1] = dword_B5D34_B5D24 - *v63;
                        v63 += 3;
                        v182 -= v174;
                        if (!--v180)
                            goto LABEL_163;
                    }
                    v63[2] = 0;
                    *v63 = v67;
                    v68 = 0;
                    v63[1] = v60;
                LABEL_159:
                    v184 = v68;
                    goto LABEL_160;
                case 7:
                    v60 = (sinRoll_B5D18_B5D08 * dword_B5CA8_B5C98) >> 16;
                    if (v59 <= 0)
                        goto LABEL_404;
                    v61 = v57 / sinRoll_B5D18_B5D08;
                    if (v57 / sinRoll_B5D18_B5D08 <= 0 || dword_B5CB8_B5CA8 >= dword_B5D34_B5D24)
                        goto LABEL_404;
                    v176 = v58 / v61;
                    if (a1 == 1)
                    {
                        dword_B5CC0_B5CB0 = 0;
                    }
                    else
                    {
                        v166 = (v61 - 1) * v176;
                        v176 = -v176;
                        dword_B5CC0_B5CB0 = v166;
                    }
                    v138 = dword_B5CB8_B5CA8 << 16;
                    v173 = cosRoll_B5CE0_B5CD0 * dword_B5CC8_B5CB8 / v61;
                    v139 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920);
                    v167 = dword_B5D30_B5D20 - dword_B5CB4_B5CA4 - ((dword_B5CB8_B5CA8 * dword_B5CF4_B5CE4) >> 16);
                    v175 = v167;
                    if (v167 < dword_B5D30_B5D20)
                    {
                        if (v167 < dword_B5D2C_B5D1C)
                            goto LABEL_404;
                    }
                    else
                    {
                        v168 = v167 - dword_B5D30_B5D20;
                        v61 -= v168;
                        if (v61 <= 0)
                            goto LABEL_404;
                        dword_B5CC0_B5CB0 += v168 * v176;
                        v138 += v173 * v168;
                        v175 = dword_B5D30_B5D20;
                    }
                    v186 = pitchViewPort_93AD4 * (dword_B5D30_B5D20 - 1 - v175) + beginFrame_93ACC;
                LABEL_311:
                    v142 = dword_B5D30_B5D20 - dword_B5D2C_B5D1C;
                    if (v175 < dword_B5D30_B5D20)
                    {
                        if (v61 > v142)
                            v61 = dword_B5D30_B5D20 - dword_B5D2C_B5D1C;
                    }
                    else if (v142 < v61 + v175 - dword_B5D30_B5D20)
                    {
                        v61 = v142 - v175 + dword_B5D30_B5D20;
                        if (v61 <= 0)
                            goto LABEL_404;
                    }
                    v179 = v61;
                    v184 = 9999999;
                    if (!v61)
                    {
                    LABEL_325:
                        v145 = v175 + dword_B5D24_B5D14 - dword_B5D30_B5D20 + 1;
                        if (v145 > 0)
                        {
                            v146 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920 + 12 * v145);
                            v147 = (_DWORD*)dword_B5CD8_B5CC8;
                            v148 = v175 + dword_B5D24_B5D14 - dword_B5D30_B5D20 + 2;
                            if (v175 + dword_B5D24_B5D14 - dword_B5D30_B5D20 != -2)
                            {
                                do
                                {
                                    v146 -= 3;
                                    if ((unsigned int)v146 < (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920)
                                        break;
                                    if (v146[1] + *v146 - *v147 > 0)
                                    {
                                        v146[1] -= v146[1] + *v146 - *v147;
                                        if ((int)v146[1] < 0)
                                            v146[1] = 0;
                                    }
                                    --v147;
                                    --v148;
                                } while (v148);
                            }
                        }
                        if (v175 - v61 >= 0)
                            goto LABEL_181;
                        v149 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920 + 12 * v175);
                        v177 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
                        v150 = v175 - v61 - dword_B5D2C_B5D1C;
                        v151 = v61 - v175;
                        if (v150 < 0)
                        {
                            v61 = v175 - dword_B5D2C_B5D1C;
                            if (v175 - dword_B5D2C_B5D1C <= 0)
                                goto LABEL_404;
                            v151 += v150;
                        }
                        v152 = v151;
                        v153 = v151 - 1;
                        if (v152 > 0)
                        {
                            while (v153)
                            {
                                v149 += 3;
                                if ((unsigned int)v149 >= (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920)
                                {
                                    v154 = *v177 - *v149;
                                    if (v154 > 0)
                                    {
                                        *v149 = *v177;
                                        v155 = v149[1] - v154;
                                        v149[1] = v155;
                                        if (v155 < 0)
                                            v149[1] = 0;
                                        v149[2] += v154;
                                    }
                                }
                                --v153;
                                ++v177;
                            }
                        }
                        goto LABEL_181;
                    }
                    break;
                default:
                    goto LABEL_404;
                }
                while (1)
                {
                    v143 = v138 >> 16;
                    if (v138 >> 16 >= 0)
                        break;
                    v144 = -v143;
                    *v139 = 0;
                    v139[1] = v60 - v144;
                    v139[2] = v144;
                    if (v144 < v184)
                        goto LABEL_321;
                LABEL_322:
                    if (v139[1] + *v139 > dword_B5D34_B5D24)
                        v139[1] = dword_B5D34_B5D24 - *v139;
                    v139 += 3;
                    v138 += v173;
                    if (!--v179)
                        goto LABEL_325;
                }
                v139[2] = 0;
                *v139 = v143;
                v144 = 0;
                v139[1] = v60;
            LABEL_321:
                v184 = v144;
                goto LABEL_322;
            }
        }
        v55 = dword_B5CB4_B5CA4 - (-(sin_B5CD4_B5CC4 * dword_B5CA8_B5C98) >> 17);
        dword_B5CB8_B5CA8 -= (cos_B5CE8_B5CD8 * dword_B5CA8_B5C98) >> 17;
        goto LABEL_136;
    }
    v1 = (dword_B5CC8_B5CB8 + dword_B5CA8_B5C98) >> 2;
    if (a1)
    {
        v2 = (v1 * cos_B5CE8_B5CD8) >> 16;
        v3 = (v1 * sin_B5CD4_B5CC4) >> 16;
        if (a1 <= 1)
        {
            dword_B5CB8_B5CA8 += -v3 - v1;
            dword_B5CB4_B5CA4 += -v2 - v1;
        }
        else if (a1 == 2)
        {
            dword_B5CB8_B5CA8 += v3 - v1;
            dword_B5CB4_B5CA4 += v2 - v1;
        }
    }
    v4 = widthViewPort_93AD8;
    if (widthViewPort_93AD8 <= dword_B5CB8_B5CA8)
        goto LABEL_404;
    v5 = dword_B5CA8_B5C98;
    v6 = (dword_B5CBC_B5CAC << 16) / dword_B5CA8_B5C98;
    if (-dword_B5CB8_B5CA8 < 0 || dword_B5CB8_B5CA8 == 0)
    {
        dword_B5CC4_B5CB4 = 0;
        if (dword_B5CA8_B5C98 + dword_B5CB8_B5CA8 - widthViewPort_93AD8 <= 0)
            goto LABEL_16;
        v4 = widthViewPort_93AD8 - dword_B5CB8_B5CA8;
        goto LABEL_15;
    }
    v7 = dword_B5CA8_B5C98 + dword_B5CB8_B5CA8;
    dword_B5CA8_B5C98 += dword_B5CB8_B5CA8;
    if (v5 + dword_B5CB8_B5CA8 <= 0)
        goto LABEL_404;
    dword_B5CC4_B5CB4 = v6 * -dword_B5CB8_B5CA8;
    dword_B5CB8_B5CA8 = 0;
    if (widthViewPort_93AD8 <= v7)
        LABEL_15:
    dword_B5CA8_B5C98 = v4;
LABEL_16:
    v8 = heightViewPort_93ADC;
    if (heightViewPort_93ADC <= dword_B5CB4_B5CA4)
        goto LABEL_404;
    v9 = dword_B5CC8_B5CB8;
    v172 = (dword_B5CCC_B5CCC << 16) / dword_B5CC8_B5CB8;
    if (-dword_B5CB4_B5CA4 < 0 || dword_B5CB4_B5CA4 == 0)
    {
        dword_B5CC0_B5CB0 = 0;
        if (dword_B5CB4_B5CA4 + dword_B5CC8_B5CB8 - heightViewPort_93ADC <= 0)
            goto LABEL_24;
        v8 = heightViewPort_93ADC - dword_B5CB4_B5CA4;
        goto LABEL_23;
    }
    v10 = dword_B5CC8_B5CB8 + dword_B5CB4_B5CA4;
    dword_B5CC8_B5CB8 += dword_B5CB4_B5CA4;
    if (v9 + dword_B5CB4_B5CA4 <= 0)
        goto LABEL_404;
    dword_B5CC0_B5CB0 = -dword_B5CB4_B5CA4 * v172;
    dword_B5CB4_B5CA4 = 0;
    if (heightViewPort_93ADC <= v10)
        LABEL_23:
    dword_B5CC8_B5CB8 = v8;
LABEL_24:
    v11 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36960);
    for (k = dword_B5CA8_B5C98; k; --k)
    {
        v11[1] = dword_B5CC4_B5CB4 >> 16;
        if (v11 == (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36960))
            *(_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36960) = 22;
        else
            *v11 = v11[1] - *(v11 - 1);
        v11 += 2;
        dword_B5CC4_B5CB4 += v6;
    }
    v185 = pitchViewPort_93AD4 * dword_B5CB4_B5CA4 + dword_B5CB8_B5CA8 + beginFrame_93ACC;
    if (!dword_B5CC8_B5CB8)
        goto LABEL_404;
    do
    {
        v12 = (char*)(*(_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36964) + dword_B5CB0_B5CA0 + dword_B5CD0_B5CC0 * (dword_B5CC0_B5CB0 >> 16));
        v13 = dword_B5CAC_B5C9C;
        v14 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36960);
        switch (dword_B5CAC_B5C9C)
        {
        case 0:
            v15 = (_BYTE*)v185;
            v16 = dword_B5CA8_B5C98 >> 1;
            if (!(dword_B5CA8_B5C98 & 1))
            {
                v17 = v16 & 1;
                v18 = dword_B5CA8_B5C98 >> 2;
                if (v17)
                {
                    ++v18;
                    v14 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36952);
                    v15 = (_BYTE*)(v185 - 2);
                    goto LABEL_42;
                }
                v14 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36968);
                goto LABEL_38;
            }
            v19 = v16 + 2;
            v17 = v19 & 1;
            v18 = v19 >> 1;
            if (!v17)
            {
                v14 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36944);
                v15 = (_BYTE*)(v185 - 3);
                goto LABEL_44;
            }
            v15 = (_BYTE*)(v185 - 1);
            while (1)
            {
                v21 = *v12;
                v12 += v14[2];
                if (v21)
                    v15[1] = v21;
            LABEL_42:
                v22 = *v12;
                v12 += v14[4];
                if (v22)
                    v15[2] = v22;
            LABEL_44:
                v23 = *v12;
                v12 += v14[6];
                if (v23)
                    v15[3] = v23;
                v15 += 4;
                v14 += 8;
                if (!--v18)
                    break;
            LABEL_38:
                v20 = *v12;
                v12 += *v14;
                if (v20)
                    *v15 = v20;
            }
            break;
        case 1:
            v24 = (_BYTE*)v185;
            v25 = dword_B5CA4_B5C94;
            v26 = dword_B5CA8_B5C98 >> 1;
            if (!(dword_B5CA8_B5C98 & 1))
            {
                v14 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36968);
                goto LABEL_51;
            }
            ++v26;
            v24 = (_BYTE*)(v185 - 1);
            while (1)
            {
                LOBYTE(v25) = *v12;
                v12 += v14[2];
                if ((_BYTE)v25)
                    v24[1] = strPal.fog_B7934_B7924[v25];
                v24 += 2;
                v14 += 4;
                if (!--v26)
                    break;
            LABEL_51:
                LOBYTE(v25) = *v12;
                v12 += *v14;
                if ((_BYTE)v25)
                    *v24 = strPal.fog_B7934_B7924[v25];
            }
            break;
        case 2:
            v27 = (_BYTE*)v185;
            HIWORD(v28) = 0;
            v29 = dword_B5CA8_B5C98 >> 1;
            if (!(dword_B5CA8_B5C98 & 1))
            {
                v14 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36968);
                goto LABEL_60;
            }
            ++v29;
            v27 = (_BYTE*)(v185 - 1);
            while (1)
            {
                BYTE1(v28) = *v12;
                v12 += v14[2];
                if (BYTE1(v28))
                {
                    LOBYTE(v28) = v27[1];
                    v27[1] = strPal.byte_BB934_BB924[v28];
                }
                v27 += 2;
                v14 += 4;
                if (!--v29)
                    break;
            LABEL_60:
                BYTE1(v28) = *v12;
                v12 += *v14;
                if (BYTE1(v28))
                {
                    LOBYTE(v28) = *v27;
                    *v27 = strPal.byte_BB934_BB924[v28];
                }
            }
            break;
        case 3:
            v30 = (_BYTE*)v185;
            HIWORD(v31) = 0;
            v32 = dword_B5CA8_B5C98 >> 1;
            if (!(dword_B5CA8_B5C98 & 1))
            {
                v14 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36968);
                goto LABEL_69;
            }
            ++v32;
            v30 = (_BYTE*)(v185 - 1);
            while (1)
            {
                LOBYTE(v31) = *v12;
                v12 += v14[2];
                if ((_BYTE)v31)
                {
                    BYTE1(v31) = v30[1];
                    v30[1] = strPal.byte_BB934_BB924[v31];
                }
                v30 += 2;
                v14 += 4;
                if (!--v32)
                    break;
            LABEL_69:
                LOBYTE(v31) = *v12;
                v12 += *v14;
                if ((_BYTE)v31)
                {
                    BYTE1(v31) = *v30;
                    *v30 = strPal.byte_BB934_BB924[v31];
                }
            }
            break;
        case 4:
            v33 = (_BYTE*)v185;
            BYTE1(v13) = dword_B5CAC_B5C9C;
            v34 = dword_B5CA8_B5C98 >> 1;
            if (!(dword_B5CA8_B5C98 & 1))
            {
                v14 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36968);
                goto LABEL_78;
            }
            ++v34;
            v33 = (_BYTE*)(v185 - 1);
            while (1)
            {
                LOBYTE(v13) = *v12;
                v12 += v14[2];
                if ((_BYTE)v13)
                    v33[1] = strPal.byte_BB934_BB924[v13];
                v33 += 2;
                v14 += 4;
                if (!--v34)
                    break;
            LABEL_78:
                LOBYTE(v13) = *v12;
                v12 += *v14;
                if ((_BYTE)v13)
                    *v33 = strPal.byte_BB934_BB924[v13];
            }
            break;
        case 5:
            v35 = (_BYTE*)v185;
            v36 = dword_B5CA8_B5C98 >> 1;
            if (!(dword_B5CA8_B5C98 & 1))
            {
                v14 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36968);
                goto LABEL_87;
            }
            ++v36;
            v35 = (_BYTE*)(v185 - 1);
            while (1)
            {
                BYTE1(v13) = *v12;
                v12 += v14[2];
                if (BYTE1(v13))
                    v35[1] = strPal.byte_BB934_BB924[v13];
                v35 += 2;
                v14 += 4;
                if (!--v36)
                    break;
            LABEL_87:
                BYTE1(v13) = *v12;
                v12 += *v14;
                if (BYTE1(v13))
                    *v35 = strPal.byte_BB934_BB924[v13];
            }
            break;
        case 6:
            v37 = (_BYTE*)v185;
            v38 = dword_B5CA4_B5C94;
            HIWORD(v39) = 0;
            v40 = dword_B5CA8_B5C98 >> 1;
            if (!(dword_B5CA8_B5C98 & 1))
            {
                v14 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36968);
                goto LABEL_96;
            }
            ++v40;
            v37 = (_BYTE*)(v185 - 1);
            while (1)
            {
                BYTE1(v39) = *v12;
                v12 += v14[2];
                if (BYTE1(v39))
                {
                    LOBYTE(v39) = v37[1];
                    LOBYTE(v38) = strPal.byte_BB934_BB924[v39];
                    v37[1] = strPal.fog_B7934_B7924[v38];
                }
                v37 += 2;
                v14 += 4;
                if (!--v40)
                    break;
            LABEL_96:
                BYTE1(v39) = *v12;
                v12 += *v14;
                if (BYTE1(v39))
                {
                    LOBYTE(v39) = *v37;
                    LOBYTE(v38) = strPal.byte_BB934_BB924[v39];
                    *v37 = strPal.fog_B7934_B7924[v38];
                }
            }
            break;
        case 7:
            v41 = (_BYTE*)v185;
            v42 = dword_B5CA4_B5C94;
            HIWORD(v43) = 0;
            v44 = dword_B5CA8_B5C98 >> 1;
            if (!(dword_B5CA8_B5C98 & 1))
            {
                v14 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36968);
                goto LABEL_105;
            }
            ++v44;
            v41 = (_BYTE*)(v185 - 1);
            while (1)
            {
                LOBYTE(v43) = *v12;
                v12 += v14[2];
                if ((_BYTE)v43)
                {
                    BYTE1(v43) = v41[1];
                    LOBYTE(v42) = strPal.byte_BB934_BB924[v43];
                    v41[1] = strPal.fog_B7934_B7924[v42];
                }
                v41 += 2;
                v14 += 4;
                if (!--v44)
                    break;
            LABEL_105:
                LOBYTE(v43) = *v12;
                v12 += *v14;
                if ((_BYTE)v43)
                {
                    BYTE1(v43) = *v41;
                    LOBYTE(v42) = strPal.byte_BB934_BB924[v43];
                    *v41 = strPal.fog_B7934_B7924[v42];
                }
            }
            break;
        case 9:
            v45 = (_BYTE*)v185;
            v46 = dword_B5CA4_B5C94 >> 8;
            v47 = dword_B5CA8_B5C98 >> 1;
            if (!(dword_B5CA8_B5C98 & 1))
            {
                v17 = v47 & 1;
                v48 = dword_B5CA8_B5C98 >> 2;
                if (v17)
                {
                    ++v48;
                    v14 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36952);
                    v45 = (_BYTE*)(v185 - 2);
                    goto LABEL_122;
                }
                v14 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36968);
                goto LABEL_118;
            }
            v49 = v47 + 2;
            v17 = v49 & 1;
            v48 = v49 >> 1;
            if (!v17)
            {
                v14 = (_DWORD*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36944);
                v45 = (_BYTE*)(v185 - 3);
                goto LABEL_124;
            }
            v45 = (_BYTE*)(v185 - 1);
            while (1)
            {
                v51 = *v12;
                v12 += v14[2];
                if (v51)
                    v45[1] = BYTE1(v46);
            LABEL_122:
                v52 = *v12;
                v12 += v14[4];
                if (v52)
                    v45[2] = BYTE1(v46);
            LABEL_124:
                v53 = *v12;
                v12 += v14[6];
                if (v53)
                    v45[3] = BYTE1(v46);
                v45 += 4;
                v14 += 8;
                if (!--v48)
                    break;
            LABEL_118:
                v50 = *v12;
                v12 += *v14;
                if (v50)
                    *v45 = BYTE1(v46);
            }
            break;
        default:
            break;
        }
        result = pitchViewPort_93AD4;
        dword_B5CC0_B5CB0 += v172;
        v185 += pitchViewPort_93AD4;
        --dword_B5CC8_B5CB8;
    } while (dword_B5CC8_B5CB8);
}

int counter_sub_2DCB0_2DCF0 = 0;
int counter_dword_B5CB0_B5CA0 = 0;
//SYNCHRONIZED WITH REMC1
void DrawSprite_2DCB0_2DCF0(Type_BegBscreen* a2x)//1FECB0_
{
    unsigned __int16 result; // ax
    //int v3; // ebp
    //__int16 v4; // bx
    int v5; // ecx
    int v6; // ebx
    int v7; // edx
    Type_99BA0* v8x; // edi
    int v9; // ebx
    int v10; // ecx
    int v11; // eax
    int v12; // eax
    int v13; // ebx
    int v14; // eax
    int v15; // eax
    int v16; // edx
    int v17; // eax
    int v18; // eax
    int v19; // ebx
    int v20; // eax
    int v21; // eax
    int v22; // ebx
    int v23; // eax
    int v24; // ebx
    int v25; // eax
    int v26; // eax
    //char v27; // dh
    int v28; // eax
    unsigned __int8 v29; // al
    int v30; // edx
    int v31; // ecx
    int v32; // ebx
    int v33; // edx
    Type_99BA0* v34x; // edi
    int v35; // ebx
    int v36; // ecx
    char v37; // al
    int v38; // eax
    //int *v39; // esi
    int v40; // eax
    int v41; // edx
    int v42; // eax
    int v43; // ebx
    int v44; // eax
    int v45; // eax
    int v46; // edx
    int v47; // eax
    int v48; // eax
    int v49; // edx
    int v50; // ebx
    int v51; // eax
    int v52; // eax
    int v53; // eax
    int v54; // ebx
    int v55; // eax
    int v56; // eax
    //char v57; // ch
    int v58; // eax
    unsigned __int8 v59; // al
    int v60; // [esp+0h] [ebp-24h]
    int v61; // [esp+4h] [ebp-20h]
    int v62; // [esp+8h] [ebp-1Ch]
    int v63; // [esp+Ch] [ebp-18h]
    int v64; // [esp+10h] [ebp-14h]

    //adress 1FECB0_
    //debug
#ifdef debug1
    if (counter_sub_2DCB0_2DCF0 == 0x5d)
    {
        counter_sub_2DCB0_2DCF0++;
        counter_sub_2DCB0_2DCF0--;
    }
    //add_compare(0x1FECB0, true, true);

    //fixPosX_90710 .. 24e710
    uint8_t origbyte20 = 0;
    uint8_t remakebyte20 = 0;
    char buffer1[500];
    sprintf(buffer1, "%08X-0024e710", 0x1FECB0);
    //int comp20 = compare_with_sequence(buffer1, (uint8_t*)&fixPosX_90710, 0x1FECB0, counter_sub_2DCB0_2DCF0 - 0, 4, 4, &origbyte20, &remakebyte20, 0, true);

    origbyte20 = 0;
    remakebyte20 = 0;
    //char buffer1[500];
    sprintf(buffer1, "%08X-FFFFFFF4", 0x1FECBF);
    //comp20 = compare_with_sequence(buffer1, (uint8_t*)&a2x->haveSprite_36, 0x1FECB0, counter_sub_2DCB0_2DCF0 - 0, 1, 1, &origbyte20, &remakebyte20, 0, true);

    counter_sub_2DCB0_2DCF0++;
#endif debug1
    //debug

      //fix
    v60 = 0;
    Type_sub168_2_2* a1x = nullptr;
    //fix

    result = a2x->haveSprite_36;
    do
    {
        //v3 = dword_AE400_AE3F0() + 29795 + 164 * result;
        if ((str_AE400_AE3F0->str_29795[result].var_29811_16.byte[0] & 0x21) == 0)
        {
            //nullsub_1(v3, v60);
            //v4 = str_AE400_AE3F0->str_29795[result].var_u32_29867_72.y;
            v62 = (__int16)(str_AE400_AE3F0->str_29795[result].var_u32_29867_72.x - posX_B5D3C_B5D2C);
            v61 = (__int16)(posY_B5D3A_B5D2A - str_AE400_AE3F0->str_29795[result].var_u32_29867_72.y);
            if (byte_B5D3F_B5D2F)
            {
                if (!a2x->var_43)
                {
                    v5 = sub_724C0_729D0(str_AE400_AE3F0->str_29795[result].var_u32_29867_72.x, str_AE400_AE3F0->str_29795[result].var_u32_29867_72.y) - posZ_B5CF8_B5CE8;
                    v6 = (v62 * sin_B5CDC_B5CCC - cos_B5D10_B5D00 * v61) >> 16;
                    v63 = (cos_B5D10_B5D00 * v62 + sin_B5CDC_B5CCC * v61) >> 16;
                    v7 = v63 * v63 + v6 * v6;
                    if (v63 > 64 && v7 < dword_B5D00_B5CF0)
                    {
                        if (v7 <= dword_B5CF0_B5CE0)
                            dword_B5CA4_B5C94 = 0x2000;
                        else
                            dword_B5CA4_B5C94 = v7 < dword_B5D0C_B5CFC ? (32 * (dword_B5D0C_B5CFC - v7) / dword_B5CEC_B5CDC) << 8 : 0;
                        //v8 = (unsigned __int16 *)((char *)&unk_99BA0 + 14 * *(__int16 *)(v3 + 86));
                        v8x = &unk_99BA0x[str_AE400_AE3F0->str_29795[result].var_u16_29881_86];
                        if (!v8x->var_10)
                        {
                            v9 = v6 * fowDist_B5D14_B5D04 / v63;
                            v10 = v5 * fowDist_B5D14_B5D04 / v63 + dword_B5CFC_B5CEC;
                            v60 = (v9 * cos_B5CE8_B5CD8 - v10 * sin_B5CD4_B5CC4) >> 16;
                            dword_B5CB8_B5CA8 = v60 + dword_B5D08_B5CF8;
                            dword_B5CB4_B5CA4 = heightViewPort_B5CE4_B5CD4 - ((cos_B5CE8_B5CD8 * v10 + sin_B5CD4_B5CC4 * v9) >> 16);
                            byte_B5D3E_B5D2E = 0;
                            switch (v8x->var_12)
                            {
                            case 0:
                                if (!dword_12DF8C_12DF7C[v8x->var_0] && !sub_59050_59560(v8x->var_0))
                                    goto LABEL_140;
                                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v8x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                                a1x = dword_12DF8C_12DF7C[v8x->var_0]->var_u32_0;
                                goto LABEL_35;
                            case 1:
                                if (!dword_12DF8C_12DF7C[v8x->var_0] && !sub_59050_59560(v8x->var_0))
                                    goto LABEL_140;
                                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v8x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                                a1x = dword_12DF8C_12DF7C[v8x->var_0]->var_u32_0;
                                goto LABEL_35;
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                            case 0xA:
                            case 0xB:
                            case 0xC:
                            case 0xD:
                            case 0xE:
                            case 0xF:
                            case 0x10:
                                goto LABEL_25;
                            case 0x11:
                                v19 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
                                if (v19 < 8)
                                {
                                    if (dword_12DF8C_12DF7C[v19 + v8x->var_0] || sub_59050_59560(v19 + v8x->var_0))
                                    {
                                        dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v19 + v8x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                                        a1x = dword_12DF8C_12DF7C[v19 + v8x->var_0]->var_u32_0;
                                        dword_B5CD0_B5CC0 = a1x->xx;
                                        dword_B5CCC_B5CCC = a1x->yy;
                                        dword_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)v8x->var_8) / v63;
                                        dword_B5CA8_B5C98 = dword_B5CC8_B5CB8 * dword_B5CD0_B5CC0 / dword_B5CCC_B5CCC;
                                        v15 = dword_B5CD0_B5CC0;
                                        goto LABEL_64;
                                    }
                                    goto LABEL_140;
                                }
                                v20 = v8x->var_0 + 15 - v19;
                                if (dword_12DF8C_12DF7C[v20])
                                {
                                    dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v20].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                                }
                                else
                                {
                                    if (!sub_59050_59560(v8x->var_0 + 15 - v19))
                                        goto LABEL_140;
                                    dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v8x->var_0 + 15 - v19].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                                }
                                v21 = v8x->var_0 + 15 - v19;
                                goto LABEL_63;
                            case 0x12:
                                v22 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
                                v23 = v22 + v8x->var_0;
                                if (dword_12DF8C_12DF7C[v23])
                                    goto LABEL_52;
                                if (!sub_59050_59560(v22 + v8x->var_0))
                                    goto LABEL_140;
                                v23 = v22 + v8x->var_0;
                            LABEL_52:
                                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v23].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                                a1x = dword_12DF8C_12DF7C[v22 + v8x->var_0]->var_u32_0;
                                dword_B5CD0_B5CC0 = a1x->xx;
                                dword_B5CCC_B5CCC = a1x->yy;
                                dword_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)v8x->var_8) / v63;
                                dword_B5CA8_B5C98 = dword_B5CC8_B5CB8 * dword_B5CD0_B5CC0 / dword_B5CCC_B5CCC;
                                v15 = dword_B5CD0_B5CC0;
                                goto LABEL_64;
                            case 0x13:
                                v13 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
                                if (v13 < 8)
                                {
                                    v14 = (unsigned __int8)byte_906E8[v13] + v8x->var_0;
                                    if (dword_12DF8C_12DF7C[v14])
                                    {
                                        dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v14].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                                    }
                                    else
                                    {
                                        if (!sub_59050_59560(v8x->var_0 + (unsigned __int8)byte_906E8[v13]))
                                            goto LABEL_140;
                                        dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v8x->var_0 + (unsigned __int8)byte_906E8[v13]].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                                    }
                                    a1x = dword_12DF8C_12DF7C[v8x->var_0 + (unsigned __int8)byte_906E8[v13]]->var_u32_0;
                                LABEL_35:
                                    dword_B5CD0_B5CC0 = a1x->xx;
                                    dword_B5CCC_B5CCC = a1x->yy;
                                    dword_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)v8x->var_8) / v63;
                                    dword_B5CA8_B5C98 = dword_B5CC8_B5CB8 * dword_B5CD0_B5CC0 / dword_B5CCC_B5CCC;
                                    v15 = dword_B5CD0_B5CC0;
                                    goto LABEL_64;
                                }
                                v16 = (unsigned __int8)byte_906E8[v13];
                                v17 = v16 + v8x->var_0;
                                if (!dword_12DF8C_12DF7C[v17])
                                {
                                    if (!sub_59050_59560(v8x->var_0 + (unsigned __int8)v16))
                                        goto LABEL_140;
                                    v17 = v8x->var_0 + (unsigned __int8)byte_906E8[v13];
                                }
                                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v17].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                                v18 = (unsigned __int8)byte_906E8[v13];
                                goto LABEL_62;
                            case 0x14:
                                v24 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
                                if (v24 >= 8)
                                {
                                    v26 = v8x->var_0 + (unsigned __int8)byte_906F8[v24];
                                    if (!dword_12DF8C_12DF7C[v26])
                                    {
                                        if (!sub_59050_59560(v8x->var_0 + (unsigned __int8)byte_906F8[v24]))
                                            goto LABEL_140;
                                        v26 = v8x->var_0 + (unsigned __int8)byte_906F8[v24];
                                    }
                                    dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v26].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                                    v18 = (unsigned __int8)byte_906F8[v24];
                                LABEL_62:
                                    v21 = v8x->var_0 + v18;
                                LABEL_63:
                                    a1x = dword_12DF8C_12DF7C[v21]->var_u32_0;
                                    dword_B5CD0_B5CC0 = a1x->xx;
                                    dword_B5CCC_B5CCC = a1x->yy;
                                    dword_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)v8x->var_8) / v63;
                                    dword_B5CA8_B5C98 = dword_B5CC8_B5CB8 * dword_B5CD0_B5CC0 / dword_B5CCC_B5CCC;
                                    v15 = -dword_B5CD0_B5CC0;
                                }
                                else
                                {
                                    v25 = (unsigned __int8)byte_906F8[v24] + v8x->var_0;
                                    if (!dword_12DF8C_12DF7C[v25])
                                    {
                                        if (!sub_59050_59560(v8x->var_0 + (unsigned __int8)byte_906F8[v24]))
                                            goto LABEL_140;
                                        v25 = v8x->var_0 + (unsigned __int8)byte_906F8[v24];
                                    }
                                    dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v25].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                                    a1x = dword_12DF8C_12DF7C[v8x->var_0 + (unsigned __int8)byte_906F8[v24]]->var_u32_0;
                                    dword_B5CD0_B5CC0 = a1x->xx;
                                    dword_B5CCC_B5CCC = a1x->yy;
                                    dword_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)v8x->var_8) / v63;
                                    dword_B5CA8_B5C98 = dword_B5CC8_B5CB8 * dword_B5CD0_B5CC0 / dword_B5CCC_B5CCC;
                                    v15 = dword_B5CD0_B5CC0;
                                }
                            LABEL_64:
                                dword_B5CBC_B5CAC = v15;
                            LABEL_65:
                                //v27 = *(_BYTE *)a1 | 8;
                                dword_B5CB0_B5CA0 = a1x->datax;//a1x->var_u32_0->data+2 //0x1ff64c
                                //debug
                                if (counter_dword_B5CB0_B5CA0 == 0x19)
                                {
                                    counter_dword_B5CB0_B5CA0++;
                                    counter_dword_B5CB0_B5CA0--;
                                }


                                //fixPosX_90710 .. 24e710
                                origbyte20 = 0;
                                remakebyte20 = 0;
                                //char buffer1[500];
                                sprintf(buffer1, "%08X-FFFFFFF4", 0x1FF64C);
                                //comp20 = compare_with_sequence(buffer1, (uint8_t*)a1 + 6, 0x1FF64C, counter_dword_B5CB0_B5CA0 - 0, 40, 40, &origbyte20, &remakebyte20, 0, true);

                                counter_dword_B5CB0_B5CA0++;
                                //debug
                                v28 = dword_B5CA4_B5C94;
                                //*(_BYTE *)a1 = v27;
                                a1x->var_0 |= 8;
                                if (v28 == 0x2000)
                                    v29 = byte_906DC[v8x->var_10];
                                else
                                    v29 = byte_906E2[v8x->var_10];
                                dword_B5CAC_B5C9C = v29;
                                v30 = dword_B5CC8_B5CB8 >> 2;
                                dword_B5CC8_B5CB8 >>= 2;
                                if (dword_B5CA8_B5C98 > 0 && v30 > 0)
                                {
                                    dword_B5CAC_B5C9C = 8;
                                    dword_B5CA4_B5C94 = (dword_B5CA4_B5C94 >> 2) + 0x2000;
                                    sub_2C410_2C450(0);
                                }
                                break;
                            case 0x15:
                                v11 = v8x->var_0;
                                if (dword_12DF8C_12DF7C[v11])
                                    goto LABEL_20;
                                if (!sub_59050_59560(v11))
                                    goto LABEL_140;
                                v11 = v8x->var_0;
                            LABEL_20:
                                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v11].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                                a1x = dword_12DF8C_12DF7C[v8x->var_0]->var_u32_0;
                                goto LABEL_35;
                            case 0x16:
                            case 0x17:
                            case 0x18:
                            case 0x19:
                            case 0x1A:
                            case 0x1B:
                            case 0x1C:
                            case 0x1D:
                            case 0x1E:
                            case 0x1F:
                            case 0x20:
                            case 0x21:
                            case 0x22:
                            case 0x23:
                            case 0x24:
                                byte_B5D3E_B5D2E = 1;
                            LABEL_25:
                                v12 = str_AE400_AE3F0->str_29795[result].var_u8_29883_88 + v8x->var_0;
                                if (dword_12DF8C_12DF7C[v12])
                                    goto LABEL_28;
                                if (!sub_59050_59560(v8x->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88))
                                    goto LABEL_140;
                                v12 = v8x->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88;
                            LABEL_28:
                                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v12].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                                a1x = dword_12DF8C_12DF7C[v8x->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88]->var_u32_0;
                                goto LABEL_35;
                            default:
                                goto LABEL_65;
                            }
                        }
                    }
                }
            }
            v31 = str_AE400_AE3F0->str_29795[result].var_u32_29867_72.z - posZ_B5CF8_B5CE8;
            v32 = (v62 * sin_B5CDC_B5CCC - cos_B5D10_B5D00 * v61) >> 16;
            v64 = (sin_B5CDC_B5CCC * v61 + cos_B5D10_B5D00 * v62) >> 16;
            v33 = v64 * v64 + v32 * v32;
            if (v64 > 64 && v33 < dword_B5D00_B5CF0)
            {
                if (v33 <= dword_B5CF0_B5CE0)
                {
                    dword_B5CA4_B5C94 = 0x2000;
                }
                else if (v33 < dword_B5D0C_B5CFC)
                {
                    dword_B5CA4_B5C94 = (32 * (dword_B5D0C_B5CFC - v33) / dword_B5CEC_B5CDC) << 8;
                }
                else
                {
                    dword_B5CA4_B5C94 = 0;
                }
                //v34 = (unsigned __int16 *)((char *)&unk_99BA0 + 14 * *(__int16 *)(v3 + 86));
                v34x = &unk_99BA0x[str_AE400_AE3F0->str_29795[result].var_u16_29881_86];
                v35 = v32 * fowDist_B5D14_B5D04 / v64;
                v36 = v31 * fowDist_B5D14_B5D04 / v64 + dword_B5CFC_B5CEC;
                v60 = (v35 * cos_B5CE8_B5CD8 - v36 * sin_B5CD4_B5CC4) >> 16;
                dword_B5CB8_B5CA8 = v60 + dword_B5D08_B5CF8;
                dword_B5CB4_B5CA4 = heightViewPort_B5CE4_B5CD4 - ((cos_B5CE8_B5CD8 * v36 + sin_B5CD4_B5CC4 * v35) >> 16);
                v37 = v34x->var_12;
                byte_B5D3E_B5D2E = 0;
                switch (v37)
                {
                case 0:
                    if (dword_12DF8C_12DF7C[v34x->var_0])
                    {
                        dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v34x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                        goto LABEL_83;
                    }
                    if (sub_59050_59560(v34x->var_0))
                    {
                        dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v34x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                    LABEL_83:
                        a1x = dword_12DF8C_12DF7C[v34x->var_0]->var_u32_0;
                        goto LABEL_103;
                    }
                    break;
                case 1:
                    if (dword_12DF8C_12DF7C[v34x->var_0])
                    {
                        v40 = begTmapsTab_12D744_12D734_2EB744_2EB734x[v34x->var_0].var_8;
                        v41 = str_AE408_AE3F8->var_u32_4.dword;
                    }
                    else
                    {
                        if (!sub_59050_59560(v34x->var_0))
                            break;
                        v40 = begTmapsTab_12D744_12D734_2EB744_2EB734x[v34x->var_0].var_8;
                        v41 = str_AE408_AE3F8->var_u32_4.dword;
                    }
                    dword_12CF00_12CEF0[v40] = v41;
                    a1x = dword_12DF8C_12DF7C[v34x->var_0]->var_u32_0;
                    goto LABEL_103;
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                    goto LABEL_94;
                case 17:
                    v50 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
                    if (v50 < 8)
                    {
                        if (dword_12DF8C_12DF7C[v50 + v34x->var_0])
                        {
                            dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v50 + v34x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                        }
                        else
                        {
                            if (!sub_59050_59560(v50 + v34x->var_0))
                                break;
                            dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v50 + v34x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                        }
                        goto LABEL_114;
                    }
                    v51 = v34x->var_0 + 15 - v50;
                    if (dword_12DF8C_12DF7C[v51])
                    {
                        dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v51].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                    }
                    else
                    {
                        if (!sub_59050_59560(v34x->var_0 + 15 - v50))
                            break;
                        dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v34x->var_0 + 15 - v50].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                    }
                    v52 = v34x->var_0 + 15 - v50;
                    goto LABEL_134;
                case 18:
                    v50 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
                    v53 = v50 + v34x->var_0;
                    if (dword_12DF8C_12DF7C[v53])
                    {
                        dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v53].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                        goto LABEL_114;
                    }
                    if (sub_59050_59560(v50 + v34x->var_0))
                    {
                        dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v50 + v34x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                    LABEL_114:
                        a1x = dword_12DF8C_12DF7C[v50 + v34x->var_0]->var_u32_0;
                        dword_B5CD0_B5CC0 = a1x->xx;
                        dword_B5CCC_B5CCC = a1x->yy;
                        dword_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)v34x->var_8) / v64;
                        dword_B5CA8_B5C98 = dword_B5CC8_B5CB8 * dword_B5CD0_B5CC0 / dword_B5CCC_B5CCC;
                        v45 = dword_B5CD0_B5CC0;
                        goto LABEL_135;
                    }
                    break;
                case 19:
                    v43 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
                    if (v43 < 8)
                    {
                        v44 = (unsigned __int8)byte_906E8[v43] + v34x->var_0;
                        if (!dword_12DF8C_12DF7C[v44])
                        {
                            if (!sub_59050_59560(v34x->var_0 + (unsigned __int8)byte_906E8[v43]))
                                break;
                            v44 = v34x->var_0 + (unsigned __int8)byte_906E8[v43];
                        }
                        dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v44].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                        a1x = dword_12DF8C_12DF7C[v34x->var_0 + (unsigned __int8)byte_906E8[v43]]->var_u32_0;
                    LABEL_103:
                        dword_B5CD0_B5CC0 = a1x->xx;
                        dword_B5CCC_B5CCC = a1x->yy;
                        dword_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)v34x->var_8) / v64;
                        dword_B5CA8_B5C98 = dword_B5CC8_B5CB8 * dword_B5CD0_B5CC0 / dword_B5CCC_B5CCC;
                        v45 = dword_B5CD0_B5CC0;
                        goto LABEL_135;
                    }
                    v46 = (unsigned __int8)byte_906E8[v43];
                    v47 = v46 + v34x->var_0;
                    if (dword_12DF8C_12DF7C[v47])
                    {
                        dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v47].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                    }
                    else
                    {
                        if (!sub_59050_59560(v34x->var_0 + (unsigned __int8)v46))
                            break;
                        dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[(unsigned __int8)byte_906E8[v43] + v34x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                    }
                    v48 = (unsigned __int8)byte_906E8[v43];
                    v49 = v34x->var_0;
                    goto LABEL_133;
                case 20:
                    v54 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
                    if (v54 >= 8)
                    {
                        v56 = v34x->var_0 + (unsigned __int8)byte_906F8[v54];
                        if (!dword_12DF8C_12DF7C[v56])
                        {
                            if (!sub_59050_59560(v34x->var_0 + (unsigned __int8)byte_906F8[v54]))
                                break;
                            v56 = v34x->var_0 + (unsigned __int8)byte_906F8[v54];
                        }
                        dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v56].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                        v49 = (unsigned __int8)byte_906F8[v54];
                        v48 = v34x->var_0;
                    LABEL_133:
                        v52 = v49 + v48;
                    LABEL_134:
                        a1x = dword_12DF8C_12DF7C[v52]->var_u32_0;
                        dword_B5CD0_B5CC0 = a1x->xx;
                        dword_B5CCC_B5CCC = a1x->yy;
                        dword_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)v34x->var_8) / v64;
                        dword_B5CA8_B5C98 = dword_B5CC8_B5CB8 * dword_B5CD0_B5CC0 / dword_B5CCC_B5CCC;
                        v45 = -dword_B5CD0_B5CC0;
                    }
                    else
                    {
                        v55 = v34x->var_0 + (unsigned __int8)byte_906F8[v54];
                        if (!dword_12DF8C_12DF7C[v55])
                        {
                            if (!sub_59050_59560(v34x->var_0 + (unsigned __int8)byte_906F8[v54]))
                                break;
                            v55 = v34x->var_0 + (unsigned __int8)byte_906F8[v54];
                        }
                        dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v55].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                        a1x = dword_12DF8C_12DF7C[v34x->var_0 + (unsigned __int8)byte_906F8[v54]]->var_u32_0;
                        dword_B5CD0_B5CC0 = a1x->xx;
                        dword_B5CCC_B5CCC = a1x->yy;
                        dword_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)v34x->var_8) / v64;
                        dword_B5CA8_B5C98 = dword_B5CC8_B5CB8 * dword_B5CD0_B5CC0 / dword_B5CCC_B5CCC;
                        v45 = dword_B5CD0_B5CC0;
                    }
                LABEL_135:
                    dword_B5CBC_B5CAC = v45;
                LABEL_136:
                    //v57 = *(_BYTE *)a1 | 8;

                    dword_B5CB0_B5CA0 = a1x->datax;
                    v58 = dword_B5CA4_B5C94;
                    //*(_BYTE *)a1 = v57;
                    a1x->var_0 |= 8;
                    if (v58 == 0x2000)
                        v59 = byte_906DC[v34x->var_10];
                    else
                        v59 = byte_906E2[v34x->var_10];
                    dword_B5CAC_B5C9C = v59;
                    ++dword_B5CA8_B5C98;
                    ++dword_B5CC8_B5CB8;
                    sub_2C410_2C450(1u);
                    break;
                case 21:
                    v38 = v34x->var_0;
                    if (dword_12DF8C_12DF7C[v38])
                        goto LABEL_87;
                    if (!sub_59050_59560(v38))
                        break;
                    v38 = v34x->var_0;
                LABEL_87:
                    dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v38].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                    //v39 = (int *)dword_12DF8C_12DF7C[v34x->var_0];
                    byte_B5D3E_B5D2E = 1;
                    a1x = dword_12DF8C_12DF7C[v34x->var_0]->var_u32_0;
                    goto LABEL_103;
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                    byte_B5D3E_B5D2E = 1;
                LABEL_94:
                    v42 = str_AE400_AE3F0->str_29795[result].var_u8_29883_88 + v34x->var_0;
                    if (dword_12DF8C_12DF7C[v42])
                        goto LABEL_97;
                    if (!sub_59050_59560(v34x->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88))
                        break;
                    v42 = v34x->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88;
                LABEL_97:
                    dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v42].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                    a1x = dword_12DF8C_12DF7C[v34x->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88]->var_u32_0;
                    goto LABEL_103;
                default:
                    goto LABEL_136;
                }
            }
        }
    LABEL_140:
        result = str_AE400_AE3F0->str_29795[result].var_u16_29815_20;
    } while (result);
}

//SYNCHRONIZED WITH REMC1
void DrawSprite_2F170_2F1B0(/*int a1,*/ Type_BegBscreen* a2x)//200170_
{
  unsigned __int16 result; // ax
  int v3; // eax
  int v4; // edx
  int v5; // ecx
  int v6; // ebp
  int v7; // esi
  //int v8; // eax
  //unsigned __int16 *v9; // ebx
  Type_99BA0* v9x; // ebx
  int v10; // esi
  int v11; // ecx
  int v12; // eax
  //int *v13; // edi
  int v14; // eax
  int v15; // esi
  int v16; // eax
  int v17; // eax
  int v18; // eax
  int v19; // eax
  int v20; // esi
  int v21; // ecx
  unsigned __int16 v22; // dx
  int v23; // ebx
  int v24; // eax
  int v25; // eax
  int v26; // esi
  int v27; // edx
  int v28; // eax
  int v29; // eax
  //char v30; // al
  int v31; // esi
  int v32; // [esp+4h] [ebp-14h]

  //fix
  Type_sub168_2_2* a1x = nullptr;
  //fix

  result = a2x->haveSprite_36;
  do
  {
    if ( result < 0x3E8u )
    {
      v3 = 164 * result + dword_AE400_AE3F0() + 29795;
      v32 = v3;
      if ( (*(_BYTE *)(v3 + 16) & 0x21) == 0 )
      {
        v4 = (__int16)(*(_WORD *)(v3 + 72) - posX_B5D3C_B5D2C);
        v5 = *(__int16 *)(v3 + 76) - posZ_B5CF8_B5CE8;
        v6 = (cos_B5D10_B5D00 * v4 + sin_B5CDC_B5CCC * (__int16)(posY_B5D3A_B5D2A - *(_WORD *)(v3 + 74))) >> 16;
        v7 = (v4 * sin_B5CDC_B5CCC - (__int16)(posY_B5D3A_B5D2A - *(_WORD *)(v3 + 74)) * cos_B5D10_B5D00) >> 16;
        if ( v6 > 64 )
        {
          //v8 = 14 * *(__int16 *)(v3 + 86);
          dword_B5CA4_B5C94 = 0x400000 - 350 * (5120 - v6);
          //v9 = (unsigned __int16 *)((char *)&unk_99BA0 + 14 * *(__int16*)(v3 + 86));
          v9x = &unk_99BA0x[*(__int16*)(v3 + 86)];
          v10 = v7 * fowDist_B5D14_B5D04 / v6;
          v11 = v5 * fowDist_B5D14_B5D04 / v6 + dword_B5CFC_B5CEC;
          dword_B5CB8_B5CA8 = ((v10 * cos_B5CE8_B5CD8 - v11 * sin_B5CD4_B5CC4) >> 16) + dword_B5D08_B5CF8;
          dword_B5CB4_B5CA4 = heightViewPort_B5CE4_B5CD4 - ((sin_B5CD4_B5CC4 * v10 + cos_B5CE8_B5CD8 * v11) >> 16);
          //v9x->var_0
          //LOBYTE(v8) = *((_BYTE *)&unk_99BA0 + 14 * *(__int16*)(v3 + 86) + 12);
          byte_B5D3E_B5D2E = 0;
          switch (v9x->var_12)
          {
            case 0:
              if ( dword_12DF8C_12DF7C[v9x->var_0] )
              {
                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v9x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                goto LABEL_10;
              }
              if ( sub_59050_59560(v9x->var_0) )
              {
                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v9x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
LABEL_10:
                a1x = dword_12DF8C_12DF7C[v9x->var_0]->var_u32_0;
                goto LABEL_31;
              }
              break;
            case 1:
              if ( dword_12DF8C_12DF7C[v9x->var_0] )
              {
                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v9x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
              }
              else
              {
                if ( !sub_59050_59560(v9x->var_0) )
                  break;
                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v9x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
              }
              a1x = dword_12DF8C_12DF7C[v9x->var_0]->var_u32_0;
              goto LABEL_31;
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
              goto LABEL_21;
            case 17:
              v20 = (((*(unsigned __int16 *)(v32 + 30) - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
              if ( v20 < 8 )
              {
                if ( dword_12DF8C_12DF7C[v20 + v9x->var_0] )
                {
                  dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v20 + v9x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                }
                else
                {
                  if ( !sub_59050_59560(v20 + v9x->var_0) )
                    break;
                  dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v20 + v9x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                }
                goto LABEL_41;
              }
              if ( dword_12DF8C_12DF7C[v9x->var_0 + 15 - v20] || sub_59050_59560(v9x->var_0 + 15 - v20) )
              {
                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v9x->var_0 + 15 - v20].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                a1x = dword_12DF8C_12DF7C[v9x->var_0 + 15 - v20]->var_u32_0;
                dword_B5CD0_B5CC0 = a1x->xx;
                v21 = v6;
                dword_B5CCC_B5CCC = a1x->yy;
                v22 = v9x->var_8;
                v23 = fowDist_B5D14_B5D04;
                v24 = v22;
                goto LABEL_59;
              }
              break;
            case 18:
              v20 = (((*(unsigned __int16 *)(v32 + 30) - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
              v25 = v20 + v9x->var_0;
              if ( dword_12DF8C_12DF7C[v25] )
              {
                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v25].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                goto LABEL_41;
              }
              if ( sub_59050_59560(v20 + v9x->var_0) )
              {
                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v20 + v9x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
LABEL_41:
                a1x = dword_12DF8C_12DF7C[v20 + v9x->var_0]->var_u32_0;
                dword_B5CD0_B5CC0 = a1x->xx;
                dword_B5CCC_B5CCC = a1x->yy;
                dword_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)v9x->var_8) / v6;
                dword_B5CA8_B5C98 = dword_B5CC8_B5CB8 * dword_B5CD0_B5CC0 / dword_B5CCC_B5CCC;
                v17 = dword_B5CD0_B5CC0;
                goto LABEL_60;
              }
              break;
            case 19:
              v15 = (((*(unsigned __int16 *)(v32 + 30) - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
              if ( v15 < 8 )
              {
                v16 = v9x->var_0 + (unsigned __int8)byte_906E8[v15];
                if ( !dword_12DF8C_12DF7C[v16] )
                {
                  if ( !sub_59050_59560(v9x->var_0 + (unsigned __int8)byte_906E8[v15]) )
                    break;
                  v16 = v9x->var_0 + (unsigned __int8)byte_906E8[v15];
                }
                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v16].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                a1x = dword_12DF8C_12DF7C[v9x->var_0 + (unsigned __int8)byte_906E8[v15]]->var_u32_0;
                goto LABEL_31;
              }
              v18 = (unsigned __int8)byte_906E8[v15] + v9x->var_0;
              if ( !dword_12DF8C_12DF7C[v18] )
              {
                if ( !sub_59050_59560(v9x->var_0 + (unsigned __int8)byte_906E8[v15]) )
                  break;
                v18 = v9x->var_0 + (unsigned __int8)byte_906E8[v15];
              }
              dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v18].var_8] = str_AE408_AE3F8->var_u32_4.dword;
              v19 = (unsigned __int8)byte_906E8[v15];
              goto LABEL_58;
            case 20:
              v26 = (((*(unsigned __int16 *)(v32 + 30) - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
              if ( v26 >= 8 )
              {
                v29 = (unsigned __int8)byte_906F8[v26] + v9x->var_0;
                if ( !dword_12DF8C_12DF7C[v29] )
                {
                  if ( !sub_59050_59560(v9x->var_0 + (unsigned __int8)byte_906F8[v26]) )
                    break;
                  v29 = v9x->var_0 + (unsigned __int8)byte_906F8[v26];
                }
                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v29].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                v19 = (unsigned __int8)byte_906F8[v26];
LABEL_58:
                a1x = dword_12DF8C_12DF7C[v9x->var_0 + v19]->var_u32_0;
                dword_B5CD0_B5CC0 = a1x->xx;
                v21 = v6;
                dword_B5CCC_B5CCC = a1x->yy;
                v24 = v9x->var_8;
                v23 = fowDist_B5D14_B5D04;
LABEL_59:
                dword_B5CC8_B5CB8 = v23 * (__int64)v24 / v21;
                dword_B5CA8_B5C98 = dword_B5CC8_B5CB8 * dword_B5CD0_B5CC0 / dword_B5CCC_B5CCC;
                v17 = -dword_B5CD0_B5CC0;
              }
              else
              {
                v27 = (unsigned __int8)byte_906F8[v26];
                v28 = v27 + v9x->var_0;
                if ( !dword_12DF8C_12DF7C[v28] )
                {
                  if ( !sub_59050_59560(v9x->var_0 + (unsigned __int8)v27) )
                    break;
                  v28 = v9x->var_0 + (unsigned __int8)byte_906F8[v26];
                }
                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v28].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                a1x = dword_12DF8C_12DF7C[v9x->var_0 + (unsigned __int8)byte_906F8[v26]]->var_u32_0;
                dword_B5CD0_B5CC0 = a1x->xx;
                dword_B5CCC_B5CCC = a1x->yy;
                dword_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)v9x->var_8) / v6;
                dword_B5CA8_B5C98 = dword_B5CC8_B5CB8 * dword_B5CD0_B5CC0 / dword_B5CCC_B5CCC;
                v17 = dword_B5CD0_B5CC0;
              }
              goto LABEL_60;
            case 21:
              v12 = v9x->var_0;
              if ( dword_12DF8C_12DF7C[v12] )
                goto LABEL_14;
              if ( !sub_59050_59560(v12) )
                break;
              v12 = v9x->var_0;
LABEL_14:
              dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v12].var_8] = str_AE408_AE3F8->var_u32_4.dword;
              //v13 = (int *)dword_12DF8C_12DF7C[v9x->var_0];
              byte_B5D3E_B5D2E = 1;
              a1x = dword_12DF8C_12DF7C[v9x->var_0]->var_u32_0;
              goto LABEL_31;
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
              byte_B5D3E_B5D2E = 1;
LABEL_21:
              v14 = *(unsigned __int8 *)(v32 + 88) + v9x->var_0;
              if ( dword_12DF8C_12DF7C[v14] )
              {
                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v14].var_8] = str_AE408_AE3F8->var_u32_4.dword;
              }
              else
              {
                if ( !sub_59050_59560(v9x->var_0 + *(unsigned __int8 *)(v32 + 88)) )
                  break;
                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v9x->var_0 + *(unsigned __int8*)(v32 + 88)].var_8] = str_AE408_AE3F8->var_u32_4.dword;
              }
              a1x = dword_12DF8C_12DF7C[v9x->var_0 + *(unsigned __int8 *)(v32 + 88)]->var_u32_0;
LABEL_31:
              dword_B5CD0_B5CC0 = a1x->xx;
              dword_B5CCC_B5CCC = a1x->yy;
              dword_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)v9x->var_8) / v6;
              dword_B5CA8_B5C98 = dword_B5CC8_B5CB8 * dword_B5CD0_B5CC0 / dword_B5CCC_B5CCC;
              v17 = dword_B5CD0_B5CC0;
LABEL_60:
              dword_B5CBC_B5CAC = v17;
LABEL_61:
              //v30 = *(_BYTE *)a1 | 8;
              dword_B5CAC_B5C9C = 9;
              v31 = dword_B5CC8_B5CB8 + 1;
              ++dword_B5CA8_B5C98;
              a1x->var_0 |= 8;
              dword_B5CC8_B5CB8 = v31;
              dword_B5CB0_B5CA0 = a1x->datax;
              sub_2C410_2C450(1u);
              break;
            default:
              goto LABEL_61;
          }
        }
      }
    }
    result = *(_WORD *)(v32 + 20);
  }
  while ( result );
}

int counter_2FC50_2FC90 = 0;
int counter_2FC50_2FC90_2 = 0;
//SYNCHRONIZED WITH REMC1
void DrawSprite_2FC50_2FC90(Type_BegBscreen* a2x)//200C50_
{
    //unsigned __int16 result; // ax
    Type_AE400_29795* v3x; // eax
    //int v4; // edx
    //int v5; // eax
    //int v6; // ecx
    //int v7; // ebx
    //int v8; // ebp
    //int v9; // edx
    //unsigned __int16 *v10; // esi
    Type_99BA0* v10x; // esi
    //int v11; // ebx
    //int v12; // ecx
    //char v13; // al
    int v14; // eax
    int v15; // eax
    //int *v16; // edi
    int v17; // eax
    int v18; // ebx
    int v19; // eax
    int v20; // edx
    int v21; // eax
    int v22; // eax
    int v23; // ebx
    int v24; // eax
    int v25; // eax
    int v26; // eax
    int v27; // ebx
    int v28; // eax
    int v29; // eax
    int v30; // ebp
    //char v31; // cl
    unsigned __int8 v32; // al
    //Type_AE400_29795* v33x; // [esp+4h] [ebp-14h]

    //fix
    Type_sub168_2_2* a1x = nullptr;
    v3x = nullptr;
    //fix

    //debug
    counter_2FC50_2FC90++;
    //debug

    //result = a2x->haveSprite_36;
    for (int result = a2x->haveSprite_36; result; result = v3x->var_u16_29815_20)
    {
        //debug
        counter_2FC50_2FC90_2++;
        //debug
        if (result < 0x3E8u)
        {
            v3x = &str_AE400_AE3F0->str_29795[result];
            //v3 = 164 * result + dword_AE400_AE3F0() + 29795;
            //v33x = v3x;
            if ((v3x->var_29811_16.byte[0] & 0x21) == 0)
            {
                int16 diffX = v3x->var_u32_29867_72.x - posX_B5D3C_B5D2C;
                int16 diffY = posY_B5D3A_B5D2A - v3x->var_u32_29867_72.y;
                int32 tempZ = -v3x->var_u32_29867_72.z - posZ_B5CF8_B5CE8;
                int32 xRot = (diffX * sin_B5CDC_B5CCC - diffY * cos_B5D10_B5D00) >> 16;
                int32 yRot = (diffX * cos_B5D10_B5D00 + diffY * sin_B5CDC_B5CCC) >> 16;
                int32 sqSize = yRot * yRot + xRot * xRot;
                if (yRot > 64 && sqSize < dword_B5D00_B5CF0)
                {
                    if (sqSize <= dword_B5CF0_B5CE0)
                    {
                        dword_B5CA4_B5C94 = 0x2000;
                    }
                    else if (sqSize < dword_B5D0C_B5CFC)
                    {
                        dword_B5CA4_B5C94 = (32 * (dword_B5D0C_B5CFC - sqSize) / dword_B5CEC_B5CDC) << 8;
                    }
                    else
                    {
                        dword_B5CA4_B5C94 = 0;
                    }
                    //v10 = (unsigned __int16 *)((char *)&unk_99BA0 + 14 * *(__int16 *)(v33 + 86));
                    v10x = &unk_99BA0x[v3x->var_u16_29881_86];
                    //v10x->var_0
                    int32 wRotXY = xRot * fowDist_B5D14_B5D04 / yRot;
                    int32 wRotZY = tempZ * fowDist_B5D14_B5D04 / yRot + dword_B5CFC_B5CEC;
                    dword_B5CB8_B5CA8 = dword_B5D08_B5CF8 + ((wRotXY * cos_B5CE8_B5CD8 - wRotZY * sin_B5CD4_B5CC4) >> 16);
                    dword_B5CB4_B5CA4 = heightViewPort_B5CE4_B5CD4 - ((wRotXY * sin_B5CD4_B5CC4 + wRotZY * cos_B5CE8_B5CD8) >> 16);
                    //v13 = v10x->var_12;
                    byte_B5D3E_B5D2E = 0;
                    switch (v10x->var_12)
                    {
                    case 0:
                        if (dword_12DF8C_12DF7C[v10x->var_0])
                        {
                            dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v10x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                            a1x = dword_12DF8C_12DF7C[v10x->var_0]->var_u32_0;
                            goto LABEL_17;
                        }
                        if (sub_59050_59560(v10x->var_0))
                        {
                            dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v10x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                            //LABEL_16:
                            a1x = dword_12DF8C_12DF7C[v10x->var_0]->var_u32_0;
                            goto LABEL_17;
                        }
                        break;
                    case 1:
                        if (dword_12DF8C_12DF7C[v10x->var_0])
                        {
                            dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v10x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                        }
                        else
                        {
                            if (!sub_59050_59560(v10x->var_0))
                                break;
                            dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v10x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                        }
                        a1x = dword_12DF8C_12DF7C[v10x->var_0]->var_u32_0;
                        goto LABEL_17;
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                        goto LABEL_28;
                    case 17:
                        v23 = (((v3x->var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
                        if (v23 < 8)
                        {
                            if (dword_12DF8C_12DF7C[v23 + v10x->var_0])
                            {
                                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v23 + v10x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                            }
                            else
                            {
                                if (!sub_59050_59560(v23 + v10x->var_0))
                                    break;
                                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v23 + v10x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                            }
                            goto LABEL_48;
                        }
                        v24 = v10x->var_0 + 15 - v23;
                        if (!dword_12DF8C_12DF7C[v24])
                        {
                            if (!sub_59050_59560(v10x->var_0 + 15 - v23))
                                break;
                            v24 = v10x->var_0 + 15 - v23;
                        }
                        dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v24].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                        v25 = v10x->var_0 + 15 - v23;
                        goto LABEL_67;
                    case 18:
                        v23 = (((v3x->var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
                        v26 = v23 + v10x->var_0;
                        if (dword_12DF8C_12DF7C[v26])
                        {
                            dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v26].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                            goto LABEL_48;
                        }
                        if (sub_59050_59560(v23 + v10x->var_0))
                        {
                            dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v23 + v10x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                        LABEL_48:
                            a1x = dword_12DF8C_12DF7C[v23 + v10x->var_0]->var_u32_0;
                            dword_B5CD0_B5CC0 = a1x->xx;
                            dword_B5CCC_B5CCC = a1x->yy;
                            dword_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)v10x->var_8) / yRot;
                            dword_B5CA8_B5C98 = dword_B5CC8_B5CB8 * dword_B5CD0_B5CC0 / dword_B5CCC_B5CCC;
                            v14 = dword_B5CD0_B5CC0;
                            goto LABEL_68;
                        }
                        break;
                    case 19:
                        v18 = (((v3x->var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
                        if (v18 < 8)
                        {
                            v19 = v10x->var_0 + (unsigned __int8)byte_906E8[v18];
                            if (dword_12DF8C_12DF7C[v19])
                            {
                                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v19].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                            }
                            else
                            {
                                if (!sub_59050_59560(v10x->var_0 + (unsigned __int8)byte_906E8[v18]))
                                    break;
                                dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v10x->var_0 + (unsigned __int8)byte_906E8[v18]].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                            }
                            a1x = dword_12DF8C_12DF7C[v10x->var_0 + (unsigned __int8)byte_906E8[v18]]->var_u32_0;
                            dword_B5CD0_B5CC0 = a1x->xx;
                            dword_B5CCC_B5CCC = a1x->yy;
                            dword_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)v10x->var_8) / yRot;
                            dword_B5CA8_B5C98 = dword_B5CC8_B5CB8 * dword_B5CD0_B5CC0 / dword_B5CCC_B5CCC;
                            v14 = dword_B5CD0_B5CC0;
                            goto LABEL_68;
                        }
                        v20 = (unsigned __int8)byte_906E8[v18];
                        v21 = v20 + v10x->var_0;
                        if (!dword_12DF8C_12DF7C[v21])
                        {
                            if (!sub_59050_59560(v10x->var_0 + (unsigned __int8)v20))
                                break;
                            v21 = v10x->var_0 + (unsigned __int8)byte_906E8[v18];
                        }
                        dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v21].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                        v22 = (unsigned __int8)byte_906E8[v18];
                        goto LABEL_66;
                    case 20:
                        v27 = (((v3x->var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
                        if (v27 >= 8)
                        {
                            v29 = v10x->var_0 + (unsigned __int8)byte_906F8[v27];
                            if (!dword_12DF8C_12DF7C[v29])
                            {
                                if (!sub_59050_59560(v10x->var_0 + (unsigned __int8)byte_906F8[v27]))
                                    break;
                                v29 = v10x->var_0 + (unsigned __int8)byte_906F8[v27];
                            }
                            dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v29].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                            v22 = (unsigned __int8)byte_906F8[v27];
                        LABEL_66:
                            v25 = v10x->var_0 + v22;
                        LABEL_67:
                            a1x = dword_12DF8C_12DF7C[v25]->var_u32_0;
                            dword_B5CD0_B5CC0 = a1x->xx;
                            dword_B5CCC_B5CCC = a1x->yy;
                            dword_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)v10x->var_8) / yRot;
                            dword_B5CA8_B5C98 = dword_B5CC8_B5CB8 * dword_B5CD0_B5CC0 / dword_B5CCC_B5CCC;
                            v14 = -dword_B5CD0_B5CC0;
                        }
                        else
                        {
                            v28 = v10x->var_0 + (unsigned __int8)byte_906F8[v27];
                            if (!dword_12DF8C_12DF7C[v28])
                            {
                                if (!sub_59050_59560(v10x->var_0 + (unsigned __int8)byte_906F8[v27]))
                                    break;
                                v28 = v10x->var_0 + (unsigned __int8)byte_906F8[v27];
                            }
                            dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v28].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                            a1x = dword_12DF8C_12DF7C[v10x->var_0 + (unsigned __int8)byte_906F8[v27]]->var_u32_0;
                            dword_B5CD0_B5CC0 = a1x->xx;
                            dword_B5CCC_B5CCC = a1x->yy;
                            dword_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)v10x->var_8) / yRot;
                            dword_B5CA8_B5C98 = dword_B5CC8_B5CB8 * dword_B5CD0_B5CC0 / dword_B5CCC_B5CCC;
                            v14 = dword_B5CD0_B5CC0;
                        }
                        goto LABEL_68;
                    case 21:
                        v15 = v10x->var_0;
                        if (dword_12DF8C_12DF7C[v15])
                            goto LABEL_21;
                        if (!sub_59050_59560(v15))
                            break;
                        v15 = v10x->var_0;
                    LABEL_21:
                        dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v15].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                        //v16 = (int *)dword_12DF8C_12DF7C[v10x->var_0];
                        byte_B5D3E_B5D2E = 1;
                        a1x = dword_12DF8C_12DF7C[v10x->var_0]->var_u32_0;
                        goto LABEL_17;
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                        byte_B5D3E_B5D2E = 1;
                    LABEL_28:
                        v17 = v10x->var_0 + v3x->var_u8_29883_88;
                        if (dword_12DF8C_12DF7C[v17])
                        {
                            dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v17].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                        }
                        else
                        {
                            if (!sub_59050_59560(v10x->var_0 + v3x->var_u8_29883_88))
                                break;
                            dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[v3x->var_u8_29883_88 + v10x->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
                        }
                        a1x = dword_12DF8C_12DF7C[v10x->var_0 + v3x->var_u8_29883_88]->var_u32_0;
                    LABEL_17:
                        dword_B5CD0_B5CC0 = a1x->xx;
                        dword_B5CCC_B5CCC = a1x->yy;
                        dword_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)v10x->var_8) / yRot;
                        dword_B5CA8_B5C98 = dword_B5CC8_B5CB8 * dword_B5CD0_B5CC0 / dword_B5CCC_B5CCC;
                        v14 = dword_B5CD0_B5CC0;
                    LABEL_68:
                        dword_B5CBC_B5CAC = v14;
                    LABEL_69:
                        v30 = dword_B5CA4_B5C94;
                        //v31 = a1x->var_0 | 8;
                        dword_B5CB0_B5CA0 = a1x->datax;
                        a1x->var_0 |= 8;// v31;
                        if (v30 == 0x2000)
                            v32 = byte_906DC[v10x->var_10];
                        else
                            v32 = byte_906E2[v10x->var_10];
                        dword_B5CAC_B5C9C = v32;
                        dword_B5CA8_B5C98++;
                        dword_B5CC8_B5CB8++;
                        sub_2C410_2C450(2u);
                        break;
                    default:
                        goto LABEL_69;
                    }
                }
            }
        }
        //result = v33x->var_u16_29815_20;
    }
    //while ( result );
}

//SYNCHRONIZED WITH REMC1
void DrawSky_30730_30770(__int16 a1)//201730_
{
  int v1; // ebx
  int v2; // edx
  __int64 v3; // rtt
  int v4; // ebp
  int v5; // ebx
  _BYTE *v6; // edx
  int v7; // eax
  unsigned __int8 v8; // ch
  int v9; // edx
  int v10; // eax
  __int16 result; // ax
  uint8* v12; // ebp
  int v13; // eax
  _BYTE *v14; // esi
  int *v15; // edi
  int v16; // edx
  int v17; // ecx
  int v18; // ebx
  int v19; // eax
  _BYTE v20[1280]; // [esp+0h] [ebp-538h] BYREF
  int v21; // [esp+500h] [ebp-38h]
  int v22; // [esp+504h] [ebp-34h]
  int v23; // [esp+508h] [ebp-30h]
  int v24; // [esp+50Ch] [ebp-2Ch]
  int v25; // [esp+510h] [ebp-28h]
  int v26; // [esp+514h] [ebp-24h]
  int v27; // [esp+518h] [ebp-20h]
  unsigned __int8 v28; // [esp+51Ch] [ebp-1Ch]
  unsigned __int8 v29; // [esp+520h] [ebp-18h]
  char v30; // [esp+524h] [ebp-14h]

  v1 = a1 & 0x7FF;
  v2 = sin_9134C[v1] << 8;
  v26 = (cos_90B4C[v1] << 8) / (unsigned __int16)widthViewPort_93AD8;
  v3 = v2;
  v4 = 0;
  v30 = 0;
  v29 = 0;
  v5 = (unsigned __int16)widthViewPort_93AD8;
  v6 = v20;
  v25 = v3 / (unsigned __int16)widthViewPort_93AD8;
  v7 = 0;
  if ( (_WORD)widthViewPort_93AD8 )
  {
    do
    {
      LOBYTE(v23) = BYTE2(v4);
      *v6 = BYTE2(v7) - v30;
      v8 = v23;
      v23 = (unsigned __int8)v23 - v29;
      v28 = v8;
      v6 += 2;
      v30 = BYTE2(v7);
      *(v6 - 1) = v23;
      v29 = v28;
      v4 += v26;
      v7 += v25;
      --v5;
    }
    while ( v5 );
  }
  //201847_
  v9 = (-(sin_B5CD4_B5CC4 * dword_B5CFC_B5CEC) >> 16) + dword_B5D08_B5CF8;
  v10 = heightViewPort_B5CE4_B5CD4 - ((cos_B5CE8_B5CD8 * dword_B5CFC_B5CEC) >> 16);
  v21 = ((unsigned __int16)yaw_B5D38_B5D28 << 15) - (v9 * v25 - v10 * v26);
  v27 = -(v26 * v9 + v25 * v10);
  result = heightViewPort_93ADC;
  v12 = beginFrame_93ACC;
  v22 = (unsigned __int16)heightViewPort_93ADC;//2018DC_
  if ( (_WORD)heightViewPort_93ADC )
  {
    do
    {
      v13 = (int)(unsigned __int16)widthViewPort_93AD8 >> 2;
      v14 = v20;
      v23 = v27 >> 16;
      v15 = (int *)v12;
      v24 = v21 >> 16;
      v16 = (int)begSky_AE3D8_AE3C8_26C3D8_26C3C8;
      BYTE1(v18) = BYTE2(v27);
      v17 = v13;
      LOBYTE(v18) = BYTE2(v21);
      v18 = (unsigned __int16)v18;
      do
      {
        LOBYTE(v13) = *(_BYTE *)(v18 + v16);
        LOBYTE(v18) = *v14 + v18;
        BYTE1(v18) += v14[1];
        BYTE1(v13) = *(_BYTE *)(v18 + v16);
        LOBYTE(v18) = v14[2] + v18;
        BYTE1(v18) += v14[3];
        v19 = v13 << 16;
        LOBYTE(v19) = *(_BYTE *)(v18 + v16);
        LOBYTE(v18) = v14[4] + v18;
        BYTE1(v18) += v14[5];
        BYTE1(v19) = *(_BYTE *)(v18 + v16);
        LOBYTE(v18) = v14[6] + v18;
        BYTE1(v18) += v14[7];
        v13 = __ROL4_16__(v19);
        *v15++ = v13;
        v14 += 8;
        --v17;
      }
      while ( v17 );
      result = v25;
      v12 += pitchViewPort_93AD4;
      v21 -= v26;
      v27 += v25;
      --v22;
    }
    while ( v22 );
  }
}


//----- (00030A10) --------------------------------------------------------
void sub_309D0_30A10(int a1)
{
  uint8* result; // eax

  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    dword_B5CA0_B5C90 = scrWidth_12EFF0_12EFE0 - 8 * a1;
    result = scrWidth_12EFF0_12EFE0 - 8 * a1 + begWscreen_2ECFF4_2ECFE4;
    SetViewPort2_79495_799A5(result, 0, scrWidth_12EFF0_12EFE0, (unsigned __int16)(8 * a1), (unsigned __int16)(5 * a1));
  }
  else
  {
    dword_B5CA0_B5C90 = scrWidth_12EFF0_12EFE0 - 16 * a1;
    result = scrWidth_12EFF0_12EFE0 - 16 * a1 + begWscreen_2ECFF4_2ECFE4;
    SetViewPort2_79495_799A5(result, 0, scrWidth_12EFF0_12EFE0, (unsigned __int16)(16 * a1), (unsigned __int16)(12 * a1));
  }
}
// B5C90: using guessed type int dword_B5CA0_B5C90;
// 12EFE0: using guessed type int scrWidth_12EFF0_12EFE0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//SYNCHRONIZED WITH REMC1
void setViewPort_30A70_30AB0(int viewPortSize)//201A70_
{
	int frameShift;
	int viewPortHeight;
	int viewPortWidth;
	int result;

	int frameSize = 40 - viewPortSize;
	if ((typeResolution_12F02E_12F01E & 1) != 0)
	{
		frameShift = scrWidth_12EFF0_12EFE0 * (5 * frameSize / 2) + 4 * frameSize;
		viewPortHeight = 5 * viewPortSize;
		viewPortWidth = 8 * viewPortSize;
	}
	else
	{
		frameShift = scrWidth_12EFF0_12EFE0 * (12 * frameSize / 2) + 8 * frameSize;
		viewPortHeight = 12 * viewPortSize;
		viewPortWidth = 16 * viewPortSize;
	}
	dword_B5CA0_B5C90 = frameShift;
	SetViewPort2_79495_799A5(frameShift + begWscreen_2ECFF4_2ECFE4, 0, scrWidth_12EFF0_12EFE0, viewPortWidth, viewPortHeight);
}

//----- (00030B70) --------------------------------------------------------
void sub_30B30_30B70()
{
  int v0; // eax
  int v1; // ebp
  int v2; // ecx
  _BYTE *v3; // edi
  _BYTE *v4; // esi
  int v5; // edx
  int v6; // ebx
  _BYTE *v7; // ebp
  _BYTE *v8; // esi
  int v9; // edx
  int v10; // ecx
  _BYTE *v11; // edi
  int v12; // ebx
  int v13; // [esp+0h] [ebp-1Ch]
  int i; // [esp+4h] [ebp-18h]
  uint8* v15; // [esp+8h] [ebp-14h]
  _BYTE *v16; // [esp+8h] [ebp-14h]

  if ( str_AE400_AE3F0->set.mod3D_8603 == 1 && !byte_90708 )
  {
    v13 = (int)(unsigned __int16)widthViewPort_93AD8 >> 2;
    v15 = beginFrame_93ACC;
    v0 = (unsigned __int16)heightViewPort_93ADC / 2;
    v1 = (int)blurBuffer_AE404_AE3F4;
    for ( i = v0; i; --i )
    {
      v2 = v13;
      v3 = (_BYTE *)v15;
      v4 = (_BYTE *)v1;
      v5 = 0;
      v6 = 0;
      do
      {
        LOBYTE(v6) = v4[2];
        LOBYTE(v5) = v3[2];
        LOBYTE(v0) = byte_B36A0_B3690[v5] + byte_B37A0_B3790[v6];
        LOBYTE(v6) = v4[3];
        LOBYTE(v5) = v3[3];
        BYTE1(v0) = byte_B39A0_B3990[v5] + byte_B34A0_B3490[v6];
        v0 <<= 16;
        LOBYTE(v6) = *v4;
        LOBYTE(v5) = *v3;
        LOBYTE(v0) = byte_B36A0_B3690[v5] + byte_B37A0_B3790[v6];
        LOBYTE(v6) = v4[1];
        LOBYTE(v5) = v3[1];
        BYTE1(v0) = byte_B39A0_B3990[v5] + byte_B34A0_B3490[v6];
        *(_DWORD *)v3 = v0;
        v3 += 4;
        v4 += 4;
        --v2;
      }
      while ( v2 );
      v7 = (_BYTE *)(pitchViewPort_93AD4 + v1);
      v16 = (_BYTE *)(pitchViewPort_93AD4 + v15);
      v8 = v7;
      v9 = 0;
      v10 = v13;
      v11 = v16;
      v12 = 0;
      do
      {
        LOBYTE(v12) = v8[2];
        LOBYTE(v9) = v11[2];
        LOBYTE(v0) = byte_B33A0_B3390[v9] + byte_B32A0_B3290[v12];
        LOBYTE(v12) = v8[3];
        LOBYTE(v9) = v11[3];
        BYTE1(v0) = byte_B38A0_B3890[v9] + byte_B35A0_B3590[v12];
        v0 <<= 16;
        LOBYTE(v12) = *v8;
        LOBYTE(v9) = *v11;
        LOBYTE(v0) = byte_B33A0_B3390[v9] + byte_B32A0_B3290[v12];
        LOBYTE(v12) = v8[1];
        LOBYTE(v9) = v11[1];
        BYTE1(v0) = byte_B38A0_B3890[v9] + byte_B35A0_B3590[v12];
        *(_DWORD *)v11 = v0;
        v11 += 4;
        v8 += 4;
        --v10;
      }
      while ( v10 );
      v1 = (int)&v7[pitchViewPort_93AD4];
      v15 = (uint8*)&v16[pitchViewPort_93AD4];
      v0 = i - 1;
    }
  }
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    if ( byte_90708 )
    {
      sub_79F2B((int)&unk_B3AA0_B3A90);
      return;
    }
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    {
LABEL_20:
      Blit_5CDA0_5D2B0();
      return;
    }
  }
  else
  {
    if ( str_AE400_AE3F0->set.var_u8_8606 && str_AE400_AE3F0->set.mod3D_8603 )
    {
      sub_7A03D();
      return;
    }
    if ( byte_90708 )
    {
      sub_79E16((int)&unk_B3AA0_B3A90);
      return;
    }
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      goto LABEL_20;
  }
  Blit_599B0_59EC0(480);
}
// 90708: using guessed type char byte_90708;
// 93ACC: using guessed type int beginFrame_93ACC;
// 93AD4: using guessed type int pitchViewPort_93AD4;
// 93AD8: using guessed type int widthViewPort_93AD8;
// 93ADC: using guessed type int heightViewPort_93ADC;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F4: using guessed type int blurBuffer_AE404_AE3F4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//SYNCHRONIZED WITH REMC1
int sub_30D30_30D70(__int16 a1)
{
  _WORD *v1; // eax
  __int16 v3; // si

  if ( (unsigned __int16)sub_61AB0_61FC0() )
    return 0;
  v1 = (_WORD *)(16 * *(unsigned __int16 *)((char*)dword_12F080_12F070 + 16) + *(unsigned __int16 *)((char*)dword_12F080_12F070 + 14));
  if ( *v1 == 0xFFFF )
    return 0;
  while ( a1 != *v1 )
  {
    v3 = v1[1];
    ++v1;
    if ( v3 == -1 )
      return 0;
  }
  return 1;
}

//SYNCHRONIZED WITH REMC1
void DrawWorld_30D90_30DD0(int posX, int posY, __int16 yaw, int posZ, int pitch, int roll, int fow)//201D90_
{
    //unsigned __int16 v8; // ax
    //unsigned __int16 v9; // cx
    //int v10; // edx
    //int v11; // ecx
    //int v12; // ebx
    //int v13; // edx
    //int v14; // ecx
    //int v15; // ebx
    //int v16; // edx
    //int v17; // ecx
    //int v18; // ebx
    //int v19; // edx
    //int v20; // edi
    //int v21; // edx
    //int v22; // esi
    //int v23; // ebx
    int v24; // eax
    uint8* v25; // esi
    int v26; // ecx
    uint8* v27; // esi
    int v28; // eax
    char* v29; // ebx
    char v30; // dl
    int v31; // eax
    int v32; // esi
    uint8* v33; // ebx
    unsigned __int8* v34; // ecx
    int i; // eax
    _BYTE* v36; // edi
    int v37; // edx
    int v38; // esi
    _BYTE* v39; // ebx
    unsigned __int8* v40; // ecx
    _BOOL1 j; // zf
    int v42; // eax
    _BYTE* k; // ebx
    char v44; // dl
    int v45; // edx
    int v46; // esi
    int v47; // ebx
    //int v48; // eax
    __int64 actSpeed; // rax
    int v50; // eax
    _BYTE* v51; // edi
    _BYTE* v52; // esi
    int v53; // edx
    int v54; // ebx
    int v55; // ecx
    _BYTE* v56; // edi
    _BYTE* v57; // esi
    int v58; // edx
    int v59; // ebx
    int v60; // ecx
    _BYTE* v61; // edi
    int v62; // esi
    int v63; // ecx
    int v64; // eax
    int v65; // ebx
    int v66; // edx
    int frameViewp; // [esp+0h] [ebp-24h]
    int indexY; // [esp+4h] [ebp-20h]
    int halfViewpX; // [esp+8h] [ebp-1Ch]
    uint8* v71; // [esp+Ch] [ebp-18h]
    char v72; // [esp+10h] [ebp-14h]
    //uint8* v73; // [esp+14h] [ebp-10h]
    uint8* v74; // [esp+18h] [ebp-Ch]
    int v75; // [esp+1Ch] [ebp-8h]
    unsigned __int8 v76; // [esp+20h] [ebp-4h]
    int tempFixPosX; // [esp+3Ch] [ebp+18h]
    int tempFixPosY; // [esp+40h] [ebp+1Ch]

    uaxis_2d tempX;
    uaxis_2d tempY;
    tempX.word = posX;
    tempY.word = posY;
    uaxis_2d pos;
    pos._axis_2d.x = tempX._axis_2d.y;
    pos._axis_2d.y = tempY._axis_2d.y;

    if (tempX._axis_2d.x < 0x80u)
        pos._axis_2d.x = tempX._axis_2d.y - 1;
    if (tempY._axis_2d.x < 0x80u)
        pos._axis_2d.y = tempY._axis_2d.y - 1;
    uint8 point1 = mapHeightmap_DC1E0_DC1D0[pos.word];
    pos._axis_2d.x += 2;
    uint8 point2 = mapHeightmap_DC1E0_DC1D0[pos.word];
    pos._axis_2d.y += 2;
    int diff1 = point1 - point2;
    int diff2 = point2 + point1;
    uint8 point3 = mapHeightmap_DC1E0_DC1D0[pos.word];
    pos._axis_2d.x -= 2;
    int diff3 = diff1 - point3;
    int diff4 = diff2 - point3;
    uint8 point4 = mapHeightmap_DC1E0_DC1D0[pos.word];
    int diff5 = 2 * (point4 + diff3);
    int diff6 = 2 * (diff4 - point4);
    if (diff5 <= 100)
    {
        if (diff5 < -100)
            diff5 = -100;
    }
    else
    {
        diff5 = 100;
    }
    if (diff6 <= 100)
    {
        if (diff6 < -100)
            diff6 = -100;
    }
    else
    {
        diff6 = 100;
    }
    fixPosX_90710 += (diff5 - fixPosX_90710) >> 3;
    fixPosY_90714 += (diff6 - fixPosY_90714) >> 3;
    tempFixPosX = fixPosX_90710 + posX;
    tempFixPosY = fixPosY_90714 + posY;
    int tempYaw = yaw & 0x7FF;
    if (str_AE400_AE3F0->set.var_u8_8606 && str_AE400_AE3F0->set.mod3D_8603 && scrWidth_12EFF0_12EFE0 == 640)
    {
        SetViewPort2_79495_799A5(begWscreen_2ECFF4_2ECFE4, 0, 2 * scrWidth_12EFF0_12EFE0, scrWidth_12EFF0_12EFE0 / 2 - 8, scrHeight_12EFF8_12EFE8 / 2 - 40);
        dword_9070C = 20;
        dword_902B0 = -5;
        int tempSin = (5 * sin_9134C[tempYaw]) >> 14;
        int tempCos = (5 * cos_90B4C[tempYaw]) >> 14;
        DrawSkyTerrainParticles_2A700_2A740(tempCos, tempFixPosX - tempSin, tempFixPosY - tempCos, tempYaw, posZ, pitch, roll, fow);
        SetViewPort2_79495_799A5(begWscreen_2ECFF4_2ECFE4 + scrWidth_12EFF0_12EFE0 / 2, 0, 0, 0, 0);
        dword_902B0 = 5;
        DrawSkyTerrainParticles_2A700_2A740(tempFixPosY + tempCos, tempFixPosX + tempSin, tempFixPosY + tempCos, yaw & 0x7FF, posZ, pitch, roll, fow);
        dword_902B0 = 0;
        SetViewPort2_79495_799A5(begWscreen_2ECFF4_2ECFE4, 0, scrWidth_12EFF0_12EFE0, scrWidth_12EFF0_12EFE0, scrHeight_12EFF8_12EFE8);
    }
    else if (str_AE400_AE3F0->set.mod3D_8603 != 2 || str_AE400_AE3F0->set.var_u8_8606)
    {
        if (str_AE400_AE3F0->set.mod3D_8603 != 1 || str_AE400_AE3F0->set.var_u8_8606)
        {
            v72 = str_AE400_AE3F0->set.blur_8604;
            if (typeResolution_12F02E_12F01E == 1)
            {
                if (!str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_14421_1098)
                {
                    if (str_AE408_AE3F8->var_u8_8)
                    {
                        if (blurBuffer_AE404_AE3F4)
                        {
                            if (str_AE400_AE3F0->set.var_u8_8600 == 40)
                            {
                                actSpeed = str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].playIndex_13333].actSpeed_29921_126;
                                if ((int)((HIDWORD(actSpeed) ^ actSpeed) - HIDWORD(actSpeed)) > 80)//fix it
                                    str_AE400_AE3F0->set.blur_8604 = 1;
                            }
                        }
                    }
                }
            }
            if (str_AE400_AE3F0->set.blur_8604 && blurBuffer_AE404_AE3F4)
            {
                //v73 = beginFrame_93ACC;
                SetViewPort2_79495_799A5(blurBuffer_AE404_AE3F4, 0, 0, 0, 0);
                DrawSkyTerrainParticles_2A700_2A740(roll, tempFixPosX, tempFixPosY, tempYaw, posZ, pitch, roll, fow);
                SetViewPort2_79495_799A5(beginFrame_93ACC, 0, 0, 0, 0);
                halfViewpX = widthViewPort_93AD8 >> 2;
                frameViewp = pitchViewPort_93AD4 - widthViewPort_93AD8;
                indexY = heightViewPort_93ADC;
                //fix
                int tempFix = dword_AE400_AE3F0();
                //fix
                HIWORD(v50) = HIWORD(tempFix);
                if (str_AE400_AE3F0->set.blur_8604 == 1)
                {
                    v51 = (_BYTE*)beginFrame_93ACC;
                    v52 = (_BYTE*)blurBuffer_AE404_AE3F4;
                    HIWORD(v53) = 0;
                    HIWORD(v54) = 0;
                    do
                    {
                        v55 = halfViewpX;
                        do
                        {
                            LOBYTE(v54) = v52[2];
                            BYTE1(v54) = v51[2];
                            LOBYTE(v53) = v52[3];
                            LOBYTE(v50) = strPal.byte_BB934_BB924[v54];
                            BYTE1(v53) = v51[3];
                            BYTE1(v50) = strPal.byte_BB934_BB924[v53];
                            v50 <<= 16;
                            LOBYTE(v54) = v52[0];
                            BYTE1(v54) = v51[0];
                            LOBYTE(v53) = v52[1];
                            LOBYTE(v50) = strPal.byte_BB934_BB924[v54];
                            BYTE1(v53) = v51[1];
                            BYTE1(v50) = strPal.byte_BB934_BB924[v53];
                            *(_DWORD*)v51 = v50;
                            v51 += 4;
                            v52 += 4;
                            v55--;
                        } while (v55);
                        HIWORD(v50) = HIWORD(frameViewp);
                        v52 += frameViewp;
                        v51 += frameViewp;
                        indexY--;
                    } while (indexY);
                }
                else
                {
                    v56 = (_BYTE*)beginFrame_93ACC;
                    v57 = (_BYTE*)blurBuffer_AE404_AE3F4;
                    HIWORD(v58) = 0;
                    HIWORD(v59) = 0;
                    do
                    {
                        v60 = halfViewpX;
                        do
                        {
                            BYTE1(v59) = v57[2];
                            LOBYTE(v59) = v56[2];
                            BYTE1(v58) = v57[3];
                            LOBYTE(v50) = strPal.byte_BB934_BB924[v59];
                            LOBYTE(v58) = v56[3];
                            BYTE1(v50) = strPal.byte_BB934_BB924[v58];
                            v50 <<= 16;
                            BYTE1(v59) = v57[0];
                            LOBYTE(v59) = v56[0];
                            BYTE1(v58) = v57[1];
                            LOBYTE(v50) = strPal.byte_BB934_BB924[v59];
                            LOBYTE(v58) = v56[1];
                            BYTE1(v50) = strPal.byte_BB934_BB924[v58];
                            *(_DWORD*)v56 = v50;
                            v56 += 4;
                            v57 += 4;
                            v60--;
                        } while (v60);
                        HIWORD(v50) = HIWORD(frameViewp);
                        v57 += frameViewp;
                        v56 += frameViewp;
                        indexY--;
                    } while (indexY);
                }
            }
            else
            {
                //adress 202509_
                //debug
#ifdef debug1
          //add_compare(0x202509, true);
#endif debug1
//debug
                DrawSkyTerrainParticles_2A700_2A740(posZ, tempFixPosX, tempFixPosY, tempYaw, posZ, pitch, roll, fow);//draw screen without minimap
                //adress 202527_
                //debug
#ifdef debug1
        //add_compare(0x202527, true, true);
#endif debug1
//debug
                if (str_AE400_AE3F0->set.softenOn_8605)
                {
                    v74 = beginFrame_93ACC;
                    v75 = (unsigned __int16)heightViewPort_93ADC - 1;
                    if ((unsigned __int16)heightViewPort_93ADC != 1)
                    {
                        do
                        {
                            v61 = (_BYTE*)v74;
                            v62 = pitchViewPort_93AD4;
                            v63 = (unsigned __int16)widthViewPort_93AD8 - 1;
                            HIWORD(v64) = 0;
                            HIWORD(v65) = 0;
                            HIWORD(v66) = 0;
                            do
                            {
                                LOBYTE(v64) = v61[0];
                                LOBYTE(v65) = v61[1];
                                BYTE1(v64) = v61[v62];
                                LOBYTE(v66) = strPal.byte_BB934_BB924[v64];
                                BYTE1(v65) = v61[v62 + 1];
                                BYTE1(v66) = strPal.byte_BB934_BB924[v65];
                                v61[0] = strPal.byte_BB934_BB924[v66];
                                v61[0]++;
                                v63--;
                            } while (v63);
                            v74 += pitchViewPort_93AD4;
                            v75--;
                        } while (v75);
                    }
            }
        }
            //LOBYTE(v24) = dword_AE400_AE3F0();
            str_AE400_AE3F0->set.blur_8604 = v72;
    }
        else
        {
            v45 = cos_90B4C[tempYaw];
            dword_9070C = 20;
            v46 = 5 * sin_9134C[tempYaw];
            dword_902B0 = pitchViewPort_93AD4 / 0x28u;
            v47 = (20 * v45) >> 16;
            LOWORD(v46) = v46 >> 14;
            DrawSkyTerrainParticles_2A700_2A740(v47, v46 + tempFixPosX, v47 + tempFixPosY, tempYaw, posZ, pitch, roll, fow);
            v71 = beginFrame_93ACC;
            SetViewPort2_79495_799A5(blurBuffer_AE404_AE3F4, 0, 0, 0, 0);
            dword_902B0 = 0 - (pitchViewPort_93AD4 / 0x28u);
            DrawSkyTerrainParticles_2A700_2A740(v47, tempFixPosX - v46, tempFixPosY - v47, tempYaw, posZ, pitch, roll, fow);
            SetViewPort2_79495_799A5(v71, 0, 0, 0, 0);
            dword_902B0 = 0;
        }
}
    else
    {
        v25 = beginFrame_93ACC;
        SetViewPort2_79495_799A5(blurBuffer_AE404_AE3F4, 0, 0, 0, 0);
        DrawSkyTerrainParticles_2A700_2A740(tempFixPosX, tempFixPosX, tempFixPosY, tempYaw, posZ, pitch, roll, fow);
        SetViewPort2_79495_799A5(v25, 0, 0, 0, 0);
        v26 = (unsigned __int16)heightViewPort_93ADC;
        v27 = beginFrame_93ACC + (unsigned __int16)widthViewPort_93AD8 / 2 - 64;
        if ((_WORD)heightViewPort_93ADC)
        {
            do
            {
                word_12C1E0_12C1D0 = 9377 * word_12C1E0_12C1D0 + 9439;
                v28 = 64;//2020CE_
                //v29 = (char *)off_9359C + 256 * (v26 & 0x1F) + (unsigned __int16)word_12C1E0_12C1D0 % 7u;
                v29 = (char*)&dword_9334C[148] + 256 * (v26 & 0x1F) + (unsigned __int16)word_12C1E0_12C1D0 % 7u;//test it !!
                do
                {
                    v27++;
                    v30 = *v29++;
                    *(_BYTE*)(v27 - 1) = v30;
                    v28--;
                } while (v28);
                v27 += pitchViewPort_93AD4 - 64;
                v26--;
            } while (v26);
        }
        v31 = (unsigned __int16)widthViewPort_93AD8 / 2;
        v32 = (unsigned __int16)heightViewPort_93ADC;
        v33 = v31 + beginFrame_93ACC;
        v34 = (unsigned __int8*)(v31 + (int)blurBuffer_AE404_AE3F4);
        if ((_WORD)heightViewPort_93ADC)
        {
            do
            {
                for (i = (unsigned __int16)widthViewPort_93AD8 / 2; i; --i)
                {
                    v36 = (_BYTE*)(v33 - *v34);
                    v33++;
                    v34++;
                    *(_BYTE*)(v33 - 1) = *v36;
                }
                v37 = pitchViewPort_93AD4 - (unsigned __int16)widthViewPort_93AD8 / 2;
                v33 += v37;
                v34 += v37;
                v32--;
            } while (v32);
        }
        v24 = (unsigned __int16)widthViewPort_93AD8 / 2;
        v38 = (unsigned __int16)heightViewPort_93ADC;
        v39 = (_BYTE*)(v24 + beginFrame_93ACC);
        v40 = (unsigned __int8*)(v24 + (int)blurBuffer_AE404_AE3F4);
        for (j = (unsigned __int16)heightViewPort_93ADC == 0; !j; j = v38 == 0)
        {
            v76 = *v40;
            v42 = (unsigned __int16)widthViewPort_93AD8 / 2 - *v40;
            for (k = &v39[-*v40]; v42; v42--)
            {
                k--;
                v44 = k[*--v40];
                *k = v44;
            }
            v24 = pitchViewPort_93AD4 + (unsigned __int16)widthViewPort_93AD8 / 2;
            v39 = &k[v24];
            v40 = &v40[v24 - v76];
            v38--;
        }
    }
}

void sub_315C0_31600()
{
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_61B90_620A0((unsigned __int8 *)begPalDat_AE428_AE418_26C428_26C418);
  else
    sub_61C30_62140((unsigned __int8 *)begPalDat_AE428_AE418_26C428_26C418);
  byte_90708 = 0;
}

//SYNCHRONIZED WITH REMC1
void sub_31600_31640()//202600_
{
  __int16 v0; // bx
  _WORD *v1; // esi
  _WORD *v2; // edi
  int v3; // ecx
  _BYTE *v4; // ebx
  char v5; // bp
  int v6; // eax
  int v7; // ecx
  char *v8; // esi
  char *v9; // ebx
  _BYTE *v10; // edx
  char v11; // al
  char v12; // al
  char v13; // al
  int v14; // edi
  char v15; // al
  int v16; // ecx
  char *v17; // esi
  char *v18; // ebx
  _BYTE *v19; // edx
  char v20; // al
  char v21; // al
  char v22; // al
  int v23; // edi
  char v24; // al
  int v25; // ecx
  char *v26; // esi
  char *v27; // ebx
  _BYTE *v28; // edx
  char v29; // al
  char v30; // al
  char v31; // al
  int v32; // edi
  char v33; // al
  int v34; // esi
  char *v35; // ecx
  char *v36; // ebx
  _BYTE *v37; // edx
  char v38; // al
  char v39; // al
  char v40; // al
  int v41; // edi
  char v42; // al
  unsigned __int8 *v43; // edx
  char v44; // ch
  int v45; // ebx
  char v46; // cl
  char v47; // al
  _BYTE *v48; // edx
  unsigned __int8 v49[768]; // [esp+0h] [ebp-324h] BYREF
  int v50; // [esp+300h] [ebp-24h]
  int v51; // [esp+304h] [ebp-20h]
  int v52; // [esp+308h] [ebp-1Ch]
  char v53; // [esp+30Ch] [ebp-18h]
  char v54; // [esp+310h] [ebp-14h]

  if ( str_AE400_AE3F0->set.mod3D_8603 && pitchViewPort_93AD4 == 640 )
    sub_5B500_5BA10();
  if ( blurBuffer_AE404_AE3F4 && !str_AE400_AE3F0->set.var_u8_8606 )
  {
    if ( scrWidth_12EFF0_12EFE0 == 320 )
      v0 = 270;
    else
      v0 = 273;
    if ( sub_30D30_30D70(v0) )
    {
      v1 = (uint16*)&unk_B3AA0_B3A90;
      v2 = (uint16*)&unk_B3CA0_B3C90;
      sub_619B8_61EC8(v0);
      v3 = 256;
      byte_90708 = 1;
      v4 = (_BYTE *)begPalDat_AE428_AE418_26C428_26C418;
      scrWidth_12EFF0_12EFE0 = pitchViewPort_93AD4;
      do
      {
        *v1 = (*v4 & 0x3E) << 10;
        v5 = (3 * (unsigned __int8)v4[1]
            - (__CFSHL__((3 * (unsigned __int8)v4[1]) >> 31, 2)
             + 4 * ((3 * (unsigned __int8)v4[1]) >> 31))) >> 2;
        v6 = 3 * (unsigned __int8)v4[2];
        v4 += 3;
        ++v2;
        ++v1;
        *(v2 - 1) = 32 * (v5 & 0x3F) + ((((v6 - (__CFSHL__(v6 >> 31, 2) + 4 * (v6 >> 31))) >> 2) & 0x3E) >> 1);
        --v3;
      }
      while ( v3 );
    }
    else
    {
      v7 = 256;
      v8 = (char*)&byte_B37A0_B3790;
      v9 = (char*)&byte_B36A0_B3690;
      v10 = (_BYTE *)begPalDat_AE428_AE418_26C428_26C418;
      do
      {
        v11 = *v10 + 3;
        if ( v11 > 63 )
          v11 = 63;
        *v8 = 4 * (v11 & 0x38);
        v12 = v10[1] - 3;
        if ( v12 < 0 )
          v12 = 0;
        v52 = (v12 & 0x38) >> 1;
        *v9 = v52;
        v13 = v10[2] + 3;
        if ( v13 > 63 )
          v13 = 63;
        v10 += 3;
        v14 = (v13 & 0x30) >> 4;
        v15 = *v9++;
        ++v8;
        *(v9 - 1) = v14 + v15;
        --v7;
      }
      while ( v7 );
      v16 = 256;
      v17 = (char*)&byte_B35A0_B3590;
      v18 = (char*)&byte_B38A0_B3890;
      v19 = (_BYTE *)begPalDat_AE428_AE418_26C428_26C418;
      do
      {
        v20 = *v19 + 1;
        if ( v20 > 63 )
          v20 = 63;
        *v17 = 4 * (v20 & 0x38);
        v21 = v19[1] - 1;
        if ( v21 < 0 )
          v21 = 0;
        v52 = (v21 & 0x38) >> 1;
        *v18 = v52;
        v22 = v19[2] + 1;
        if ( v22 > 63 )
          v22 = 63;
        v19 += 3;
        v23 = (v22 & 0x30) >> 4;
        v24 = *v18++;
        ++v17;
        *(v18 - 1) = v23 + v24;
        --v16;
      }
      while ( v16 );
      v25 = 256;
      v26 = (char*)&byte_B34A0_B3490;
      v27 = (char*)&byte_B39A0_B3990;
      v28 = (_BYTE *)begPalDat_AE428_AE418_26C428_26C418;
      do
      {
        v29 = *v28 - 1;
        if ( v29 < 0 )
          v29 = 0;
        *v26 = 4 * (v29 & 0x38);
        v30 = v28[1] + 1;
        if ( v30 > 63 )
          v30 = 63;
        v52 = (v30 & 0x38) >> 1;
        *v27 = v52;
        v31 = v28[2] - 1;
        if ( v31 < 0 )
          v31 = 0;
        v28 += 3;
        v32 = (v31 & 0x30) >> 4;
        v33 = *v27++;
        ++v26;
        *(v27 - 1) = v32 + v33;
        --v25;
      }
      while ( v25 );
      v34 = 256;
      v35 = (char*)&byte_B32A0_B3290;
      v36 = (char*)&byte_B33A0_B3390;
      v37 = (_BYTE *)begPalDat_AE428_AE418_26C428_26C418;
      do
      {
        v38 = *v37 - 3;
        if ( v38 < 0 )
          v38 = 0;
        *v35 = 4 * (v38 & 0x38);
        v39 = v37[1] + 3;
        if ( v39 > 63 )
          v39 = 63;
        v52 = (v39 & 0x38) >> 1;
        *v36 = v52;
        v40 = v37[2] - 3;
        if ( v40 < 0 )
          v40 = 0;
        v37 += 3;
        v41 = (v40 & 0x30) >> 4;
        v42 = *v36++;
        ++v35;
        *(v36 - 1) = v41 + v42;
        --v34;
      }
      while ( v34 );
      v50 = 0;
      v43 = v49;
      v53 = 0;
      do
      {
        v51 = 0;
        v44 = v53;
        v54 = 0;
        do
        {
          v45 = 0;
          v46 = v54;
          v47 = 0;
          do
          {
            v48 = v43 + 2;
            *(v48 - 2) = v44;
            *(v48 - 1) = v46;
            ++v45;
            *v48 = v47;
            v43 = v48 + 1;
            v47 += 14;
          }
          while ( v45 < 4 );
          v54 += 7;
          ++v51;
        }
        while ( v51 < 8 );
        v53 += 9;
        ++v50;
      }
      while ( v50 < 8 );
      SetPalette_319A0_319E0((TColor*)v49);
    }
  }
}

//----- (000319E0) --------------------------------------------------------
void SetPalette_319A0_319E0(TColor* palette)
{
    FixPerifery((char*)"port0x3C8");
    VGA_Set_Palette((uint8_t*)palette);
    VGA_Blit(begWscreen_2ECFF4_2ECFE4);
    if (byte_9AD08)
        sub_5B310_5B820(2, 0);
  /*
  unsigned __int8 *v1; // ebx
  int v2; // ecx
  unsigned __int8 v3; // al
  unsigned __int8 *v4; // ebx
  unsigned __int8 v5; // al
  unsigned __int8 result; // al

  v1 = a1;
  __outbyte(0x3C6u, 0xFFu);
  v2 = 0;
  do
  {
    __outbyte(0x3C8u, v2);
    v3 = *v1;
    v4 = v1 + 1;
    __outbyte(0x3C9u, v3);
    v5 = *v4++;
    __outbyte(0x3C9u, v5);
    ++v2;
    result = *v4;
    v1 = v4 + 1;
    __outbyte(0x3C9u, result);
  }
  while ( (unsigned __int16)v2 < 0x100u );
  if ( byte_9AD08 )
    return sub_5B310_5B820(2, a1);
  return result;
  */
}
// 9AD08: using guessed type char byte_9AD08;

//----- (00031A40) --------------------------------------------------------
void sub_31A00_31A40()
{
  unsigned __int8 result; // al
  //unsigned __int8 *v1; // [esp-4h] [ebp-8h]

  result = dword_AE400_AE3F0();
  if ( str_AE400_AE3F0->set.mod3D_8603 )
  {
    if ( str_AE400_AE3F0->set.var_u8_8606 )
    {
      if ( pitchViewPort_93AD4 == 640 )
        sub_5BA70();
    }
    byte_90754 = str_AE400_AE3F0->set.mod3D_8603;
    sub_315C0_31600();
    //v1 = (unsigned __int8 *)begPalDat_AE428_AE418_26C428_26C418;
    str_AE400_AE3F0->set.mod3D_8603 = 0;
    SetPalette_319A0_319E0(begPalDat_AE428_AE418_26C428_26C418);
  }
}
// 90754: using guessed type char byte_90754;
// 93AD4: using guessed type int pitchViewPort_93AD4;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE418: using guessed type int begPalDat_AE428_AE418_26C428_26C418;

//----- (00031AA0) --------------------------------------------------------
void sub_31A60_31AA0()
{
  char v0; // dl

  v0 = byte_90754;
  str_AE400_AE3F0->set.mod3D_8603 = byte_90754;
  if ( v0 == 1 )
    sub_31600_31640();
  byte_90754 = 0;
}
// 90754: using guessed type char byte_90754;
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00031AE0) --------------------------------------------------------
int sub_31AE0(int a1)
{
  word_12C1E0_12C1D0 = *(_WORD *)(a1 + 4);
  *(_DWORD *)(dword_AE400_AE3F0() + 4) = *(_DWORD *)(a1 + 4);
  if ( (void (*)())sub_3EEA0_3F1E0(aCCarpetCdSaveS, (uint8_t*)mapHeightmap_DC1E0_DC1D0) != sub_10000 )
  {
    sub_72AD8(word_12C1E0_12C1D0, *(_WORD *)(a1 + 8), *(_WORD *)(a1 + 12));
    sub_32E40();
  }
  memset(mapEntityIndex_10C1E0_10C1D0, 0, (size_t)((char *)&loc_1FFFE + 2));
  sub_32ED0(*(_DWORD *)(a1 + 20), *(_WORD *)(a1 + 24));
  sub_338F0();
  sub_32490(*(_WORD *)(a1 + 32));
  sub_330F0(*(_WORD *)(a1 + 36), *(_WORD *)(a1 + 40));
  sub_326F0();
  sub_332A0(*(_WORD *)(a1 + 36), *(_WORD *)(a1 + 40));
  sub_33570(*(_WORD *)(a1 + 44));
  sub_31C10(*(_WORD *)(a1 + 28), *(_WORD *)(a1 + 32));
  sub_32390();
  memset(mapTerrainType_CC1E0_CC1D0, 0, (size_t)sub_10000);
  sub_31FA0();
  sub_322B0();
  sub_32950();
  sub_32130();
  return sub_32DB0();
}
// 10000: using guessed type void sub_10000();
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AE3F0: using guessed type int dword_AE400_AE3F0();
// 10C1D0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7961];
// 12C1D0: using guessed type __int16 word_12C1E0_12C1D0;

//----- (00031C10) --------------------------------------------------------
unsigned __int16 sub_31C10(unsigned __int8 a1, unsigned __int8 a2)
{
  unsigned __int16 result; // ax
  unsigned __int8 v3; // dh
  unsigned __int8 v4; // dl
  unsigned __int16 v5; // ax
  unsigned __int16 v6; // ax
  __int16 v7; // bx
  char v8; // dl
  char v9; // dh

  //fix
  v4 = 0;
  v5 = 0;
  v6 = 0;
  //fix

  qmemcpy(mapTerrainType_CC1E0_CC1D0, mapAngle_FC1E0_FC1D0, (unsigned int)sub_10000);
  result = 0;
  do
  {
    if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] > a1 )
    {
      v3 = 0;
      v4 = -1;
      if ( mapHeightmap_DC1E0_DC1D0[result] )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      if ( mapHeightmap_DC1E0_DC1D0[result] != -1 )
        v4 = mapHeightmap_DC1E0_DC1D0[result];
      --HIBYTE(result);
      if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v4 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v4 = mapHeightmap_DC1E0_DC1D0[result];
      LOBYTE(result) = result + 1;
      ++HIBYTE(result);
      if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v3 = mapHeightmap_DC1E0_DC1D0[v5];
      if ( v4 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5] )
        v4 = mapHeightmap_DC1E0_DC1D0[v5];
      ++HIBYTE(v5);
      LOBYTE(v5) = v5 - 1;
      if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5] )
        v3 = mapHeightmap_DC1E0_DC1D0[v6];
      if ( v4 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v6] )
        v4 = mapHeightmap_DC1E0_DC1D0[v6];
      LOBYTE(result) = v6 - 1;
      HIBYTE(result) = HIBYTE(v6) - 1;
      if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v4 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v4 = mapHeightmap_DC1E0_DC1D0[result];
      LOBYTE(result) = result + 1;
      if ( mapAngle_FC1E0_FC1D0[result] && v3 - v4 < a2 )
        mapAngle_FC1E0_FC1D0[result] = 6;
    }
    ++result;
  }
  while ( result );
  do
  {
    if ( mapAngle_FC1E0_FC1D0[result] != 6 )
      goto LABEL_101;
    v7 = 0;
    --HIBYTE(result);
    v8 = 0;
    v9 = 0;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      HIBYTE(v7) = 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      v9 = 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      LOBYTE(v7) = 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      v8 = 1;
    LOBYTE(result) = result + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    ++HIBYTE(result);
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    ++HIBYTE(result);
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    LOBYTE(result) = result - 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    LOBYTE(result) = result - 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    --HIBYTE(result);
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    --HIBYTE(result);
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    LOBYTE(result) = result + 1;
    ++HIBYTE(result);
    if ( HIBYTE(v7) )
    {
      if ( v9 || (_BYTE)v7 || v8 )
        goto LABEL_100;
    }
    else if ( v9 || (_BYTE)v7 && v8 )
    {
LABEL_100:
      mapAngle_FC1E0_FC1D0[result] = 1;
    }
LABEL_101:
    ++result;
  }
  while ( result );
  return result;
}
// 10000: using guessed type void sub_10000();

//----- (00031FA0) --------------------------------------------------------
unsigned __int16 sub_31FA0()
{
  unsigned __int16 result; // ax
  int v1; // edx
  unsigned __int8 v2; // dl
  unsigned __int8 v3; // dh
  unsigned __int8 v4; // ch
  unsigned __int8 v5; // cl
  int v6; // ebx
  unsigned __int8 v7; // cl
  int v8; // ebx
  unsigned __int8 v9; // cl
  int v10; // ebx
  unsigned __int8 v11; // cl
  int v12; // ebx
  unsigned __int8 v13; // cl
  int v14; // ebx
  unsigned __int8 v15; // cl
  int v16; // ebx
  unsigned __int8 v17; // cl
  int v18; // ebx
  unsigned __int8 v19; // cl
  unsigned int v20; // ebx
  unsigned int v21; // ebx
  unsigned __int8 v22; // dl

  result = 0;
  do
  {
    while ( 1 )
    {
      v1 = result;
      if ( (mapAngle_FC1E0_FC1D0[result] & 7) == 0 )
        goto LABEL_44;
      --HIBYTE(result);
      v2 = mapHeightmap_DC1E0_DC1D0[v1];
      v3 = v2;
      v4 = v2;
      v5 = mapHeightmap_DC1E0_DC1D0[result];
      v6 = v5;
      if ( v5 > v2 )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v5 < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      LOBYTE(result) = result + 1;
      v7 = mapHeightmap_DC1E0_DC1D0[result];
      v8 = v7 + v6;
      if ( v7 > v2 )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v7 < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      ++HIBYTE(result);
      v9 = mapHeightmap_DC1E0_DC1D0[result];
      v10 = v9 + v8;
      if ( v9 > v2 )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v9 < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      ++HIBYTE(result);
      v11 = mapHeightmap_DC1E0_DC1D0[result];
      v12 = v11 + v10;
      if ( v11 > v2 )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v11 < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      LOBYTE(result) = result - 1;
      v13 = mapHeightmap_DC1E0_DC1D0[result];
      v14 = v13 + v12;
      if ( v13 > v2 )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v13 < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      LOBYTE(result) = result - 1;
      v15 = mapHeightmap_DC1E0_DC1D0[result];
      v16 = v15 + v14;
      if ( v15 > v2 )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v15 < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      --HIBYTE(result);
      v17 = mapHeightmap_DC1E0_DC1D0[result];
      v18 = v17 + v16;
      if ( v17 > v2 )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v17 < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      --HIBYTE(result);
      v19 = mapHeightmap_DC1E0_DC1D0[result];
      v20 = v19 + v18;
      if ( v19 > v2 )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v19 < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      LOBYTE(result) = result + 1;
      v21 = v20 >> 3;
      ++HIBYTE(result);
      if ( (unsigned __int8)(v4 - v3) > 4u )
        break;
      v22 = v2 - v4;
      if ( v22 <= 4u )
        goto LABEL_44;
      if ( v22 <= 0xAu )
      {
        mapHeightmap_DC1E0_DC1D0[result] = (v21 + v4) >> 1;
        goto LABEL_44;
      }
      mapHeightmap_DC1E0_DC1D0[result++] = v21;
      if ( !result )
        return result;
    }
    if ( (unsigned __int8)(v4 - v3) <= 0xAu )
      LOBYTE(v21) = (v21 + v4) >> 1;
    mapHeightmap_DC1E0_DC1D0[result] = v21;
LABEL_44:
    ++result;
  }
  while ( result );
  return result;
}

//----- (00032130) --------------------------------------------------------
unsigned __int16 sub_32130()
{
  unsigned __int16 result; // ax
  _BOOL1 v1; // dl
  unsigned __int16 v2; // bx
  char v3; // dl
  unsigned __int16 v4; // bx
  char v5; // dl
  unsigned __int16 v6; // bx
  char v7; // dl
  unsigned __int16 v8; // bx
  char v9; // dl
  unsigned __int16 v10; // bx
  char v11; // dl
  unsigned __int16 v12; // bx
  char v13; // dl
  unsigned __int16 v14; // dx
  unsigned __int16 v15; // bx
  unsigned __int16 v16; // bx

  result = 0;
  do
  {
    mapAngle_FC1E0_FC1D0[result] &= ~8u;
    if ( !mapHeightmap_DC1E0_DC1D0[result] )
    {
      --HIBYTE(result);
      v1 = mapHeightmap_DC1E0_DC1D0[result] != 0;
      LOBYTE(result) = result + 1;
      v2 = result;
      ++HIBYTE(result);
      v3 = (mapHeightmap_DC1E0_DC1D0[v2] != 0) + v1;
      v4 = result;
      ++HIBYTE(result);
      v5 = (mapHeightmap_DC1E0_DC1D0[v4] != 0) + v3;
      v6 = result;
      LOBYTE(result) = result - 1;
      v7 = (mapHeightmap_DC1E0_DC1D0[v6] != 0) + v5;
      v8 = result;
      LOBYTE(result) = result - 1;
      v9 = (mapHeightmap_DC1E0_DC1D0[v8] != 0) + v7;
      v10 = result;
      --HIBYTE(result);
      v11 = (mapHeightmap_DC1E0_DC1D0[v10] != 0) + v9;
      v12 = result;
      --HIBYTE(result);
      v13 = (mapHeightmap_DC1E0_DC1D0[v12] != 0) + v11;
      LOBYTE(v12) = mapHeightmap_DC1E0_DC1D0[result] != 0;
      LOBYTE(result) = result + 1;
      ++HIBYTE(result);
      if ( !((_BYTE)v12 + v13) )
      {
        v14 = result;
        LOBYTE(result) = result - 1;
        v15 = result;
        --HIBYTE(result);
        LOBYTE(v14) = (mapTerrainType_CC1E0_CC1D0[v15] != 0) + (mapTerrainType_CC1E0_CC1D0[v14] != 0);
        v16 = result;
        LOBYTE(result) = result + 1;
        LOBYTE(v14) = (mapTerrainType_CC1E0_CC1D0[result] != 0) + (mapTerrainType_CC1E0_CC1D0[v16] != 0) + v14;
        ++HIBYTE(result);
        if ( !(_BYTE)v14 )
          mapAngle_FC1E0_FC1D0[result] |= 8u;
      }
    }
    ++result;
  }
  while ( result );
  return result;
}

//----- (000322B0) --------------------------------------------------------
unsigned __int16 sub_322B0()
{
  unsigned __int16 result; // ax
  unsigned __int16 v1; // cx
  char v2; // dh
  unsigned __int8 v3; // dl
  int v4; // ecx
  char v5; // bl
  char v6; // bh
  unsigned __int8 v7; // cl
  char v8; // bh
  char v9; // bh
  unsigned __int16 v10; // cx
  unsigned __int16 v11; // cx
  unsigned __int16 v12; // cx
  unsigned __int16 v13; // cx

  result = 0;
  do
  {
    v1 = result;
    v2 = 0;
    LOBYTE(result) = result + 1;
    v3 = mapHeightmap_DC1E0_DC1D0[v1];
    v4 = v1;
    LOWORD(v4) = result;
    v5 = 0;
    v6 = mapAngle_FC1E0_FC1D0[result];
    if ( v6 )
    {
      if ( v6 == 4 )
        v2 = 1;
    }
    else
    {
      v7 = mapHeightmap_DC1E0_DC1D0[v4];
      v5 = 1;
      if ( v7 < v3 )
        v3 = v7;
    }
    ++HIBYTE(result);
    v8 = mapAngle_FC1E0_FC1D0[result];
    if ( v8 )
    {
      if ( v8 == 4 )
        ++v2;
    }
    else
    {
      ++v5;
      if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
    }
    LOBYTE(result) = result - 1;
    v9 = mapAngle_FC1E0_FC1D0[result];
    if ( v9 )
    {
      if ( v9 == 4 )
        ++v2;
    }
    else
    {
      ++v5;
      if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
    }
    --HIBYTE(result);
    if ( v2 && v5 && !v3 )
    {
      v10 = result;
      LOBYTE(result) = result + 1;
      mapHeightmap_DC1E0_DC1D0[v10] = 0;
      v11 = result;
      ++HIBYTE(result);
      mapHeightmap_DC1E0_DC1D0[v11] = 0;
      v12 = result;
      LOBYTE(result) = result - 1;
      mapHeightmap_DC1E0_DC1D0[v12] = 0;
      v13 = result;
      --HIBYTE(result);
      mapHeightmap_DC1E0_DC1D0[v13] = 0;
    }
    ++result;
  }
  while ( result );
  return result;
}

//----- (00032390) --------------------------------------------------------
unsigned __int16 sub_32390()
{
  unsigned __int16 result; // ax
  unsigned __int16 v1; // dx
  unsigned __int16 v2; // bx
  char v3; // cl
  char v4; // dh
  unsigned __int16 v5; // bx
  unsigned __int16 v6; // bx
  unsigned __int16 v7; // bx
  unsigned __int16 v8; // bx
  unsigned __int16 v9; // bx
  char v10; // bl
  unsigned __int16 v11; // ax

  result = 0;
  do
  {
    --HIBYTE(result);
    v1 = result;
    LOBYTE(result) = result + 1;
    v2 = result;
    ++HIBYTE(result);
    v3 = mapAngle_FC1E0_FC1D0[v2];
    v4 = mapAngle_FC1E0_FC1D0[v1];
    v5 = result;
    ++HIBYTE(result);
    LOBYTE(v1) = (v4 == mapAngle_FC1E0_FC1D0[v5]) + (v4 == v3);
    v6 = result;
    LOBYTE(result) = result - 1;
    LOBYTE(v1) = (v4 == mapAngle_FC1E0_FC1D0[v6]) + v1;
    v7 = result;
    LOBYTE(result) = result - 1;
    LOBYTE(v1) = (v4 == mapAngle_FC1E0_FC1D0[v7]) + v1;
    v8 = result;
    --HIBYTE(result);
    LOBYTE(v1) = (v4 == mapAngle_FC1E0_FC1D0[v8]) + v1;
    v9 = result;
    --HIBYTE(result);
    v10 = (v4 == mapAngle_FC1E0_FC1D0[result]) + (v4 == mapAngle_FC1E0_FC1D0[v9]) + v1;
    LOBYTE(result) = result + 1;
    HIBYTE(v11) = HIBYTE(result) + 1;
    if ( v4 )
    {
      if ( v10 == 7 )
        mapAngle_FC1E0_FC1D0[v11] = v4;
    }
    result = v11 + 1;
  }
  while ( result );
  return result;
}

//----- (00032490) --------------------------------------------------------
unsigned __int16 sub_32490(unsigned __int16 a1)
{
  unsigned __int16 result; // ax
  unsigned __int8 v2; // dh
  unsigned __int8 v3; // dl
  unsigned __int16 v4; // ax
  unsigned __int16 v5; // ax
  int v6; // edx
  char v7; // bl
  char v8; // dl
  char v9; // dh

  //fix
  v4 = 0;
  v5 = 0;
  //fix

  result = 0;
  do
  {
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
    {
      v2 = 0;
      v3 = -1;
      if ( mapHeightmap_DC1E0_DC1D0[result] )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( mapHeightmap_DC1E0_DC1D0[result] != -1 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      --HIBYTE(result);
      if ( v2 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      LOBYTE(result) = result + 1;
      ++HIBYTE(result);
      if ( v2 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v2 = mapHeightmap_DC1E0_DC1D0[v4];
      if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v4] )
        v3 = mapHeightmap_DC1E0_DC1D0[v4];
      LOBYTE(v4) = v4 - 1;
      ++HIBYTE(v4);
      if ( v2 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v4] )
        v2 = mapHeightmap_DC1E0_DC1D0[v5];
      if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5] )
        v3 = mapHeightmap_DC1E0_DC1D0[v5];
      LOBYTE(result) = v5 - 1;
      HIBYTE(result) = HIBYTE(v5) - 1;
      if ( v2 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      v6 = v2 - v3;
      LOBYTE(result) = result + 1;
      if ( v6 <= a1 )
      {
        if ( v6 == a1 )
        {
          LOWORD(v6) = result;
          mapAngle_FC1E0_FC1D0[v6] = 4;
        }
        else
        {
          mapAngle_FC1E0_FC1D0[result] = 3;
        }
      }
    }
    ++result;
  }
  while ( result );
  do
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      v7 = 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      v8 = 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      v9 = 1;
    LOBYTE(result) = result + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++v7;
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v8;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      ++v9;
    ++HIBYTE(result);
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++v7;
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v8;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      ++v9;
    LOBYTE(result) = result - 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++v7;
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v8;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      ++v9;
    --HIBYTE(result);
    if ( !v8 && v7 && v9 )
    {
      if ( mapAngle_FC1E0_FC1D0[result] == 3 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      LOBYTE(result) = result + 1;
      if ( mapAngle_FC1E0_FC1D0[result] == 3 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      ++HIBYTE(result);
      if ( mapAngle_FC1E0_FC1D0[result] == 3 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      LOBYTE(result) = result - 1;
      if ( mapAngle_FC1E0_FC1D0[result] == 3 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      --HIBYTE(result);
    }
    ++result;
  }
  while ( result );
  return result;
}

//----- (000326F0) --------------------------------------------------------
unsigned __int16 sub_326F0()
{
  unsigned __int16 result; // ax
  char v1; // bl
  char v2; // dh
  char v3; // dl

  result = 0;
  do
  {
    v1 = 0;
    v2 = 0;
    v3 = 0;
    if ( !mapAngle_FC1E0_FC1D0[result] )
      v1 = 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      v3 = 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      v2 = 1;
    LOBYTE(result) = result + 1;
    if ( !mapAngle_FC1E0_FC1D0[result] )
      ++v1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      ++v3;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++v2;
    ++HIBYTE(result);
    if ( !mapAngle_FC1E0_FC1D0[result] )
      ++v1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      ++v3;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++v2;
    LOBYTE(result) = result - 1;
    if ( !mapAngle_FC1E0_FC1D0[result] )
      ++v1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      ++v3;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++v2;
    --HIBYTE(result);
    if ( v2 && v3 )
    {
      if ( mapAngle_FC1E0_FC1D0[result] == 5 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      LOBYTE(result) = result + 1;
      if ( mapAngle_FC1E0_FC1D0[result] == 5 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      ++HIBYTE(result);
      if ( mapAngle_FC1E0_FC1D0[result] == 5 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      LOBYTE(result) = result - 1;
      if ( mapAngle_FC1E0_FC1D0[result] == 5 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      --HIBYTE(result);
    }
    if ( v2 && v1 )
    {
      if ( mapAngle_FC1E0_FC1D0[result] == 3 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      LOBYTE(result) = result + 1;
      if ( mapAngle_FC1E0_FC1D0[result] == 3 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      ++HIBYTE(result);
      if ( mapAngle_FC1E0_FC1D0[result] == 3 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      LOBYTE(result) = result - 1;
      if ( mapAngle_FC1E0_FC1D0[result] == 3 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      --HIBYTE(result);
    }
    if ( v1 && v3 )
    {
      if ( mapAngle_FC1E0_FC1D0[result] )
        mapAngle_FC1E0_FC1D0[result] = 4;
      LOBYTE(result) = result + 1;
      if ( mapAngle_FC1E0_FC1D0[result] )
        mapAngle_FC1E0_FC1D0[result] = 4;
      ++HIBYTE(result);
      if ( mapAngle_FC1E0_FC1D0[result] )
        mapAngle_FC1E0_FC1D0[result] = 4;
      LOBYTE(result) = result - 1;
      if ( mapAngle_FC1E0_FC1D0[result] )
        mapAngle_FC1E0_FC1D0[result] = 4;
      --HIBYTE(result);
    }
    ++result;
  }
  while ( result );
  return result;
}

//----- (00032950) --------------------------------------------------------
char sub_32950()
{
  _BYTE *v0; // edx
  int v1; // ebx
  char *v2; // edi
  int v3; // esi
  unsigned __int16 i; // bx
  char v5; // al
  char v6; // ah
  char v7; // dh
  char v8; // dl
  unsigned __int8 *v9; // ebp
  unsigned __int8 *v10; // ebp
  char v11; // cl
  char v12; // al
  char v13; // ah
  char v14; // cl
  char v15; // dl
  char v16; // dh
  unsigned __int8 *v17; // ebp
  unsigned __int8 *v18; // ebp
  char v19; // cl
  char v20; // al
  char v21; // dl
  char v22; // cl
  char v23; // ah
  char v24; // dh
  unsigned __int8 *v25; // ebp
  unsigned __int8 v26; // cl
  char v27; // cl
  char v28; // al
  char v29; // ah
  char v30; // cl
  char v31; // dl
  char v32; // dh
  unsigned __int8 *v33; // ebp
  unsigned __int8 v34; // cl
  char v35; // cl
  char v36; // al
  char v37; // dh
  unsigned __int8 *v38; // ebp
  unsigned __int8 *v39; // ebp
  char v40; // cl
  char v41; // al
  char v42; // ah
  char v43; // cl
  char v44; // dl
  char v45; // dh
  unsigned __int8 *v46; // ebp
  unsigned __int8 v47; // cl
  unsigned __int8 *v48; // ebp
  unsigned __int8 *v49; // ebp
  unsigned __int8 *v50; // edx
  unsigned __int8 v51; // al
  char *v52; // edx
  char m; // al
  char *v54; // ebx
  char v55; // ah
  char result; // al
  unsigned __int16 v57; // cx
  int v58; // edx
  char v59; // al
  unsigned __int16 v60; // dx
  char v61; // al
  unsigned __int16 v62; // dx
  int v63; // edi
  unsigned __int8 v64; // al
  int v65; // ebx
  char v66; // [esp+4h] [ebp-38h]
  unsigned __int8 v67; // [esp+8h] [ebp-34h]
  char v68; // [esp+10h] [ebp-2Ch]
  char j; // [esp+14h] [ebp-28h]
  char k; // [esp+18h] [ebp-24h]
  unsigned __int8 v71; // [esp+1Ch] [ebp-20h]
  unsigned __int8 v72; // [esp+20h] [ebp-1Ch]
  unsigned __int8 v73; // [esp+24h] [ebp-18h]
  unsigned __int8 v74; // [esp+28h] [ebp-14h]

  v0 = (_BYTE *)begWscreen_2ECFF4_2ECFE4;
  v1 = 0;
  do
  {
    ++v1;
    *v0 = 0;
    v0 += 25;
  }
  while ( (unsigned __int16)v1 < 0x961u );
  v2 = (char *)&unk_9075C;
  v3 = (int)begWscreen_2ECFF4_2ECFE4;
  for ( i = 0; i < 0x94u; ++i )
  {
    v5 = *v2;
    if ( *v2 >= 0 )
    {
      v6 = v2[1];
      if ( v6 >= 0 )
      {
        v7 = v2[2];
        if ( v7 >= 0 )
        {
          v8 = v2[3];
          if ( v8 >= 0 )
          {
            v9 = (unsigned __int8 *)(v3 + 25 * (49 * v6 + 7 * v7 + v8 + 343 * v5));
            v72 = *v9;
            if ( *v9 < 0xCu )
            {
              ++*v9;
              v10 = &v9[v72];
              v10[13] = 0;
              v10[1] = i;
            }
            v11 = v5;
            v12 = v6;
            v13 = v11;
            v14 = v8;
            v15 = v7;
            v16 = v14;
            v17 = (unsigned __int8 *)(v3 + 25 * (49 * v13 + 7 * v14 + v15 + 343 * v12));
            v73 = *v17;
            if ( *v17 < 0xCu )
            {
              ++*v17;
              v18 = &v17[v73];
              v18[13] = 16;
              v18[1] = i;
            }
            v19 = v12;
            v20 = v15;
            v21 = v19;
            v22 = v13;
            v23 = v16;
            v24 = v22;
            v25 = (unsigned __int8 *)(v3 + 25 * (49 * v23 + v21 + 7 * v22 + 343 * v20));
            v26 = *v25;
            if ( *v25 < 0xCu )
            {
              *v25 = v26 + 1;
              v25[v26 + 13] = 48;
              v25[v26 + 1] = i;
            }
            v27 = v20;
            v28 = v23;
            v29 = v27;
            v30 = v21;
            v31 = v24;
            v32 = v30;
            v33 = (unsigned __int8 *)(v3 + 25 * (49 * v29 + 7 * v30 + v31 + 343 * v28));
            v34 = *v33;
            if ( *v33 < 0xCu )
            {
              *v33 = v34 + 1;
              v33[v34 + 13] = 32;
              v33[v34 + 1] = i;
            }
            v35 = v28;
            v36 = v32;
            v37 = v35;
            v38 = (unsigned __int8 *)(v3 + 25 * (v31 + 7 * v35 + 49 * v29 + 343 * v36));
            v71 = *v38;
            if ( *v38 < 0xCu )
            {
              ++*v38;
              v39 = &v38[v71];
              v39[13] = 96;
              v39[1] = i;
            }
            v40 = v36;
            v41 = v29;
            v42 = v40;
            v43 = v31;
            v44 = v37;
            v45 = v43;
            v46 = (unsigned __int8 *)(v3 + 25 * (49 * v42 + v44 + 7 * v43 + 343 * v41));
            v47 = *v46;
            if ( *v46 < 0xCu )
            {
              *v46 = v47 + 1;
              v46[v47 + 13] = 112;
              v46[v47 + 1] = i;
            }
            v48 = (unsigned __int8 *)(v3 + 25 * (49 * v45 + 7 * v42 + v41 + 343 * v44));
            v67 = *v48;
            if ( *v48 < 0xCu )
            {
              ++*v48;
              v49 = &v48[v67];
              v49[13] = 80;
              v49[1] = i;
            }
            v50 = (unsigned __int8 *)(v3 + 25 * (343 * v45 + v42 + 7 * v41 + 49 * v44));
            v51 = *v50;
            if ( *v50 < 0xCu )
            {
              *v50 = v51 + 1;
              v50[v51 + 13] = 64;
              v50[v51 + 1] = i;
            }
          }
        }
      }
    }
    v2 += 4;
  }
  v52 = (char*)&byte_B5D30;
  v66 = 0;
  do
  {
    for ( j = 0; j < 7; ++j )
    {
      for ( k = 0; k < 7; ++k )
      {
        for ( m = 0; m < 7; ++m )
        {
          v54 = (char *)(v3 + 25 * (49 * j + m + 7 * k + 343 * v66));
          v55 = *v54;
          if ( *v54 )
          {
            *v52 = v54[1];
            v55 = v54[13];
          }
          else
          {
            *v52 = 1;
          }
          v52[1] = v55;
          v52 += 2;
        }
      }
    }
    result = v66 + 1;
    v66 = result;
  }
  while ( result < 7 );
  v57 = 0;
  do
  {
    v58 = v57;
    if ( !mapTerrainType_CC1E0_CC1D0[v57] )
    {
      LOBYTE(v57) = v57 + 1;
      v59 = mapAngle_FC1E0_FC1D0[v58];
      v60 = v57;
      v68 = v59 & 7;
      ++HIBYTE(v57);
      v61 = mapAngle_FC1E0_FC1D0[v60];
      v62 = v57;
      LOBYTE(v57) = v57 - 1;
      v63 = 49 * (v61 & 7) + 7 * (mapAngle_FC1E0_FC1D0[v62] & 7) + (mapAngle_FC1E0_FC1D0[v57] & 7) + 343 * v68;
      result = *(_BYTE *)(25 * v63 + v3);
      --HIBYTE(v57);
      v74 = result;
      if ( result )
      {
        word_12C1E0_12C1D0 = 9377 * word_12C1E0_12C1D0 + 9439;
        v64 = (unsigned __int16)word_12C1E0_12C1D0 % (unsigned __int16)((unsigned __int8)result + 1);
        if ( v64 >= v74 )
          v64 = 0;
        v65 = v64 + v3 + 25 * v63;
        mapTerrainType_CC1E0_CC1D0[v57] = *(_BYTE *)(v65 + 1);
        result = *(_BYTE *)(v65 + 13) + (mapAngle_FC1E0_FC1D0[v57] & 7);
        mapAngle_FC1E0_FC1D0[v57] = result;
      }
      else
      {
        mapTerrainType_CC1E0_CC1D0[v57] = 1;
      }
    }
    ++v57;
  }
  while ( v57 );
  return result;
}
// B5D30: using guessed type char byte_B5D30;
// 12C1D0: using guessed type __int16 word_12C1E0_12C1D0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//----- (00032DB0) --------------------------------------------------------
int sub_32DB0()
{
  unsigned __int16 v0; // cx
  unsigned __int16 v1; // dx
  int result; // eax
  unsigned __int16 v3; // cx
  unsigned __int16 v4; // tt

  v0 = 0;
  word_12C1E0_12C1D0 = 0;
  do
  {
    LOBYTE(v0) = v0 + 1;
    HIWORD(result) = 0;
    ++HIBYTE(v0);
    LOWORD(result) = v0;
    LOBYTE(v0) = v0 - 2;
    HIBYTE(v0) -= 2;
    v1 = v0;
    LOBYTE(v0) = v0 + 1;
    LOBYTE(result) = mapHeightmap_DC1E0_DC1D0[v1] - mapHeightmap_DC1E0_DC1D0[(unsigned __int16)result] + 32;
    HIBYTE(v3) = HIBYTE(v0) + 1;
    if ( (_BYTE)result == 32 )
    {
      result = 9377 * (unsigned __int16)word_12C1E0_12C1D0;
      word_12C1E0_12C1D0 = result + 9439;
      v4 = result + 9439;
      BYTE1(result) = (unsigned __int16)(result + 9439) / 0x900u;
      LOBYTE(result) = v4 % 9u + 28;
    }
    else if ( (char)result >= 28 )
    {
      if ( (char)result > 40 )
        LOBYTE(result) = (result & 7) + 40;
    }
    else
    {
      LOBYTE(result) = (result & 3) + 28;
    }
    mapShading_EC1E0_EC1D0[v3] = result;
    v0 = v3 + 1;
  }
  while ( v0 );
  return result;
}
// 12C1D0: using guessed type __int16 word_12C1E0_12C1D0;

//----- (00032E40) --------------------------------------------------------
int sub_32E40()
{
  __int16 v0; // dx
  __int16 v1; // cx
  unsigned __int16 v2; // bx
  __int16 v3; // ax
  int v4; // ecx
  int result; // eax

  v0 = -32000;
  v1 = 32000;
  v2 = 0;
  do
  {
    v3 = mapEntityIndex_10C1E0_10C1D0[v2];
    if ( v3 > v0 )
      v0 = mapEntityIndex_10C1E0_10C1D0[v2];
    if ( v3 < v1 )
      v1 = mapEntityIndex_10C1E0_10C1D0[v2];
    ++v2;
  }
  while ( v2 );
  if ( v0 )
    v4 = 12845056 / v0;
  else
    v4 = 0;
  do
  {
    result = (v4 * mapEntityIndex_10C1E0_10C1D0[v2]) >> 16;
    mapEntityIndex_10C1E0_10C1D0[v2] = 0;
    if ( (result & 0x8000u) != 0 )
      result = 0;
    if ( (__int16)result > 196 )
      result = 196;
    mapHeightmap_DC1E0_DC1D0[v2++] = result;
  }
  while ( v2 );
  return result;
}
// 10C1D0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7961];

//----- (00032ED0) --------------------------------------------------------
unsigned __int16 sub_32ED0(int a1, unsigned __int8 a2)
{
  unsigned __int16 v3; // si
  int v4; // ecx
  int v5; // eax
  int v6; // ebx
  unsigned __int16 result; // ax

  v3 = 0;
  do
  {
    if ( mapHeightmap_DC1E0_DC1D0[v3] )
      mapAngle_FC1E0_FC1D0[v3] = 5;
    else
      mapAngle_FC1E0_FC1D0[v3] = 0;
    ++v3;
  }
  while ( v3 );
LABEL_12:
  if ( a1 > 0 )
  {
    v4 = 1000;
    while ( 1 )
    {
      v6 = 0xFFFF;
      word_12C1E0_12C1D0 = 9377 * word_12C1E0_12C1D0 + 9439;
      HIWORD(v5) = 0;
      LOBYTE(v6) = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)word_12C1E0_12C1D0 % 0xFFFFu];
      if ( !--v4 )
        break;
      if ( (unsigned __int8)v6 > a2 )
      {
        LOWORD(v5) = (unsigned __int16)word_12C1E0_12C1D0 % 0xFFFFu;
        if ( mapAngle_FC1E0_FC1D0[v5] )
        {
          --a1;
          sub_32B90_sub_32F80(v6, (unsigned __int16)word_12C1E0_12C1D0 % 0xFFFFu);
          goto LABEL_12;
        }
      }
    }
  }
  do
  {
    result = v3;
    mapTerrainType_CC1E0_CC1D0[v3++] = -1;
  }
  while ( v3 );
  return result;
}
// 12C1D0: using guessed type __int16 word_12C1E0_12C1D0;

//----- (00032F80) --------------------------------------------------------
unsigned __int16 sub_32B90_sub_32F80(int a1, int a2)
{
  int v2; // eax
  unsigned __int16 v3; // dx
  unsigned __int8 v4; // dh
  unsigned __int16 v5; // si
  int v6; // esi
  unsigned __int8 v7; // dl
  unsigned __int16 result; // ax

  v2 = a2;
  v3 = 0;
  do
    mapTerrainType_CC1E0_CC1D0[v3++] = 3;
  while ( v3 );
  v4 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)a2];
  do
  {
    v5 = v2;
    --BYTE1(v2);
    mapTerrainType_CC1E0_CC1D0[v5] = 0;
    v6 = v5;
    LOWORD(v6) = v2;
    v7 = -1;
    if ( mapTerrainType_CC1E0_CC1D0[(unsigned __int16)v2] && mapHeightmap_DC1E0_DC1D0[v6] != -1 )
    {
      v7 = mapHeightmap_DC1E0_DC1D0[v6];
      a1 = v2;
    }
    LOBYTE(v2) = v2 + 1;
    if ( mapTerrainType_CC1E0_CC1D0[(unsigned __int16)v2] && v7 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2] )
    {
      v7 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2];
      a1 = v2;
    }
    ++BYTE1(v2);
    if ( mapTerrainType_CC1E0_CC1D0[(unsigned __int16)v2] && v7 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2] )
    {
      v7 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2];
      a1 = v2;
    }
    ++BYTE1(v2);
    if ( mapTerrainType_CC1E0_CC1D0[(unsigned __int16)v2] && v7 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2] )
    {
      v7 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2];
      a1 = v2;
    }
    LOBYTE(v2) = v2 - 1;
    if ( mapTerrainType_CC1E0_CC1D0[(unsigned __int16)v2] && v7 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2] )
    {
      v7 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2];
      a1 = v2;
    }
    LOBYTE(v2) = v2 - 1;
    if ( mapTerrainType_CC1E0_CC1D0[(unsigned __int16)v2] && v7 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2] )
    {
      v7 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2];
      a1 = v2;
    }
    --BYTE1(v2);
    if ( mapTerrainType_CC1E0_CC1D0[(unsigned __int16)v2] && v7 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2] )
    {
      v7 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2];
      a1 = v2;
    }
    --BYTE1(v2);
    if ( mapTerrainType_CC1E0_CC1D0[(unsigned __int16)v2] && v7 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2] )
    {
      v7 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2];
      a1 = v2;
    }
    if ( !mapAngle_FC1E0_FC1D0[(unsigned __int16)a1] || v7 == 0xFF )
      break;
    if ( v7 > v4 )
      mapHeightmap_DC1E0_DC1D0[(unsigned __int16)a1] = v4;
    v4 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)a1];
    v2 = a1;
  }
  while ( v4 );
  result = 0;
  do
  {
    if ( !mapTerrainType_CC1E0_CC1D0[result] )
      mapAngle_FC1E0_FC1D0[result] = 0;
    ++result;
  }
  while ( result );
  return result;
}

//----- (000330F0) --------------------------------------------------------
unsigned __int8 sub_330F0(unsigned __int8 a1, unsigned __int8 a2)
{
  unsigned __int16 v2; // dx
  unsigned __int8 v3; // ah
  unsigned __int8 result; // al
  unsigned __int16 v5; // dx

  qmemcpy(mapTerrainType_CC1E0_CC1D0, mapAngle_FC1E0_FC1D0, (unsigned int)sub_10000);
  v2 = 0;
  do
  {
    v3 = 0;
    result = -1;
    if ( mapHeightmap_DC1E0_DC1D0[v2] )
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapHeightmap_DC1E0_DC1D0[v2] != -1 )
      result = mapHeightmap_DC1E0_DC1D0[v2];
    --HIBYTE(v2);
    if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
    if ( result > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      result = mapHeightmap_DC1E0_DC1D0[v2];
    LOBYTE(v2) = v2 + 1;
    if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
    if ( result > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      result = mapHeightmap_DC1E0_DC1D0[v2];
    ++HIBYTE(v2);
    if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
    if ( result > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      result = mapHeightmap_DC1E0_DC1D0[v2];
    ++HIBYTE(v2);
    if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
    if ( result > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      result = mapHeightmap_DC1E0_DC1D0[v2];
    LOBYTE(v2) = v2 - 1;
    if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
    if ( result > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      result = mapHeightmap_DC1E0_DC1D0[v2];
    LOBYTE(v2) = v2 - 1;
    if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
    if ( result > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      result = mapHeightmap_DC1E0_DC1D0[v2];
    --HIBYTE(v2);
    if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
    if ( result > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      result = mapHeightmap_DC1E0_DC1D0[v2];
    --HIBYTE(v2);
    if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
    if ( result > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      result = mapHeightmap_DC1E0_DC1D0[v2];
    LOBYTE(v2) = v2 + 1;
    HIBYTE(v5) = HIBYTE(v2) + 1;
    if ( v3 < a1 && v3 - result <= a2 )
    {
      if ( mapAngle_FC1E0_FC1D0[v5] )
        mapAngle_FC1E0_FC1D0[v5] = 5;
    }
    v2 = v5 + 1;
  }
  while ( v2 );
  return result;
}
// 10000: using guessed type void sub_10000();

//----- (000332A0) --------------------------------------------------------
char sub_332A0(unsigned __int8 a1, unsigned __int8 a2)
{
  unsigned __int16 v2; // dx
  int v3; // eax
  unsigned __int8 v4; // bh
  unsigned __int8 v5; // bl
  unsigned __int16 v6; // dx
  int v7; // ecx

  qmemcpy(mapTerrainType_CC1E0_CC1D0, mapAngle_FC1E0_FC1D0, (unsigned int)sub_10000);
  v2 = 0;
  do
  {
    LOWORD(v3) = -256;
    v4 = 0;
    v5 = 0;
    if ( mapHeightmap_DC1E0_DC1D0[v2] )
      LOBYTE(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapHeightmap_DC1E0_DC1D0[v2] != -1 )
      BYTE1(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    --HIBYTE(v2);
    if ( (unsigned __int8)v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      LOBYTE(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( BYTE1(v3) > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      BYTE1(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapAngle_FC1E0_FC1D0[v2] == 5 )
      v5 = 1;
    if ( mapAngle_FC1E0_FC1D0[v2] == 2 )
      v4 = 1;
    LOBYTE(v2) = v2 + 1;
    if ( (unsigned __int8)v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      LOBYTE(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( BYTE1(v3) > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      BYTE1(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapAngle_FC1E0_FC1D0[v2] == 5 )
      ++v5;
    if ( mapAngle_FC1E0_FC1D0[v2] == 2 )
      ++v4;
    ++HIBYTE(v2);
    if ( (unsigned __int8)v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      LOBYTE(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( BYTE1(v3) > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      BYTE1(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapAngle_FC1E0_FC1D0[v2] == 5 )
      ++v5;
    if ( mapAngle_FC1E0_FC1D0[v2] == 2 )
      ++v4;
    ++HIBYTE(v2);
    if ( (unsigned __int8)v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      LOBYTE(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( BYTE1(v3) > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      BYTE1(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapAngle_FC1E0_FC1D0[v2] == 5 )
      ++v5;
    if ( mapAngle_FC1E0_FC1D0[v2] == 2 )
      ++v4;
    LOBYTE(v2) = v2 - 1;
    if ( (unsigned __int8)v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      LOBYTE(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( BYTE1(v3) > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      BYTE1(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapAngle_FC1E0_FC1D0[v2] == 5 )
      ++v5;
    if ( mapAngle_FC1E0_FC1D0[v2] == 2 )
      ++v4;
    LOBYTE(v2) = v2 - 1;
    if ( (unsigned __int8)v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      LOBYTE(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( BYTE1(v3) > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      BYTE1(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapAngle_FC1E0_FC1D0[v2] == 5 )
      ++v5;
    if ( mapAngle_FC1E0_FC1D0[v2] == 2 )
      ++v4;
    --HIBYTE(v2);
    if ( (unsigned __int8)v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      LOBYTE(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( BYTE1(v3) > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      BYTE1(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapAngle_FC1E0_FC1D0[v2] == 5 )
      ++v5;
    if ( mapAngle_FC1E0_FC1D0[v2] == 2 )
      ++v4;
    --HIBYTE(v2);
    if ( (unsigned __int8)v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      LOBYTE(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( BYTE1(v3) > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      BYTE1(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapAngle_FC1E0_FC1D0[v2] == 5 )
      ++v5;
    if ( mapAngle_FC1E0_FC1D0[v2] == 2 )
      ++v4;
    LOBYTE(v2) = v2 + 1;
    HIBYTE(v6) = HIBYTE(v2) + 1;
    if ( (unsigned __int8)v3 < a1 )
    {
      v7 = (unsigned __int8)v3 - BYTE1(v3);
      LOBYTE(v3) = a2;
      if ( v7 <= a2 && mapAngle_FC1E0_FC1D0[v6] == 5 )
      {
        v3 = v4 + v5;
        if ( v3 == 8 )
          mapAngle_FC1E0_FC1D0[v6] = 2;
      }
    }
    v2 = v6 + 1;
  }
  while ( v2 );
  return v3;
}
// 10000: using guessed type void sub_10000();

//----- (00033570) --------------------------------------------------------
unsigned __int16 sub_33570(unsigned __int8 a1)
{
  unsigned __int16 result; // ax
  unsigned __int8 v2; // dh
  unsigned __int8 v3; // dl
  unsigned __int16 v4; // ax
  unsigned __int16 v5; // ax
  unsigned __int16 v6; // ax
  __int16 v7; // bx
  char v8; // dl
  char v9; // dh

  //fix
  v4 = 0;
  v5 = 0;
  v6 = 0;
  //fix

  qmemcpy(mapTerrainType_CC1E0_CC1D0, mapAngle_FC1E0_FC1D0, (unsigned int)sub_10000);
  result = 0;
  do
  {
    v2 = 0;
    v3 = -1;
    if ( mapHeightmap_DC1E0_DC1D0[result] )
      v2 = mapHeightmap_DC1E0_DC1D0[result];
    if ( mapHeightmap_DC1E0_DC1D0[result] != -1 )
      v3 = mapHeightmap_DC1E0_DC1D0[result];
    --HIBYTE(result);
    if ( v2 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
      v2 = mapHeightmap_DC1E0_DC1D0[result];
    if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
      v3 = mapHeightmap_DC1E0_DC1D0[result];
    LOBYTE(result) = result + 1;
    ++HIBYTE(result);
    if ( v2 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
      v2 = mapHeightmap_DC1E0_DC1D0[v4];
    if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v4] )
      v3 = mapHeightmap_DC1E0_DC1D0[v4];
    ++HIBYTE(v4);
    LOBYTE(v4) = v4 - 1;
    if ( v2 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v4] )
      v2 = mapHeightmap_DC1E0_DC1D0[v5];
    if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5] )
      v3 = mapHeightmap_DC1E0_DC1D0[v5];
    LOBYTE(v5) = v5 - 1;
    --HIBYTE(v5);
    if ( v2 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5] )
      v2 = mapHeightmap_DC1E0_DC1D0[v6];
    if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v6] )
      v3 = mapHeightmap_DC1E0_DC1D0[v6];
    LOBYTE(v6) = v6 + 1;
    if ( mapAngle_FC1E0_FC1D0[v6] && v2 - v3 >= a1 )
      mapAngle_FC1E0_FC1D0[v6] = 1;
    result = v6 + 1;
  }
  while ( result );
  do
  {
    if ( mapAngle_FC1E0_FC1D0[result] != 1 )
      goto LABEL_100;
    v7 = 0;
    --HIBYTE(result);
    v8 = 0;
    v9 = 0;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      HIBYTE(v7) = 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      LOBYTE(v7) = 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      v9 = 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      v8 = 1;
    LOBYTE(result) = result + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    ++HIBYTE(result);
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    ++HIBYTE(result);
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    LOBYTE(result) = result - 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    LOBYTE(result) = result - 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    --HIBYTE(result);
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    --HIBYTE(result);
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    LOBYTE(result) = result + 1;
    ++HIBYTE(result);
    if ( HIBYTE(v7) )
    {
      if ( (_BYTE)v7 || v9 || v8 )
        goto LABEL_99;
    }
    else if ( (_BYTE)v7 || v9 && v8 )
    {
LABEL_99:
      mapAngle_FC1E0_FC1D0[result] = 1;
    }
LABEL_100:
    ++result;
  }
  while ( result );
  return result;
}
// 10000: using guessed type void sub_10000();

//----- (000338F0) --------------------------------------------------------
unsigned __int16 sub_338F0()
{
  unsigned __int16 result; // ax
  char v1; // dh
  unsigned __int16 v2; // cx
  unsigned __int8 v3; // dl
  unsigned __int8 v4; // bl
  unsigned __int16 v5; // cx
  unsigned __int16 v6; // cx
  unsigned __int16 v7; // cx
  unsigned __int16 v8; // cx
  char v9; // [esp+0h] [ebp-8h]

  do
  {
    result = 0;
    v9 = 0;
    do
    {
      v1 = mapAngle_FC1E0_FC1D0[result] == 0;
      v2 = result;
      LOBYTE(result) = result + 1;
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
      v4 = v3;
      if ( !mapAngle_FC1E0_FC1D0[result] )
        ++v1;
      if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v4 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v4 = mapHeightmap_DC1E0_DC1D0[result];
      ++HIBYTE(result);
      if ( !mapAngle_FC1E0_FC1D0[result] )
        ++v1;
      if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v4 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v4 = mapHeightmap_DC1E0_DC1D0[result];
      LOBYTE(result) = result - 1;
      if ( !mapAngle_FC1E0_FC1D0[result] )
        ++v1;
      if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v4 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v4 = mapHeightmap_DC1E0_DC1D0[result];
      --HIBYTE(result);
      if ( v4 != v3 && v1 == 4 )
      {
        v9 = 1;
        v5 = result;
        LOBYTE(result) = result + 1;
        mapHeightmap_DC1E0_DC1D0[v5] = v3;
        v6 = result;
        ++HIBYTE(result);
        mapHeightmap_DC1E0_DC1D0[v6] = v3;
        v7 = result;
        LOBYTE(result) = result - 1;
        mapHeightmap_DC1E0_DC1D0[v7] = v3;
        v8 = result;
        --HIBYTE(result);
        mapHeightmap_DC1E0_DC1D0[v8] = v3;
      }
      ++result;
    }
    while ( result );
  }
  while ( v9 );
  return result;
}

//----- (00033A30) --------------------------------------------------------
char sub_33A30(char a1, char a2, unsigned __int16 a3)
{
  unsigned __int16 v3; // ax
  unsigned __int8 v4; // bl
  unsigned __int8 v5; // dh
  unsigned __int8 v6; // bh
  unsigned __int8 v7; // al
  char result; // al

  HIBYTE(v3) = HIBYTE(a3);
  v4 = -1;
  v5 = 0;
  if ( mapHeightmap_DC1E0_DC1D0[a3] )
  {
    v5 = mapHeightmap_DC1E0_DC1D0[a3];
    a1 = 0;
  }
  if ( mapHeightmap_DC1E0_DC1D0[a3] != -1 )
    v4 = mapHeightmap_DC1E0_DC1D0[a3];
  LOBYTE(v3) = a3 + 1;
  if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] > v5 )
  {
    v5 = mapHeightmap_DC1E0_DC1D0[v3];
    a1 = 1;
  }
  if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] < v4 )
    v4 = mapHeightmap_DC1E0_DC1D0[v3];
  HIBYTE(v3) = HIBYTE(a3) + 1;
  if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] > v5 )
  {
    v5 = mapHeightmap_DC1E0_DC1D0[v3];
    a1 = 2;
  }
  if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] < v4 )
    v4 = mapHeightmap_DC1E0_DC1D0[v3];
  LOBYTE(v3) = a3;
  if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] > v5 )
  {
    v5 = mapHeightmap_DC1E0_DC1D0[v3];
    a1 = 3;
  }
  if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] < v4 )
    v4 = mapHeightmap_DC1E0_DC1D0[v3];
  HIBYTE(v3) = HIBYTE(a3);
  v6 = 0;
  if ( a1 && mapHeightmap_DC1E0_DC1D0[v3] )
  {
    v6 = mapHeightmap_DC1E0_DC1D0[v3];
    a2 = 0;
  }
  LOBYTE(v3) = a3 + 1;
  if ( a1 != 1 && (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] > v6 )
  {
    v6 = mapHeightmap_DC1E0_DC1D0[v3];
    a2 = 1;
  }
  HIBYTE(v3) = HIBYTE(a3) + 1;
  if ( a1 != 2 && (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] > v6 )
  {
    v6 = mapHeightmap_DC1E0_DC1D0[v3];
    a2 = 2;
  }
  LOBYTE(v3) = a3;
  if ( a1 != 3 )
  {
    v7 = mapHeightmap_DC1E0_DC1D0[v3];
    if ( v7 > v6 )
    {
      a2 = 3;
      v6 = v7;
    }
  }
  dword_90758 = v5 - v4 <= 8;
  if ( v5 - v6 >= 8 )
    return a1;
  switch ( a1 )
  {
    case 0:
      if ( a2 != 1 )
        goto LABEL_39;
      goto LABEL_33;
    case 1:
      if ( a2 == 2 )
        goto LABEL_35;
LABEL_33:
      result = 4;
      break;
    case 2:
      if ( a2 == 3 )
        goto LABEL_37;
LABEL_35:
      result = 5;
      break;
    case 3:
      if ( a2 )
LABEL_37:
        result = 6;
      else
LABEL_39:
        result = 7;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}
// 90758: using guessed type int dword_90758;

//----- (00033BF0) --------------------------------------------------------
char sub_33800_33BF0(char a1, char a2, unsigned __int16 a3, unsigned __int8 a4)
{
  unsigned __int16 v4; // bx
  char result; // al
  char v6; // dl
  char *v7; // eax
  char v8; // al
  char v9; // ah
  unsigned __int8 v10; // al
  unsigned __int16 v11; // ax
  char v12; // dl
  unsigned __int16 v13; // ax
  char v14; // dh
  unsigned __int8 v15; // [esp+0h] [ebp-14h]

  HIBYTE(v4) = HIBYTE(a3);
  v15 = 8 * ((HIBYTE(a3) + a3) & 1);
  if ( a4 >= 8u )
  {
    switch ( a4 )
    {
      case 8u:
        mapTerrainType_CC1E0_CC1D0[a3] = 8;
        goto LABEL_30;
      case 9u:
        mapTerrainType_CC1E0_CC1D0[a3] = 9;
        goto LABEL_30;
      case 0xAu:
        v8 = sub_33A30(a1, a2, a3);
        v9 = v8;
        if ( dword_90758 )
          v9 = v8 + 8;
        v10 = v9;
        goto LABEL_28;
      case 0xBu:
        v10 = sub_33A30(a1, a2, a3) + 16;
        if ( dword_90758 )
          v10 += 8;
        goto LABEL_28;
      case 0xCu:
        v10 = sub_33A30(a1, a2, a3) + 32;
        if ( dword_90758 )
          v10 += 8;
        goto LABEL_28;
      case 0xDu:
        v10 = sub_33A30(a1, a2, a3) + 48;
        if ( dword_90758 )
          v10 += 8;
        goto LABEL_28;
      case 0xEu:
        v10 = sub_33A30(a1, a2, a3) + 64;
        if ( dword_90758 )
          v10 += 8;
LABEL_28:
        v7 = (char *)&unk_90A2C + 2 * v10;
        goto LABEL_29;
      case 0xFu:
        mapTerrainType_CC1E0_CC1D0[a3] = 11;
        goto LABEL_30;
      case 0x10u:
        v6 = mapTerrainType_CC1E0_CC1D0[a3];
        if ( v6 == 10 || v6 == 11 || v6 == 12 )
          goto LABEL_30;
        v7 = (char *)&unk_909AC + 2 * (unsigned __int8)sub_33A30(v6, a2, a3);
LABEL_29:
        mapTerrainType_CC1E0_CC1D0[a3] = *v7;
        mapAngle_FC1E0_FC1D0[a3] = mapAngle_FC1E0_FC1D0[a3] & 0x8F | v7[1];
LABEL_30:
        LOBYTE(v4) = a3 + 1;
        mapAngle_FC1E0_FC1D0[a3] = mapAngle_FC1E0_FC1D0[a3] & 0x77 | 0x80;
        v11 = v4;
        v12 = mapAngle_FC1E0_FC1D0[v4] & 0xF7;
        HIBYTE(v4) = HIBYTE(a3) + 1;
        mapAngle_FC1E0_FC1D0[v11] = v12;
        v13 = v4;
        v14 = mapAngle_FC1E0_FC1D0[v4] & 0xF7;
        LOBYTE(v4) = a3;
        mapAngle_FC1E0_FC1D0[v13] = v14;
        result = a3;
        mapAngle_FC1E0_FC1D0[v4] &= ~8u;
        break;
      case 0x11u:
        v7 = (char *)&unk_909EC + 2 * (unsigned __int8)sub_33A30(a1, a2, a3);
        goto LABEL_29;
      case 0x12u:
        v7 = (char *)&unk_909FC + 2 * (unsigned __int8)sub_33A30(a1, a2, a3) + 2 * v15;
        goto LABEL_29;
      case 0x13u:
        v7 = (char *)&unk_909FC + 2 * (unsigned __int8)sub_33A30(a1, a2, a3) + 2 * v15 + 16;
        goto LABEL_29;
      case 0x14u:
        v7 = (char *)&unk_909BC + 2 * (unsigned __int8)sub_33A30(a1, a2, a3);
        goto LABEL_29;
      case 0x15u:
        v7 = (char *)&unk_909BC + 2 * (unsigned __int8)sub_33A30(a1, a2, a3) + 16;
        goto LABEL_29;
      case 0x16u:
        v7 = (char *)&unk_909BC + 2 * (unsigned __int8)sub_33A30(a1, a2, a3) + 32;
        goto LABEL_29;
      default:
        goto LABEL_30;
    }
  }
  else
  {
    mapAngle_FC1E0_FC1D0[a3] = a4 | mapAngle_FC1E0_FC1D0[a3] & 0xF0;
    return sub_33F80(a3, a3);
  }
  return result;
}
// 90758: using guessed type int dword_90758;

//----- (00033ED0) --------------------------------------------------------
unsigned __int16 sub_33ED0(unsigned __int16 a1, char a2)
{
  unsigned __int16 v2; // ax
  unsigned __int16 v3; // bx
  unsigned __int16 v4; // bx
  unsigned __int16 v5; // bx
  char v6; // cl
  unsigned __int16 result; // ax
  char v8; // dh
  unsigned __int16 v9; // bx
  char v10; // dl
  unsigned __int16 v11; // bx
  char v12; // dl
  unsigned __int16 v13; // bx
  char v14; // dl

  HIBYTE(v2) = HIBYTE(a1);
  LOBYTE(v2) = a1 - 1;
  mapTerrainType_CC1E0_CC1D0[a1] = a2;
  v3 = v2;
  HIBYTE(result) = HIBYTE(a1) - 1;
  mapTerrainType_CC1E0_CC1D0[v3] = a2;
  v4 = result;
  LOBYTE(result) = a1;
  mapTerrainType_CC1E0_CC1D0[v4] = a2;
  v5 = result;
  v6 = 3;
  LOBYTE(result) = a1 - 1;
  mapTerrainType_CC1E0_CC1D0[v5] = a2;
  do
  {
    v8 = 3;
    do
    {
      LOBYTE(result) = result + 1;
      ++HIBYTE(result);
      v9 = result;
      LOBYTE(result) = result - 2;
      v10 = mapHeightmap_DC1E0_DC1D0[v9];
      HIBYTE(result) -= 2;
      v11 = result;
      LOBYTE(result) = result + 1;
      v12 = mapHeightmap_DC1E0_DC1D0[v11] - v10 + 32;
      ++HIBYTE(result);
      if ( v12 >= 32 )
      {
        if ( v12 > 40 )
          v12 = (v12 & 7) + 40;
      }
      else
      {
        v12 = 32;
      }
      v13 = result;
      mapShading_EC1E0_EC1D0[result] = v12;
      v14 = mapAngle_FC1E0_FC1D0[result] & 0xF7;
      LOBYTE(result) = result + 1;
      mapAngle_FC1E0_FC1D0[v13] = v14;
      --v8;
    }
    while ( v8 );
    LOBYTE(result) = result - 3;
    ++HIBYTE(result);
    --v6;
  }
  while ( v6 );
  return result;
}

//----- (00033F80) --------------------------------------------------------
char sub_33F80(unsigned __int16 a1, __int16 a2)
{
  unsigned __int16 v2; // cx
  char v3; // ah
  char v4; // al
  int v5; // eax
  unsigned __int16 v6; // cx
  _BOOL1 v7; // zf
  unsigned __int16 v8; // dx
  int v9; // eax
  unsigned __int16 v10; // dx
  int v11; // eax
  int v12; // edx
  unsigned __int16 v13; // cx
  char v14; // bl
  unsigned __int16 v15; // dx
  char v16; // al
  unsigned __int16 v17; // dx
  unsigned __int16 v18; // si
  char v19; // dl
  char v21; // [esp+0h] [ebp-20h]
  char v22; // [esp+4h] [ebp-1Ch]
  char v23; // [esp+4h] [ebp-1Ch]
  char v24; // [esp+8h] [ebp-18h]
  char v25; // [esp+Ch] [ebp-14h]
  char v26; // [esp+Ch] [ebp-14h]
  char v27; // [esp+Ch] [ebp-14h]
  char i; // [esp+10h] [ebp-10h]
  unsigned __int16 v29; // [esp+24h] [ebp+4h]

  //fix
  v29 = 0;
  //fix

  v2 = a1;
  v25 = a2 - a1 + 1;
  v3 = HIBYTE(a2) - HIBYTE(a1) + 1;
  v22 = v3;
  if ( HIBYTE(a2) - HIBYTE(a1) != 0xFF )
  {
    do
    {
      v4 = a2 - a1 + 1;
      if ( (_BYTE)a2 - (_BYTE)a1 != 0xFF )
      {
        do
        {
          if ( (mapAngle_FC1E0_FC1D0[v2] & 0x80) == 0 )
            mapTerrainType_CC1E0_CC1D0[v2] = 1;
          LOBYTE(v2) = v2 - 1;
          if ( (mapAngle_FC1E0_FC1D0[v2] & 0x80) == 0 )
            mapTerrainType_CC1E0_CC1D0[v2] = 1;
          --HIBYTE(v2);
          if ( (mapAngle_FC1E0_FC1D0[v2] & 0x80) == 0 )
            mapTerrainType_CC1E0_CC1D0[v2] = 1;
          LOBYTE(v2) = v2 + 1;
          if ( (mapAngle_FC1E0_FC1D0[v2] & 0x80) == 0 )
            mapTerrainType_CC1E0_CC1D0[v2] = 1;
          ++HIBYTE(v2);
          LOBYTE(v2) = v2 + 1;
          --v4;
        }
        while ( v4 );
      }
      LOBYTE(v2) = v2 - v25;
      ++HIBYTE(v2);
      --v3;
    }
    while ( v3 );
  }
  LOBYTE(a1) = a1 - 1;
  LOBYTE(v5) = v25 + 1;
  v26 = v25 + 1;
  --HIBYTE(a1);
  v6 = a1;
  v7 = v22 == -1;
  v23 = v22 + 1;
  v24 = v23;
  if ( !v7 )
  {
    do
    {
      LOBYTE(v5) = v26;
      for ( i = v26; i; --i )
      {
        v5 = v6;
        if ( mapTerrainType_CC1E0_CC1D0[v6] == 1 )
        {
          LOBYTE(v6) = v6 + 1;
          v8 = v6;
          ++HIBYTE(v6);
          v9 = 49 * (mapAngle_FC1E0_FC1D0[v8] & 7) + 343 * (mapAngle_FC1E0_FC1D0[v5] & 7);
          v10 = v6;
          LOBYTE(v6) = v6 - 1;
          v11 = 7 * (mapAngle_FC1E0_FC1D0[v10] & 7) + v9;
          v12 = mapAngle_FC1E0_FC1D0[v6] & 7;
          --HIBYTE(v6);
          v5 = 2 * (v12 + v11);
          LOBYTE(v12) = byte_B5D30[v5];
          mapTerrainType_CC1E0_CC1D0[v6] = v12;
          if ( (unsigned __int8)v12 >= 8u )
          {
            LOBYTE(v5) = (mapAngle_FC1E0_FC1D0[v6] & 0x87) + byte_B5D31[v5];
          }
          else
          {
            v21 = mapAngle_FC1E0_FC1D0[v6] & 0x87;
            word_12C1E0_12C1D0 = 9377 * word_12C1E0_12C1D0 + 9439;
            LOBYTE(v5) = v21 + 16 * ((unsigned __int16)word_12C1E0_12C1D0 % 7u);
          }
          mapAngle_FC1E0_FC1D0[v6] = v5;
        }
        LOBYTE(v6) = v6 + 1;
      }
      LOBYTE(v6) = v6 - v26;
      ++HIBYTE(v6);
      --v24;
    }
    while ( v24 );
  }
  v13 = v29;
  v27 = v26 + 1;
  v14 = v23 + 1;
  if ( v23 != -1 )
  {
    do
    {
      for ( BYTE1(v5) = v27; BYTE1(v5); --BYTE1(v5) )
      {
        LOBYTE(v13) = v13 + 1;
        ++HIBYTE(v13);
        v15 = v13;
        LOBYTE(v13) = v13 - 2;
        v16 = mapHeightmap_DC1E0_DC1D0[v15];
        HIBYTE(v13) -= 2;
        v17 = v13;
        LOBYTE(v13) = v13 + 1;
        LOBYTE(v5) = mapHeightmap_DC1E0_DC1D0[v17] - v16 + 32;
        ++HIBYTE(v13);
        if ( (char)v5 >= 28 )
        {
          if ( (char)v5 > 40 )
            LOBYTE(v5) = (v5 & 7) + 40;
        }
        else
        {
          LOBYTE(v5) = (v5 & 3) + 28;
        }
        v18 = v13;
        LOBYTE(v13) = v13 + 1;
        v19 = mapAngle_FC1E0_FC1D0[v18] & 0xF7;
        mapShading_EC1E0_EC1D0[v18] = v5;
        mapAngle_FC1E0_FC1D0[v18] = v19;
      }
      LOBYTE(v13) = v13 - v27;
      ++HIBYTE(v13);
      --v14;
    }
    while ( v14 );
  }
  return v5;
}
// 12C1D0: using guessed type __int16 word_12C1E0_12C1D0;

//----- (00034200) --------------------------------------------------------
char sub_34200(unsigned __int16 a1, __int16 a2)
{
  unsigned __int16 v2; // cx
  char v3; // ah
  char v4; // al
  unsigned __int16 v5; // dx
  unsigned __int16 v6; // dx
  unsigned __int16 v7; // dx
  unsigned __int16 v8; // dx
  int v9; // eax
  unsigned __int16 v10; // cx
  _BOOL1 v11; // zf
  unsigned __int16 v12; // dx
  int v13; // eax
  unsigned __int16 v14; // dx
  int v15; // eax
  unsigned __int16 v16; // dx
  int v17; // edx
  unsigned __int16 v18; // cx
  char v19; // bl
  unsigned __int16 v20; // dx
  char v21; // al
  unsigned __int16 v22; // dx
  unsigned __int16 v23; // si
  char v24; // dh
  char v26; // [esp+0h] [ebp-20h]
  char v27; // [esp+4h] [ebp-1Ch]
  char v28; // [esp+4h] [ebp-1Ch]
  char v29; // [esp+8h] [ebp-18h]
  char v30; // [esp+Ch] [ebp-14h]
  char v31; // [esp+Ch] [ebp-14h]
  char v32; // [esp+Ch] [ebp-14h]
  char i; // [esp+10h] [ebp-10h]
  unsigned __int16 v34; // [esp+24h] [ebp+4h]

  //fix
  v34 = 0;
  //fix

  v2 = a1;
  v30 = a2 - a1 + 1;
  v3 = HIBYTE(a2) - HIBYTE(a1) + 1;
  v27 = v3;
  if ( HIBYTE(a2) - HIBYTE(a1) != 0xFF )
  {
    do
    {
      v4 = a2 - a1 + 1;
      if ( (_BYTE)a2 - (_BYTE)a1 != 0xFF )
      {
        do
        {
          v5 = v2;
          LOBYTE(v2) = v2 - 1;
          mapTerrainType_CC1E0_CC1D0[v5] = 1;
          v6 = v2;
          --HIBYTE(v2);
          mapTerrainType_CC1E0_CC1D0[v6] = 1;
          v7 = v2;
          LOBYTE(v2) = v2 + 1;
          mapTerrainType_CC1E0_CC1D0[v7] = 1;
          v8 = v2;
          ++HIBYTE(v2);
          mapTerrainType_CC1E0_CC1D0[v8] = 1;
          LOBYTE(v2) = v2 + 1;
          --v4;
        }
        while ( v4 );
      }
      LOBYTE(v2) = v2 - v30;
      ++HIBYTE(v2);
      --v3;
    }
    while ( v3 );
  }
  LOBYTE(a1) = a1 - 1;
  LOBYTE(v9) = v30 + 1;
  v31 = v30 + 1;
  --HIBYTE(a1);
  v10 = a1;
  v11 = v27 == -1;
  v28 = v27 + 1;
  v29 = v28;
  if ( !v11 )
  {
    do
    {
      LOBYTE(v9) = v31;
      for ( i = v31; i; --i )
      {
        v9 = v10;
        if ( mapTerrainType_CC1E0_CC1D0[v10] == 1 )
        {
          LOBYTE(v10) = v10 + 1;
          v12 = v10;
          ++HIBYTE(v10);
          v13 = 49 * (mapAngle_FC1E0_FC1D0[v12] & 7) + 343 * (mapAngle_FC1E0_FC1D0[v9] & 7);
          v14 = v10;
          LOBYTE(v10) = v10 - 1;
          v15 = 7 * (mapAngle_FC1E0_FC1D0[v14] & 7) + v13;
          v16 = v10;
          --HIBYTE(v10);
          v17 = 2 * ((mapAngle_FC1E0_FC1D0[v16] & 7) + v15);
          LOBYTE(v15) = byte_B5D30[v17];
          mapTerrainType_CC1E0_CC1D0[v10] = v15;
          if ( (unsigned __int8)v15 >= 8u )
          {
            LOBYTE(v9) = byte_B5D31[v17] + (mapAngle_FC1E0_FC1D0[v10] & 0x87);
          }
          else
          {
            v26 = mapAngle_FC1E0_FC1D0[v10] & 0x87;
            word_12C1E0_12C1D0 = 9377 * word_12C1E0_12C1D0 + 9439;
            LOBYTE(v9) = v26 + 16 * ((unsigned __int16)word_12C1E0_12C1D0 % 7u);
          }
          mapAngle_FC1E0_FC1D0[v10] = v9;
        }
        LOBYTE(v10) = v10 + 1;
      }
      LOBYTE(v10) = v10 - v31;
      ++HIBYTE(v10);
      --v29;
    }
    while ( v29 );
  }
  v18 = v34;
  v32 = v31 + 1;
  v19 = v28 + 1;
  if ( v28 != -1 )
  {
    do
    {
      for ( BYTE1(v9) = v32; BYTE1(v9); --BYTE1(v9) )
      {
        LOBYTE(v18) = v18 + 1;
        ++HIBYTE(v18);
        v20 = v18;
        LOBYTE(v18) = v18 - 2;
        v21 = mapHeightmap_DC1E0_DC1D0[v20];
        HIBYTE(v18) -= 2;
        v22 = v18;
        LOBYTE(v18) = v18 + 1;
        LOBYTE(v9) = mapHeightmap_DC1E0_DC1D0[v22] - v21 + 32;
        ++HIBYTE(v18);
        if ( (char)v9 >= 28 )
        {
          if ( (char)v9 > 40 )
            LOBYTE(v9) = (v9 & 7) + 40;
        }
        else
        {
          LOBYTE(v9) = (v9 & 3) + 28;
        }
        v23 = v18;
        LOBYTE(v18) = v18 + 1;
        v24 = mapAngle_FC1E0_FC1D0[v23] & 0xF7;
        mapShading_EC1E0_EC1D0[v23] = v9;
        mapAngle_FC1E0_FC1D0[v23] = v24;
      }
      LOBYTE(v18) = v18 - v32;
      ++HIBYTE(v18);
      --v19;
    }
    while ( v19 );
  }
  return v9;
}
// 12C1D0: using guessed type __int16 word_12C1E0_12C1D0;

void sub_34070() {};

void TopProcedure_340B0_34470(int argc, const char** argv)//2050B0_205470
{
  int someVar;
  uint16_t pseudoRand = 0;

  if ( ProcessCommandLine_34DD0_35190(argc, (char**)argv) == -1 )
    return;
  sub_34B40_34F00();
  if ( (str_AE408_AE3F8->var_u8_0 & 8) != 0 )
  {
    nullsub_2();
  }
  else
  {
    str_AE408_AE3F8->var_u8_23 = 0;
    sub_3F1D0_3F510();
    sub_58F90_594A0();
    sub_41230_41570();
    sub_44730_44A70();
    if ( (str_AE408_AE3F8->var_u8_1 & 1) != 0 )
    {
      byte_939CD = 0;
      byte_939E5 = 0;
      byte_939CC = 0;
      byte_939E4 = 0;
      sub_40440_40780(&pathStrArray[PSdataftextdat]);
      sub_44700_44A40((char*)begTextDat_AE41C_AE40C_26C41C_26C40C, dword_AE238_AE228, 80);
    }
    else
    {
      sub_4A980_4ACC0();
    }
    str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u8_13327 = 0;
    while ( 1 )
    {
      if (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u8_13327)
        break;
      FadeInOut_61CC0_621D0(0, 0x10u, 0);
      if ( (str_AE408_AE3F8->var_u8_1 & 1) == 0 )
      {
        sub_31A00_31A40();
        someVar = 1;
        if ( typeResolution_12F02E_12F01E == 8 )
        {
          sub_34C80_35040();
          someVar = 8;
        }
        sub_41490_417D0();
        sub_42530_42870(2);
        byte_939E5 = byte_939E4;
        bool_12CA7C_12CA6C = true;
        byte_939CD = byte_939CC;
        bool_96880 = false;
        do
          sub_4AB20_4AE60();
        while ( !bool_96880 );
        if (!IsHiddenWord)
            sub_34070();
        FadeInOut_61CC0_621D0(0, 0x10u, 0);
        sub_5C05C_5C56C(&begPointersTab_AE450_AE440_26C450_26C440[0]);
        if ( !str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u8_13327 )
          sub_34460_34820();
        sub_34B00_34EC0();
        sub_61610_61B20((Pathstruct*)"data/snds0-0.dat");
        sub_61610_61B20((Pathstruct*)"data/music0-0.dat");
        sub_41540_41880();
        if ( !str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u8_13327 )
        {
          sub_5D070_5D580(0);
          sub_5CEF0_5D400(0);
        }
        if ( (str_AE408_AE3F8->var_u8_0 & 4) == 0 )
        {
          sub_31A00_31A40();
          if (someVar == 8 )
            sub_34C80_35040();
          sub_31A60_31AA0();
        }
        sub_42530_42870(3);
      }
      if ( !str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u8_13327 )
      {
        pseudoRand = str_AE408_AE3F8->var_u16_17;
        sub_407A0_40AE0();
        if ( typeResolution_12F02E_12F01E == 1 && !blurBuffer_AE404_AE3F4 )
          blurBuffer_AE404_AE3F4 = (uint8*)malloc_42540_42880(64000);
      }
      while ( 1 )
      {
        if (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u8_13327)
          break;
        if ( byte_939CC && byte_939CD && word_939D6 )
        {
          pseudoRand = 9377 * pseudoRand + 9439;
          str_AE400_AE3F0->var_u32_576.a32 = pseudoRand % 3u + 1;
          sub_5D290_5D7A0(str_AE400_AE3F0->var_u32_576.a16[0]);
        }
        sub_59720_59C30();
        sub_34610_349D0(4, pseudoRand);
        sub_5D010_5D520();
        sub_20E60_20E60();
        FadeInOut_61CC0_621D0(0, 0x10u, 0);
        if ( (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 & 6) != 4 )
        {
          if ( (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 & 2) != 0 )
          {
              str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 = 2;
            sub_448E0_44C20();
            str_AE408_AE3F8->var_u16_17++;
          }
          else
          {
              str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 = 8;
          }
          break;
        }
        sub_408D0_40C10();
        str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 = 4;
      }
      FadeInOut_61CC0_621D0(0, 0x10u, 0);
    }
    sub_358A0_35C60();
  }
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  sub_34C60_35020();
  sub_433C0_43700();
}

//----- (00034820) --------------------------------------------------------
int sub_34460_34820()
{
  int result; // eax

  sub_3EEA0_3F1E0(aDataSmatitleDa, begWscreen_2ECFF4_2ECFE4);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  sub_3EEA0_3F1E0(aDataSmatitlePa, (uint8_t*)begPalDat_AE428_AE418_26C428_26C418);
  FadeInOut_61CC0_621D0(begPalDat_AE428_AE418_26C428_26C418, 0x20u, 0);
  result = dword_AE400_AE3F0();
  *(_DWORD *)(dword_AE400_AE3F0() + 581) = 1;
  *(_DWORD *)(result + 585) = 0;
  *(_DWORD *)(result + 589) = 0;
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE418: using guessed type int begPalDat_AE428_AE418_26C428_26C418;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (000348B0) --------------------------------------------------------
int sub_348B0()
{
  char *v1; // [esp-4h] [ebp-4h]

  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  v1 = (char *)begPalDat_AE428_AE418_26C428_26C418;
  *(_DWORD *)(dword_AE400_AE3F0() + 581) = 0;
  return sub_3EEA0_3F1E0(aDataPal10Dat, (uint8_t*)v1);
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE418: using guessed type int begPalDat_AE428_AE418_26C428_26C418;

int counter_34530 = 0;
//SYNCHRONIZED WITH REMC1
void DrawAndEventsInGame_34530_348F0()//205530_
{
	//debug
#ifdef debug1
		//add_compare(0x205530, true);
#endif debug1
		//debug
	if (!str_AE400_AE3F0->set.mod3D_8603)
		sub_34690_34A50();
	if ((str_AE408_AE3F8->var_u8_2 & 1) == 0)
		sub_590D0_595E0();
	if ((str_AE408_AE3F8->var_u8_0 & 4) == 0)
		sub_17C20();
	sub_3C9D0_3CD10();
	if ((str_AE408_AE3F8->var_u8_2 & 1) == 0)
		sub_415C0_41900();
	switch (str_AE408_AE3F8->gameSpeed_150)
	{
	case 1:
	{
		for (int i = 0; i < 4; i++)
			sub_41780_41AC0();
		break;
	}
	case 2:
	{
		for (int j = 0; j < 16; j++)
			sub_41780_41AC0();
		break;
	}
	default:
	{
		sub_41780_41AC0();
	}
	}
	//2055C1
			//debug
#ifdef debug1
		//add_compare(0x2055C1, true);
#endif debug1
		//debug
	sub_55100_55630();
	//2055C6
			//debug
#ifdef debug1
		//add_compare(0x2055C6, true);
#endif debug1
		//debug
	DrawGameFrame_20FB0();
	//2055DE
		//debug
#ifdef debug1
	if (counter_34530 == 0x19)
	{
		counter_34530++;
		counter_34530--;
	}
	add_compare(0x2055DE, true, true);
	counter_34530++;
#endif debug1
	//debug
	str_AE408_AE3F8->var_u32_153 = dword_AC5D4_AC5C4 - str_AE408_AE3F8->var_u32_153;
	sub_5A560_5AA70();
	//2055F4
			//debug
#ifdef debug1
		//add_compare(0x2055F4, true, true);
#endif debug1
		//debug
	str_AE408_AE3F8->var_u32_153 = dword_AC5D4_AC5C4;
	sub_30B30_30B70();
}

//----- (000349D0) --------------------------------------------------------
void sub_34610_349D0(__int16 a2, __int16 a3)
{
  int v3; // ebx
  int result; // eax

    //fix
    __int16 a1 = 0;
    //fix

  v3 = dword_AE400_AE3F0();
  *(_BYTE *)(dword_AE408_AE3F8() + 23) = 0;
  *(_WORD *)(v3 + 2049 * *(__int16 *)(v3 + 8) + 13325) = 0;
  while ( 1 )
  {
    result = 2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0();
    if ( *(_BYTE *)(result + 13327) || (*(_BYTE *)(result + 13325) & 8) != 0 )
      break;
    DrawAndEventsInGame_34530_348F0();
  }
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00034A50) --------------------------------------------------------
char sub_34690_34A50()
{
  int v0; // ebx
  __int16 v1; // ax
  int i; // eax
  int v3; // edx
  int j; // eax
  int v5; // edx
  int k; // eax
  int v7; // edx
  int m; // eax
  int n; // eax
  int ii; // ebx
  char v11; // al

  v0 = dword_AE408_AE3F8();
  LOBYTE(v1) = *(_BYTE *)(dword_AE408_AE3F8() + 23);
  if ( (unsigned __int8)v1 < 2u )
  {
    sub_348B0();
    LOBYTE(v1) = dword_AE408_AE3F8();
    ++*(_BYTE *)(dword_AE408_AE3F8() + 23);
  }
  else if ( (unsigned __int8)v1 <= 2u )
  {
    LOBYTE(v1) = v1 + 1;
    *(_BYTE *)(dword_AE408_AE3F8() + 152) = 1;
    *(_BYTE *)(v0 + 23) = v1;
  }
  else if ( (_BYTE)v1 == 3 )
  {
    if ( str_AE400_AE3F0->set.mod3D_8603 )
      sub_623D8();
    LOBYTE(v1) = *(_BYTE *)(dword_AE408_AE3F8() + 152);
    switch ( (char)v1 )
    {
      case 1:
        FadeInOut_61CC0_621D0(begPalDat_AE428_AE418_26C428_26C418, 4u, 1);
        v1 = word_12F690_12F680;
        if ( v1 == 4 )
        {
          LOBYTE(v1) = dword_AE408_AE3F8();
          *(_BYTE *)(dword_AE408_AE3F8() + 152) = 0;
        }
        return v1;
      case 2:
        for ( i = 3; i != 768; byte_B6FFF[i] = *(_BYTE *)(v3 + i - 1) )
        {
          v3 = (int)begPalDat_AE428_AE418_26C428_26C418;
          i += 3;
          dword_B7300 = 255;
          byte_B6FFD[i] = 63;
          byte_B6FFE[i] = *(_BYTE *)(v3 + i - 2);
        }
        goto LABEL_61;
      case 3:
        for ( j = 3; j != 768; byte_B6FFF[j] = dword_B7300 )
        {
          dword_B7300 = *(unsigned __int8 *)(begPalDat_AE428_AE418_26C428_26C418 + j) + 48;
          if ( dword_B7300 < 0 )
            dword_B7300 = 0;
          if ( dword_B7300 > 63 )
            dword_B7300 = 63;
          byte_B7000[j] = dword_B7300;
          v5 = (int)begPalDat_AE428_AE418_26C428_26C418;
          byte_B7001[j] = *(_BYTE *)(begPalDat_AE428_AE418_26C428_26C418 + j + 1);
          dword_B7300 = *(unsigned __int8 *)(v5 + j + 2) + 64;
          if ( dword_B7300 < 0 )
            dword_B7300 = 0;
          if ( dword_B7300 > 63 )
            dword_B7300 = 63;
          j += 3;
        }
        goto LABEL_61;
      case 4:
        for ( k = 3; k != 768; byte_B6FFF[k] = 63 )
        {
          v7 = (int)begPalDat_AE428_AE418_26C428_26C418;
          k += 3;
          dword_B7300 = 255;
          byte_B6FFD[k] = *(_BYTE *)(begPalDat_AE428_AE418_26C428_26C418 + k - 3);
          byte_B6FFE[k] = *(_BYTE *)(v7 + k - 2);
        }
        goto LABEL_61;
      case 5:
        for ( m = 3; m != 768; byte_B6FFF[m] = dword_B7300 )
        {
          dword_B7300 = *(unsigned __int8 *)(begPalDat_AE428_AE418_26C428_26C418 + m + 2) - 32;
          if ( dword_B7300 < 0 )
            dword_B7300 = 0;
          if ( dword_B7300 > 63 )
            dword_B7300 = 63;
          byte_B7000[m] = dword_B7300;
          dword_B7300 = *(unsigned __int8 *)(begPalDat_AE428_AE418_26C428_26C418 + m + 1) - 32;
          if ( dword_B7300 < 0 )
            dword_B7300 = 0;
          if ( dword_B7300 > 63 )
            dword_B7300 = 63;
          byte_B7001[m] = dword_B7300;
          dword_B7300 = *(unsigned __int8 *)(begPalDat_AE428_AE418_26C428_26C418 + m + 2) - 32;
          if ( dword_B7300 < 0 )
            dword_B7300 = 0;
          if ( dword_B7300 > 63 )
            dword_B7300 = 63;
          m += 3;
        }
        goto LABEL_61;
      case 6:
        for ( n = 3; n != 768; byte_B6FFF[n] = dword_B7300 )
        {
          dword_B7300 = *(unsigned __int8 *)(begPalDat_AE428_AE418_26C428_26C418 + n + 2) + 48;
          if ( dword_B7300 < 0 )
            dword_B7300 = 0;
          if ( dword_B7300 > 63 )
            dword_B7300 = 63;
          byte_B7000[n] = dword_B7300;
          dword_B7300 = *(unsigned __int8 *)(begPalDat_AE428_AE418_26C428_26C418 + n + 1) + 32;
          if ( dword_B7300 < 0 )
            dword_B7300 = 0;
          if ( dword_B7300 > 63 )
            dword_B7300 = 63;
          byte_B7001[n] = dword_B7300;
          dword_B7300 = *(unsigned __int8 *)(begPalDat_AE428_AE418_26C428_26C418 + n + 2) + 32;
          if ( dword_B7300 < 0 )
            dword_B7300 = 0;
          if ( dword_B7300 > 63 )
            dword_B7300 = 63;
          n += 3;
        }
        goto LABEL_61;
      case 7:
        for ( ii = 3; ii != 768; byte_B6FFF[ii] = v11 )
        {
          dword_B7300 = (*(unsigned __int8 *)(ii + begPalDat_AE428_AE418_26C428_26C418 + 1)
                       + *(unsigned __int8 *)(ii + begPalDat_AE428_AE418_26C428_26C418)
                       + *(unsigned __int8 *)(ii + begPalDat_AE428_AE418_26C428_26C418 + 2))
                      / 3;
          ii += 3;
          v11 = dword_B7300;
          byte_B6FFD[ii] = dword_B7300;
          byte_B6FFE[ii] = v11;
        }
LABEL_61:
        sub_623D8();
        SetPalette_319A0_319E0((TColor*)byte_B7000);
        LOBYTE(v1) = dword_AE408_AE3F8();
        *(_BYTE *)(dword_AE408_AE3F8() + 152) = 1;
        break;
      default:
        return v1;
    }
  }
  return v1;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// AE418: using guessed type int begPalDat_AE428_AE418_26C428_26C418;
// B7300: using guessed type int dword_B7300;

void sub_34B00_34EC0()//205b00_205EC0
{
  sub_40440_40780(&pathStrArray[PSSearchD]);
  if ( typeResolution_12F02E_12F01E == 1 )
    sub_40440_40780(&pathStrArray[PSWScreen]);
  else
    sub_40440_40780(&pathStrArray[PSWScreen2]);
  sub_59500_59A10(off_99974);
  sub_11540();
}

void sub_34B40_34F00()//205B40_205F00
{
	DrawStartGameTexts_5ACA0_5B1B0();
	DrawTextLine_5AD10_5B220((char*)"Load all data files");
	sub_34B00_34EC0();
	DrawTextLine_5AD10_5B220((char*)"Initialise Colour Lookup");
    int index1 = 0;
    uint8_t indexB1 = 3;
	for (int i = 0; i < 16; i++)
	{
		int index2 = index1;
		uint8_t indexB2 = 3;
		for (int j = 0; j < 16; j++)
		{
			int index3 = index2;
			uint8_t indexB3 = 3;
			for (int k = 0; k < 16; k++)
			{
				index3++;
				byte_AD167_AD157[index3] = sub_5CC70_5D180(begPalDat_AE428_AE418_26C428_26C418, indexB1, indexB2, indexB3);
				indexB3 += 4;
			}
			index2 += 16;
			indexB2 += 4;
		}
		index1 += 256;
		indexB1 += 4;
	}
	str_AE408_AE3F8->var_u8_23 = 1;
	sub_5A3C0_5A8D0(0);
}

//----- (00035020) --------------------------------------------------------
void sub_34C60_35020()
{
  sub_58F00_59410();
  sub_44840_44B80();
  sub_61610_61B20(&pathStrArray[PSSearchD]);
  DrawStartGameTexts_5ACA0_5B1B0();
}

//----- (00035040) --------------------------------------------------------
int sub_34C80_35040()
{
  uint8* v0; // eax
  int result; // eax

  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  sub_315C0_31600();
  free_426E0_42A20((void*)blurBuffer_AE404_AE3F4);
  blurBuffer_AE404_AE3F4 = 0;
  sub_3F370_3F6B0();
  sub_59560_59A70((unsigned int **)&off_99974);
  if ( typeResolution_12F02E_12F01E == 1 )
  {
    sub_61610_61B20((Pathstruct*)(char*)aWscreen);
    typeResolution_12F02E_12F01E = 8;
    sub_40440_40780((Pathstruct*)aWscreen_0);
    v0 = (uint8*)malloc_42540_42880((int)&loc_4AFFB + 5);
  }
  else
  {
    sub_61610_61B20((Pathstruct*)(char*)aWscreen_0);
    typeResolution_12F02E_12F01E = 1;
    sub_40440_40780((Pathstruct*)aWscreen);
    v0 = (uint8*)malloc_42540_42880(64000);
  }
  blurBuffer_AE404_AE3F4 = v0;
  sub_59500_59A10(off_99974);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_61B90_620A0((unsigned __int8 *)begWscreen_2ECFF4_2ECFE4);
  else
    sub_61C30_62140((unsigned __int8 *)begWscreen_2ECFF4_2ECFE4);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  sub_5C214_5C724();
  sub_5C05C_5C56C(begPointersTab_AE450_AE440_26C450_26C440);
  result = dword_AE408_AE3F8();
  *(_BYTE *)(dword_AE408_AE3F8() + 23) = 0;
  return result;
}
// 99974: using guessed type int *off_99974;
// AE3F4: using guessed type int blurBuffer_AE404_AE3F4;
// AE3F8: using guessed type int dword_AE408_AE3F8();
// AE440: using guessed type int begPointersTab_AE450_AE440_26C450_26C440;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

int StrToInt(char* a1)//232f36_
{
    while ((IsTable[(uint8_t)(*a1 + 1)] & 2) != 0)
        a1++;
    char specChar = *a1;
    if (specChar == '-' || specChar == '/')
        a1++;
    int result = 0;
    while ((IsTable[(uint8_t)(*a1 + 1)] & 0x20) != 0)
    {
        result = (uint8_t)*a1++ - '0' + 10 * result;
    }
    if (specChar == '/')
        return -result;
    return result;
}

int ProcessCommandLine_34DD0_35190(int argc, char** argv)//205DD0_
{
	char textBuffer4[32];
	char textBuffer1[32];
	char textBuffer2[32];
	char textBuffer3[32];
	char result2 = 0;
	char firstChar = 0;
	char result = 0;
	bool varHelp = false;
	bool varCustom = false;
	bool varNetwork = false;
	bool neverRun2 = false;
	int varSome = 1;
	bool varSetsound = false;
	int varDetail = 1;
	int varCheat = 0;
	int varLevel = 0;
	int varMovie = 0;
	int varRoll = 0;
	bool varTime = false;
	int varPassword = 0;
	bool varVfx = false;
	int varDemo = 0;
	origDebug_AE45A_AE44A = 0;
	int varPlayers = 2;
	bool varDigijoy = false;
	bool varAnojoy = false;
	strcpy(textBuffer2, "PLAYER");
	strcpy(textBuffer3, "CARPET");
	bool neverRun = 0;
	for (int i = 1; i < argc; i++)
	{
		firstChar = argv[i][0];
		if (firstChar != '-' && firstChar != '/')
		{
			printf("ERROR : Incorrect command : %d\n", i);
			result = -1;
			break;
		}
		strcpy(textBuffer1, &argv[i][1]);
		textBuffer4[0] = 0;
		if (i + 1 < argc)
		{
			strcpy(textBuffer4, &argv[i + 1][0]);
		}
		if (!stricmp("digijoy", textBuffer1))
		{
			varDigijoy = true;
		}
		else if (!stricmp("anojoy", textBuffer1))
		{
			varAnojoy = true;
		}
		else if (!stricmp("anojoy4", textBuffer1))
		{
			varAnojoy = true;
		}
		else if (!stricmp("vfx", textBuffer1))
		{
			varVfx = true;
		}
		else if (!stricmp("help", textBuffer1))
		{
			varHelp = true;
		}
		else if (!stricmp("debug", textBuffer1))
		{
			origDebug_AE45A_AE44A = 1;
		}
		else if (!stricmp("network", textBuffer1))
		{
			varNetwork = true;
		}
		else if (!stricmp("custom", textBuffer1))
		{
			varCustom = true;
		}
		else if (!stricmp("setsound", textBuffer1))
		{
			varSetsound = true;
		}
		else if (!stricmp("demo", textBuffer1))
		{
			varDemo = StrToInt(textBuffer4);
			i++;
		}
		else if (!stricmp("detail", textBuffer1))
		{
			varDetail = StrToInt(textBuffer4);
			i++;
		}
		else if (!stricmp("cheat", textBuffer1))
		{
			varCheat = StrToInt(textBuffer4);
			i++;
		}
		else if (!stricmp("name", textBuffer1))
		{
			strcpy(textBuffer2, textBuffer4);
			i++;
		}
		else if (!stricmp("level", textBuffer1))
		{
			varLevel = StrToInt(textBuffer4);
			i++;
		}
		else if (!stricmp("movie", textBuffer1))
		{
			varMovie = StrToInt(textBuffer4);
			i++;
		}
		else if (!stricmp("roll", textBuffer1))
		{
			varRoll = StrToInt(textBuffer4);
			i++;
		}
		else if (!stricmp("time", textBuffer1))
		{
			varTime = true;
		}
		else if (!stricmp("password", textBuffer1))
		{
			varPassword = StrToInt(textBuffer4);
			i++;
		}
		else if (!stricmp("players", textBuffer1))
		{
			varPlayers = StrToInt(textBuffer4);
			i++;
		}
		else
		{
			if (stricmp("session", textBuffer1))
			{
				printf("ERROR : Incorrect command : %d\n", i);
				result2 = -1;
				result = -1;
				break;
			}
			strcpy(textBuffer3, textBuffer4);
			i++;
		}
	}
	if (result != -1)
	{
		if (varNetwork)
		{
			InitNetwork_43270_435B0();
			varNetwork = false;
		}
		if (varVfx)
		{
			if (InitVfx_5AF50_5B460())
			{
				str_AE400_AE3F0->set.var_u8_8606 = 1;
				byte_90B23 |= 8;
				printf("VFX\n");
			}
		}
		if (varDigijoy)
		{
			InitDigijoy_3F7D0_3FB10(textBuffer4);
			if (byte_B7700_B76F0)
				byte_90B23 |= 2u;
		}
		if (varAnojoy)
		{
			InitAnojoy_3F820_sub_3FB60(firstChar, textBuffer4[0], textBuffer4[1], textBuffer4[2], textBuffer4[3]);
			if (byte_B7700_B76F0)
			{
				byte_B7700_B76F0 = 1;
				byte_90B23 |= 1u;
			}
		}
		if (neverRun)
		{
			InitAnojoy_3F820_sub_3FB60(firstChar, textBuffer4[0], textBuffer4[1], textBuffer4[2], textBuffer4[3]);
			if (byte_B7700_B76F0)
			{
				byte_B7700_B76F0 = 1;
				byte_90B23 |= 0x20u;
			}
		}
		dword_12F080_12F070 = malloc_425C0_42900(256);
		str_AE400_AE3F0 = (Type_str_AE400_AE3F0*)malloc_42540_42880(232713);
		str_AE408_AE3F8 = (Type_str_AE408_AE3F8*)malloc_42540_42880(36478);
		str_AE400_AE3F0->set.var_u8_8621 = 1;
		str_AE400_AE3F0->set.var_u8_8622 = 1;
		str_AE400_AE3F0->set.var_u8_8623 = 1;
		str_AE400_AE3F0->set.var_u8_8624 = 1;
		str_AE400_AE3F0->set.var_u8_8625 = 1;
		str_AE400_AE3F0->set.var_u8_8626 = 1;
		str_AE400_AE3F0->set.var_u8_8627 = 1;
		str_AE400_AE3F0->set.var_u8_8628 = 1;
		str_AE400_AE3F0->set.var_u8_8629 = 1;
		str_AE400_AE3F0->set.var_u8_8630 = 1;
		str_AE400_AE3F0->set.var_u8_8631 = 1;
		sub_19470();
		if (str_AE408_AE3F8->var_u8_8)
		{
			str_AE400_AE3F0->set.reflections_8597 = 1;
			str_AE400_AE3F0->set.skyOn_8599 = 1;
		}
		else
		{
			str_AE400_AE3F0->set.reflections_8597 = 0;
			str_AE400_AE3F0->set.skyOn_8599 = 0;
		}
		str_AE400_AE3F0->set.shadowsOn_8598 = 1;
		str_AE400_AE3F0->set.iconsOn_8602 = 1;
		str_AE400_AE3F0->set.mapOn_8601 = 1;
		str_AE400_AE3F0->set.var_u8_8600 = 40;
		str_AE400_AE3F0->var_u16_10 = varPlayers;
		strcpy(str_AE408_AE3F8->textBuffer_117, textBuffer3);
        str_AE408_AE3F8->var_u8_29[0] = byte_A9058;
		if (!varDetail)
		{
			str_AE400_AE3F0->set.reflections_8597 = 0;
			str_AE400_AE3F0->set.skyOn_8599 = 0;
			str_AE400_AE3F0->set.shadowsOn_8598 = 0;
			str_AE400_AE3F0->set.var_u8_8600 = 40;
		}
		if (varDemo)
		{
			switch (varDemo)
			{
			case 1:
				str_AE400_AE3F0->var_u8_1 |= 2u;
				break;
			case 2:
				str_AE400_AE3F0->var_u8_1 |= 4u;
				break;
			case 3:
				str_AE400_AE3F0->var_u8_1 |= 8u;
				break;
			case 4:
				str_AE400_AE3F0->var_u8_1 |= 0x10u;
				break;
			case 5:
				str_AE400_AE3F0->var_u8_1 |= 0x20u;
				break;
			default:
				break;
			}
			str_AE400_AE3F0->var_u8_1 |= 1u;
		}
		if (varTime)
			str_AE408_AE3F8->var_u8_0 |= 0x40u;
		if (varCustom)
			str_AE400_AE3F0->var_u8_1 |= 1u;
		if (varHelp)
			result = -1;
		if (varNetwork)
		{
			if (str_AE400_AE3F0->var_u16_10 > 1u)
			{
				str_AE400_AE3F0->var_u16_8 = sub_43430_43770(str_AE408_AE3F8->textBuffer_117, str_AE400_AE3F0->var_u16_10);
				if (str_AE400_AE3F0->var_u16_8 >= 0)
					str_AE408_AE3F8->var_u8_0 |= 0x10u;
				else
					str_AE400_AE3F0->var_u16_8 = 0;
			}
			str_AE400_AE3F0->var_u8_1 |= 1u;
		}
		if (neverRun2)
		{
			varSome = 8;
			varSetsound = false;
			str_AE408_AE3F8->var_u8_0 |= 8;
		}
		str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u32_13347_24 = varCheat;
		//*(_DWORD*)(2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 13347) = varCheat;
		str_AE408_AE3F8->var_u16_17 = varLevel;
		if (varMovie)
			str_AE408_AE3F8->var_u16_13 = varMovie;
		if (varRoll)
		{
			str_AE408_AE3F8->var_u16_13 = 0;
			str_AE408_AE3F8->var_u16_15 = varRoll;
			str_AE408_AE3F8->var_u8_0 |= 0x120;
		}
		if (origDebug_AE45A_AE44A)
		{
			origDebug_AE45A_AE44A = 0;
			str_AE408_AE3F8->var_u8_0 |= 0x80u;
		}
		str_AE408_AE3F8->var_u32_25 = varPassword;
		if (result != -1)
			typeResolution_12F02E_12F01E = varSome;
	}
	return result;
}

//----- (00035AA0) --------------------------------------------------------
int FlvInitSet_356E0_35AA0()
{
  int result; // eax

  word_B7304 = mouse_9AD90.x;
  word_B7306 = mouse_9AD90.y;
  result = (unsigned __int8)lastPressedKey_12EF70_12EF60;
  word_B7308 = (unsigned __int8)lastPressedKey_12EF70_12EF60;
  dword_AE400 = 0;
  return result;
}
// 9AD90: using guessed type __int16 word_9AD90;
// 9AD92: using guessed type __int16 word_9AD92;
// AE400: using guessed type int dword_AE400;
// B7304: using guessed type __int16 word_B7304;
// B7306: using guessed type __int16 word_B7306;
// B7308: using guessed type __int16 word_B7308;
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;

//----- (00035AD0) --------------------------------------------------------
int sub_35AD0()
{
  __int16 v0; // ax

  if ( !dword_AE400 )
  {
    if (mouse_9AD90.x != word_B7304
      || mouse_9AD90.y != word_B7306
      || mouseLeftButton2_12EFE4_12EFD4
      || mouseRightButton2_12EFE2_12EFD2
      || (HIBYTE(v0) = HIBYTE(word_B7306) ^ HIBYTE(mouse_9AD90.y), LOBYTE(v0) = lastPressedKey_12EF70_12EF60, v0 != word_B7308) )
    {
      word_B7304 = mouse_9AD90.x;
      word_B7306 = mouse_9AD90.y;
      word_B7308 = (unsigned __int8)lastPressedKey_12EF70_12EF60;
      dword_AE400 = 1;
    }
  }
  return dword_AE400;
}
// 9AD90: using guessed type __int16 word_9AD90;
// 9AD92: using guessed type __int16 word_9AD92;
// AE400: using guessed type int dword_AE400;
// B7304: using guessed type __int16 word_B7304;
// B7306: using guessed type __int16 word_B7306;
// B7308: using guessed type __int16 word_B7308;
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFD2: using guessed type __int16 mouseRightButton2_12EFE2_12EFD2;
// 12EFD4: using guessed type __int16 mouseLeftButton2_12EFE4_12EFD4;

//----- (00035B60) --------------------------------------------------------
int sub_35B60()
{
  void *retaddr[2]; // [esp+0h] [ebp+0h]

  ++dword_AC5D4_AC5C4;
  return 0;// MK_FP(retaddr[0], retaddr[0])();
}
// AC5C4: using guessed type int dword_AC5D4_AC5C4;

//----- (00035B80) --------------------------------------------------------
void sub_357C0_35B80()
{
  if ( !byte_90AD4 )
  {
    byte_90AD4 = 1;
    if ( (*(_BYTE *)dword_AE408_AE3F8() & 0x48) != 0 )
    {
      DrawTextLine_5AD10_5B220((char*)aSoundDisabled);
      byte_939CD = 0;
      byte_939E5 = 0;
      byte_939CC = 0;
      byte_939E4 = 0;
    }
    else
    {
      DrawTextLine_5AD10_5B220((char*)aInitialiseMusi);
      sub_3C8B0();
      DrawTextLine_5AD10_5B220((char*)aInitialiseSoun);
      sub_3C800_sub_3CB40();
    }
    if ( byte_939E4 || byte_939CC )
    {
      sub_5DE8B(0x78u, (int)sub_35B60, __CS__, (unsigned int)&dword_80010);
      byte_90AD5 = 1;
    }
    else
    {
      sub_5A459_5A969();
    }
    switch ( *(_BYTE *)(dword_AE408_AE3F8() + 151) )
    {
      case 0:
        if ( !byte_939E4 )
          goto LABEL_11;
        break;
      case 1:
      case 2:
      case 3:
LABEL_11:
        byte_90090 = 1;
        break;
      default:
        return;
    }
  }
}
// 35B60: using guessed type int __far sub_35B60();
// 80010: using guessed type int dword_80010;
// 90090: using guessed type char byte_90090;
// 90AD4: using guessed type char byte_90AD4;
// 90AD5: using guessed type char byte_90AD5;
// 939CC: using guessed type char byte_939CC;
// 939CD: using guessed type char byte_939CD;
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00035C60) --------------------------------------------------------
void sub_358A0_35C60()
{
  if ( !byte_90AD5 )
    sub_5A4EA_5A9FA();
  else
  {
      sub_5E1A1(dword_80010);
      sub_624A0();
      sub_62530();
  }
}
// 80010: using guessed type int dword_80010;
// 90AD5: using guessed type char byte_90AD5;

//----- (00035C90) --------------------------------------------------------
int sub_35C90(__int16 a1, __int16 a2, __int16 a3)
{
  int result; // eax
  int v4; // ebx
  int v5; // edx

  LOWORD(result) = a2 - a1;
  v4 = (__int16)(a2 - a1);
  v5 = a3 >> 1;
  if ( v4 > v5 )
    return (__int16)(result - a3);
  if ( v4 < -v5 )
    LOWORD(result) = a3 + result;
  return (__int16)result;
}

//----- (00035CC0) --------------------------------------------------------
int sub_35CC0(__int16 a1, int a2, char a3, char a4)
{
  unsigned __int16 v4; // ax
  __int16 v5; // bx
  unsigned __int16 v6; // ax
  int result; // eax

  LOBYTE(v4) = a1;
  HIBYTE(v4) = a2;
  LOBYTE(v5) = mapHeightmap_DC1E0_DC1D0[v4];
  LOBYTE(v6) = a3;
  v5 = (unsigned __int8)v5;
  HIBYTE(v6) = a4;
  if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v6] > (int)(unsigned __int8)v5 )
    LOBYTE(v5) = mapHeightmap_DC1E0_DC1D0[v6];
  word_AE454_AE444.x = a1 << 8;
  result = a2 << 8;
  word_AE454_AE444.z = 32 * v5;
  word_AE454_AE444.y = (_WORD)a2 << 8;
  return result;
}
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE446: using guessed type __int16 word_AE454_AE444.y;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (00035D20) --------------------------------------------------------
int sub_35D20(__int16 a1, unsigned __int16 a2, __int16 a3, __int16 a4)
{
  __int16 v4; // si
  int result; // eax
  int v6; // edi
  char v7; // al
  int v8; // ebp
  int v9; // ebx
  int v10; // edi
  _BOOL1 i; // zf
  int v12; // eax
  int v13; // eax
  int v14; // edx
  signed int v15; // ebp
  int v16; // ebx
  int v17; // edi
  int v18; // eax
  int v19; // edx
  __int16 v20; // dx
  int v21; // [esp+0h] [ebp-28h]
  int v22; // [esp+10h] [ebp-18h]
  int v23; // [esp+10h] [ebp-18h]
  int v24; // [esp+14h] [ebp-14h]
  int v25; // [esp+14h] [ebp-14h]

  v4 = a1;
  v21 = sub_35C90(a1, a3, 256);
  result = sub_35C90(a2, a4, 256);
  v6 = result;
  if ( v21 || result )
  {
    if ( v21 < 0 )
    {
      v6 = -result;
      v4 = a3;
      v21 = -v21;
      LOBYTE(a3) = a1;
      v7 = a2;
      a2 = a4;
      LOBYTE(a4) = v7;
    }
    if ( (int)abs32(v6) >= v21 )
    {
      v15 = abs32(v6 / 10) + 1;
      v16 = v6 / v15;
      v17 = v6 % v15;
      v25 = v21 / v15;
      v23 = v21 % v15;
      do
      {
        sub_35CC0(v4, a2, a3, a4);
        v18 = sub_373F0_377B0((int)&word_AE454_AE444, 10, 27);
        if ( v16 >= 0 )
        {
          *(_BYTE *)(v18 + 70) = 28;
          LOWORD(v19) = v17 + v16;
        }
        else
        {
          *(_BYTE *)(v18 + 70) = 27;
          v19 = -v16 - v17;
        }
        *(_WORD *)(v18 + 26) = v19;
        a2 += v16 + v17;
        sub_35CC0(v4, a2, a3, a4);
        result = sub_373F0_377B0((int)&word_AE454_AE444, 10, 27);
        v17 = 0;
        *(_BYTE *)(result + 70) = 29;
        v20 = v23 + v25;
        LOWORD(v23) = 0;
        v4 += v20;
        *(_WORD *)(result + 26) = v20;
        --v15;
      }
      while ( v15 );
    }
    else
    {
      v8 = v21 / 10 + 1;
      v24 = v21 / v8;
      v22 = v21 % v8;
      v9 = v6 / v8;
      result = v8 * (v6 / v8);
      v10 = v6 % v8;
      for ( i = v8 == 0; !i; i = v8 == 0 )
      {
        sub_35CC0(v4, a2, a3, a4);
        v12 = sub_373F0_377B0((int)&word_AE454_AE444, 10, 27);
        v4 += v22 + v24;
        *(_WORD *)(v12 + 26) = v22 + v24;
        *(_BYTE *)(v12 + 70) = 29;
        sub_35CC0(v4, a2, a3, a4);
        v13 = sub_373F0_377B0((int)&word_AE454_AE444, 10, 27);
        if ( v9 >= 0 )
        {
          *(_BYTE *)(v13 + 70) = 28;
          LOWORD(v14) = v10 + v9;
        }
        else
        {
          *(_BYTE *)(v13 + 70) = 27;
          v14 = -v9 - v10;
        }
        *(_WORD *)(v13 + 26) = v14;
        a2 += v9 + v10;
        result = 0;
        v10 = 0;
        LOWORD(v22) = 0;
        --v8;
      }
    }
  }
  return result;
}
// 35EE0: conditional instruction was optimized away because ebp.4!=0
// AE444: using guessed type __int16 word_AE454_AE44X;

//----- (00035FB0) --------------------------------------------------------
_WORD *sub_35FB0(__int16 a1, __int16 a2, __int16 a3, __int16 a4)
{
  int v4; // ebx
  int v5; // edi
  __int16 v6; // si
  int v7; // eax
  __int16 v8; // bx
  signed int v9; // ecx
  __int16 v10; // di
  _WORD *v11; // eax
  _WORD *result; // eax
  signed int v13; // [esp+0h] [ebp-18h]
  __int16 v14; // [esp+4h] [ebp-14h]
  __int16 v15; // [esp+8h] [ebp-10h]

  v4 = sub_35C90(a1, a3, 256);
  v5 = v4;
  v6 = 0;
  v7 = sub_35C90(a2, a4, 256);
  if ( v4 )
  {
    v6 = -1;
    if ( v4 > 0 )
      v6 = 1;
  }
  v8 = 0;
  if ( v7 )
  {
    v8 = -1;
    if ( v7 > 0 )
      v8 = 1;
  }
  v9 = abs32(v7);
  v13 = abs32(v5);
  v14 = abs32(v9 - v13);
  if ( v13 <= v9 )
  {
    v15 = v8;
    v10 = 0;
  }
  else
  {
    LOWORD(v13) = v9;
    v10 = v6;
    v15 = 0;
  }
  word_AE454_AE444.x = a1 << 8;
  word_AE454_AE444.y = a2 << 8;
  v11 = (_WORD *)sub_373F0_377B0((int)&word_AE454_AE444, 10, 30);
  if ( v11 )
  {
    v11[15] = v6;
    v11[16] = v8;
    v11[13] = v13;
  }
  word_AE454_AE444.x = ((_WORD)v13 * v6 + a1) << 8;
  word_AE454_AE444.y = ((_WORD)v13 * v8 + a2) << 8;
  result = (_WORD *)sub_373F0_377B0((int)&word_AE454_AE444, 10, 30);
  if ( result )
  {
    result[15] = v10;
    result[13] = v14;
    result[16] = v15;
  }
  return result;
}
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE446: using guessed type __int16 word_AE454_AE444.y;

//----- (000360F0) --------------------------------------------------------
int sub_360F0(unsigned __int16 a1, unsigned __int16 a2, __int16 a3, __int16 a4)
{
  __int16 v4; // bx
  unsigned __int16 v5; // si
  int result; // eax
  __int16 v7[4]; // [esp+0h] [ebp-18h] BYREF
  __int16 v8[8]; // [esp+8h] [ebp-10h] BYREF

  v7[0] = a1 << 8;
  v7[1] = a2 << 8;
  v7[2] = 32 * (unsigned __int8)mapHeightmap_DC1E0_DC1D0[256 * a2 + a1];
  v8[0] = a3 << 8;
  v8[1] = a4 << 8;
  v4 = sub_42150_42490((axis_3d*)(uint16*)v7, (axis_3d*)(uint16*)v8);
  v5 = sub_423D0_42710((axis_3d*)(uint16*)v7, (axis_3d*)(uint16*)v8);
  result = sub_373F0_377B0((int)v7, 10, 32);
  if ( result )
  {
    *(_WORD *)(result + 30) = v4;
    *(_DWORD *)(result + 12) = (int)v5 >> 8;
  }
  return result;
}

//----- (000361A0) --------------------------------------------------------
int sub_361A0(unsigned __int16 a1, unsigned __int16 a2, __int16 a3, __int16 a4)
{
  __int16 v4; // si
  unsigned __int16 v5; // di
  int result; // eax
  int v7; // ebx
  int v8; // ecx
  __int16 v9[4]; // [esp+0h] [ebp-1Ch] BYREF
  __int16 v10[10]; // [esp+8h] [ebp-14h] BYREF

  v9[0] = a1 << 8;
  v9[1] = a2 << 8;
  v9[2] = 16 * (unsigned __int8)mapHeightmap_DC1E0_DC1D0[256 * a2 + a1];
  v10[0] = a3 << 8;
  v10[1] = a4 << 8;
  v4 = sub_42150_42490((axis_3d*)(uint16*)v9, (axis_3d*)(uint16*)v10);
  v5 = sub_423D0_42710((axis_3d*)(uint16*)v9, (axis_3d*)(uint16*)v10);
  result = sub_373F0_377B0((int)v9, 10, 51);
  v7 = result;
  if ( result )
  {
    v8 = *(__int16 *)(result + 126);
    *(_WORD *)(result + 30) = v4;
    result = v5 / v8;
    *(_DWORD *)(v7 + 12) = result;
  }
  return result;
}

//----- (00036260) --------------------------------------------------------
unsigned int sub_36260(char a1, char a2, char a3, char a4)
{
  unsigned __int16 v4; // ax
  unsigned __int16 v5; // dx
  unsigned int v6; // eax
  unsigned int v7; // ebx
  unsigned int v8; // ecx
  unsigned int v9; // ecx
  unsigned int v10; // ecx

  LOBYTE(v4) = a1;
  HIBYTE(v4) = a2;
  HIBYTE(v5) = a2;
  LOBYTE(v5) = a4 + a1;
  v6 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v4];
  v7 = v6;
  v8 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5];
  if ( v8 <= v6 )
  {
    if ( v8 < v6 )
      v7 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5];
  }
  else
  {
    v6 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5];
  }
  HIBYTE(v5) = a3 + a2;
  v9 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5];
  if ( v9 <= v6 )
  {
    if ( v9 < v7 )
      v7 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5];
  }
  else
  {
    v6 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5];
  }
  LOBYTE(v5) = a1;
  v10 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5];
  if ( v10 > v6 )
    return v10 - v7;
  if ( v10 < v7 )
    v7 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5];
  return v6 - v7;
}

//----- (000362F0) --------------------------------------------------------
char sub_35F30_362F0(int a1, char a2, char a3, int a4, int a5, unsigned __int8 a6)
{
  int v6; // eax
  int v7; // edi
  unsigned __int16 v8; // bx
  unsigned __int16 v9; // bx
  int v10; // edi
  char result; // al
  char v12; // [esp+0h] [ebp-24h]
  char v13; // [esp+1h] [ebp-23h]
  __int16 v14; // [esp+2h] [ebp-22h]
  unsigned __int16 v15; // [esp+4h] [ebp-20h]
  unsigned __int16 v16; // [esp+4h] [ebp-20h]

  //fix
  v14 = 0;
  //fix

  v12 = a2 - a5;
  v13 = a3 - a4;
  HIWORD(v6) = v14;
  v7 = 2 * a4;
  HIBYTE(v15) = a3 - a4;
  HIBYTE(v8) = a3 - a4;
  LOBYTE(v8) = a2 - a5 - a6;
  LOBYTE(v15) = 2 * a5 + a2 - a5;
  while ( (_WORD)--v7 != 0xFFFF )
  {
    LOWORD(a1) = a6;
    ++a1;
    while ( (_WORD)--a1 != 0xFFFF )
    {
      sub_36480(v8);
      v6 = sub_36480(v15);
      LOBYTE(v8) = v8 + 1;
      LOBYTE(v15) = v15 + 1;
    }
    LOBYTE(v8) = a2 - a5 - a6;
    LOBYTE(v15) = 2 * a5 + a2 - a5;
    ++HIBYTE(v8);
    ++HIBYTE(v15);
  }
  LOBYTE(v9) = v12 - a6;
  HIBYTE(v16) = 2 * a4 + v13;
  LOBYTE(v16) = v12 - a6;
  LOWORD(v6) = a6;
  HIBYTE(v9) = v13 - a6;
  v10 = 2 * v6 + 2 * a5;
  result = HIBYTE(v16);
  while ( (_WORD)--v10 != 0xFFFF )
  {
    LOWORD(a1) = a6;
    ++a1;
    while ( (_WORD)--a1 != 0xFFFF )
    {
      sub_36480(v9);
      sub_36480(v16);
      ++HIBYTE(v9);
      ++HIBYTE(v16);
    }
    result = 2 * a4 + v13;
    HIBYTE(v16) = result;
    HIBYTE(v9) = v13 - a6;
    LOBYTE(v9) = v9 + 1;
    LOBYTE(v16) = v16 + 1;
  }
  return result;
}
// 36313: variable 'v14' is possibly undefined

//----- (00036440) --------------------------------------------------------
void sub_36440(unsigned __int8 a1, char a2, int a3, int a4)
{
  unsigned __int16 v5; // bx
  int v6; // esi

  LOBYTE(v5) = a1;
  HIBYTE(v5) = a2;
  while ( (_WORD)--a3 != 0xFFFF )
  {
    v6 = a4;
    while ( (_WORD)--v6 != 0xFFFF )
    {
      sub_36480(v5);
      LOBYTE(v5) = v5 + 1;
    }
    v5 = __PAIR16__(HIBYTE(v5), a1) + 256;
  }
  JUMPOUT(0x36439);
}
// 36454: control flows out of bounds to 36439

//----- (00036480) --------------------------------------------------------
int sub_36480(int a1)
{
  int result; // eax
  unsigned int v2; // ecx
  unsigned int v3; // esi
  char v4; // dl
  char v5; // dl
  char v6; // dl
  char v7; // dl
  char v8; // dl
  char v9; // dh
  char v10; // [esp+0h] [ebp-10h]

  result = a1;
  v2 = 0;
  v3 = 0;
  if ( (mapAngle_FC1E0_FC1D0[(unsigned __int16)a1] & 7) != 0 )
  {
    if ( mapHeightmap_DC1E0_DC1D0[(unsigned __int16)a1] )
    {
      v4 = byte_CC0CF[(unsigned __int16)a1];
      if ( (unsigned __int8)v4 <= 5u || (unsigned __int8)v4 > 0x22u )
      {
        v5 = byte_CC0D0[(unsigned __int16)a1];
        if ( (unsigned __int8)v5 <= 5u || (unsigned __int8)v5 > 0x22u )
        {
          v6 = byte_CC1CF[(unsigned __int16)a1];
          if ( (unsigned __int8)v6 <= 5u || (unsigned __int8)v6 > 0x22u )
          {
            v7 = mapTerrainType_CC1E0_CC1D0[(unsigned __int16)a1];
            if ( (unsigned __int8)v7 <= 5u || (unsigned __int8)v7 > 0x22u )
            {
              result = a1 - 257;
              v10 = 3;
              while ( --v10 != -1 )
              {
                v8 = 3;
                while ( --v8 != -1 )
                {
                  v9 = mapTerrainType_CC1E0_CC1D0[(unsigned __int16)result];
                  if ( (unsigned __int8)v9 <= 5u || (unsigned __int8)v9 > 0x22u )
                  {
                    ++v3;
                    v2 += (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)result];
                  }
                  ++result;
                }
                result += 253;
              }
              if ( v3 )
              {
                result = v2 / v3;
                mapHeightmap_DC1E0_DC1D0[(unsigned __int16)a1] = v2 / v3;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

//----- (00036580) --------------------------------------------------------
__int16 sub_36580(char a1, char a2, char a3, char a4)
{
  unsigned __int16 v4; // ax
  unsigned __int16 v5; // dx
  int v6; // eax
  unsigned __int16 v7; // bx

  LOBYTE(v4) = a1;
  HIBYTE(v4) = a2;
  HIBYTE(v5) = a2;
  LOBYTE(v5) = a4 + a1;
  v6 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5] + (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v4];
  HIBYTE(v5) = a3 + a2;
  v7 = v5;
  LOBYTE(v5) = a1;
  return ((unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5] + (unsigned int)(unsigned __int8)mapHeightmap_DC1E0_DC1D0[v7] + v6) >> 2;
}

//----- (00036680) --------------------------------------------------------
int sub_36680(int a1, _WORD *a2)
{
  int result; // eax
  unsigned __int16 v3; // di
  _WORD *v4; // ebx
  unsigned __int16 v5; // si
  unsigned __int16 v6; // cx
  unsigned __int16 v7; // dx
  void *v8; // [esp+4h] [ebp-14h]
  __int16 v9; // [esp+8h] [ebp-10h]

  result = (int)a2;
  v9 = *a2;
  v8 = 0;
  v3 = a2[1];
  if ( *a2 == 10 )
  {
    if ( v3 < 0x1Du )
    {
      if ( v3 == 28 )
        v8 = sub_35D20;
    }
    else if ( v3 <= 0x1Du )
    {
      v8 = sub_35FB0;
    }
    else if ( v3 >= 0x1Fu )
    {
      if ( v3 <= 0x1Fu )
      {
        v8 = sub_360F0;
      }
      else if ( v3 == 50 )
      {
        v8 = sub_361A0;
      }
    }
  }
  if ( v8 )
  {
    v4 = a2;
    if ( a2[7] )
    {
      result = a1 + 1072;
      do
        v4 = (_WORD *)(result + 18 * (unsigned __int16)v4[7]);
      while ( v4[7] );
    }
    do
    {
      if ( v9 == *v4 && v3 == v4[1] && (v5 = v4[8], v4[6] = 0, v5) )
      {
        v6 = v4[2];
        v7 = v4[3];
        v4 = (_WORD *)(a1 + 1072 + 18 * v5);
        result = ((int (*)(_DWORD, _DWORD, _DWORD, _DWORD))v8)(
                   v6,
                   v7,
                   (unsigned __int16)v4[2],
                   (unsigned __int16)v4[3]);
      }
      else
      {
        v4 = 0;
      }
    }
    while ( v4 );
  }
  return result;
}

//----- (000367F0) --------------------------------------------------------
int sub_367F0(int a1)
{
  _WORD *v1; // ebx

  v1 = (_WORD *)(a1 + 1090);
  if ( a1 + 1090 < (unsigned int)(a1 + 37072) )
  {
    do
    {
      if ( v1[4] == 0xFFFF && *v1 == 10 )
      {
        sub_36840(a1, v1);
        *v1 = 0;
      }
      v1 += 9;
    }
    while ( (unsigned int)v1 < a1 + 37072 );
  }
  return sub_369E0();
}

//----- (00036840) --------------------------------------------------------
char sub_36840(int a1, _WORD *a2)
{
  unsigned __int16 v2; // ax
  unsigned __int16 v3; // dx
  int v4; // eax
  int v5; // ebx

  v2 = a2[1];
  if ( v2 < 0x1Fu )
  {
    if ( v2 < 0x1Cu || v2 > 0x1Du )
    {
LABEL_15:
      word_AE454_AE444.x = a2[2] << 8;
      word_AE454_AE444.y = a2[3] << 8;
      word_AE454_AE444.z = sub_11F50((axis_3d*)(__int16*)&word_AE454_AE444);
      v5 = (unsigned __int16)a2[1];
      LOBYTE(v4) = 14 * v5;
      if ( *(int (**)(int))((char *)&off_97D12 + 14 * v5) )
        LOBYTE(v4) = (*(int (**)(int))((char *)&off_97D12 + 14 * v5))((int)&word_AE454_AE444);
      return v4;
    }
LABEL_13:
    if ( a2[6] )
    {
      LOBYTE(v4) = sub_36680(a1, a2);
      return v4;
    }
    goto LABEL_15;
  }
  if ( v2 <= 0x1Fu )
    goto LABEL_13;
  if ( v2 < 0x2Du )
    goto LABEL_15;
  if ( v2 > 0x2Du )
  {
    if ( v2 != 50 )
      goto LABEL_15;
    goto LABEL_13;
  }
  word_AE454_AE444.x = a2[2] << 8;
  word_AE454_AE444.y = a2[3] << 8;
  LOWORD(v4) = sub_11F50((axis_3d*)(__int16*)&word_AE454_AE444);
  v3 = a2[1];
  word_AE454_AE444.z = v4;
  LOBYTE(v4) = 14 * v3;
  if ( *(int (**)(int))((char *)&off_97D12 + 14 * v3) )
  {
    v4 = (*(int (**)(int))((char *)&off_97D12 + 14 * v3))((int)&word_AE454_AE444);
    if ( v4 )
      LOBYTE(v4) = sub_371B0(v4, a2[7] + 16);
  }
  return v4;
}
// 97D12: using guessed type int (*off_97D12)(int);
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE446: using guessed type __int16 word_AE454_AE444.y;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (00036980) --------------------------------------------------------
_WORD *sub_36980(int a1)
{
  _WORD *result; // eax
  unsigned __int16 v2; // dx

  result = (_WORD *)(a1 + 1090);
  if ( a1 + 1090 < (unsigned int)(a1 + 37072) )
  {
    do
    {
      if ( result[4] != 0xFFFF || *result != 10 )
        goto LABEL_11;
      v2 = result[1];
      if ( v2 < 0x1Fu )
      {
        if ( v2 < 0x1Cu || v2 > 0x1Du )
          goto LABEL_11;
      }
      else if ( v2 > 0x1Fu && v2 != 50 )
      {
        goto LABEL_11;
      }
      result[6] = 1;
LABEL_11:
      result += 9;
    }
    while ( (unsigned int)result < a1 + 37072 );
  }
  return result;
}

//----- (000369E0) --------------------------------------------------------
int sub_369E0()
{
  int v0; // esi
  _BYTE *i; // ebx
  int v2; // eax
  int result; // eax
  int (*v4)(_BYTE *, _DWORD); // [esp+0h] [ebp-10h]

  *(_DWORD *)(dword_AE400_AE3F0() + 4) = 9377 * *(_DWORD *)(dword_AE400_AE3F0() + 4) + 9439;
  do
  {
    v0 = 0;
    for ( i = (_BYTE *)(dword_AE400_AE3F0() + 29959); ; i += 164 )
    {
      result = dword_AE400_AE3F0() + 193795;
      if ( (unsigned int)i >= dword_AE400_AE3F0() + 193795 )
        break;
      BYTE1(v2) = i[64];
      if ( !BYTE1(v2) )
        continue;
      if ( BYTE1(v2) != 10 )
        goto LABEL_19;
      LOBYTE(v2) = i[65];
      if ( (unsigned __int8)v2 < 0x1Bu )
      {
        if ( (unsigned __int8)v2 >= 9u && (unsigned __int8)v2 <= 0xBu )
        {
LABEL_16:
          v2 = *(int *)((char *)&dword_96902 + 18 * (char)i[64]) + 14 * (char)i[70];
          v0 = 1;
          v4 = *(int (**)(_BYTE *, _DWORD))(v2 + 6);
          if ( v4 && *(_DWORD *)(v2 + 10) )
            LOWORD(v2) = v4(i, (char)v4);
          goto LABEL_20;
        }
        goto LABEL_19;
      }
      if ( (unsigned __int8)v2 <= 0x20u )
        goto LABEL_16;
      if ( (unsigned __int8)v2 < 0x2Du )
        goto LABEL_19;
      if ( (unsigned __int8)v2 > 0x2Du )
      {
        if ( (unsigned __int8)v2 >= 0x32u && (unsigned __int8)v2 <= 0x33u )
          goto LABEL_16;
LABEL_19:
        LOWORD(v2) = sub_41E80_421C0((int)i);
        goto LABEL_20;
      }
      if ( i[70] == 51 )
        goto LABEL_16;
LABEL_20:
      if ( (i[17] & 4) != 0 )
        sub_41E90_421D0((Type_AE400_29795*)i);
    }
  }
  while ( v0 );
  return result;
}
// 96902: using guessed type int dword_96902;
// AE3F0: using guessed type int dword_AE400_AE3F0();

//SYNCHRONIZED WITH REMC1
Type_sub168* sub_36700_36AC0(int a1, unsigned __int16 a2, Type_168* a3x)//207700_
{
    //unsigned __int16 v3; // bx
    int v5; // edx
    Type_sub168* v6; // esi
    Type_sub168_3* v7; // edx
    Type_sub168* v8; // edi
    uint8* v9; // eax
    Type_sub168_2* v10; // eax
    Type_sub168_3* v11; // eax

    if (a3x)
    {
        v5 = a1 - (sizeof(Type_sub168_3) * a2 + sizeof(Type_sub168_2) * a2 + sizeof(Type_sub168));
        if (a1 == (sizeof(Type_sub168_3) * a2 + sizeof(Type_sub168_2) * a2 + sizeof(Type_sub168)))
        {
            return 0;
        }
        else
        {
            a3x->sub_0.var_20 = 0;
            a3x->sub_0.var_24 = 2;
            a3x->sub_0.var_0 = v5;
            a3x->sub_0.var_4x = v5;
            v6 = &a3x->sub_0;
            a3x->sub_0.var_22 = a2;
            //a3x[0]->var_8 = a3 + 26;
            a3x->sub_0.var_8 = a3x->sub_26;
            //v7 = 14 * a2 + a3 + 26;
            v7 = a3x->sub_7432;
            a3x->sub_0.var_12 = v7;
            a3x->sub_0.var_16 = a3x->last;//4 * a2 + v7;
        }
    }
    else
    {
        v8 = (Type_sub168*)malloc_42540_42880(sizeof(Type_sub168));
        v6 = v8;
        if (!v8
            || (v9 = (uint8*)malloc_42540_42880(a1), (v8->var_16 = v9) == 0)
            || (v10 = (Type_sub168_2*)malloc_42540_42880(sizeof(Type_sub168_2) * a2), (v8->var_8 = v10) == 0)
            || (v11 = (Type_sub168_3*)malloc_42540_42880(sizeof(Type_sub168_3) * a2), (v8->var_12 = v11) == 0))
        {
            if (v8)
            {
                if (v8->var_16)
                {
                    if (v8->var_8)
                    {
                        free_426E0_42A20((void*)v8->var_8);
                        //fixed
                        if (v8->var_12)
                            free_426E0_42A20((void*)v8->var_12);
                        //fixed
                    }
                    free_426E0_42A20((void*)v8->var_16);
                }
                free_426E0_42A20((void*)v8);
            }
            exit(1);
        }
        v8->var_20 = 0;
        v8->var_24 = 1;
        v8->var_22 = a2;
        v8->var_0 = a1;
        v8->var_4x = a1;
        //v3 = a2;
        //while ( --v3 != 0xFFFF )
        for (int i = 0; i < a2; i++)
            v8->var_8[i].var_u32_4 = 0;
    }
    return v6;
}

//SYNCHRONIZED WITH REMC1
int sub_36850_36C10(Type_sub168* a1x)
{
    for (int result = 0; result < a1x->var_22; result++)
    {
        if (!a1x->var_8[result].var_u32_4)
            return result;
    }
    return -1;
}

int counter_sub_369E0_36DA0 = 0;
//SYNCHRONIZED WITH REMC1
Type_sub168_2* sub_369E0_36DA0(Type_sub168* a1x, unsigned int a2, __int16 a3)//2079E0_
{
    __int16 v3; // si
    __int16 v4; // ax
    __int16 v5; // dx
    int v6; // ecx
    //int v7; // eax

    //debug
    if (counter_sub_369E0_36DA0 == 0x80)
    {
        counter_sub_369E0_36DA0++;
        counter_sub_369E0_36DA0--;
    }
    counter_sub_369E0_36DA0++;
    //debug

    v3 = -1;
    if (a2 < a1x->var_4x)
    {
        v4 = sub_36850_36C10(a1x);
        v5 = v4;
        v6 = v4;
        v3 = v4;
        if (v4 > -1)
        {
            //v7 = 14 * v4;
            a1x->var_8[v4].var_u16_8[1] = v5;
            a1x->var_8[v4].var_u32_4 = a2;
            a1x->var_8[v4].var_u32_0 = (Type_sub168_2_2*)&a1x->var_16[a1x->var_0 - a1x->var_4x];
            a1x->var_8[v4].var_u16_8[2] = a3;
            a1x->var_4x -= a2;
            a1x->var_8[v4].var_u16_8[0] = a1x->var_20;
            a1x->var_12[a1x->var_20].var_u32_0 = &a1x->var_8[v6];
            a1x->var_20++;
        }
    }
    if (v3 <= -1)
        return nullptr;
    else
        return /*14 * v3 +*/ &a1x->var_8[v3];
}

//SYNChRONIZED WITH REMC1
void sub_36A90_36E50(Type_sub168* a1x, Type_sub168_2* a2x)//207A90_
{
    //sub_36A90_36E50_old((int) a1x, (int) a2x);
  //int v2; // ecx
    uint16 v3x; // eax
    //int v4; // ebx
    //int v5; // esi
    //int v6; // ebx
    Type_sub168_2_2* v7x; // ebp
    unsigned __int16 v8; // di
    __int16 v9; // cx
    int v10; // esi
    unsigned __int16 v11; // bx
    Type_sub168_2* v12x; // eax
    const void* v13; // esi
    int v15; // [esp+0h] [ebp-18h]
    int v16; // [esp+4h] [ebp-14h]

    v3x = a2x->var_u16_8[1];
    if (v3x < a1x->var_22)
    {
        //int v3 = 14 * (unsigned __int16)v3x;
        //v4 = a1x->sub_0.var_8[v3x];
        //a1x->sub_0.var_8[v3x].var_u16_8
        if (a1x->var_8[v3x].var_u32_4)
        {
            //LOWORD(v2) = a1x->var_8[v3x].var_u16_8[0];
            //v5 = a1x->var_8[v3x].var_u32_4 + a1x->var_4x;
            //v6 = a1x->sub_0.var_8;
            a1x->var_4x += a1x->var_8[v3x].var_u32_4;
            a1x->var_8[v3x].var_u32_4 = 0;
            v7x = a1x->var_8[v3x].var_u32_0;
            v15 = a1x->var_8[v3x].var_u16_8[0];
            v16 = a1x->var_8[v3x].var_u16_8[0] - 1;
            while (1)
            {
                v8 = a1x->var_20;
                v9 = v16 + 1;
                v10 = v15 + 1;
                v16++;
                v15 = v10;
                if ((unsigned __int16)v10 >= v8)
                    break;
                v11 = v10;
                a1x->var_12[v10 - 1].var_u32_0 = a1x->var_12[v10].var_u32_0;
                v12x = a1x->var_12[v10].var_u32_0;
                v12x->var_u16_8[0] = v9;
                v13 = v12x->var_u32_0;
                a1x->var_12[v11].var_u32_0->var_u32_0 = v7x;
                qmemcpy(v7x, v13, a1x->var_12[v11].var_u32_0->var_u32_4);
                v7x = (Type_sub168_2_2*)((uint8*)v7x + a1x->var_12[v11].var_u32_0->var_u32_4);
            }
            //LOWORD(v3) = v8 - 1;
            a1x->var_20 = v8 - 1;
        }
    }
    //return v3x;
}

//SYNChRONIZED WITH REMC1
void sub_36850_36C10_36FD0(Type_sub168* a1)
{
    allert_error();//test it

  //Type_168* v1; // edx
  //v1 = *a1;
    if (a1)
    {
        if (a1->var_24 == 1)
        {
            free_426E0_42A20(a1->var_16);
            free_426E0_42A20(a1->var_8);
            free_426E0_42A20(a1->var_12);
            free_426E0_42A20(a1);
        }
        a1 = nullptr;
    }
}

//----- (00037025) --------------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_37025(
        int a1,
        int a2,
        int a3,
        int a4,
        int a5,
        int a6,
        int a7)
{
  int v7; // [esp-4h] [ebp-4h] BYREF
  //fix
  /*
  ((void (*)(_DWORD, _DWORD, _DWORD, _DWORD, int, int, int, int, int *, int, int, int))_GETDS)(
    (unsigned __int16)__GS__,
    (unsigned __int16)__FS__,
    (unsigned __int16)__ES__,
    (unsigned __int16)__DS__,
    a1,
    a2,
    a3,
    a4,
    &v7,
    a5,
    a6,
    a7);*/
}
// 37142: positive sp value 4 has been found
// 6295D: using guessed type _DWORD inp(_DWORD);
// 62965: using guessed type _DWORD outp(_DWORD, char);
// 62970: using guessed type _DWORD __far chain_intr(_DWORD);
// AE3F8: using guessed type int dword_AE408_AE3F8();
// AE44A: using guessed type char origDebug_AE45A_AE44A;
// B7310: using guessed type int dword_B7310;
// B7314: using guessed type __int16 word_B7314;
// B7316: using guessed type char byte_B7316;
// B7317: using guessed type char byte_B7317;
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;

//----- (00037143) --------------------------------------------------------
int sub_37143(int a1, __int16 a2)
{
  __int16 i; // ax
  int v3; // eax

  for ( i = 0; i < 128; ++i )
  {
    a2 = i;
    pressedKeys_12EEF0_12EEE0[i] = 0;
  }
  v3 = dos_getvect(9);
  word_B7314 = a2;
  dword_B7310 = v3;
  return dos_setvect(9, (uint32)sub_37025, (unsigned __int16)__CS__);
}
// 62991: using guessed type _DWORD dos_getvect(_DWORD);
// 629C5: using guessed type _DWORD dos_setvect(_DWORD, _DWORD, _DWORD);
// B7310: using guessed type int dword_B7310;
// B7314: using guessed type __int16 word_B7314;

//----- (00037182) --------------------------------------------------------
int sub_36DC2_37182()
{
  return dos_setvect(9, dword_B7310, (unsigned __int16)word_B7314);
}
// 629C5: using guessed type _DWORD dos_setvect(_DWORD, _DWORD, _DWORD);
// B7310: using guessed type int dword_B7310;
// B7314: using guessed type __int16 word_B7314;

//----- (000371A0) --------------------------------------------------------
int sub_371A0(int a1)
{
  int result; // eax

  result = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

//----- (000371B0) --------------------------------------------------------
char sub_371B0(int a1, unsigned __int16 a2)
{
  int v2; // eax
  unsigned __int16 v3; // ax
  __int16 v4; // dx
  int v5; // eax
  __int16 v6; // ax
  char v7; // dh
  char result; // al
  unsigned __int16 v9; // [esp+0h] [ebp-1Ch]
  unsigned __int16 v10; // [esp+4h] [ebp-18h]
  unsigned __int8 v11; // [esp+8h] [ebp-14h]
  unsigned __int8 v12; // [esp+Ch] [ebp-10h]

  v2 = (int)begBuildTab_AE440_AE430_26C440_26C430 + 6 * a2;
  v9 = *(unsigned __int8 *)(v2 + 5);
  v3 = *(unsigned __int8 *)(v2 + 4);
  v10 = v3;
  *(_WORD *)(a1 + 26) = 2;
  v4 = typeResolution_12F02E_12F01E;
  *(_WORD *)(a1 + 128) = ((unsigned __int8)v3 * v9) >> 4;
  if ( v4 == 1 )
  {
    v9 >>= 1;
    v10 = v3 >> 1;
  }
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  word_AE454_AE444.x = *(__int16 *)(a1 + 72) >> 8 << 8;
  word_AE454_AE444.y = *(__int16 *)(a1 + 74) >> 8 << 8;
  sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  v12 = HIBYTE(*(_WORD *)(a1 + 72)) - ((int)v10 >> 1);
  v11 = HIBYTE(*(_WORD *)(a1 + 74)) - ((int)v9 >> 1);
  v5 = (v12 + v11) / 2;
  if ( (v12 + v11) % 2 )
  {
    *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
    word_AE454_AE444.z = *(_WORD *)(a1 + 76);
    BYTE1(v5) = ++HIBYTE(*(uint16*)&word_AE454_AE444);
    sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
    ++v12;
  }
  sub_37510((_WORD *)a1, a2);
  v6 = sub_36580(v12, v11, v9, v10);
  *(_DWORD *)(a1 + 12) = 30;
  v7 = *(_BYTE *)(a1 + 28);
  *(_WORD *)(a1 + 44) = 2000;
  *(_WORD *)(a1 + 76) = 32 * v6;
  result = a2;
  *(_BYTE *)(a1 + 28) = v7 | 2;
  *(_BYTE *)(a1 + 71) = a2;
  return result;
}
// AE430: using guessed type int begBuildTab_AE440_AE430_26C440_26C430;
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE446: using guessed type __int16 word_AE454_AE444.y;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00037350) --------------------------------------------------------
int sub_37350(int a1)
{
  int result; // eax

  result = *(int *)(a1 + 8) >> 1;
  *(_DWORD *)(a1 + 140) = result;
  return result;
}

//SYNCHRONIZED WITH REMC1
void sub_36FA0_37360(Type_AE400_29795* event, __int16 a2)//207FA0_
{
  event->var_u8_29883_88 = 0;
  event->var_u16_29881_86 = a2;
  event->var_u8_29884_89 = byte_90AD8[*(uint8_t*)&word_99BA6[3 + 7 * a2]];
  event->var_u16_29873_78.var_u16_29873_78 = word_99BA6[1 + 7 * a2] / 2;
  event->var_u16_29873_78.var_u16_29875_80 = word_99BA6[7 * a2] / 2;
  event->var_u16_29873_78.var_u16_29877_82 = word_99BA6[7 * a2] / 2;
  event->var_u16_29873_78.var_u16_29879_84 = word_99BA6[1 + 7 * a2] / 2;
}

//----- (000373F0) --------------------------------------------------------
int sub_373F0(_WORD *a1, __int16 a2)
{
  int v2; // ebx
  int result; // eax

  sub_36FA0_37360((int)a1, a2);
  v2 = 7 * a2;
  a1[40] = (unsigned __int16)word_99BA6[v2] / 2;
  a1[41] = (unsigned __int16)word_99BA6[v2] / 2;
  result = (unsigned __int16)word_99BA8[v2] / 2;
  a1[42] = result;
  return result;
}
// 99BA6: using guessed type __int16 word_99BA6[];
// 99BA8: using guessed type __int16 word_99BA8[];

//SYNCHRONIZED WITH REMC1
void sub_370A0_37460(Type_AE400_29795* a1x, __int16 a2)
{
  sub_36FA0_37360(a1x, a2);
  a1x->var_u16_29873_78.var_u16_29875_80 *= 2;
  a1x->var_u16_29873_78.var_u16_29877_82 *= 2;
  a1x->var_u16_29873_78.var_u16_29879_84 *= 2;
}

//----- (000374A0) --------------------------------------------------------
__int16 sub_374A0(__int16 *a1, __int16 a2)
{
  __int16 result; // ax

  sub_36FA0_37360((int)a1, a2);
  a1[40] /= 2;
  a1[41] /= 2;
  result = a1[42] / 2;
  a1[42] = result;
  return result;
}

//----- (000374F0) --------------------------------------------------------
_WORD *sub_374F0(_WORD *a1, __int16 a2, __int16 a3)
{
  _WORD *result; // eax

  result = a1;
  a1[40] = a2;
  a1[41] = a2;
  a1[42] = a3;
  return result;
}

//----- (00037510) --------------------------------------------------------
unsigned int sub_37510(_WORD *a1, __int16 a2)
{
  int v2; // eax
  unsigned int v3; // edx
  unsigned int v4; // eax
  unsigned int result; // eax

  v2 = (int)begBuildTab_AE440_AE430_26C440_26C430 + 6 * a2;
  v3 = *(unsigned __int8 *)(v2 + 5);
  v4 = *(unsigned __int8 *)(v2 + 4);
  if ( typeResolution_12F02E_12F01E == 1 )
  {
    v3 >>= 1;
    v4 >>= 1;
  }
  a1[40] = ((v4 << 8) + 1280) >> 1;
  a1[39] = -8192;
  a1[42] = 0x4000;
  result = ((v3 << 8) + 1280) >> 1;
  a1[41] = result;
  return result;
}
// AE430: using guessed type int begBuildTab_AE440_AE430_26C440_26C430;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00037580) --------------------------------------------------------
int sub_37580()
{
  int v0; // esi
  char *v1; // edx
  int result; // eax
  int v3; // ebx

  v0 = dword_AE400_AE3F0();
  *(_DWORD *)(dword_AE400_AE3F0() + 29955) = (uint32)&unk_B7320;
  v1 = (char *)&loc_27FFC;
  *(_DWORD *)(v0 + 40) = -1;
  result = v0;
  *(_DWORD *)(v0 + 4593) = -1;
  do
  {
    v3 = *(_DWORD *)(v0 + 40) + 1;
    *(_DWORD *)(v0 + 40) = v3;
    *(_DWORD *)(v0 + 4 * v3 + 593) = (uint32)&v1[v0 + 29795];
    v1 -= 164;
  }
  while ( v1 );
  dword_AE400_AE3F0(v0);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000375E0) --------------------------------------------------------
int sub_37220_375E0()
{
  int v0; // edi
  _BYTE *v1; // edx
  int result; // eax
  char *v3; // esi
  int v4; // ebx
  int v5; // ebp

  v0 = dword_AE400_AE3F0();
  v1 = (uint8*)&loc_27FFC;
  *(_DWORD *)(dword_AE400_AE3F0() + 40) = -1;
  result = v0;
  *(_DWORD *)(v0 + 4593) = -1;
  do
  {
    v3 = (char*)&v1[v0 + 29795];
    if ( v1[v0 + 29859] )
    {
      if ( ((unsigned int)sub_20400 & *(_DWORD *)&v1[v0 + 29811]) != 0 )
      {
        v5 = *(_DWORD *)(v0 + 4593) + 1;
        *(_DWORD *)(v0 + 4593) = v5;
        *(_DWORD *)(v0 + 4 * v5 + 4597) = (uint32)v3;
      }
    }
    else
    {
      v4 = *(_DWORD *)(v0 + 40) + 1;
      *(_DWORD *)(v0 + 40) = v4;
      *(_DWORD *)(v0 + 4 * v4 + 593) = (uint32)v3;
    }
    v1 -= 164;
  }
  while ( v1 );
  dword_AE400_AE3F0(v0);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00037680) --------------------------------------------------------
int sub_37680()
{
  int v0; // edx
  int v1; // ebx
  int v3; // eax
  int v4; // eax
  int v5; // ecx
  int v6; // eax
  int v7; // edx

  v0 = *(_DWORD *)(dword_AE400_AE3F0() + 40);
  if ( v0 < 0 )
  {
    if ( *(int *)(dword_AE400_AE3F0() + 4593) < 0 )
      return 0;
    memset((void*)(dword_AE408_AE3F8() + 36382), 0, 80);
    v3 = dword_AE408_AE3F8();
    *(_DWORD *)(dword_AE408_AE3F8() + 36466) = 0;
    *(_DWORD *)(v3 + 36470) = 0;
    *(_DWORD *)(v3 + 36462) = 0;
    *(_DWORD *)(v3 + 36474) = 0;
    v1 = *(_DWORD *)(dword_AE400_AE3F0() + 4 * *(_DWORD *)(dword_AE400_AE3F0() + 4593) + 4597);
    sub_41DD0_42110((Type_AE400_29795*)v1);
    v4 = dword_AE400_AE3F0();
    *(_BYTE *)(v1 + 64) = 0;
    --*(_DWORD *)(v4 + 4593);
  }
  else
  {
    v1 = *(_DWORD *)(dword_AE400_AE3F0() + 4 * v0 + 593);
    *(_DWORD *)(dword_AE400_AE3F0() + 40) = v0 - 1;
  }
  memset((void*)v1, 0, 164);
  v5 = dword_AE400_AE3F0();
  v6 = (v1 - (dword_AE400_AE3F0() + 29795)) / 164;
  *(_DWORD *)(v1 + 8) = 300;
  *(_DWORD *)(v1 + 16) = 8;
  *(_WORD *)(v1 + 126) = 16;
  *(_WORD *)(v1 + 44) = 100;
  *(_WORD *)(v1 + 24) = v6;
  v7 = *(_DWORD *)(v5 + 4);
  *(_BYTE *)(v1 + 66) = -1;
  *(_BYTE *)(v1 + 67) = -1;
  *(_DWORD *)(v1 + 156) = (uint32)&unk_98F38;
  *(_DWORD *)(v1 + 160) = (uint32)&unk_B7320;
  *(_BYTE *)(v1 + 68) = 10;
  *(_BYTE *)(v1 + 58) = -6;
  *(_DWORD *)(v1 + 4) = v6 + v7;
  *(_BYTE *)(v1 + 63) = v6;
  return v1;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

/*
int sub_373F0_377B0(int a1, int a2, int a3)
{
  int v3; // eax

  v3 = *(int *)((char *)&dword_96906 + 18 * a2) + 14 * a3;
  if ( *(_DWORD *)(v3 + 10) && *(__int16 *)(v3 + 4) == a3 )
    return (*(int (**)(int))(v3 + 6))(a1);
  else
    return 0;
}
*/
//SYNCHRONIZED WITH REMC1
Type_AE400_29795* sub_373F0_377B0(axis_3d* a1, int a2, int a3)//2083F0_
{
	if (dword_96902[a2].str_4[a3].data10 && dword_96902[a2].str_4[a3].data4 == a3)
		return dword_96902[a2].str_4[a3].data6(a1);
	else
		return nullptr;
}

//----- (00037800) --------------------------------------------------------
int sub_37800(int a1, char a2)
{
  unsigned __int16 *i; // ebx
  unsigned __int16 v3; // dx
  unsigned __int16 *j; // ebx
  int result; // eax
  char *v6; // [esp-Ch] [ebp-14h]

  if ( !a1 )
  {
    v6 = (char *)dword_38CA3 + dword_AE400_AE3F0();
    *((_DWORD *)v6 - 1) = 0;
    memset(v6, 0, 96);
    sub_59140_59650();
    for ( i = (unsigned __int16 *)(dword_AE400_AE3F0() + 194885); i < (unsigned __int16 *)&byte_385D3[dword_AE400_AE3F0()]; i += 9 )
    {
      sub_59670(*i, i[1], -1);
      if ( *i >= 5u )
      {
        if ( *i <= 5u )
        {
          v3 = i[1];
          if ( v3 != 12 && v3 != 13 && v3 != 14 && v3 != 15 && v3 != 9 )
            ++*(int *)((char *)&dword_38C9F + dword_AE400_AE3F0());
        }
        else if ( *i == 12 )
        {
          ++*(int *)((char *)&dword_38CA3[i[1]] + dword_AE400_AE3F0());
        }
      }
    }
    sub_59740();
  }
  sub_37220_375E0();
  for ( j = (unsigned __int16 *)(dword_AE400_AE3F0() + 194885); ; j += 9 )
  {
    result = dword_AE400_AE3F0();
    if ( j >= (unsigned __int16 *)&byte_385D3[dword_AE400_AE3F0()] )
      break;
    if ( *j )
    {
      if ( j[4] == a1 )
      {
        sub_37920(j);
        if ( a2 )
          *j = 0;
      }
    }
  }
  *(_DWORD *)(dword_AE400_AE3F0() + 4593) = -1;
  return result;
}
// 38C9F: using guessed type int dword_38C9F;
// 38CA3: using guessed type int dword_38CA3[];
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00037920) --------------------------------------------------------
char sub_37920(unsigned __int16 *a1)
{
  int v1; // eax
  int v2; // ebx
  char v3; // dh
  __int16 v5[8]; // [esp+0h] [ebp-10h] BYREF

  v1 = *(int *)((char *)&dword_96906 + 18 * *a1);
  if ( *(_DWORD *)(v1 + 14 * a1[1] + 10) )
  {
    v5[0] = (a1[2] << 8) + 128;
    v5[1] = (a1[3] << 8) + 128;
    v5[2] = sub_11F50((axis_3d*)v5);
    v1 = sub_373F0_377B0((int)v5, *a1, a1[1]);
    v2 = v1;
    if ( v1 )
    {
      LOBYTE(v1) = *(_BYTE *)(v1 + 64);
      if ( (unsigned __int8)v1 < 0xBu )
      {
        if ( (_BYTE)v1 == 10 )
        {
          LOBYTE(v1) = *(_BYTE *)(v2 + 65);
          if ( (unsigned __int8)v1 < 0x22u )
          {
            if ( (_BYTE)v1 == 4 )
            {
              *(_WORD *)(v2 + 24) = a1[6];
              sub_374F0((_WORD *)v2, a1[5] << 8, a1[5] << 8);
              LOBYTE(v1) = sub_371A0(v2);
            }
          }
          else if ( (unsigned __int8)v1 <= 0x22u )
          {
            *(_WORD *)(v2 + 150) = (a1[8] << 8) + 128;
            LOWORD(v1) = (a1[7] << 8) + 128;
            *(_WORD *)(v2 + 152) = v1;
          }
          else if ( (_BYTE)v1 == 45 )
          {
            LOBYTE(v1) = sub_371B0(v2, a1[7] + 16);
          }
        }
      }
      else if ( (unsigned __int8)v1 <= 0xBu )
      {
        *(_WORD *)(v2 + 24) = a1[6];
        sub_374F0((_WORD *)v2, a1[5] << 8, 4096);
        LOBYTE(v1) = sub_371A0(v2);
        *(_BYTE *)(v2 + 16) |= 1u;
      }
      else if ( (_BYTE)v1 == 12 )
      {
        LOBYTE(v1) = *((_BYTE *)a1 + 12);
        BYTE1(v1) = v1 + *(_BYTE *)(v2 + 70);
        *(_BYTE *)(v2 + 70) = BYTE1(v1);
        if ( a1[6] >= 3u )
        {
          *(_BYTE *)(v2 + 70) = BYTE1(v1) - 3;
          v3 = *(_BYTE *)(v2 + 18);
          *(_WORD *)(v2 + 86) = 280;
          *(_BYTE *)(v2 + 18) = v3 | 4;
        }
      }
    }
  }
  return v1;
}
// 96906: using guessed type int dword_96906;

//----- (00037AD0) --------------------------------------------------------
int sub_37AD0()
{
  return *(_DWORD *)(dword_AE400_AE3F0() + 40) + 1;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00037AE0) --------------------------------------------------------
int sub_37AE0(int a1)
{
  int v1; // edi
  int result; // eax

  v1 = dword_AE400_AE3F0() + 9177;
  result = 0;
  *(_DWORD *)(dword_AE400_AE3F0() + 9177) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 4) = *(_WORD *)(a1 + 4);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00037B00) --------------------------------------------------------
int sub_37B00(int a1)
{
  int v1; // edi
  int result; // eax

  v1 = dword_AE400_AE3F0() + 9183;
  result = 0;
  *(_DWORD *)(dword_AE400_AE3F0() + 9183) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 4) = *(_WORD *)(a1 + 4);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00037B20) --------------------------------------------------------
int sub_37B20(int a1)
{
  int v1; // edi
  int result; // eax

  v1 = dword_AE400_AE3F0() + 9189;
  result = 0;
  *(_DWORD *)(dword_AE400_AE3F0() + 9189) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 4) = *(_WORD *)(a1 + 4);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00037B40) --------------------------------------------------------
int sub_37B40(int a1)
{
  int v1; // edi
  int result; // eax

  v1 = dword_AE400_AE3F0() + 9195;
  result = 0;
  *(_DWORD *)(dword_AE400_AE3F0() + 9195) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 4) = *(_WORD *)(a1 + 4);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00037B60) --------------------------------------------------------
int sub_37B60(int a1)
{
  int v1; // edi
  int result; // eax

  v1 = dword_AE400_AE3F0() + 9201;
  result = 0;
  *(_DWORD *)(dword_AE400_AE3F0() + 9201) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 4) = *(_WORD *)(a1 + 4);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00037B80) --------------------------------------------------------
int sub_37B80(int a1)
{
  int v1; // edi
  int result; // eax

  v1 = dword_AE400_AE3F0() + 9207;
  result = 0;
  *(_DWORD *)(dword_AE400_AE3F0() + 9207) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 4) = *(_WORD *)(a1 + 4);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00037BA0) --------------------------------------------------------
int sub_37BA0(int a1)
{
  int v1; // edi
  int result; // eax

  v1 = dword_AE400_AE3F0() + 9213;
  result = 0;
  *(_DWORD *)(dword_AE400_AE3F0() + 9213) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 4) = *(_WORD *)(a1 + 4);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00037BC0) --------------------------------------------------------
int sub_37BC0(int a1)
{
  int v1; // edi
  int result; // eax

  v1 = dword_AE400_AE3F0() + 9219;
  result = 0;
  *(_DWORD *)(dword_AE400_AE3F0() + 9219) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 4) = *(_WORD *)(a1 + 4);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00037BE0) --------------------------------------------------------
int sub_37BE0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // edx

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 0;
    *(_BYTE *)(result + 64) = 3;
    v3 = dword_AE400_AE3F0();
    *(_BYTE *)(result + 65) = 0;
    *(_DWORD *)(result + 8) = 10000;
    *(_WORD *)(result + 128) = 80;
    *(_DWORD *)(result + 156) = (uint32)&unk_99018;
    *(_WORD *)(result + 28) = 29;
    *(_WORD *)(result + 24) = (result - (v3 + 29795)) / 164;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    sub_36FA0_37360(v2, 44);
    sub_371A0(v2);
    return v2;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00037C60) --------------------------------------------------------
int sub_37C60(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // edx

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 1;
    *(_BYTE *)(result + 64) = 3;
    v3 = dword_AE400_AE3F0();
    *(_BYTE *)(result + 65) = 1;
    *(_DWORD *)(result + 8) = 10000;
    *(_WORD *)(result + 128) = 80;
    *(_DWORD *)(result + 156) = (uint32)&unk_99038;
    *(_WORD *)(result + 28) = 29;
    *(_WORD *)(result + 24) = (result - (v3 + 29795)) / 164;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    sub_36FA0_37360(v2, 44);
    sub_371A0(v2);
    return v2;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00037CE0) --------------------------------------------------------
int sub_37CE0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // [esp+0h] [ebp-14h] BYREF
  __int16 v4; // [esp+4h] [ebp-10h]

  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)a1;
  word_AE454_AE444.z = *(_WORD *)(a1 + 4);
  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 5;
    *(_BYTE *)(result + 64) = 3;
    *(_BYTE *)(result + 65) = 2;
    *(_DWORD *)(result + 8) = 40000;
    *(_WORD *)(result + 26) = 0;
    *(_WORD *)(result + 28) = 33;
    LOWORD(v3) = HIBYTE(*(uint16*)&word_AE454_AE444);
    HIWORD(v3) = HIBYTE(word_AE454_AE444.y);
    v4 = sub_11F50((axis_3d*)(__int16*)&word_AE454_AE444);
    if ( ((__int16)v3 + SHIWORD(v3)) % 2 )
      LOWORD(v3) = v3 + 1;
    LOWORD(v3) = (_WORD)v3 << 8;
    HIWORD(v3) <<= 8;
    *(_DWORD *)(v2 + 150) = v3;
    *(_WORD *)(v2 + 154) = v4;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)&v3);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 177);
    return v2;
  }
  return result;
}
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE446: using guessed type __int16 word_AE454_AE444.y;

//----- (00037DC0) --------------------------------------------------------
int sub_37DC0(int a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 7;
    *(_BYTE *)(v1 + 64) = 3;
    *(_BYTE *)(v1 + 65) = 3;
    *(_DWORD *)(v1 + 8) = 10000;
    *(_WORD *)(v1 + 126) = 48;
    *(_DWORD *)(v1 + 136) = 10000;
    *(_DWORD *)(v1 + 140) = 0;
    *(_WORD *)(v1 + 28) = 1;
    *(_DWORD *)(v1 + 156) = (uint32)&unk_99058;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 169);
  }
  return v2;
}

//----- (00037E40) --------------------------------------------------------
int sub_37E40()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00037E60) --------------------------------------------------------
int sub_37E60()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00037E80) --------------------------------------------------------
int sub_37E80()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00037EA0) --------------------------------------------------------
int sub_37EA0()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00037EC0) --------------------------------------------------------
int sub_37EC0()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00037EE0) --------------------------------------------------------
int sub_37EE0()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00037F00) --------------------------------------------------------
int sub_37F00()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00037F20) --------------------------------------------------------
int sub_37F20()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00037F40) --------------------------------------------------------
int sub_37F40()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00037F60) --------------------------------------------------------
int sub_37F60()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00037F80) --------------------------------------------------------
int sub_37F80(int *a1)
{
  int result; // eax
  int v2; // ebx
  unsigned int v3; // eax
  char v4; // dl
  char v5; // dl
  int v6; // [esp+0h] [ebp-14h] BYREF
  __int16 v7; // [esp+4h] [ebp-10h]

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 0;
    *(_BYTE *)(result + 64) = 2;
    *(_BYTE *)(result + 65) = 0;
    *(_WORD *)(result + 26) = (result - (dword_AE400_AE3F0() + 29795)) / 164 % 11;
    v3 = 9377 * *(_DWORD *)(result + 4) + 9439;
    *(_DWORD *)(v2 + 4) = v3;
    *(_WORD *)(v2 + 28) = 1;
    *(_DWORD *)(v2 + 12) = v3 % 0x1388 + 2500;
    v6 = *a1;
    v7 = *((_WORD *)a1 + 2);
    v4 = -95 * *(_BYTE *)(v2 + 4) - 33;
    *(_DWORD *)(v2 + 4) = 9377 * *(_DWORD *)(v2 + 4) + 9439;
    LOWORD(v6) = (v4 & 0x3F) - 32 + v6;
    v5 = -95 * *(_BYTE *)(v2 + 4) - 33;
    *(_DWORD *)(v2 + 4) = 9377 * *(_DWORD *)(v2 + 4) + 9439;
    HIWORD(v6) += (v5 & 0x3F) - 32;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)&v6);
    sub_371A0(v2);
    sub_373F0((_WORD *)v2, 83);
    return v2;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00038070) --------------------------------------------------------
int sub_38070(int a1)
{
  int result; // eax
  _WORD *v2; // ebx

  result = sub_37680();
  v2 = (_WORD *)result;
  if ( result )
  {
    *(_BYTE *)(result + 16) &= ~8u;
    *(_WORD *)(result + 26) = (result - (dword_AE400_AE3F0() + 29795)) / 164 % 11;
    *(_BYTE *)(result + 70) = 3;
    *(_BYTE *)(result + 64) = 2;
    *(_BYTE *)(result + 65) = 1;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    sub_371A0((int)v2);
    sub_373F0(v2, 79);
    return (int)v2;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000380F0) --------------------------------------------------------
int sub_380F0(int a1)
{
  int result; // eax
  _WORD *v2; // ebx

  result = sub_37680();
  v2 = (_WORD *)result;
  if ( result )
  {
    *(_BYTE *)(result + 16) &= ~8u;
    *(_WORD *)(result + 26) = (result - (dword_AE400_AE3F0() + 29795)) / 164 % 11;
    *(_BYTE *)(result + 70) = 6;
    *(_BYTE *)(result + 64) = 2;
    *(_BYTE *)(result + 65) = 2;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    sub_371A0((int)v2);
    sub_373F0(v2, 39);
    sub_374F0(v2, 1024, 1024);
    return (int)v2;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00038180) --------------------------------------------------------
int sub_38180(int a1)
{
  int result; // eax
  _WORD *v2; // ebx

  result = sub_37680();
  v2 = (_WORD *)result;
  if ( result )
  {
    *(_BYTE *)(result + 16) &= ~8u;
    *(_WORD *)(result + 26) = (result - (dword_AE400_AE3F0() + 29795)) / 164 % 11;
    *(_BYTE *)(result + 70) = 9;
    *(_BYTE *)(result + 64) = 2;
    *(_BYTE *)(result + 65) = 3;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    sub_371A0((int)v2);
    sub_373F0(v2, 270);
    return (int)v2;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00038200) --------------------------------------------------------
int sub_38200(int a1)
{
  int result; // eax
  _WORD *v2; // ebx

  result = sub_37680();
  v2 = (_WORD *)result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 12;
    *(_BYTE *)(result + 64) = 2;
    *(_BYTE *)(result + 65) = 4;
    *(_WORD *)(result + 26) = (result - (dword_AE400_AE3F0() + 29795)) / 164 % 11;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    sub_371A0((int)v2);
    sub_373F0(v2, 48);
    return (int)v2;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00038270) --------------------------------------------------------
int sub_38270(int a1)
{
  int result; // eax
  _WORD *v2; // ebx

  result = sub_37680();
  v2 = (_WORD *)result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 15;
    *(_BYTE *)(result + 64) = 2;
    *(_BYTE *)(result + 65) = 5;
    *(_WORD *)(result + 26) = (result - (dword_AE400_AE3F0() + 29795)) / 164 % 11;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    sub_371A0((int)v2);
    sub_373F0(v2, 48);
    return (int)v2;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000385F0) --------------------------------------------------------
int sub_385F0(int a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // ecx
  int v5; // edx
  int v6; // eax

  v1 = sub_37680();
  v2 = v1;
  if ( !v1 )
    return 0;
  *(_BYTE *)(v1 + 70) = 7;
  *(_BYTE *)(v1 + 64) = 5;
  *(_BYTE *)(v1 + 65) = 1;
  *(_WORD *)(v1 + 128) = 100;
  v3 = *(__int16 *)(v1 + 128);
  *(_WORD *)(v1 + 130) = 16;
  *(_DWORD *)(v1 + 8) = 2000;
  *(_WORD *)(v1 + 126) = v3 / 2;
  sub_37350(v1);
  *(_WORD *)(v2 + 34) = 0;
  *(_WORD *)(v2 + 30) = *(_WORD *)(v2 + 34);
  v4 = dword_AE400_AE3F0();
  v5 = dword_AE400_AE3F0() + 29795;
  *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
  *(_WORD *)(v2 + 36) = 0;
  *(_WORD *)(v2 + 28) = 1;
  v6 = *(char *)(v2 + 65);
  *(_WORD *)(v2 + 26) = (v2 - v5) / 164 % 100;
  LOBYTE(v5) = *(_BYTE *)(v4 + v6 + 12);
  *(_BYTE *)(v4 + v6 + 12) = v5 + 1;
  *(_DWORD *)(v2 + 156) = (uint32)&unk_990D8;
  *(_BYTE *)(v2 + 63) = v5;
  *(_BYTE *)(v2 + 58) = *(_BYTE *)(*(_DWORD *)(v2 + 156) + 26) + 1;
  *(_BYTE *)(v2 + 66) = 3;
  sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
  sub_371A0(v2);
  sub_36FA0_37360(v2, 86);
  return v2;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000386F0) --------------------------------------------------------
int sub_386F0(int a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // eax
  int v5; // ecx
  int v6; // edx
  int v7; // eax
  int v8; // ecx

  v1 = sub_37680();
  v2 = v1;
  if ( !v1 )
    return 0;
  *(_BYTE *)(v1 + 70) = 13;
  *(_BYTE *)(v1 + 64) = 5;
  *(_BYTE *)(v1 + 65) = 2;
  *(_WORD *)(v1 + 128) = 70;
  v3 = *(__int16 *)(v1 + 128);
  *(_WORD *)(v1 + 130) = 30;
  *(_DWORD *)(v1 + 8) = 3000;
  *(_WORD *)(v1 + 126) = v3 / 2;
  sub_37350(v1);
  v4 = 9377 * *(_DWORD *)(v2 + 4) + 9439;
  *(_DWORD *)(v2 + 4) = v4;
  LOWORD(v4) = (v4 & 0x7FF) - 1;
  *(_WORD *)(v2 + 34) = v4;
  *(_WORD *)(v2 + 30) = v4;
  v5 = dword_AE400_AE3F0();
  v6 = dword_AE400_AE3F0() + 29795;
  *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
  *(_WORD *)(v2 + 36) = 0;
  *(_WORD *)(v2 + 44) = 350;
  *(_BYTE *)(v2 + 66) = 3;
  *(_BYTE *)(v2 + 67) = 0;
  v7 = *(char *)(v2 + 65);
  *(_WORD *)(v2 + 28) = 1;
  v8 = v7 + v5;
  *(_WORD *)(v2 + 26) = (v2 - v6) / 164 % 100;
  LOBYTE(v6) = *(_BYTE *)(v8 + 12);
  *(_BYTE *)(v8 + 12) = v6 + 1;
  *(_DWORD *)(v2 + 156) = (uint32)&unk_990F8;
  *(_BYTE *)(v2 + 63) = v6;
  *(_BYTE *)(v2 + 58) = *(_WORD *)(*(_DWORD *)(v2 + 156) + 26)
                      - *(unsigned __int8 *)(v2 + 63) % *(_WORD *)(*(_DWORD *)(v2 + 156) + 26)
                      + 4;
  *(_BYTE *)(v2 + 66) = 3;
  sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
  sub_371A0(v2);
  sub_36FA0_37360(v2, 3);
  sub_374F0((_WORD *)v2, 128, 128);
  return v2;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00038830) --------------------------------------------------------
int sub_38830(int a1)
{
  int result; // eax
  int v2; // ebx
  _DWORD *v3; // ebp
  __int64 v4; // rax
  int v5; // ecx
  int v6; // eax
  int v7; // ebx
  int v8; // edx
  int v9; // [esp+0h] [ebp-20h]
  int v10; // [esp+4h] [ebp-1Ch]
  int v11; // [esp+8h] [ebp-18h]
  __int16 v12; // [esp+Ch] [ebp-14h]

  result = sub_37680();
  v2 = result;
  v3 = (_DWORD *)result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 19;
    *(_BYTE *)(result + 64) = 5;
    *(_BYTE *)(result + 65) = 3;
    *(_WORD *)(result + 128) = 64;
    *(_WORD *)(result + 130) = 16;
    *(_WORD *)(result + 126) = 30;
    *(_DWORD *)(result + 8) = 9000;
    sub_37350(result);
    v4 = *(int *)(v2 + 140);
    *(_DWORD *)(v2 + 136) = v4;
    LODWORD(v4) = ((int)v4 - HIDWORD(v4)) >> 1;
    HIDWORD(v4) = *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v2 + 140) = v4;
    LODWORD(v4) = 9377 * HIDWORD(v4) + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    LOWORD(v4) = (v4 & 0x7FF) - 1;
    *(_WORD *)(v2 + 34) = v4;
    *(_WORD *)(v2 + 30) = v4;
    v5 = dword_AE400_AE3F0();
    HIDWORD(v4) = dword_AE400_AE3F0() + 29795;
    *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
    *(_WORD *)(v2 + 36) = 0;
    *(_WORD *)(v2 + 56) = 96;
    *(_WORD *)(v2 + 26) = (v2 - HIDWORD(v4)) / 164 % 100;
    HIDWORD(v4) = *(char *)(v2 + 65);
    *(_WORD *)(v2 + 28) = 1;
    LOBYTE(v4) = *(_BYTE *)(v5 + HIDWORD(v4) + 12);
    *(_BYTE *)(v5 + HIDWORD(v4) + 12) = v4 + 1;
    *(_DWORD *)(v2 + 156) = (uint32)&unk_99118;
    *(_BYTE *)(v2 + 63) = v4;
    *(_BYTE *)(v2 + 58) = *(_WORD *)(*(_DWORD *)(v2 + 156) + 26)
                        - *(unsigned __int8 *)(v2 + 63) % *(_WORD *)(*(_DWORD *)(v2 + 156) + 26)
                        + 4;
    v10 = 0;
    v11 = v2;
    *(_BYTE *)(v2 + 66) = 3;
    v12 = 89;
    do
    {
      v6 = sub_37680();
      v7 = v6;
      v9 = v6;
      if ( v6 )
      {
        qmemcpy((void *)v6, v3, 0xA4u);
        v8 = v6 - (dword_AE400_AE3F0() + 29795);
        *(_WORD *)(v6 + 52) = (v11 - (dword_AE400_AE3F0() + 29795)) / 164;
        *(_WORD *)(v11 + 54) = v8 / 164;
        *(_WORD *)(v6 + 54) = 0;
        *(_BYTE *)(v6 + 70) = 120;
        *(_DWORD *)(v6 + 140) = (v3[34] - (__CFSHL__((int)v3[34] >> 31, 5) + 32 * ((int)v3[34] >> 31))) >> 5;
        *(_BYTE *)(v6 + 63) = v10;
        sub_36FA0_37360(v6, v12);
        *(_WORD *)(v7 + 56) = *(_WORD *)(v7 + 80);
        sub_41CF0_42030((Type_AE400_29795*)v7, (axis_3d*)a1);
        sub_371A0(v7);
      }
      v11 = v9;
      ++v12;
      ++v10;
    }
    while ( v10 <= 15 );
    sub_41CF0_42030((Type_AE400_29795*)v3, (axis_3d*)a1);
    sub_371A0((int)v3);
    sub_36FA0_37360((int)v3, 88);
    return (int)v3;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00038A60) --------------------------------------------------------
int sub_38A60(int a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // ecx
  int v5; // edx
  int v6; // ecx
  int v7; // ecx

  v1 = sub_37680();
  v2 = v1;
  if ( !v1 )
    return 0;
  *(_BYTE *)(v1 + 70) = 25;
  *(_BYTE *)(v1 + 64) = 5;
  *(_BYTE *)(v1 + 65) = 4;
  *(_WORD *)(v1 + 128) = 30;
  *(_WORD *)(v1 + 130) = 0;
  *(_DWORD *)(v1 + 8) = 1000;
  *(_WORD *)(v1 + 126) = *(_WORD *)(v1 + 128);
  sub_37350(v1);
  v3 = 9377 * *(_DWORD *)(v2 + 4) + 9439;
  *(_DWORD *)(v2 + 4) = v3;
  LOWORD(v3) = (v3 & 0x7FF) - 1;
  *(_WORD *)(v2 + 34) = v3;
  *(_WORD *)(v2 + 30) = v3;
  v4 = dword_AE400_AE3F0();
  *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
  *(_WORD *)(v2 + 36) = 0;
  *(_WORD *)(v2 + 26) = (v2 - (v4 + 29795)) / 164 % 100;
  v5 = *(char *)(v2 + 65);
  *(_WORD *)(v2 + 44) = 500;
  v6 = v5 + v4;
  *(_WORD *)(v2 + 28) = 1;
  LOBYTE(v5) = *(_BYTE *)(v6 + 12);
  *(_BYTE *)(v6 + 12) = v5 + 1;
  *(_DWORD *)(v2 + 156) = (uint32)&unk_99138;
  *(_BYTE *)(v2 + 63) = v5;
  v7 = *(__int16 *)(*(_DWORD *)(v2 + 156) + 26)
     - *(unsigned __int8 *)(v2 + 63) % *(__int16 *)(*(_DWORD *)(v2 + 156) + 26);
  *(_BYTE *)(v2 + 66) = 3;
  *(_BYTE *)(v2 + 58) = v7 + 4;
  sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
  sub_371A0(v2);
  sub_36FA0_37360(v2, 0);
  sub_374F0((_WORD *)v2, 128, 128);
  return v2;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00038BA0) --------------------------------------------------------
int sub_38BA0(int a1)
{
  int v1; // eax

  v1 = *(_DWORD *)(a1 + 140)
     / ((*(_DWORD *)(a1 + 136) - (__CFSHL__(*(int *)(a1 + 136) >> 31, 3) + 8 * (*(int *)(a1 + 136) >> 31))) >> 3);
  if ( (v1 & 0x8000u) != 0 )
    LOWORD(v1) = 0;
  if ( (__int16)v1 > 7 )
    LOWORD(v1) = 7;
  if ( (__int16)v1 > *(__int16 *)(a1 + 86) - 185 )
    *(_DWORD *)(a1 + 8) += 5000;
  return sub_36FA0_37360(a1, v1 + 185);
}

//----- (00038D60) --------------------------------------------------------
_DWORD *sub_38D60(int a1)
{
  int v1; // eax
  int v2; // ebx
  __int64 v3; // rax
  int v4; // ecx
  int v5; // eax
  int v6; // ebp
  int v7; // edx
  int v9; // [esp+0h] [ebp-1Ch]
  _DWORD *v10; // [esp+4h] [ebp-18h]
  int i; // [esp+8h] [ebp-14h]

  if ( sub_37AD0() < 16 )
    return 0;
  v1 = sub_37680();
  v2 = v1;
  v10 = (_DWORD *)v1;
  if ( !v1 )
    return 0;
  *(_BYTE *)(v1 + 70) = 37;
  *(_BYTE *)(v1 + 64) = 5;
  *(_BYTE *)(v1 + 65) = 6;
  *(_WORD *)(v1 + 128) = 80;
  *(_WORD *)(v1 + 130) = 16;
  *(_WORD *)(v1 + 126) = 30;
  *(_DWORD *)(v1 + 8) = 9000;
  sub_37350(v1);
  v3 = *(int *)(v2 + 140);
  *(_DWORD *)(v2 + 136) = v3;
  LODWORD(v3) = v3 / 3;
  HIDWORD(v3) = *(_DWORD *)(v2 + 4);
  *(_DWORD *)(v2 + 140) = v3;
  LODWORD(v3) = 9377 * HIDWORD(v3) + 9439;
  *(_DWORD *)(v2 + 4) = v3;
  LOWORD(v3) = (v3 & 0x7FF) - 1;
  *(_WORD *)(v2 + 34) = v3;
  *(_WORD *)(v2 + 30) = v3;
  v4 = dword_AE400_AE3F0();
  HIDWORD(v3) = dword_AE400_AE3F0() + 29795;
  *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
  *(_WORD *)(v2 + 36) = 0;
  *(_WORD *)(v2 + 56) = 96;
  *(_WORD *)(v2 + 28) = 1;
  LODWORD(v3) = *(char *)(v2 + 65);
  *(_WORD *)(v2 + 26) = (v2 - HIDWORD(v3)) / 164 % 100;
  BYTE4(v3) = *(_BYTE *)(v4 + v3 + 12);
  *(_BYTE *)(v4 + v3 + 12) = BYTE4(v3) + 1;
  *(_DWORD *)(v2 + 156) = (uint32)&unk_99178;
  *(_BYTE *)(v2 + 58) = 64;
  v9 = v2;
  *(_BYTE *)(v2 + 66) = 3;
  *(_BYTE *)(v2 + 63) = BYTE4(v3);
  for ( i = 0; i <= 1; ++i )
  {
    v5 = sub_37680();
    v6 = v5;
    if ( v5 )
    {
      qmemcpy((void *)v5, v10, 0xA4u);
      v7 = v5 - (dword_AE400_AE3F0() + 29795);
      *(_WORD *)(v5 + 52) = (v9 - (dword_AE400_AE3F0() + 29795)) / 164;
      *(_WORD *)(v9 + 54) = v7 / 164;
      *(_WORD *)(v5 + 54) = 0;
      *(_BYTE *)(v5 + 70) = 120;
      *(_DWORD *)(v5 + 140) = v10[34] / 3;
      *(_BYTE *)(v5 + 63) = i;
      if ( i )
        sub_36FA0_37360(v5, 193);
      else
        sub_36FA0_37360(v5, 50);
      *(_WORD *)(v6 + 56) = 4 * *(_WORD *)(v6 + 80);
      sub_41CF0_42030((Type_AE400_29795*)v6, (axis_3d*)a1);
      sub_371A0(v6);
    }
    v9 = v6;
  }
  sub_41CF0_42030((Type_AE400_29795*)v10, (axis_3d*)a1);
  sub_371A0((int)v10);
  sub_36FA0_37360((int)v10, 49);
  return v10;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00038F80) --------------------------------------------------------
int sub_38F80(int a1)
{
  int result; // eax

  if ( *(unsigned __int8 *)(a1 + 63) % 2 )
  {
    sub_36FA0_37360(a1, 85);
    *(_BYTE *)(a1 + 71) = 1;
    *(_DWORD *)(a1 + 8) = 4000;
  }
  else
  {
    sub_36FA0_37360(a1, 199);
    *(_BYTE *)(a1 + 71) = 2;
    *(_DWORD *)(a1 + 8) = 2000;
  }
  result = sub_37350(a1);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 8);
  return result;
}

//----- (00038FE0) --------------------------------------------------------
int sub_38FE0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // eax
  int v5; // ecx
  int v6; // edx
  int v7; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 43;
    *(_BYTE *)(result + 64) = 5;
    *(_BYTE *)(result + 65) = 7;
    *(_WORD *)(result + 128) = 20;
    *(_WORD *)(result + 130) = 3;
    v3 = *(_DWORD *)(result + 4);
    *(_WORD *)(result + 126) = *(_WORD *)(result + 128);
    v4 = 9377 * v3 + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    LOWORD(v4) = (v4 & 0x7FF) - 1;
    *(_WORD *)(v2 + 34) = v4;
    *(_WORD *)(v2 + 30) = v4;
    v5 = dword_AE400_AE3F0();
    v6 = dword_AE400_AE3F0() + 29795;
    *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
    *(_WORD *)(v2 + 36) = 0;
    *(_WORD *)(v2 + 44) = 500;
    *(_WORD *)(v2 + 28) = 1;
    v7 = *(char *)(v2 + 65);
    *(_WORD *)(v2 + 26) = (v2 - v6) / 164 % 100;
    LOBYTE(v6) = *(_BYTE *)(v5 + v7 + 12);
    *(_BYTE *)(v5 + v7 + 12) = v6 + 1;
    *(_DWORD *)(v2 + 156) = (uint32)&unk_99198;
    *(_BYTE *)(v2 + 58) = 64;
    *(_BYTE *)(v2 + 66) = 3;
    *(_BYTE *)(v2 + 63) = v6;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_38F80(v2);
    sub_374F0((_WORD *)v2, 128, 128);
    return v2;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000390E0) --------------------------------------------------------
int sub_390E0(int a1)
{
  int result; // eax
  int v2; // ebx
  __int16 v3; // ax
  int v4; // eax
  int v5; // ecx
  int v6; // edx
  int v7; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 49;
    *(_BYTE *)(result + 64) = 5;
    *(_BYTE *)(result + 65) = 8;
    *(_WORD *)(result + 128) = 40;
    *(_WORD *)(result + 130) = 20;
    v3 = *(_WORD *)(result + 128);
    *(_DWORD *)(v2 + 8) = 10000;
    *(_WORD *)(v2 + 126) = v3;
    sub_37350(v2);
    v4 = 9377 * *(_DWORD *)(v2 + 4) + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    LOWORD(v4) = (v4 & 0x7FF) - 1;
    *(_WORD *)(v2 + 34) = v4;
    *(_WORD *)(v2 + 30) = v4;
    v5 = dword_AE400_AE3F0();
    v6 = dword_AE400_AE3F0() + 29795;
    *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
    *(_WORD *)(v2 + 36) = 0;
    *(_WORD *)(v2 + 44) = 1000;
    *(_WORD *)(v2 + 28) = 1;
    v7 = *(char *)(v2 + 65);
    *(_WORD *)(v2 + 26) = (v2 - v6) / 164 % 100;
    LOBYTE(v6) = *(_BYTE *)(v5 + v7 + 12);
    *(_BYTE *)(v5 + v7 + 12) = v6 + 1;
    *(_DWORD *)(v2 + 156) = (uint32)&unk_991B8;
    *(_BYTE *)(v2 + 58) = 64;
    *(_BYTE *)(v2 + 66) = 3;
    *(_BYTE *)(v2 + 63) = v6;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 47);
    sub_374F0((_WORD *)v2, 128, 128);
    return v2;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000391F0) --------------------------------------------------------
int sub_391F0(int a1)
{
  int v1; // eax
  int v2; // ebx
  __int16 v3; // ax
  __int16 v4; // dx
  int v5; // esi
  int v6; // ecx

  v1 = sub_37680();
  v2 = v1;
  if ( !v1 )
    return 0;
  *(_BYTE *)(v1 + 70) = 54;
  *(_BYTE *)(v1 + 64) = 5;
  *(_BYTE *)(v1 + 65) = 9;
  *(_WORD *)(v1 + 128) = 20;
  *(_WORD *)(v1 + 130) = 0;
  v3 = *(_WORD *)(v1 + 128);
  *(_DWORD *)(v2 + 8) = 1000;
  *(_WORD *)(v2 + 126) = v3;
  sub_37350(v2);
  *(_DWORD *)(v2 + 4) = 9377 * *(_DWORD *)(v2 + 4) + 9439;
  v4 = *(_DWORD *)(v2 + 4) % 0x832u;
  *(_WORD *)(v2 + 36) = 0;
  *(_WORD *)(v2 + 44) = 500;
  *(_WORD *)(v2 + 28) = 1;
  *(_WORD *)(v2 + 34) = --v4;
  *(_WORD *)(v2 + 30) = v4;
  v5 = dword_AE400_AE3F0();
  v6 = *(char *)(v2 + 65);
  *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
  LOBYTE(v4) = *(_BYTE *)(v6 + v5 + 12);
  *(_BYTE *)(v6 + v5 + 12) = v4 + 1;
  *(_DWORD *)(v2 + 156) = (uint32)&unk_991D8;
  *(_BYTE *)(v2 + 63) = v4;
  *(_BYTE *)(v2 + 58) = *(_WORD *)(*(_DWORD *)(v2 + 156) + 26)
                      - *(unsigned __int8 *)(v2 + 63) % *(_WORD *)(*(_DWORD *)(v2 + 156) + 26)
                      + 4;
  *(_BYTE *)(v2 + 66) = 3;
  *(_WORD *)(v2 + 26) = (v2 - (v5 + 29795)) / 164 % 10 + 29;
  sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
  *(_WORD *)(v2 + 76) = sub_11F50((axis_3d*)(__int16 *)(v2 + 72));
  sub_371A0(v2);
  sub_36FA0_37360(v2, 220);
  sub_374F0((_WORD *)v2, 128, 128);
  return v2;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00039340) --------------------------------------------------------
int sub_39340(int a1)
{
  int result; // eax
  int v2; // ebx
  __int16 v3; // ax
  int v4; // eax
  int v5; // ecx
  int v6; // edx
  int v7; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 61;
    *(_BYTE *)(result + 64) = 5;
    *(_BYTE *)(result + 65) = 10;
    *(_WORD *)(result + 128) = 60;
    *(_WORD *)(result + 130) = 20;
    v3 = *(_WORD *)(result + 128);
    *(_DWORD *)(v2 + 8) = 2000;
    *(_WORD *)(v2 + 126) = v3;
    sub_37350(v2);
    v4 = 9377 * *(_DWORD *)(v2 + 4) + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    LOWORD(v4) = (v4 & 0x7FF) - 1;
    *(_WORD *)(v2 + 34) = v4;
    *(_WORD *)(v2 + 30) = v4;
    v5 = dword_AE400_AE3F0();
    v6 = dword_AE400_AE3F0() + 29795;
    *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
    *(_WORD *)(v2 + 36) = 0;
    *(_WORD *)(v2 + 44) = 500;
    *(_WORD *)(v2 + 28) = 1;
    v7 = *(char *)(v2 + 65);
    *(_WORD *)(v2 + 26) = (v2 - v6) / 164 % 100;
    LOBYTE(v6) = *(_BYTE *)(v5 + v7 + 12);
    *(_BYTE *)(v5 + v7 + 12) = v6 + 1;
    *(_DWORD *)(v2 + 156) = (uint32)&unk_991F8;
    *(_BYTE *)(v2 + 58) = 64;
    *(_BYTE *)(v2 + 66) = 3;
    *(_BYTE *)(v2 + 63) = v6;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 208);
    sub_374F0((_WORD *)v2, 128, 128);
    return v2;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00039450) --------------------------------------------------------
int sub_39450(int a1)
{
  int result; // eax
  int v2; // ebx
  __int16 v3; // ax
  int v4; // edx
  int v5; // eax
  int v6; // ecx
  int v7; // edx
  int v8; // edx

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 66;
    *(_BYTE *)(result + 64) = 5;
    *(_BYTE *)(result + 65) = 11;
    *(_WORD *)(result + 128) = 60;
    *(_WORD *)(result + 130) = 20;
    v3 = *(_WORD *)(result + 128);
    *(_DWORD *)(v2 + 8) = 20000;
    *(_WORD *)(v2 + 126) = v3;
    sub_37350(v2);
    v4 = *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v2 + 136) = 2 * *(_DWORD *)(v2 + 140);
    v5 = 9377 * v4 + 9439;
    *(_DWORD *)(v2 + 4) = v5;
    LOWORD(v5) = (v5 & 0x7FF) - 1;
    *(_WORD *)(v2 + 34) = v5;
    *(_WORD *)(v2 + 30) = v5;
    v6 = dword_AE400_AE3F0();
    v7 = dword_AE400_AE3F0() + 29795;
    *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
    *(_WORD *)(v2 + 36) = 0;
    *(_WORD *)(v2 + 44) = 500;
    *(_WORD *)(v2 + 26) = (v2 - v7) / 164 % 100;
    v8 = *(char *)(v2 + 65);
    *(_WORD *)(v2 + 28) = 1;
    LOBYTE(v5) = *(_BYTE *)(v6 + v8 + 12);
    *(_BYTE *)(v6 + v8 + 12) = v5 + 1;
    *(_DWORD *)(v2 + 156) = (uint32)&unk_99218;
    *(_BYTE *)(v2 + 58) = 64;
    *(_BYTE *)(v2 + 66) = 3;
    *(_WORD *)(v2 + 26) = 0;
    *(_BYTE *)(v2 + 63) = v5;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 200);
    sub_374F0((_WORD *)v2, 128, 128);
    return v2;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00039580) --------------------------------------------------------
int sub_39580(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // eax
  int v5; // ecx
  int v6; // edx
  int v7; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 73;
    *(_BYTE *)(result + 64) = 5;
    *(_BYTE *)(result + 65) = 12;
    *(_WORD *)(result + 128) = 40;
    *(_WORD *)(result + 130) = 20;
    v3 = *(_DWORD *)(result + 4);
    *(_WORD *)(result + 126) = *(_WORD *)(result + 128);
    v4 = 9377 * v3 + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    LOWORD(v4) = (v4 & 0x7FF) - 1;
    *(_WORD *)(v2 + 34) = v4;
    *(_WORD *)(v2 + 30) = v4;
    v5 = dword_AE400_AE3F0();
    v6 = dword_AE400_AE3F0() + 29795;
    *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
    *(_DWORD *)(v2 + 8) = 1000;
    *(_DWORD *)(v2 + 140) = 0;
    *(_WORD *)(v2 + 36) = 0;
    *(_WORD *)(v2 + 44) = 500;
    *(_WORD *)(v2 + 28) = 1;
    v7 = *(char *)(v2 + 65);
    *(_WORD *)(v2 + 26) = (v2 - v6) / 164 % 100;
    LOBYTE(v6) = *(_BYTE *)(v5 + v7 + 12);
    *(_BYTE *)(v5 + v7 + 12) = v6 + 1;
    *(_DWORD *)(v2 + 156) = (uint32)&unk_99078;
    *(_BYTE *)(v2 + 58) = 64;
    *(_BYTE *)(v2 + 66) = 3;
    *(_WORD *)(v2 + 26) = 2;
    *(_BYTE *)(v2 + 63) = v6;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 221);
    sub_374F0((_WORD *)v2, 128, 128);
    return v2;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00039810) --------------------------------------------------------
int sub_39810(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // eax
  int v5; // ecx
  int v6; // edx
  int v7; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 85;
    *(_BYTE *)(result + 64) = 5;
    *(_BYTE *)(result + 65) = 14;
    *(_WORD *)(result + 128) = 40;
    *(_WORD *)(result + 130) = 20;
    v3 = *(_DWORD *)(result + 4);
    *(_WORD *)(result + 126) = *(_WORD *)(result + 128);
    v4 = 9377 * v3 + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    LOWORD(v4) = (v4 & 0x7FF) - 1;
    *(_WORD *)(v2 + 34) = v4;
    *(_WORD *)(v2 + 30) = v4;
    v5 = dword_AE400_AE3F0();
    v6 = dword_AE400_AE3F0() + 29795;
    *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
    *(_DWORD *)(v2 + 8) = 1000;
    *(_DWORD *)(v2 + 140) = 0;
    *(_WORD *)(v2 + 36) = 0;
    *(_WORD *)(v2 + 44) = 500;
    *(_WORD *)(v2 + 28) = 1;
    v7 = *(char *)(v2 + 65);
    *(_WORD *)(v2 + 26) = (v2 - v6) / 164 % 100;
    LOBYTE(v6) = *(_BYTE *)(v5 + v7 + 12);
    *(_BYTE *)(v5 + v7 + 12) = v6 + 1;
    *(_DWORD *)(v2 + 156) = (uint32)&unk_99078;
    *(_BYTE *)(v2 + 58) = 64;
    *(_BYTE *)(v2 + 66) = 3;
    *(_WORD *)(v2 + 26) = 2;
    *(_BYTE *)(v2 + 63) = v6;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 219);
    sub_374F0((_WORD *)v2, 128, 128);
    return v2;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00039930) --------------------------------------------------------
int sub_39930(int a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // ecx
  int v4; // edx
  int v5; // ecx
  char v6; // ah

  v1 = sub_37680();
  v2 = v1;
  if ( !v1 )
    return 0;
  *(_BYTE *)(v1 + 70) = 91;
  *(_BYTE *)(v1 + 64) = 5;
  *(_BYTE *)(v1 + 65) = 15;
  *(_WORD *)(v1 + 128) = 30;
  *(_WORD *)(v1 + 130) = 0;
  *(_DWORD *)(v1 + 8) = 1000;
  *(_WORD *)(v1 + 34) = 0;
  *(_WORD *)(v1 + 126) = *(_WORD *)(v1 + 128);
  *(_WORD *)(v1 + 30) = *(_WORD *)(v1 + 34);
  v3 = dword_AE400_AE3F0();
  *(_WORD *)(v1 + 32) = *(_WORD *)(v1 + 34);
  *(_DWORD *)(v1 + 140) = 0;
  *(_WORD *)(v1 + 36) = 0;
  *(_WORD *)(v1 + 26) = (v1 - (v3 + 29795)) / 164 % 100;
  v4 = *(char *)(v1 + 65);
  *(_WORD *)(v1 + 44) = 500;
  v5 = v4 + v3;
  *(_WORD *)(v1 + 28) = 1;
  LOBYTE(v4) = *(_BYTE *)(v5 + 12);
  *(_BYTE *)(v5 + 12) = v4 + 1;
  *(_DWORD *)(v1 + 156) = (uint32)&unk_99238;
  *(_BYTE *)(v1 + 63) = v4;
  LOWORD(v5) = *(_WORD *)(*(_DWORD *)(v1 + 156) + 26);
  LOWORD(v4) = *(unsigned __int8 *)(v1 + 63) % (__int16)v5;
  *(_BYTE *)(v1 + 66) = 3;
  v6 = *(_BYTE *)(v1 + 18) | 2;
  *(_BYTE *)(v2 + 58) = v5 - v4 + 4;
  *(_BYTE *)(v2 + 18) = v6;
  sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
  sub_371A0(v2);
  sub_36FA0_37360(v2, 0);
  sub_374F0((_WORD *)v2, 128, 128);
  return v2;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00039A60) --------------------------------------------------------
int sub_39A60(int a1)
{
  int result; // eax
  int v2; // ebx
  __int16 v3; // ax
  int v4; // eax
  int v5; // ecx
  int v6; // edx
  int v7; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 97;
    *(_BYTE *)(result + 64) = 5;
    *(_BYTE *)(result + 65) = 16;
    *(_WORD *)(result + 128) = 60;
    *(_WORD *)(result + 130) = 20;
    v3 = *(_WORD *)(result + 128);
    *(_DWORD *)(v2 + 8) = 100000;
    *(_WORD *)(v2 + 126) = v3;
    sub_37350(v2);
    v4 = 9377 * *(_DWORD *)(v2 + 4) + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    LOWORD(v4) = (v4 & 0x7FF) - 1;
    *(_WORD *)(v2 + 34) = v4;
    *(_WORD *)(v2 + 30) = v4;
    v5 = dword_AE400_AE3F0();
    v6 = dword_AE400_AE3F0() + 29795;
    *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
    *(_WORD *)(v2 + 36) = 0;
    *(_WORD *)(v2 + 44) = 500;
    *(_WORD *)(v2 + 28) = 1;
    v7 = *(char *)(v2 + 65);
    *(_WORD *)(v2 + 26) = (v2 - v6) / 164 % 100;
    LOBYTE(v6) = *(_BYTE *)(v5 + v7 + 12);
    *(_BYTE *)(v5 + v7 + 12) = v6 + 1;
    *(_DWORD *)(v2 + 156) = (uint32)&unk_99258;
    *(_BYTE *)(v2 + 58) = 64;
    *(_BYTE *)(v2 + 66) = 3;
    *(_WORD *)(v2 + 26) = 0;
    *(_BYTE *)(v2 + 63) = v6;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 207);
    sub_374F0((_WORD *)v2, 128, 128);
    return v2;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00039B80) --------------------------------------------------------
int sub_39B80()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00039BA0) --------------------------------------------------------
int sub_39BA0()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00039BC0) --------------------------------------------------------
int sub_39BC0()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00039BE0) --------------------------------------------------------
int sub_39BE0()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00039C00) --------------------------------------------------------
int sub_39C00()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00039C20) --------------------------------------------------------
int sub_39C20()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00039C40) --------------------------------------------------------
int sub_39C40()
{
  int result; // eax
  int v1; // ebx
  int v2; // edx
  int v3; // eax
  int v4; // edx
  int v5; // eax

  result = sub_37680();
  v1 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 4;
    *(_BYTE *)(result + 64) = 7;
    *(_BYTE *)(result + 65) = 4;
    *(_WORD *)(result + 128) = 80;
    v2 = *(__int16 *)(result + 128);
    *(_WORD *)(result + 130) = 16;
    v3 = v2 / 2;
    v4 = *(_DWORD *)(v1 + 4);
    *(_WORD *)(v1 + 126) = v3;
    v5 = 9377 * v4 + 9439;
    *(_DWORD *)(v1 + 4) = v5;
    LOWORD(v5) = (v5 & 0x7FF) - 1;
    *(_WORD *)(v1 + 34) = v5;
    *(_WORD *)(v1 + 30) = v5;
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_371A0(v1);
    return v1;
  }
  return result;
}

//----- (00039CC0) --------------------------------------------------------
int sub_39CC0()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00039CE0) --------------------------------------------------------
int sub_39CE0()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00039D00) --------------------------------------------------------
int sub_39D00()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00039D20) --------------------------------------------------------
int sub_39D20()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00039D40) --------------------------------------------------------
int sub_39D40()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00039D60) --------------------------------------------------------
int sub_39D60()
{
  int v0; // eax

  v0 = sub_37680();
  if ( v0 )
    sub_371A0(v0);
  return 0;
}

//----- (00039D90) --------------------------------------------------------
int sub_39D90(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 0;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 0;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98FD8;
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 42);
    return v2;
  }
  return result;
}

//----- (00039E10) --------------------------------------------------------
int sub_39E10(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 1;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 1;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 4096 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F78;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_BYTE *)(v2 + 66) = 10;
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 209);
    sub_374F0((_WORD *)v2, 2 * *(_WORD *)(v2 + 80), 2 * *(_WORD *)(v2 + 84));
    return v2;
  }
  return result;
}

//----- (00039EC0) --------------------------------------------------------
int sub_39EC0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 2;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 2;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F58;
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 211);
    return v2;
  }
  return result;
}

//----- (00039F40) --------------------------------------------------------
int sub_39F40(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 3;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 3;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F58;
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 76);
    return v2;
  }
  return result;
}

//----- (00039FC0) --------------------------------------------------------
int sub_39FC0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 4;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 4;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F58;
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 210);
    return v2;
  }
  return result;
}

//----- (0003A040) --------------------------------------------------------
int sub_3A040(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 5;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 5;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F58;
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 211);
    return v2;
  }
  return result;
}

//----- (0003A0C0) --------------------------------------------------------
int sub_3A0C0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 6;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 6;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F58;
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 212);
    return v2;
  }
  return result;
}

//----- (0003A140) --------------------------------------------------------
int sub_3A140(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 7;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 7;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F58;
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 213);
    return v2;
  }
  return result;
}

//----- (0003A1C0) --------------------------------------------------------
int sub_3A1C0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 8;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 8;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&off_98FB8;
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 214);
    return v2;
  }
  return result;
}
// 98FB8: using guessed type void *off_98FB8;

//----- (0003A240) --------------------------------------------------------
int sub_3A240(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 9;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 9;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 3584 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&off_98FB8;
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 216);
    return v2;
  }
  return result;
}
// 98FB8: using guessed type void *off_98FB8;

//----- (0003A2C0) --------------------------------------------------------
int sub_3A2C0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 10;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 10;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F58;
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 18);
    return v2;
  }
  return result;
}

//----- (0003A340) --------------------------------------------------------
int sub_3A340(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 11;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 11;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F58;
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 281);
    return v2;
  }
  return result;
}

//----- (0003A3C0) --------------------------------------------------------
int sub_3A3C0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 12;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 12;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 2048 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F58;
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 216);
    return v2;
  }
  return result;
}

//----- (0003A440) --------------------------------------------------------
int sub_3A440(int a1)
{
  int result; // eax
  _WORD *v2; // ebx

  result = sub_37680();
  v2 = (_WORD *)result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 13;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 13;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    *(_DWORD *)(result + 8) = 5120 / *(__int16 *)(result + 126);
    *(_BYTE *)(result + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    sub_371A0((int)v2);
    sub_370A0_37460(v2, 195);
    return (int)v2;
  }
  return result;
}

//----- (0003A520) --------------------------------------------------------
int sub_3A520(int a1)
{
  int result; // eax
  int v2; // ebx

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 15;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 14;
    *(_WORD *)(result + 126) = 128;
    *(_WORD *)(result + 128) = 128;
    *(_DWORD *)(result + 8) = 4096 / *(__int16 *)(result + 126);
    *(_BYTE *)(result + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 196);
    return v2;
  }
  return result;
}

//----- (0003A590) --------------------------------------------------------
int sub_3A590(int a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 80;
    *(_BYTE *)(v1 + 70) = 16;
    *(_BYTE *)(v1 + 64) = 9;
    *(_BYTE *)(v1 + 65) = 15;
    *(_WORD *)(v1 + 126) = 128;
    *(_WORD *)(v1 + 128) = 128;
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 215);
  }
  return v2;
}

//----- (0003A5F0) --------------------------------------------------------
int sub_3A5F0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 17;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 16;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F78;
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 76);
    return v2;
  }
  return result;
}

//----- (0003A670) --------------------------------------------------------
int sub_3A670(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 18;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 17;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 4096 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F78;
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 209);
    sub_374F0((_WORD *)v2, 2 * *(_WORD *)(v2 + 80), 2 * *(_WORD *)(v2 + 84));
    return v2;
  }
  return result;
}

//----- (0003A710) --------------------------------------------------------
int sub_3A710(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 19;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 18;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98FD8;
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 42);
    return v2;
  }
  return result;
}

//----- (0003A790) --------------------------------------------------------
int sub_3A790(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 20;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 19;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98FD8;
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 42);
    return v2;
  }
  return result;
}

//----- (0003A810) --------------------------------------------------------
_WORD *sub_3A810(int a1)
{
  int v1; // eax
  _WORD *v2; // ebx
  int v3; // edx

  v1 = sub_37680();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 8;
    *(_BYTE *)(v1 + 70) = 0;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 0;
    *(_WORD *)(v1 + 44) = 400;
    v3 = *(_DWORD *)(v1 + 16);
    *(_WORD *)(v1 + 28) = 0;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    *(_BYTE *)(v1 + 18) |= 2u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    sub_371A0((int)v2);
    sub_36FA0_37360((int)v2, 7);
    sub_374F0(v2, 128, 128);
  }
  return v2;
}

//----- (0003A890) --------------------------------------------------------
int sub_3A890(int a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 1;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 1;
    *(_DWORD *)(v1 + 8) = 1;
    v3 = *(_DWORD *)(v1 + 16);
    *(_WORD *)(v1 + 44) = 400;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    *(_BYTE *)(v1 + 18) |= 2u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 41);
  }
  return v2;
}

//----- (0003A8F0) --------------------------------------------------------
int sub_3A8F0(int a1)
{
  int v1; // eax
  int v2; // ebx
  unsigned int v3; // edx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 8;
    *(_BYTE *)(v1 + 70) = 2;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 2;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    v3 = *(_DWORD *)(v1 + 16) & 0xFFFDFFF6;
    *(_WORD *)(v1 + 26) = 0;
    *(_DWORD *)(v1 + 16) = v3 | 0x20001;
    sub_371A0(v1);
  }
  return v2;
}

//----- (0003A950) --------------------------------------------------------
int sub_3A950(int a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx
  char v4; // ah

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 7;
    *(_BYTE *)(v1 + 70) = 3;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 3;
    v3 = *(_DWORD *)(v1 + 16);
    *(_WORD *)(v1 + 44) = 0;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    v4 = *(_BYTE *)(v1 + 18) | 2;
    *(_WORD *)(v2 + 26) = 0;
    *(_BYTE *)(v2 + 18) = v4;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 36);
  }
  return v2;
}

//----- (0003A9C0) --------------------------------------------------------
int sub_3A9C0(int a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 100;
    *(_BYTE *)(v1 + 70) = 4;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 4;
    v3 = *(_DWORD *)(v1 + 16);
    *(_WORD *)(v1 + 44) = 0;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    *(_BYTE *)(v1 + 18) |= 2u;
    *(_WORD *)(v1 + 26) = 0;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_WORD *)(v1 + 76) = sub_11F50((axis_3d*)(__int16 *)(v1 + 72));
    sub_371A0(v2);
  }
  return v2;
}

//----- (0003AA30) --------------------------------------------------------
int sub_3AA30(int a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx
  char v4; // ah

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 8;
    *(_BYTE *)(v1 + 70) = 5;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 5;
    v3 = *(_DWORD *)(v1 + 16);
    *(_WORD *)(v1 + 44) = 0;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    v4 = *(_BYTE *)(v1 + 18) | 2;
    *(_WORD *)(v2 + 26) = 0;
    *(_BYTE *)(v2 + 18) = v4;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    *(_WORD *)(v2 + 76) = sub_11F50((axis_3d*)(__int16 *)(v2 + 72));
    sub_371A0(v2);
    sub_36FA0_37360(v2, 244);
  }
  return v2;
}

//----- (0003AAB0) --------------------------------------------------------
_WORD *sub_3AAB0(__int16 *a1)
{
  int v1; // eax
  _WORD *v2; // ebx
  int v3; // edx

  v1 = sub_37680();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 6;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 6;
    *(_WORD *)(v1 + 44) = 50;
    *(_DWORD *)(v1 + 8) = 240;
    v3 = *(_DWORD *)(v1 + 16);
    *(_WORD *)(v1 + 46) = 0;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    *(_BYTE *)(v1 + 18) |= 2u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    v2[38] = sub_11F50((axis_3d*)a1);
    sub_371A0((int)v2);
    sub_36FA0_37360((int)v2, 228);
    sub_374F0(v2, 272, 1536);
    v2[13] = 0;
  }
  return v2;
}

//----- (0003AB50) --------------------------------------------------------
int sub_3AB50(__int16 *a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // ecx
  unsigned int v5; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 7;
    *(_BYTE *)(result + 64) = 10;
    *(_BYTE *)(result + 65) = 7;
    v3 = *(_DWORD *)(result + 16);
    *(_DWORD *)(result + 8) = 12;
    *(_DWORD *)(result + 16) = v3 & 0xFFFDFFF7;
    v4 = *(_DWORD *)(result + 4);
    *(_BYTE *)(result + 18) |= 2u;
    v5 = 9377 * v4 + 9439;
    *(_DWORD *)(v2 + 4) = v5;
    *(_BYTE *)(v2 + 66) = 10;
    *(_BYTE *)(v2 + 67) = 7;
    *(_WORD *)(v2 + 126) = v5 % 0x14 + 20;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    *(_WORD *)(v2 + 76) = sub_11F50((axis_3d*)a1);
    sub_373F0((_WORD *)v2, 78);
    sub_371A0(v2);
    result = v2;
    *(_BYTE *)(v2 + 16) |= 1u;
  }
  return result;
}

//----- (0003ABF0) --------------------------------------------------------
int sub_3ABF0(int a1)
{
  int v1; // eax
  int v2; // ebx
  char v3; // ah

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 8;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 8;
    *(_DWORD *)(v1 + 8) = 8;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    v3 = *(_BYTE *)(v1 + 16) & 0xF7;
    *(_WORD *)(v2 + 44) = 100;
    *(_BYTE *)(v2 + 16) = v3;
    sub_371A0(v2);
    sub_374F0((_WORD *)v2, 512, 512);
  }
  return v2;
}

//----- (0003AC50) --------------------------------------------------------
_WORD *sub_3AC50(int a1)
{
  int v1; // eax
  _WORD *v2; // ebx

  v1 = sub_37680();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 9;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 9;
    *(_DWORD *)(v1 + 8) = 17;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_WORD *)(v1 + 44) = 2000;
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_371A0(v1);
    sub_374F0(v2, 768, 0x2000);
  }
  return v2;
}

//----- (0003ACB0) --------------------------------------------------------
_WORD *sub_3ACB0(int a1)
{
  int v1; // eax
  _WORD *v2; // ebx
  int v3; // edx

  v1 = sub_37680();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 10;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 10;
    *(_DWORD *)(v1 + 8) = 1;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    v3 = *(_DWORD *)(v1 + 16);
    *(_WORD *)(v1 + 44) = 100;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    *(_BYTE *)(v1 + 18) |= 2u;
    sub_371A0(v1);
    sub_374F0(v2, 128, 128);
  }
  return v2;
}

//----- (0003AD20) --------------------------------------------------------
_WORD *sub_3AD20(int a1)
{
  int v1; // eax
  _WORD *v2; // ebx
  int v3; // edx

  v1 = sub_37680();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 11;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 11;
    *(_DWORD *)(v1 + 8) = 40;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    v3 = *(_DWORD *)(v1 + 16);
    *(_WORD *)(v1 + 44) = 200;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    *(_BYTE *)(v1 + 18) |= 2u;
    sub_371A0(v1);
    sub_374F0(v2, 2304, 0x2000);
  }
  return v2;
}

//----- (0003AD90) --------------------------------------------------------
int sub_3AD90(int a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 12;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 12;
    *(_DWORD *)(v1 + 8) = 8;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_WORD *)(v1 + 44) = -1536;
    *(_BYTE *)(v1 + 16) = *(_BYTE *)(v1 + 16) & 0xF6 | 1;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 41);
    *(_BYTE *)(v2 + 16) |= 1u;
    sub_374F0((_WORD *)v2, 512, 512);
  }
  return v2;
}

//----- (0003AE20) --------------------------------------------------------
int sub_3AE20(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // edx
  unsigned int v4; // eax
  unsigned int v5; // edx
  unsigned int v6; // eax
  unsigned int v7; // ecx
  unsigned int v8; // et2

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 13;
    *(_BYTE *)(result + 64) = 10;
    v3 = *(_DWORD *)(result + 4);
    *(_BYTE *)(result + 65) = 13;
    v4 = 9377 * v3 + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    v5 = v4 % 0x17;
    v6 = 9377 * *(_DWORD *)(v2 + 4);
    v7 = *(_DWORD *)(v2 + 16) & 0xFFFDFFF7;
    *(_DWORD *)(v2 + 8) = v5 + 17;
    *(_DWORD *)(v2 + 16) = v7;
    v6 += 9439;
    *(_DWORD *)(v2 + 4) = v6;
    v8 = v6 % 0x35;
    *(_BYTE *)(v2 + 66) = 10;
    *(_BYTE *)(v2 + 67) = 13;
    BYTE1(v6) = *(_BYTE *)(v2 + 18) | 2;
    *(_WORD *)(v2 + 126) = v8 + 51;
    *(_BYTE *)(v2 + 18) = BYTE1(v6);
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_373F0((_WORD *)v2, 67);
    sub_371A0(v2);
    return v2;
  }
  return result;
}

//----- (0003AEC0) --------------------------------------------------------
int sub_3AEC0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // edx
  unsigned int v4; // eax
  unsigned int v5; // edx
  unsigned int v6; // eax
  unsigned int v7; // ecx
  unsigned int v8; // et2

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 14;
    *(_BYTE *)(result + 64) = 10;
    v3 = *(_DWORD *)(result + 4);
    *(_BYTE *)(result + 65) = 14;
    v4 = 9377 * v3 + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    v5 = v4 % 0x21;
    v6 = 9377 * *(_DWORD *)(v2 + 4);
    v7 = *(_DWORD *)(v2 + 16) & 0xFFFDFFF7;
    *(_DWORD *)(v2 + 8) = v5 + 28;
    *(_DWORD *)(v2 + 16) = v7;
    v6 += 9439;
    *(_DWORD *)(v2 + 4) = v6;
    v8 = v6 % 0x35;
    *(_BYTE *)(v2 + 66) = 10;
    *(_BYTE *)(v2 + 67) = 14;
    BYTE1(v6) = *(_BYTE *)(v2 + 18) | 2;
    *(_WORD *)(v2 + 126) = v8 + 51;
    *(_BYTE *)(v2 + 18) = BYTE1(v6);
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_373F0((_WORD *)v2, 9);
    sub_371A0(v2);
    return v2;
  }
  return result;
}

//----- (0003AF60) --------------------------------------------------------
int sub_3AF60(int a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // eax

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 15;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 15;
    *(_DWORD *)(v1 + 8) = 128;
    *(_WORD *)(v1 + 126) = 256;
    v3 = *(_DWORD *)(v1 + 4);
    *(_BYTE *)(v1 + 16) &= ~8u;
    *(_WORD *)(v1 + 44) = 100;
    *(_WORD *)(v1 + 26) = 0;
    v4 = 9377 * v3 + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    *(_WORD *)(v2 + 30) = v4 & 0x7FF;
    *(_DWORD *)(v2 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v2 + 76) = *(_WORD *)(a1 + 4);
    sub_371A0(v2);
    sub_374F0((_WORD *)v2, 1024, 0x4000);
  }
  return v2;
}

//----- (0003AFF0) --------------------------------------------------------
int sub_3AFF0(int a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 17;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 17;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_DWORD *)(v1 + 8) = 10;
    *(_WORD *)(v1 + 44) = 3000;
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_371A0(v1);
  }
  return v2;
}

//----- (0003B040) --------------------------------------------------------
int sub_3B040(__int16 *a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // ecx
  unsigned int v5; // eax
  unsigned int v6; // edx
  unsigned int v7; // eax
  unsigned int v8; // edx
  int v9; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 16;
    *(_BYTE *)(result + 64) = 10;
    *(_BYTE *)(result + 65) = 16;
    v3 = *(_DWORD *)(result + 16);
    *(_WORD *)(result + 44) = 200;
    v4 = *(_DWORD *)(result + 4);
    *(_DWORD *)(result + 16) = v3 & 0xFFFDFFF7;
    v5 = 9377 * v4 + 9439;
    *(_DWORD *)(v2 + 4) = v5;
    v6 = v5 % 0x64;
    v7 = 9377 * *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v2 + 8) = v6 + 100;
    v7 += 9439;
    *(_DWORD *)(v2 + 4) = v7;
    v8 = v7 % 0x32;
    v9 = 9377 * *(_DWORD *)(v2 + 4);
    *(_WORD *)(v2 + 46) = 256;
    v9 += 9439;
    *(_DWORD *)(v2 + 4) = v9;
    *(_WORD *)(v2 + 30) = v9 & 0x7FF;
    BYTE1(v9) = *(_BYTE *)(v2 + 18);
    *(_WORD *)(v2 + 126) = v8 + 52;
    *(_BYTE *)(v2 + 18) = BYTE1(v9) | 2;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    *(_WORD *)(v2 + 76) = sub_11F50((axis_3d*)a1) + 64;
    sub_41EC0_42200((axis_3d*)(_WORD *)(v2 + 150), *(_WORD *)(v2 + 30), 0, *(_WORD *)(v2 + 126));
    sub_371A0(v2);
    sub_36FA0_37360(v2, 210);
    return v2;
  }
  return result;
}

//----- (0003B130) --------------------------------------------------------
int sub_3B130(int a1)
{
  int v1; // eax
  int v2; // ebx
  char v3; // ah

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 18;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 18;
    *(_WORD *)(v1 + 44) = 200;
    v3 = *(_BYTE *)(v1 + 16);
    *(_WORD *)(v2 + 26) = 0;
    *(_DWORD *)(v2 + 8) = 10000;
    *(_BYTE *)(v2 + 16) = v3 & 0xF7;
    *(_DWORD *)(v2 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v2 + 76) = *(_WORD *)(a1 + 4);
    sub_371A0(v2);
  }
  return v2;
}

//----- (0003B180) --------------------------------------------------------
int sub_3B180(int a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 19;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 19;
    *(_WORD *)(v1 + 44) = 200;
    v3 = *(_DWORD *)(v1 + 16);
    *(_DWORD *)(v1 + 8) = 240;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    *(_BYTE *)(v1 + 18) |= 2u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    *(_BYTE *)(v2 + 16) |= 1u;
    sub_371A0(v2);
    sub_36FA0_37360(v2, 228);
    sub_374F0((_WORD *)v2, 512, 512);
  }
  return v2;
}

//----- (0003B200) --------------------------------------------------------
int sub_3B200(int a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 8;
    *(_BYTE *)(v1 + 70) = 23;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 23;
    v3 = *(_DWORD *)(v1 + 16);
    *(_WORD *)(v1 + 44) = 25;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    *(_BYTE *)(v1 + 18) |= 2u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 7);
    sub_374F0((_WORD *)v2, 200, 200);
    *(_BYTE *)(v2 + 16) |= 1u;
  }
  return v2;
}

//----- (0003B280) --------------------------------------------------------
_WORD *sub_3B280(int a1)
{
  int v1; // eax
  _WORD *v2; // ebx

  v1 = sub_37680();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 25;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 25;
    *(_DWORD *)(v1 + 8) = 8;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_WORD *)(v1 + 44) = 2000;
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    sub_371A0((int)v2);
    sub_36FA0_37360((int)v2, 283);
    sub_374F0(v2, 512, 512);
  }
  return v2;
}

//----- (0003B300) --------------------------------------------------------
_WORD *sub_3B300(int a1)
{
  int v1; // eax
  _WORD *v2; // ebx

  v1 = sub_37680();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 26;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 26;
    *(_DWORD *)(v1 + 8) = 8;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_WORD *)(v1 + 44) = 200;
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    sub_371A0((int)v2);
    sub_36FA0_37360((int)v2, 284);
    sub_374F0(v2, 512, 512);
  }
  return v2;
}

//----- (0003B380) --------------------------------------------------------
int sub_3B380(int a1)
{
  int v1; // eax
  int v2; // ebx
  char v3; // ah

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 2;
    *(_BYTE *)(v1 + 70) = 27;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 27;
    *(_WORD *)(v1 + 44) = (*(__int16 *)(a1 + 4) >> 5) + 48;
    v3 = *(_BYTE *)(v1 + 16);
    *(_WORD *)(v2 + 26) = 10;
    *(_BYTE *)(v2 + 16) = v3 & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
  }
  return v2;
}

//----- (0003B3E0) --------------------------------------------------------
int sub_3B3E0(int a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 70) = 30;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 28;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    sub_371A0(v2);
  }
  return v2;
}

//----- (0003B440) --------------------------------------------------------
int sub_3B440(int a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 70) = 32;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 30;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    sub_371A0(v2);
  }
  return v2;
}

//----- (0003B4A0) --------------------------------------------------------
int sub_3B4A0(int a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 70) = 31;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 29;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    sub_371A0(v2);
  }
  return v2;
}

//----- (0003B500) --------------------------------------------------------
int sub_3B500(int a1)
{
  int v1; // eax
  int v2; // ebx
  char v3; // ah

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 70) = 34;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 32;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    v3 = *(_BYTE *)(v1 + 16) & 0xF7;
    *(_WORD *)(v2 + 126) = 256;
    *(_BYTE *)(v2 + 16) = v3;
    sub_371A0(v2);
  }
  return v2;
}

//----- (0003B550) --------------------------------------------------------
int sub_3B550(int a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 70) = 33;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 31;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    sub_371A0(v2);
  }
  return v2;
}

//----- (0003B5B0) --------------------------------------------------------
int sub_3B5B0(int a1)
{
  int v1; // eax
  int v2; // ebx
  char v3; // ah

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 70) = 55;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 51;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    v3 = *(_BYTE *)(v1 + 16);
    *(_WORD *)(v2 + 26) = 256;
    *(_WORD *)(v2 + 126) = 1024;
    *(_BYTE *)(v2 + 16) = v3 & 0xF7;
    sub_374F0((_WORD *)v2, 768, 768);
    sub_371A0(v2);
  }
  return v2;
}

//----- (0003B620) --------------------------------------------------------
int sub_3B620(int a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 70) = 54;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 50;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    sub_371A0(v2);
  }
  return v2;
}

//----- (0003B680) --------------------------------------------------------
int sub_3B680(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 36;
    *(_BYTE *)(result + 64) = 10;
    *(_BYTE *)(result + 65) = 34;
    *(_DWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 66) = 3;
    *(_BYTE *)(result + 67) = -1;
    *(_BYTE *)(result + 16) &= ~8u;
    *(_DWORD *)(result + 72) = *(_DWORD *)a1;
    *(_WORD *)(result + 76) = *(_WORD *)(a1 + 4);
    sub_36FA0_37360(result, 223);
    sub_374F0((_WORD *)v2, 256, 256);
    sub_371A0(v2);
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    *(_WORD *)(v2 + 76) = sub_11F50((axis_3d*)(__int16 *)(v2 + 72)) + 640;
    *(_DWORD *)(v2 + 150) = *(_DWORD *)(v2 + 72);
    *(_WORD *)(v2 + 154) = *(_WORD *)(v2 + 76);
    v3 = 9377 * *(_DWORD *)(v2 + 4) + 9439;
    *(_DWORD *)(v2 + 4) = v3;
    sub_41EC0_42200((axis_3d*)(_WORD *)(v2 + 150), v3 & 0x7FF, 0, -32768);
    return v2;
  }
  return result;
}

//----- (0003B750) --------------------------------------------------------
int sub_3B750()
{
  return sub_37680();
}

//----- (0003B760) --------------------------------------------------------
_WORD *sub_3B760(int a1)
{
  int v1; // eax
  _WORD *v2; // ebx

  v1 = sub_37680();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 38;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 36;
    *(_DWORD *)(v1 + 8) = 8;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_WORD *)(v1 + 44) = -1536;
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    sub_371A0((int)v2);
    sub_36FA0_37360((int)v2, 41);
    sub_374F0(v2, 512, 512);
  }
  return v2;
}

//----- (0003B7E0) --------------------------------------------------------
int sub_3B7E0(int a1)
{
  _BYTE *v1; // eax
  int v2; // ebx
  char v3; // ah

  v1 = (_BYTE *)sub_37680();
  v2 = (int)v1;
  if ( v1 )
  {
    v1[70] = 40;
    v1[64] = 10;
    v1[65] = 38;
    v3 = v1[16] & 0xF7;
    *(_DWORD *)(v2 + 8) = 32;
    *(_BYTE *)(v2 + 16) = v3;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 272);
    sub_374F0((_WORD *)v2, 512, 512);
  }
  return v2;
}

//----- (0003B850) --------------------------------------------------------
_WORD *sub_3B850(int a1)
{
  int v1; // eax
  _WORD *v2; // ebx

  v1 = sub_37680();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 35;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 33;
    *(_BYTE *)(v1 + 16) &= ~8u;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    sub_371A0(v1);
    sub_374F0(v2, 512, 512);
  }
  return v2;
}

//----- (0003B920) --------------------------------------------------------
int sub_3B920(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // edx

  result = sub_37680();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 41;
    *(_BYTE *)(result + 64) = 10;
    *(_BYTE *)(result + 65) = 39;
    *(_BYTE *)(result + 66) = 10;
    *(_BYTE *)(result + 67) = 39;
    *(_WORD *)(result + 46) = 128;
    v3 = dword_AE408_AE3F8();
    *(_DWORD *)(result + 140) = 512;
    if ( (*(_BYTE *)(v3 + 1) & 2) != 0 )
      *(_DWORD *)(result + 140) = 2500;
    *(_WORD *)(result + 126) = 32;
    *(_WORD *)(result + 28) = 3;
    *(_BYTE *)(result + 58) = 0x80;
    *(_BYTE *)(result + 59) = 0;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    sub_371A0(v2);
    sub_274D0(v2);
    return v2;
  }
  return result;
}
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (0003B9A0) --------------------------------------------------------
int sub_3B9A0(int a1)
{
  int result; // eax
  _WORD *v2; // ebx

  result = sub_37680();
  v2 = (_WORD *)result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 42;
    *(_BYTE *)(result + 64) = 10;
    *(_BYTE *)(result + 65) = 40;
    *(_WORD *)(result + 26) = (result - (dword_AE400_AE3F0() + 29795)) / 164 % 11;
    *(_WORD *)(result + 28) = 2;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    sub_371A0((int)v2);
    sub_373F0(v2, 65);
    return (int)v2;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (0003BA10) --------------------------------------------------------
int sub_3BA10(int a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 30;
    *(_BYTE *)(v1 + 70) = 51;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 45;
    *(_WORD *)(v1 + 44) = 100;
    *(_WORD *)(v1 + 26) = 4;
    *(_DWORD *)(v1 + 16) = 9;
    *(_WORD *)(v1 + 28) = 33;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    sub_36FA0_37360(v2, 177);
  }
  return v2;
}

//----- (0003BA70) --------------------------------------------------------
_WORD *sub_3BA70(int a1)
{
  int v1; // eax
  _WORD *v2; // ebx

  v1 = sub_37680();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 45;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 43;
    *(_DWORD *)(v1 + 8) = 8;
    *(_WORD *)(v1 + 44) = -1536;
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    sub_371A0((int)v2);
    sub_36FA0_37360((int)v2, 41);
    sub_374F0(v2, 512, 512);
  }
  return v2;
}

//----- (0003BAE0) --------------------------------------------------------
int sub_3BAE0(int a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 43;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 41;
    *(_DWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 16) &= ~8u;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    sub_371A0(v1);
  }
  return v2;
}

//----- (0003BB30) --------------------------------------------------------
int sub_3BB30(int a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 44;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 42;
    *(_DWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 16) &= ~8u;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_BYTE *)(v1 + 60) = 1;
    sub_371A0(v1);
  }
  return v2;
}

//----- (0003BB80) --------------------------------------------------------
int sub_3BB80(int a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 46;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 44;
    *(_DWORD *)(v1 + 8) = 500;
    *(_WORD *)(v1 + 44) = 500;
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 8);
  }
  return v2;
}

//----- (0003BBE0) --------------------------------------------------------
int sub_3BBE0(int a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 56;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 52;
    *(_DWORD *)(v1 + 8) = 100000;
    *(_WORD *)(v1 + 44) = 500;
    *(_WORD *)(v1 + 26) = 600;
    *(_DWORD *)(v1 + 140) = 500;
    *(_DWORD *)(v1 + 136) = 2000;
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    sub_371A0(v2);
    sub_36FA0_37360(v2, 205);
  }
  return v2;
}

//----- (0003BC60) --------------------------------------------------------
int sub_3BC60(int a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 58;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 53;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_DWORD *)(v1 + 8) = 6;
    *(_WORD *)(v1 + 44) = 3000;
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_371A0(v1);
  }
  return v2;
}

//----- (0003BCB0) --------------------------------------------------------
int sub_3BCB0(int a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // eax

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 59;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 54;
    *(_DWORD *)(v1 + 8) = 128;
    *(_WORD *)(v1 + 126) = 256;
    v3 = *(_DWORD *)(v1 + 4);
    *(_BYTE *)(v1 + 16) &= ~8u;
    *(_WORD *)(v1 + 44) = 100;
    *(_WORD *)(v1 + 26) = 0;
    v4 = 9377 * v3 + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    *(_WORD *)(v2 + 30) = v4 & 0x7FF;
    *(_DWORD *)(v2 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v2 + 76) = *(_WORD *)(a1 + 4);
    *(_BYTE *)(v2 + 16) |= 1u;
    sub_371A0(v2);
    sub_374F0((_WORD *)v2, 1024, 0x4000);
  }
  return v2;
}

//----- (0003BD40) --------------------------------------------------------
int sub_3BD40(int a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // eax

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 60;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 55;
    *(_DWORD *)(v1 + 8) = 19;
    *(_WORD *)(v1 + 126) = 256;
    v3 = *(_DWORD *)(v1 + 4);
    *(_BYTE *)(v1 + 16) &= ~8u;
    *(_WORD *)(v1 + 44) = 100;
    *(_WORD *)(v1 + 26) = 32;
    v4 = 9377 * v3 + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    *(_WORD *)(v2 + 30) = v4 & 0x7FF;
    *(_DWORD *)(v2 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v2 + 76) = *(_WORD *)(a1 + 4);
    *(_BYTE *)(v2 + 16) |= 1u;
    sub_371A0(v2);
    sub_374F0((_WORD *)v2, 1024, 0x4000);
  }
  return v2;
}

//----- (0003BDD0) --------------------------------------------------------
int sub_3BDD0(int a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // eax

  v1 = sub_37680();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 61;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 56;
    *(_DWORD *)(v1 + 8) = 128;
    *(_WORD *)(v1 + 126) = 256;
    v3 = *(_DWORD *)(v1 + 4);
    *(_BYTE *)(v1 + 16) &= ~8u;
    *(_WORD *)(v1 + 44) = 100;
    *(_WORD *)(v1 + 26) = 0;
    v4 = 9377 * v3 + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    *(_WORD *)(v2 + 30) = v4 & 0x7FF;
    *(_DWORD *)(v2 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v2 + 76) = *(_WORD *)(a1 + 4);
    *(_BYTE *)(v2 + 16) |= 1u;
    sub_371A0(v2);
    sub_374F0((_WORD *)v2, 1024, 0x4000);
  }
  return v2;
}

//----- (0003BE60) --------------------------------------------------------
int sub_3BE60(int a1, char a2, char a3)
{
  int v3; // eax
  int v4; // ebx
  char v5; // dl

  v3 = sub_37680();
  v4 = v3;
  if ( v3 )
  {
    *(_BYTE *)(v3 + 64) = 11;
    *(_BYTE *)(v3 + 65) = a2;
    *(_BYTE *)(v3 + 70) = a3;
    *(_BYTE *)(v3 + 16) &= 0xF6u;
    v5 = *(_BYTE *)(v3 + 16);
    *(_WORD *)(v3 + 26) = 0;
    *(_BYTE *)(v3 + 16) = v5 | 1;
    *(_DWORD *)(v3 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v3 + 76) = *(_WORD *)(a1 + 4);
    sub_371A0(v3);
  }
  return v4;
}

//----- (0003BEB0) --------------------------------------------------------
int sub_3BEB0(int a1)
{
  return sub_3BE60(a1, 0, 0);
}

//----- (0003BED0) --------------------------------------------------------
int sub_3BED0(int a1)
{
  return sub_3BE60(a1, 1, 1);
}

//----- (0003BEF0) --------------------------------------------------------
int sub_3BEF0(int a1)
{
  return sub_3BE60(a1, 2, 2);
}

//----- (0003BF10) --------------------------------------------------------
int sub_3BF10(int a1)
{
  return sub_3BE60(a1, 3, 3);
}

//----- (0003BF30) --------------------------------------------------------
int sub_3BF30(int a1)
{
  return sub_3BE60(a1, 4, 4);
}

//----- (0003BF50) --------------------------------------------------------
int sub_3BF50(int a1)
{
  return sub_3BE60(a1, 5, 5);
}

//----- (0003BF70) --------------------------------------------------------
int sub_3BF70(int a1)
{
  return sub_3BE60(a1, 6, 6);
}

//----- (0003BF90) --------------------------------------------------------
int sub_3BF90(int a1)
{
  return sub_3BE60(a1, 7, 7);
}

//----- (0003BFB0) --------------------------------------------------------
int sub_3BFB0(int a1)
{
  return sub_3BE60(a1, 8, 8);
}

//----- (0003BFD0) --------------------------------------------------------
int sub_3BFD0(int a1)
{
  return sub_3BE60(a1, 9, 9);
}

//----- (0003BFF0) --------------------------------------------------------
int sub_3BFF0(int a1)
{
  return sub_3BE60(a1, 10, 10);
}

//----- (0003C010) --------------------------------------------------------
int sub_3C010(int a1)
{
  return sub_3BE60(a1, 11, 11);
}

//----- (0003C030) --------------------------------------------------------
int sub_3C030(int a1)
{
  return sub_3BE60(a1, 12, 12);
}

//----- (0003C050) --------------------------------------------------------
int sub_3C050(int a1)
{
  return sub_3BE60(a1, 13, 13);
}

//----- (0003C070) --------------------------------------------------------
int sub_3C070(int a1)
{
  return sub_3BE60(a1, 14, 14);
}

//----- (0003C090) --------------------------------------------------------
int sub_3C090(int a1)
{
  return sub_3BE60(a1, 15, 15);
}

//----- (0003C0B0) --------------------------------------------------------
int sub_3C0B0(int a1)
{
  return sub_3BE60(a1, 16, 16);
}

//----- (0003C0D0) --------------------------------------------------------
int sub_3C0D0(int a1)
{
  return sub_3BE60(a1, 17, 17);
}

//----- (0003C0F0) --------------------------------------------------------
int sub_3C0F0(int a1)
{
  return sub_3BE60(a1, 18, 18);
}

//----- (0003C110) --------------------------------------------------------
int sub_3C110(int a1)
{
  return sub_3BE60(a1, 19, 19);
}

//----- (0003C130) --------------------------------------------------------
int sub_3C130(int a1)
{
  return sub_3BE60(a1, 20, 20);
}

//----- (0003C150) --------------------------------------------------------
int sub_3C150(int a1)
{
  return sub_3BE60(a1, 21, 21);
}

//----- (0003C170) --------------------------------------------------------
int sub_3C170(int a1)
{
  return sub_3BE60(a1, 22, 22);
}

//----- (0003C190) --------------------------------------------------------
int sub_3C190(int a1)
{
  return sub_3BE60(a1, 23, 23);
}

//----- (0003C1B0) --------------------------------------------------------
int sub_3C1B0(int a1)
{
  return sub_3BE60(a1, 24, 24);
}

//----- (0003C1D0) --------------------------------------------------------
int sub_3C1D0(int a1)
{
  return sub_3BE60(a1, 25, 25);
}

//----- (0003C1F0) --------------------------------------------------------
int sub_3C1F0(int a1)
{
  return sub_3BE60(a1, 26, 26);
}

//----- (0003C210) --------------------------------------------------------
int sub_3C210(int a1)
{
  return sub_3BE60(a1, 27, 27);
}

//----- (0003C230) --------------------------------------------------------
int sub_3C230(int a1)
{
  return sub_3BE60(a1, 28, 28);
}

//----- (0003C250) --------------------------------------------------------
int sub_3C250(int a1)
{
  return sub_3BE60(a1, 29, 29);
}

//----- (0003C270) --------------------------------------------------------
int sub_3C270(int a1)
{
  return sub_3BE60(a1, 30, 30);
}

//----- (0003C290) --------------------------------------------------------
int sub_3C290(int a1)
{
  return sub_3BE60(a1, 31, 31);
}

//----- (0003C2B0) --------------------------------------------------------
int sub_3C2B0(int a1, char a2, char a3, int a4, __int16 a5, char a6, char a7, int a8, __int16 a9)
{
  int result; // eax
  int v10; // ebx
  int v11; // ecx
  char v12; // ah

  result = sub_37680();
  v10 = result;
  if ( result )
  {
    *(_BYTE *)(result + 64) = 12;
    *(_BYTE *)(result + 65) = a2;
    *(_BYTE *)(result + 70) = a3;
    *(_WORD *)(result + 44) = a9;
    *(_WORD *)(result + 50) = a5;
    *(_BYTE *)(result + 62) = a7;
    if ( a7 )
      a6 = 0;
    v11 = *(__int16 *)(result + 50);
    *(_BYTE *)(result + 60) = a6;
    *(_BYTE *)(result + 61) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 12) = 0;
    *(_DWORD *)(result + 140) = a4 / v11;
    *(_DWORD *)(result + 132) = a8;
    v12 = *(_BYTE *)(result + 16);
    *(_DWORD *)(v10 + 136) = a4;
    *(_BYTE *)(v10 + 16) = v12 & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v10, (axis_3d*)a1);
    sub_36FA0_37360(v10, 77);
    sub_374F0((_WORD *)v10, 4 * *(_WORD *)(v10 + 80), 4 * *(_WORD *)(v10 + 84));
    sub_371A0(v10);
    return v10;
  }
  return result;
}

//----- (0003C380) --------------------------------------------------------
int sub_3C380(int a1)
{
  return sub_3C2B0(a1, 3, 9, 50, 3, 1, 0, 0, 100);
}

//----- (0003C3A0) --------------------------------------------------------
int sub_3C3A0(int a1)
{
  return sub_3C2B0(a1, 16, 48, 1000, 101, 1, 0, 0, 10000);
}

//----- (0003C3D0) --------------------------------------------------------
int sub_3C3D0(int a1)
{
  return sub_3C2B0(a1, 0, 0, 200, 5, 1, 0, 0, 125);
}

//----- (0003C400) --------------------------------------------------------
int sub_3C400(int a1)
{
  return sub_3C2B0(a1, 2, 6, 1000, 251, 0, 0, 0, 100);
}

//----- (0003C430) --------------------------------------------------------
int sub_3C430(int a1)
{
  return sub_3C2B0(a1, 1, 3, 1000, 21, 1, 0, 0, 100);
}

//----- (0003C460) --------------------------------------------------------
int sub_3C460(int a1)
{
  return sub_3C2B0(a1, 10, 30, 5000, 51, 1, 0, 10000, 100);
}

//----- (0003C490) --------------------------------------------------------
int sub_3C490(int a1)
{
  return sub_3C2B0(a1, 6, 18, 6000, 51, 1, 0, 120000, 6000);
}

//----- (0003C4C0) --------------------------------------------------------
int sub_3C4C0(int a1)
{
  return sub_3C2B0(a1, 19, 57, 4000, 17, 1, 0, 10000, 100);
}

//----- (0003C4F0) --------------------------------------------------------
int sub_3C4F0(int a1)
{
  return sub_3C2B0(a1, 4, 12, 2000, 251, 1, 0, 0, 100);
}

//----- (0003C520) --------------------------------------------------------
int sub_3C520(int a1)
{
  return sub_3C2B0(a1, 7, 21, 10000, 11, 1, 0, 100000, 10000);
}

//----- (0003C550) --------------------------------------------------------
int sub_3C550(int a1)
{
  return sub_3C2B0(a1, 14, 42, 1000, 101, 1, 0, 8000, 100);
}

//----- (0003C580) --------------------------------------------------------
int sub_3C580(int a1)
{
  return sub_3C2B0(a1, 15, 45, 1000, 2, 0, 0, 25000, 500);
}

//----- (0003C5B0) --------------------------------------------------------
int sub_3C5B0(int a1)
{
  return sub_3C2B0(a1, 11, 33, 2500, 17, 1, 0, 16000, 100);
}

//----- (0003C5E0) --------------------------------------------------------
int sub_3C5E0(int a1)
{
  return sub_3C2B0(a1, 13, 39, 500, 11, 1, 0, 20000, 100);
}

//----- (0003C610) --------------------------------------------------------
int sub_3C610(int a1)
{
  return sub_3C2B0(a1, 12, 36, 5000, 251, 1, 0, 50000, 100);
}

//----- (0003C640) --------------------------------------------------------
int sub_3C640(int a1)
{
  return sub_3C2B0(a1, 9, 27, 12000, 31, 1, 0, 100000, 6000);
}

//----- (0003C670) --------------------------------------------------------
int sub_3C670(int a1)
{
  return sub_3C2B0(a1, 5, 15, 3000, 101, 1, 0, 0, 100);
}

//----- (0003C6A0) --------------------------------------------------------
int sub_3C6A0(int a1)
{
  return sub_3C2B0(a1, 18, 54, 20000, 33, 1, 0, 90000, 2000);
}

//----- (0003C6D0) --------------------------------------------------------
int sub_3C6D0(int a1)
{
  return sub_3C2B0(a1, 8, 24, 30000, 65, 1, 0, 180000, 1000);
}

//----- (0003C700) --------------------------------------------------------
int sub_3C700(int a1)
{
  return sub_3C2B0(a1, 17, 51, 13000, 13, 1, 0, 150000, 100);
}

//----- (0003C730) --------------------------------------------------------
int sub_3C730(int a1)
{
  return sub_3C2B0(a1, 20, 60, 5000, 26, 1, 0, 60000, 5000);
}

//----- (0003C760) --------------------------------------------------------
int sub_3C760(int a1)
{
  return sub_3C2B0(a1, 21, 63, 1000, 251, 0, 0, 0, 100);
}

//----- (0003C790) --------------------------------------------------------
int sub_3C790(int a1)
{
  return sub_3C2B0(a1, 22, 66, 75000, 101, 1, 0, (int)&loc_30D40, 7000);
}

//----- (0003C7C0) --------------------------------------------------------
int sub_3C7C0(int a1)
{
  return sub_3C2B0(a1, 23, 69, 600, 3, 0, 0, 50000, 50);
}

//----- (0003C7F0) --------------------------------------------------------
int sub_3C7F0()
{
  int v0; // eax
  int v1; // ebx
  int v2; // edx

  v0 = sub_37680();
  v1 = v0;
  if ( v0 )
  {
    *(_BYTE *)(v0 + 70) = 0;
    *(_BYTE *)(v0 + 64) = 13;
    v2 = *(_DWORD *)(v0 + 16);
    *(_BYTE *)(v0 + 65) = 0;
    *(_DWORD *)(v0 + 16) = v2 & 1;
    sub_371A0(v0);
  }
  return v1;
}

//----- (0003C820) --------------------------------------------------------
int sub_3C820()
{
  int v0; // eax
  int v1; // ebx
  int v2; // edx

  v0 = sub_37680();
  v1 = v0;
  if ( v0 )
  {
    *(_BYTE *)(v0 + 70) = 1;
    *(_BYTE *)(v0 + 64) = 13;
    v2 = *(_DWORD *)(v0 + 16);
    *(_BYTE *)(v0 + 65) = 1;
    *(_DWORD *)(v0 + 16) = v2 & 1;
    sub_371A0(v0);
  }
  return v1;
}

//----- (0003C850) --------------------------------------------------------
int sub_3C850()
{
  int v0; // eax
  int v1; // ebx
  int v2; // edx

  v0 = sub_37680();
  v1 = v0;
  if ( v0 )
  {
    *(_BYTE *)(v0 + 70) = 2;
    *(_BYTE *)(v0 + 64) = 13;
    v2 = *(_DWORD *)(v0 + 16);
    *(_BYTE *)(v0 + 65) = 2;
    *(_DWORD *)(v0 + 16) = v2 & 1;
    sub_371A0(v0);
  }
  return v1;
}

//----- (0003C880) --------------------------------------------------------
int sub_3C880()
{
  int v0; // eax
  int v1; // ebx
  int v2; // edx

  v0 = sub_37680();
  v1 = v0;
  if ( v0 )
  {
    *(_BYTE *)(v0 + 70) = 3;
    *(_BYTE *)(v0 + 64) = 13;
    v2 = *(_DWORD *)(v0 + 16);
    *(_BYTE *)(v0 + 65) = 3;
    *(_DWORD *)(v0 + 16) = v2 & 1;
    sub_371A0(v0);
  }
  return v1;
}

//----- (0003C8B0) --------------------------------------------------------
char sub_3C8B0()
{
  int v0; // ebx
  int v1; // ebx
  int v2; // eax
  int v3; // eax
  char v5; // [esp+0h] [ebp-ACh] BYREF
  char v6[64]; // [esp+64h] [ebp-48h] BYREF
  char v7; // [esp+A4h] [ebp-8h] BYREF

  //fix
  v5 = 0;
  //fix

  sprintf(v6, "%s%s/sndsetup.inf", &aSc[1], aCarpetCd_2);
  v0 = (int)fopen(v6, &unk_A90B8);
  if ( !v0 )
  {
    v1 = (int)fopen(v6, &unk_A90BC);
    fprintf((FILE*)v1, aSoundfxNone000, v5);
    fprintf((FILE*)v1, aMusicNone38800, v5);
    fclose((FILE*)v1);
    v0 = (int)fopen(v6, &unk_A90B8);
  }
  fscanf((FILE*)v0, "%s = %s %x %d %d", &v5, &v5, &v7, &v7, &v7);
  fscanf((FILE*)v0, "%s = %s %x", &v5, &unk_CBF64, &dword_CBF60);
  fclose((FILE*)v0);
  v2 = (int)getenv(aBfMusic);
  if ( v2 )
    sscanf((char*)v2, "%s %x", &unk_CBF64, &dword_CBF60);
  v3 = stricmp(&unk_CBF64, aNone_0);
  if ( !v3 )
  {
    byte_939CC = 0;
    byte_939CD = 0;
  }
  if ( byte_939CC )
  {
    if ( !stricmp(&unk_CBF64, aAdlib)
      || !stricmp(&unk_CBF64, aSblast)
      || !stricmp(&unk_CBF64, aSbpro)
      || !stricmp(&unk_CBF64, aAdlibg)
      || !stricmp(&unk_CBF64, aSb16fm)
      || !stricmp(&unk_CBF64, aGravis)
      || !stricmp(&unk_CBF64, aPasfm)
      || !stricmp(&unk_CBF64, aCompatible) )
    {
      LOBYTE(v3) = sub_43B20_sub_43E60(v0, 0xA002u);
    }
    else if ( !stricmp(&unk_CBF64, aRoland_0) )
    {
      LOBYTE(v3) = sub_43B20_sub_43E60(v0, 0xA004u);
    }
    else if ( !stricmp(&unk_CBF64, aSbawe32_0) )
    {
      LOBYTE(v3) = sub_43B20_sub_43E60(v0, 0xA008u);
    }
    else if ( !stricmp(&unk_CBF64, aGeneral_0) || (v3 = stricmp(&unk_CBF64, aWblast_0)) == 0 )
    {
      LOBYTE(v3) = sub_43B20_sub_43E60(v0, 0xA001u);
    }
  }
  return v3;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 62405: using guessed type _DWORD stricmp(_DWORD, _DWORD);
// 62BE2: using guessed type __int64 fopen(_DWORD, _DWORD);
// 62C91: using guessed type _DWORD fprintf(_DWORD, _DWORD, char);
// 62CB6: using guessed type _DWORD fclose(_DWORD);
// 62EDF: using guessed type _DWORD fscanf(_DWORD, _DWORD, ...);
// 62F04: using guessed type _DWORD getenv(_DWORD);
// 62FCD: using guessed type _DWORD sscanf(_DWORD, _DWORD, ...);
// 939CC: using guessed type char byte_939CC;
// 939CD: using guessed type char byte_939CD;
// CBF60: using guessed type int dword_CBF60;

//----- (0003CB40) --------------------------------------------------------
void sub_3C800_sub_3CB40()
{
  __int64 v3; // rax
  int v4; // ebx
  int v5; // ebx
  int v6; // eax
  int result; // eax
  char v8; // [esp+0h] [ebp-A8h] BYREF
  char v9[68]; // [esp+64h] [ebp-44h] BYREF

  //fix
  v8 = 0;
  //fix

  sprintf(v9, "%s%s/sndsetup.inf", "C:", aCarpetCd_3);
  v3 = (__int64)fopen(v9, &unk_A91B4);
  v4 = v3;
  if ( !(_DWORD)v3 )
  {
    v5 = (int)fopen(v9, &unk_A91B8);
    fprintf((FILE*)v5, aSoundfxNone000_0, v8);
    fprintf((FILE*)v5, aMusicNone38800_0, v8);
    fclose((FILE*)v5);
    v3 = (long long)fopen(v9, &unk_A91B4);
    v4 = v3;
  }
  fscanf((FILE*)v4, "%s = %s %x %d %d", &v8, &unk_CC148, &dword_CC13C, &dword_CC140, &dword_CC1AC);
  fclose((FILE*)v4);
  v6 = (int)getenv(aBfSound);
  if ( v6 )
    sscanf((char*)v6, "%s %x %d %d", &unk_CC148, &dword_CC13C, &dword_CC140, &dword_CC1AC);
  result = stricmp(&unk_CC148, aNone_1);
  if ( !result )
  {
    BYTE1(result) = 0;
    byte_939E4 = 0;
    byte_939E5 = 0;
  }
  if ( byte_939E4 )
    sub_43EC0_44200();
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 62405: using guessed type _DWORD stricmp(_DWORD, _DWORD);
// 62BE2: using guessed type __int64 fopen(_DWORD, _DWORD);
// 62C91: using guessed type _DWORD fprintf(_DWORD, _DWORD, char);
// 62CB6: using guessed type _DWORD fclose(_DWORD);
// 62EDF: using guessed type _DWORD fscanf(_DWORD, _DWORD, ...);
// 62F04: using guessed type _DWORD getenv(_DWORD);
// 62FCD: using guessed type _DWORD sscanf(_DWORD, _DWORD, ...);
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// CC13C: using guessed type int dword_CC13C;
// CC140: using guessed type int dword_CC140;
// CC1AC: using guessed type int dword_CC1AC;

//----- (0003CD10) --------------------------------------------------------
int sub_3C9D0_3CD10()
{
  int v0; // ebx
  _BYTE *v1; // ebp
  char *v2; // edx
  int i; // ebx
  char *v4; // esi
  char *v5; // edi
  int v6; // eax
  int v7; // edx
  int v8; // eax
  int v9; // ebx
  int v10; // ecx
  int v11; // eax
  int v12; // ebx
  _BYTE *v13; // edi
  int v14; // ebp
  int v15; // eax
  char *v16; // esi
  _BYTE *v17; // eax
  char v18; // dh
  char *v19; // esi
  char *v20; // edi
  char v21; // al
  char v22; // al
  int v23; // eax
  char v24; // dh
  unsigned int v25; // kr08_4
  char *v26; // esi
  const char *v27; // edi
  char *v28; // edi
  char v29; // al
  char v30; // al
  int v31; // eax
  char v32; // cl
  char v33; // dl
  char v34; // bl
  char v35; // cl
  int v36; // eax
  unsigned __int16 v37; // dx
  int v38; // ebx
  int v39; // eax
  int v40; // edx
  _BYTE *v41; // ebx
  __int16 j; // di
  int v43; // eax
  int v44; // eax
  int v45; // edx
  int v46; // eax
  int v47; // edx
  unsigned __int16 v48; // di
  int k; // eax
  int v50; // eax
  int v51; // esi
  int v52; // ebx
  int v53; // eax
  int v54; // ecx
  int v55; // esi
  __int16 v56; // ax
  __int16 v57; // bx
  int v58; // ecx
  unsigned int m; // ecx
  int v60; // eax
  int v61; // ebx
  int v62; // edx
  int v63; // eax
  int v64; // eax
  int v65; // ebx
  int v66; // edx
  unsigned int n; // eax
  int v68; // edx
  int v69; // ebx
  int v70; // eax
  unsigned int ii; // eax
  int v72; // edx
  int v73; // ebx
  int v74; // eax
  unsigned int jj; // eax
  int v76; // edx
  int v77; // ebx
  int v78; // eax
  int v79; // eax
  int v80; // edx
  int v81; // ebx
  int v82; // edx
  int v83; // eax
  int v84; // ebx
  int v85; // edx
  int v86; // ebx
  int v87; // ecx
  int v88; // esi
  __int64 v89; // rax
  int v90; // esi
  __int64 v91; // rax
  char v92; // bl
  int v93; // eax
  __int16 v94; // cx
  _BYTE *v95; // esi
  int result; // eax
  __int16 v97; // [esp-4h] [ebp-144h]
  __int16 v98; // [esp-4h] [ebp-144h]
  __int16 v99; // [esp-4h] [ebp-144h]
  char v100[256]; // [esp+0h] [ebp-140h] BYREF
  int v101; // [esp+100h] [ebp-40h]
  _BYTE *v102; // [esp+104h] [ebp-3Ch]
  int v103; // [esp+108h] [ebp-38h]
  int v104; // [esp+10Ch] [ebp-34h]
  char *v105; // [esp+110h] [ebp-30h]
  int v106; // [esp+114h] [ebp-2Ch]
  int v107; // [esp+118h] [ebp-28h]
  int v108; // [esp+11Ch] [ebp-24h]
  int v109; // [esp+120h] [ebp-20h]
  char v110; // [esp+124h] [ebp-1Ch]
  char v111; // [esp+128h] [ebp-18h]
  char v112; // [esp+12Ch] [ebp-14h]

  v112 = 0;
  if ( (*(_BYTE *)dword_AE408_AE3F8() & 0x10) != 0 )
  {
    *(_DWORD *)(dword_AE408_AE3F8() + 157) = dword_AC5D4_AC5C4;
    sub_43C70((char *)(dword_AE400_AE3F0() + 29715), 0xAu);
    v0 = dword_AE400_AE3F0();
    *(_DWORD *)(dword_AE408_AE3F8() + 157) = dword_AC5D4_AC5C4 - *(_DWORD *)(dword_AE408_AE3F8() + 157);
    v1 = (_BYTE *)(v0 + 29715);
    v111 = 0;
    v2 = (char *)(v0 + 14357);
    v109 = 0;
    for ( i = v0 + 13323; ; i += 2049 )
    {
      v6 = dword_AE400_AE3F0();
      if ( (unsigned __int16)v109 >= *(_WORD *)(dword_AE400_AE3F0() + 10) )
        break;
      if ( *v1 == 1 )
      {
        *(_BYTE *)(i + 6) = 1;
        if ( (unsigned __int16)v109 == *(__int16 *)(v6 + 8) )
        {
          if ( *(_BYTE *)(dword_AE408_AE3F8() + 29) )
          {
            v4 = (char *)(dword_AE408_AE3F8() + 61);
            v5 = v2;
          }
          else
          {
            v5 = v2;
            v4 = off_99B68[(unsigned __int16)v109];
          }
          qmemcpy(v5, v4, 0xCu);
          *(_BYTE *)(i + 1046) = 0;
        }
        v111 = 1;
      }
      v1 += 10;
      v2 += 2049;
      ++v109;
    }
    if ( v111 )
      sub_43C70((char *)(dword_AE400_AE3F0() + 13323), 0x801u);
  }
  v7 = dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8;
  v8 = dword_AE408_AE3F8();
  ++*(_DWORD *)(v7 + 13341);
  v9 = 1;
  ++*(_DWORD *)(v8 + 4);
  do
  {
    v10 = dword_AE400_AE3F0();
    v110 = (*(_DWORD *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13341) / (unsigned int)(__int16)v9) & 1;
    v11 = dword_AE408_AE3F8() + (__int16)v9++;
    *(_BYTE *)(v11 + 93) = v110;
  }
  while ( (__int16)v9 < 16 );
  v102 = (_BYTE *)(v10 + 29715);
  v106 = v10 + 13323;
  v108 = 0;
  v105 = (char *)(v10 + 14357);
  while ( 1 )
  {
    result = dword_AE400_AE3F0();
    if ( (unsigned __int16)v108 >= *(_WORD *)(dword_AE400_AE3F0() + 10) )
      return result;
    v12 = v106;
    v13 = v102;
    v14 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(v106 + 10);
    sub_3ED10(v102);
    *(_BYTE *)(v12 + 1099) = 0;
    switch ( *v13 )
    {
      case 1:
        v15 = dword_AE400_AE3F0();
        *(_BYTE *)(v12 + 6) = 1;
        if ( (unsigned __int16)v108 == *(__int16 *)(v15 + 8) )
        {
          if ( *(_BYTE *)(dword_AE408_AE3F8() + 29) )
            v16 = (char *)(dword_AE408_AE3F8() + 61);
          else
            v16 = off_99B68[(unsigned __int16)v108];
          qmemcpy(v105, v16, 0xCu);
          *(_BYTE *)(v106 + 1046) = 0;
        }
        goto LABEL_23;
      case 2:
        sub_3E050();
        if ( str_AE400_AE3F0->var_u16_8 == (unsigned __int16)v108 )
          *(_BYTE *)(v12 + 4) = 1;
        v97 = v108;
        *(_DWORD *)(v14 + 12) = -1;
        sub_43AA0(v97);
        *(_BYTE *)(v106 + 6) = 0;
        goto LABEL_150;
      case 3:
        goto LABEL_23;
      case 4:
        *(_BYTE *)(v12 + 5) ^= v13[1];
        goto LABEL_150;
      case 7:
        if ( (char)v13[1] + *(unsigned __int16 *)(v12 + 14) >= 0
          && (char)v13[1] + *(unsigned __int16 *)(v12 + 14) < *(unsigned __int16 *)(v12 + 16) - 1 )
        {
          *(_WORD *)(v12 + 14) += (char)v13[1];
        }
        goto LABEL_150;
      case 8:
        *(_WORD *)(v12 + 584) += (char)v13[1];
        goto LABEL_150;
      case 0xA:
        if ( (*(_BYTE *)dword_AE408_AE3F8() & 0x10) == 0 )
          sub_3E410_3E750(10000);
        goto LABEL_150;
      case 0xB:
        if ( (*(_BYTE *)dword_AE408_AE3F8() & 0x10) == 0 )
          sub_3E690(10000);
        goto LABEL_150;
      case 0xC:
        if ( (*(_BYTE *)dword_AE408_AE3F8() & 0x20) == 0 && (unsigned __int16)v108 == str_AE400_AE3F0->var_u16_8 )
        {
          v17 = (_BYTE *)dword_AE408_AE3F8();
          v18 = *(_BYTE *)dword_AE408_AE3F8();
          *(_DWORD *)(dword_AE408_AE3F8() + 36378) = 0;
          *v17 = v18 | 2;
        }
        goto LABEL_150;
      case 0xE:
        v112 = 1;
        goto LABEL_150;
      case 0xF:
        if ( *(_WORD *)(*(_DWORD *)(v14 + 160) + 50) )
          goto LABEL_23;
        if ( (*(_BYTE *)dword_AE408_AE3F8() & 0x10) != 0 )
          goto LABEL_45;
        *(_BYTE *)(v106 + 2) |= 0xCu;
LABEL_23:
        sub_45070(v106, v14);
        sub_3DFD0(v106, 0);
        goto LABEL_150;
      case 0x10:
        memset((void*)(dword_AE400_AE3F0() + 13323 + 2049 * str_AE400_AE3F0->var_u16_8 + 28 + 68 * (unsigned __int16)v108), 0, 68);
        sub_3DFD0(v12, 3);
        *(_WORD *)(v12 + 68 * (unsigned __int16)v108 + 92) = 32000;
        *(_WORD *)(v12 + 68 * (unsigned __int16)v108 + 94) = 1;
        goto LABEL_150;
      case 0x11:
        v24 = v13[1];
        if ( v24 == 8 )
        {
          v25 = strlen((const char *)(dword_AE400_AE3F0()
                                    + 13323
                                    + 2049 * str_AE400_AE3F0->var_u16_8
                                    + 28
                                    + 68 * (unsigned __int16)v108))
              + 1;
          if ( v25 != 1 )
            *(_BYTE *)(2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 68 * (unsigned __int16)v108 + v25 - 1 + 13350) = 0;
        }
        else if ( v24
               && strlen((const char *)(2049 * str_AE400_AE3F0->var_u16_8
                                      + dword_AE400_AE3F0()
                                      + 13323
                                      + 28
                                      + 68 * (unsigned __int16)v108)) < 0x3F )
        {
          sprintf(v100, "%c", (char)v102[1]);
          v26 = v100;
          v27 = (const char *)(dword_AE400_AE3F0()
                             + 13323
                             + 2049 * str_AE400_AE3F0->var_u16_8
                             + 28
                             + 68 * (unsigned __int16)v108);
          v28 = (char *)&v27[strlen(v27)];
          do
          {
            v29 = *v26;
            *v28 = *v26;
            if ( !v29 )
              break;
            v30 = v26[1];
            v26 += 2;
            v28[1] = v30;
            v28 += 2;
          }
          while ( v30 );
        }
        v31 = v106 + 68 * (unsigned __int16)v108;
        *(_WORD *)(v31 + 92) = 32000;
        *(_WORD *)(v31 + 94) = 1;
        goto LABEL_150;
      case 0x12:
        memset((void*)(68 * (unsigned __int16)v108 + 2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 13323 + 28), 0, 68);
        *(_WORD *)(2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 68 * (unsigned __int16)v108 + 13415) = 0;
        *(_WORD *)(2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 68 * (unsigned __int16)v108 + 13417) = 0;
        sub_3DFD0(v12, 0);
        goto LABEL_150;
      case 0x13:
        if ( (*(_BYTE *)(2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 68 * (unsigned __int16)v108 + 13351) == 81
           || *(_BYTE *)(2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 68 * (unsigned __int16)v108 + 13351) == 113)
          && ((v32 = *(_BYTE *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 68 * (unsigned __int16)v108 + 13352),
               v32 == 85)
           || v32 == 117)
          && ((v33 = *(_BYTE *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 68 * (unsigned __int16)v108 + 13353),
               v33 == 73)
           || v33 == 105)
          && ((v34 = *(_BYTE *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 68 * (unsigned __int16)v108 + 13354),
               v34 == 67)
           || v34 == 99)
          && ((v35 = *(_BYTE *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 68 * (unsigned __int16)v108 + 13355),
               v35 == 75)
           || v35 == 107) )
        {
          v36 = dword_AE400_AE3F0();
          v37 = v108;
          v38 = 68 * (unsigned __int16)v108;
          *(_WORD *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + v38 + 13415) = 0;
          *(_WORD *)(v36 + 2049 * *(__int16 *)(v36 + 8) + v38 + 13417) = 0;
          if ( v37 == *(__int16 *)(v36 + 8) )
            *(_BYTE *)(dword_AE408_AE3F8() + 1) |= 0x80u;
        }
        else
        {
          v39 = dword_AE400_AE3F0();
          v40 = 68 * (unsigned __int16)v108;
          *(_WORD *)(v40 + dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13415) = 200;
          *(_WORD *)(v40 + 2049 * *(__int16 *)(v39 + 8) + v39 + 13417) = 3;
        }
        sub_3DFD0(v106, 0);
        goto LABEL_150;
      case 0x14:
        sub_3DFD0(v12, v13[1]);
        goto LABEL_150;
      case 0x15:
        if ( (char)v13[1] != -1 )
        {
          *(_WORD *)(*(_DWORD *)(v14 + 160) + 940) = (char)v13[1];
          sub_55370_558A0(0, *(_WORD *)(v12 + 7), 14);
          sub_3DFD0(v12, 0);
        }
        goto LABEL_150;
      case 0x16:
        if ( (char)v13[1] != -1 )
        {
          *(_WORD *)(*(_DWORD *)(v14 + 160) + 944) = (char)v13[1];
          sub_55370_558A0(0, *(_WORD *)(v12 + 7), 14);
          sub_3DFD0(v12, 0);
        }
        goto LABEL_150;
      case 0x17:
        if ( (char)v13[2] != -1 )
        {
          v41 = v102;
          for ( j = 0; j < 24; ++j )
          {
            v43 = *(_DWORD *)(v14 + 160) + j;
            if ( v41[2] == *(_BYTE *)(v43 + 772) )
              *(_BYTE *)(v43 + 772) = -1;
          }
          *(_BYTE *)((char)v102[1] + *(_DWORD *)(v14 + 160) + 772) = v102[2];
          sub_55370_558A0(0, *(_WORD *)(v106 + 7), 14);
        }
        goto LABEL_150;
      case 0x18:
        sub_3E050();
        v44 = *(_DWORD *)(v14 + 160);
        v45 = v44 + (char)v13[1];
        if ( *(char *)(v45 + 772) != -1 )
        {
          *(_WORD *)(v44 + 940) = *(char *)(v45 + 772);
          *(_BYTE *)(*(char *)(164
                             * *(_DWORD *)(*(_DWORD *)(v14 + 160)
                                         + 4 * *(char *)((char)v13[1] + *(_DWORD *)(v14 + 160) + 772)
                                         + 532)
                             + dword_AE400_AE3F0()
                             + 29860)
                   + *(_DWORD *)(v14 + 160)
                   + 844) = 32;
        }
        goto LABEL_87;
      case 0x19:
        sub_3E050();
        v46 = *(_DWORD *)(v14 + 160);
        v47 = v46 + (char)v13[1];
        if ( *(char *)(v47 + 772) != -1 )
        {
          *(_WORD *)(v46 + 944) = *(char *)(v47 + 772);
          *(_BYTE *)(*(char *)(164
                             * *(_DWORD *)(*(_DWORD *)(v14 + 160)
                                         + 4 * *(char *)((char)v13[1] + *(_DWORD *)(v14 + 160) + 772)
                                         + 532)
                             + dword_AE400_AE3F0()
                             + 29860)
                   + *(_DWORD *)(v14 + 160)
                   + 844) = 32;
        }
LABEL_87:
        sub_55370_558A0(0, *(_WORD *)(v106 + 7), 14);
        goto LABEL_150;
      case 0x1A:
        v48 = 0;
        for ( k = dword_AE400_AE3F0(); v48 < *(_WORD *)(dword_AE400_AE3F0() + 10); k = dword_AE400_AE3F0() )
        {
          v50 = 2049 * v48 + k;
          if ( *(_BYTE *)(v50 + 13329) )
          {
            *(_BYTE *)(v50 + 13327) = 1;
            sub_43AA0(v48);
          }
          ++v48;
        }
        goto LABEL_150;
      case 0x1B:
        sub_3E050();
        v98 = v108;
        *(_WORD *)(v12 + 2) = 10;
        sub_43AA0(v98);
        goto LABEL_150;
      case 0x1C:
        v99 = v108;
        *(_WORD *)(v12 + 2) = 12;
        sub_43AA0(v99);
        goto LABEL_150;
      case 0x1D:
LABEL_45:
        v19 = (char *)dword_AE238_AE228[62];
        v20 = (char *)(2049 * str_AE400_AE3F0->var_u16_8
                     + dword_AE400_AE3F0()
                     + 13323
                     + 28
                     + 68 * *(__int16 *)(*(_DWORD *)(v14 + 160) + 48));
        do
        {
          v21 = *v19;
          *v20 = *v19;
          if ( !v21 )
            break;
          v22 = v19[1];
          v19 += 2;
          v20[1] = v22;
          v20 += 2;
        }
        while ( v22 );
        v23 = dword_AE400_AE3F0();
        *(_WORD *)(68 * *(__int16 *)(*(_DWORD *)(v14 + 160) + 48)
                 + dword_AE400_AE3F0()
                 + 2049 * str_AE400_AE3F0->var_u16_8
                 + 13415) = 100;
        *(_WORD *)(v23 + 2049 * *(__int16 *)(v23 + 8) + 68 * *(__int16 *)(*(_DWORD *)(v14 + 160) + 48) + 13417) = 0;
        *(_WORD *)(v106 + 2) = 8;
        sub_43AA0(v108);
        *(_BYTE *)(v106 + 6) = 0;
        goto LABEL_150;
      case 0x1E:
        sub_3E050();
        if ( *(_BYTE *)(v14 + 70) || *(int *)(v14 + 12) <= 0 )
          goto LABEL_150;
        break;
      default:
        goto LABEL_150;
    }
    switch ( v13[1] )
    {
      case 1:
        v103 = 0;
        v104 = 0;
        do
        {
          if ( !*(_WORD *)(v103 + *(_DWORD *)(v14 + 160) + 676) )
          {
            v51 = v104;
            v52 = 0;
            v101 = 0;
            while ( 1 )
            {
              if ( !*(_DWORD *)(*(_DWORD *)(v14 + 160) + v52 + 532) )
              {
                v53 = (*(int (**)(int))((char *)&off_987DE + v51))(v14 + 72);
                v54 = v53;
                if ( v53 )
                  break;
              }
              v52 += 4;
              ++v101;
              if ( v52 >= 96 )
                goto LABEL_110;
            }
            *(_DWORD *)(v53 + 16) |= (unsigned int)&loc_40000 + 1;
            v55 = dword_AE400_AE3F0() + 29795;
            v107 = 164;
            v56 = (v14 - (dword_AE400_AE3F0() + 29795)) / 164;
            *(_DWORD *)(v54 + 132) = 0;
            *(_WORD *)(v54 + 42) = v56;
            *(_DWORD *)(*(_DWORD *)(v14 + 160) + v52 + 532) = (v54 - v55) / 164;
            v57 = 0;
            while ( 1 )
            {
              v58 = *(_DWORD *)(v14 + 160) + v57;
              if ( *(char *)(v58 + 772) == -1 )
                break;
              if ( ++v57 >= 10 )
                goto LABEL_110;
            }
            *(_BYTE *)(v58 + 772) = v101;
          }
LABEL_110:
          v103 += 2;
          v104 += 14;
        }
        while ( v103 != 48 );
        for ( m = dword_AE400_AE3F0() + 29959; ; m += 164 )
        {
          v60 = dword_AE400_AE3F0();
          if ( m >= dword_AE400_AE3F0() + 193795 )
            break;
          if ( *(_BYTE *)(m + 64) == 11 )
            *(_BYTE *)(m + 16) &= ~1u;
        }
        v61 = (unsigned __int16)v108;
        if ( str_AE400_AE3F0->var_u16_8 == (unsigned __int16)v108 )
        {
          v62 = 68 * (unsigned __int16)v108;
          *(_WORD *)(dword_AE400_AE3F0() + 2049 * (unsigned __int16)v108 + v62 + 13415) = 100;
          *(_WORD *)(v62 + v60 + 2049 * *(__int16 *)(v60 + 8) + 13417) = 0;
          strcpy((char *)(68 * v61 + 2049 * *(__int16 *)(v60 + 8) + v60 + 13351), ".. CHEAT: access all spells");
        }
        break;
      case 2:
        v63 = sub_373F0_377B0(v14 + 72, 10, 39);
        if ( v63 )
        {
          *(_DWORD *)(v63 + 140) = 100000;
          *(_WORD *)(v63 + 144) = (v14 - (dword_AE400_AE3F0() + 29795)) / 164;
        }
        HIWORD(v65) = 0;
        *(_DWORD *)(v14 + 140) = *(_DWORD *)(v14 + 136);
        v64 = dword_AE400_AE3F0();
        LOWORD(v65) = v108;
        if ( str_AE400_AE3F0->var_u16_8 == (unsigned __int16)v108 )
        {
          v66 = 68 * v65;
          *(_WORD *)(dword_AE400_AE3F0() + 2049 * v65 + v66 + 13415) = 100;
          *(_WORD *)(v66 + v64 + 2049 * *(__int16 *)(v64 + 8) + 13417) = 0;
          strcpy((char *)(68 * v65 + 2049 * *(__int16 *)(v64 + 8) + v64 + 13351), ".. CHEAT: more mana");
        }
        break;
      case 3:
        for ( n = *(_DWORD *)(dword_AE408_AE3F8() + 36462); ; n = *(_DWORD *)n )
        {
          v68 = dword_AE400_AE3F0();
          if ( n <= dword_AE400_AE3F0() + 29795 )
            break;
          if ( *(_WORD *)(n + 24) != *(_WORD *)(v14 + 24) && *(_BYTE *)(n + 65) <= 1u )
            *(_DWORD *)(n + 12) = -1;
        }
        v69 = (unsigned __int16)v108;
        if ( str_AE400_AE3F0->var_u16_8 == (unsigned __int16)v108 )
        {
          v70 = 68 * (unsigned __int16)v108;
          *(_WORD *)(dword_AE400_AE3F0() + 2049 * (unsigned __int16)v108 + v70 + 13415) = 100;
          *(_WORD *)(v68 + 2049 * *(__int16 *)(v68 + 8) + v70 + 13417) = 0;
          strcpy((char *)(2049 * *(__int16 *)(v68 + 8) + v68 + 68 * v69 + 13351), ".. CHEAT: destroy all players");
        }
        break;
      case 4:
        for ( ii = *(_DWORD *)(dword_AE408_AE3F8() + 36462); ; ii = *(_DWORD *)ii )
        {
          v72 = dword_AE400_AE3F0();
          if ( ii <= dword_AE400_AE3F0() + 29795 )
            break;
          if ( *(_WORD *)(ii + 24) != *(_WORD *)(v14 + 24) && *(_BYTE *)(ii + 65) == 2 )
            *(_DWORD *)(ii + 12) = -1;
        }
        v73 = (unsigned __int16)v108;
        if ( str_AE400_AE3F0->var_u16_8 == (unsigned __int16)v108 )
        {
          v74 = 68 * (unsigned __int16)v108;
          *(_WORD *)(dword_AE400_AE3F0() + 2049 * (unsigned __int16)v108 + v74 + 13415) = 100;
          *(_WORD *)(v72 + 2049 * *(__int16 *)(v72 + 8) + v74 + 13417) = 0;
          strcpy((char *)(2049 * *(__int16 *)(v72 + 8) + v72 + 68 * v73 + 13351), ".. CHEAT: destroy all castles");
        }
        break;
      case 5:
        for ( jj = *(_DWORD *)(dword_AE408_AE3F8() + 36462); ; jj = *(_DWORD *)jj )
        {
          v76 = dword_AE400_AE3F0();
          if ( jj <= dword_AE400_AE3F0() + 29795 )
            break;
          if ( *(_WORD *)(jj + 24) != *(_WORD *)(v14 + 24) && *(_BYTE *)(jj + 65) == 3 )
            *(_DWORD *)(jj + 12) = -1;
        }
        v77 = (unsigned __int16)v108;
        if ( str_AE400_AE3F0->var_u16_8 == (unsigned __int16)v108 )
        {
          v78 = 68 * (unsigned __int16)v108;
          *(_WORD *)(dword_AE400_AE3F0() + 2049 * (unsigned __int16)v108 + v78 + 13415) = 100;
          *(_WORD *)(v76 + 2049 * *(__int16 *)(v76 + 8) + v78 + 13417) = 0;
          strcpy((char *)(2049 * *(__int16 *)(v76 + 8) + v76 + 68 * v77 + 13351), ".. CHEAT: destroy all balloons");
        }
        break;
      case 6:
        HIWORD(v80) = 0;
        *(_DWORD *)(v14 + 12) = *(_DWORD *)(v14 + 8);
        v79 = dword_AE400_AE3F0();
        LOWORD(v80) = v108;
        if ( str_AE400_AE3F0->var_u16_8 == (unsigned __int16)v108 )
        {
          v81 = 2049 * v80;
          v82 = 68 * v80;
          *(_WORD *)(v82 + dword_AE400_AE3F0() + v81 + 13415) = 100;
          *(_WORD *)(v82 + v79 + 2049 * *(__int16 *)(v79 + 8) + 13417) = 0;
          strcpy((char *)(v82 + 2049 * *(__int16 *)(v79 + 8) + v79 + 13351), ".. CHEAT: heal");
        }
        break;
      case 7:
        sub_194F0();
        v83 = dword_AE400_AE3F0();
        v84 = (unsigned __int16)v108;
        if ( str_AE400_AE3F0->var_u16_8 == (unsigned __int16)v108 )
        {
          v85 = 68 * (unsigned __int16)v108;
          *(_WORD *)(dword_AE400_AE3F0() + 2049 * (unsigned __int16)v108 + v85 + 13415) = 100;
          *(_WORD *)(v85 + v83 + 2049 * *(__int16 *)(v83 + 8) + 13417) = 0;
          strcpy((char *)(68 * v84 + 2049 * *(__int16 *)(v83 + 8) + v83 + 13351), ".. CHEAT: Kill all creatures");
        }
        break;
      default:
        break;
    }
LABEL_150:
    v86 = dword_AE400_AE3F0();
    v87 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(v106 + 10);
    v88 = *(_DWORD *)(v87 + 160);
    v89 = 2 * (char)v102[3] - *(__int16 *)(v88 + 327);
    *(_WORD *)(v88 + 4) = (int)(v89 - (__CFSHL__(HIDWORD(v89), 2) + 4 * HIDWORD(v89))) >> 2;
    v90 = *(_DWORD *)(v87 + 160);
    v91 = 2 * (char)v102[4] - *(__int16 *)(v90 + 329);
    *(_WORD *)(v90 + 6) = (int)(v91 - (__CFSHL__(HIDWORD(v91), 2) + 4 * HIDWORD(v91))) >> 2;
    **(_DWORD **)(v87 + 160) = (unsigned __int8)v102[5];
    if ( *(_BYTE *)(v86 + 2049 * *(__int16 *)(v86 + 8) + 13327) || v112 )
    {
      v92 = v112;
      sub_3EF90();
      if ( v92 )
      {
        v93 = dword_AE408_AE3F8();
        v94 = *(_WORD *)(dword_AE408_AE3F8() + 13) + 1;
        *(_BYTE *)dword_AE408_AE3F8() &= ~2u;
        *(_WORD *)(v93 + 13) = v94;
      }
    }
    sub_41E60(v106, 164 * *(unsigned __int16 *)(v106 + 10) + dword_AE400_AE3F0() + 29795);
    v95 = v102;
    memset(v102, 0, 10);
    v102 = v95 + 10;
    v105 += 2049;
    v106 += 2049;
    ++v108;
  }
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 987DE: using guessed type int (*off_987DE)(int);
// 99B68: using guessed type char *off_99B68[8];
// AC5C4: using guessed type int dword_AC5D4_AC5C4;
// AE320: using guessed type int dword_AE320;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (0003DFD0) --------------------------------------------------------
char sub_3DFD0(int a1, char a2)
{
  *(_BYTE *)(a1 + 1098) = a2;
  if ( *(_WORD *)(a1 + 7) == *(_WORD *)(dword_AE400_AE3F0() + 8) )
  {
    if ( *(_BYTE *)(a1 + 1098) == 2 )
    {
      sub_5C05C_5C56C(begPointersTab_AE450_AE440_26C450_26C440 + 6);
      sub_31A00_31A40();
    }
    else
    {
      sub_5C05C_5C56C(begPointersTab_AE450_AE440_26C450_26C440);
      sub_59720_59C30();
      sub_31A60_31AA0();
    }
    sub_55370_558A0(0, *(_WORD *)(a1 + 7), 14);
  }
  return sub_3E050();
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE440: using guessed type int begPointersTab_AE450_AE440_26C450_26C440;

//----- (0003E050) --------------------------------------------------------
char sub_3E050()
{
  int v0; // eax

  LOBYTE(v0) = dword_AE408_AE3F8();
  if ( (*(_BYTE *)(dword_AE408_AE3F8() + 4) & 7) == 0 )
  {
    LOBYTE(v0) = *(_BYTE *)(dword_AE408_AE3F8() + 24) & 3;
    if ( (_BYTE)v0 == 1 )
    {
      LOWORD(v0) = sub_11050();
      if ( !v0 )
      {
        v0 = 2049 * str_AE400_AE3F0->var_u16_8;
        *(_BYTE *)(dword_AE400_AE3F0() + v0 + 13327) = 2;
      }
    }
  }
  return v0;
}
// 3E06C: variable 'v0' is possibly undefined
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (0003E090) --------------------------------------------------------
int sub_3E090()
{
  int v0; // ebx
  int v1; // edi
  int v2; // eax
  char *v3; // edi
  char *v4; // esi
  char v5; // al
  char v6; // al
  __int16 v7; // ax
  int v8; // esi
  int v9; // esi
  _BYTE *v10; // eax
  int v11; // esi
  __int16 v12; // dx
  char v13; // cl
  int v14; // eax
  int v15; // edi
  int result; // eax
  char *v17; // [esp+0h] [ebp-44h]
  int v18; // [esp+4h] [ebp-40h]
  int v19; // [esp+Ch] [ebp-38h]
  int v20; // [esp+10h] [ebp-34h]
  int v21; // [esp+14h] [ebp-30h]
  int v22; // [esp+1Ch] [ebp-28h]
  _BYTE *v23; // [esp+20h] [ebp-24h]
  int v24; // [esp+24h] [ebp-20h]
  int v25; // [esp+28h] [ebp-1Ch]
  unsigned __int16 v26; // [esp+2Ch] [ebp-18h]
  unsigned __int16 v27; // [esp+30h] [ebp-14h]

  v23 = (_BYTE *)(dword_AE400_AE3F0() + 29715);
  v0 = dword_AE400_AE3F0() + 13323;
  v17 = (char *)(dword_AE400_AE3F0() + 15318);
  v18 = dword_AE400_AE3F0() + 14357;
  v27 = 0;
  v22 = dword_AE400_AE3F0() + 13419;
  do
  {
    memset(v23, 0, 10);
    v1 = dword_AE400_AE3F0() + 11274;
    qmemcpy((void *)(dword_AE400_AE3F0() + 11274), (const void *)v0, 0x800u);
    *(_BYTE *)(v1 + 2048) = *(_BYTE *)(v0 + 2048);
    memset((void*)v0, 0, 2049);
    qmemcpy(v17, (const void *)(dword_AE400_AE3F0() + 13269), 0x18u);
    v2 = dword_AE400_AE3F0();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)(dword_AE400_AE3F0() + 11298);
    *v23 = 1;
    *(_WORD *)(v0 + 7) = v27;
    if ( (*(_BYTE *)dword_AE408_AE3F8() & 0x10) == 0 && v27 != *(__int16 *)(v2 + 8) )
      *(_BYTE *)(v0 + 9) = 1;
    *(_WORD *)(v0 + 16) = 32;
    *(_WORD *)(v0 + 14) = *(_WORD *)(v0 + 16) - 1;
    *(_WORD *)(v0 + 584) = 128;
    v3 = (char *)v18;
    v4 = off_99B68[v27];
    do
    {
      v5 = *v4;
      *v3 = *v4;
      if ( !v5 )
        break;
      v6 = v4[1];
      v4 += 2;
      v3[1] = v6;
      v3 += 2;
    }
    while ( v6 );
    v7 = 0;
    while ( 1 )
    {
      v8 = v7;
      if ( v7 >= (int)*(unsigned __int16 *)(v0 + 16) )
        break;
      ++v7;
      *(_DWORD *)(14 * v8 + v0 + 586) = *(_DWORD *)(v0 + 572);
      *(_DWORD *)(14 * v8 + v0 + 590) = *(_DWORD *)(v0 + 576);
      *(_DWORD *)(14 * v8 + v0 + 594) = *(_DWORD *)(v0 + 580);
      *(_WORD *)(14 * v8 + v0 + 598) = *(_WORD *)(v0 + 584);
    }
    v9 = v0;
    do
    {
      v9 += 4;
      *(_DWORD *)(v9 + 1631) = -1;
    }
    while ( v9 != v22 );
    *(_WORD *)(v0 + 2043) = 255;
    v10 = (_BYTE *)dword_AE408_AE3F8();
    *(_WORD *)(v0 + 2047) = 255;
    if ( (*v10 & 0x10) != 0 )
      v26 = 0;
    else
      v26 = v27;
    v19 = v0;
    v24 = v0;
    v20 = v0;
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = 0;
      v14 = (unsigned __int8)byte_99B88[v11];
      *(_BYTE *)(v19 + 1875) = -1;
      v21 = v0 + v14;
      if ( *(_BYTE *)(v0 + 9) == 1 )
      {
        v15 = dword_AE400_AE3F0();
        *(_BYTE *)(v21 + 1899) = *((_BYTE *)&loc_38646 + 216 * v26 + v14 + dword_AE400_AE3F0() + 1);
        if ( byte_385E3[216 * v27 + v15 + v14] && *(_BYTE *)(v21 + 1899) )
          goto LABEL_27;
      }
      else
      {
        v25 = v14 + 216 * v26 + dword_AE400_AE3F0();
        if ( *((_BYTE *)&loc_38646 + v25 + 1) != 1 )
          goto LABEL_28;
        if ( (*(_BYTE *)dword_AE408_AE3F8() & 0x10) == 0 )
        {
          if ( !*(_BYTE *)(v21 + 1995) )
            goto LABEL_28;
LABEL_27:
          v13 = 1;
          goto LABEL_28;
        }
        if ( byte_385E3[v25] && *((_BYTE *)&loc_38646 + v25 + 1) )
          goto LABEL_27;
      }
LABEL_28:
      if ( v13 )
      {
        *(_DWORD *)(v24 + 1635) = v14;
        if ( *(_WORD *)(v0 + 2043) == 255 )
        {
          *(_WORD *)(v0 + 2043) = v12;
        }
        else if ( *(_WORD *)(v0 + 2047) == 255 )
        {
          *(_WORD *)(v0 + 2047) = v12;
        }
        *(_BYTE *)(v20 + 1875) = v12;
        ++v20;
        ++v12;
        v24 += 4;
      }
      result = v19 + 1;
      ++v11;
      ++v19;
    }
    while ( v11 < 24 );
    v0 += 2049;
    v23 += 10;
    v17 += 2049;
    v18 += 2049;
    v22 += 2049;
    ++v27;
  }
  while ( v27 < 8u );
  return result;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 99B68: using guessed type char *off_99B68[8];
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (0003E440) --------------------------------------------------------
char sub_3E440(__int16 a1, void *a2)
{
  int v2; // edi
  FILE* v3; // ebx
  FILE* v5; // esi
  int v6; // ebp
  int v7; // edi
  int v8; // edi
  char v9[80]; // [esp+0h] [ebp-50h] BYREF

  v2 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  if ( a1 < 1000 )
  {
    sprintf(v9, "%s%s/%s/ddlevels.dat", "C:", "\\carpet.cd", "levels");
    v3 = DataFileIO::CreateOrOpenFile((char*)v9, 512);
    if ( v3 == nullptr )
    {
      v3 = DataFileIO::CreateOrOpenFile((char*)aLevelsDdlevels, 512);
      if ( v3 == nullptr )
        return 0;
    }
    sprintf(v9, "%s%s/%s/ddlevels.tab", "C:", "\\carpet.cd", "levels");
    v5 = DataFileIO::CreateOrOpenFile((char*)v9, 512);
    if ( v5 == nullptr )
    {
      v5 = DataFileIO::CreateOrOpenFile((char*)aLevelsDdlevels_0, 512);
      if ( v5 == nullptr)
      {
        DataFileIO::Close(v3);
        return 0;
      }
    }
    DataFileIO::Read(v5, (uint8_t*)v2, 4000);
    v6 = *(_DWORD *)(v2 + 4 * a1);
    v7 = *(_DWORD *)(v2 + 4 * a1 + 4);
    DataFileIO::Close(v5);
    v8 = v7 - v6;
    if ( DataFileIO::FileLengthBytes )
    {
      sub_62B30_63040((int)v3, v6, 0);
      DataFileIO::Read(v3, (uint8_t*)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, v8);
      if ( sub_62B60_63070(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC) < 0 )
      {
        printf("ERROR decompressing levels.dat\n");
        return 0;
      }
      qmemcpy(a2, (const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x979Cu);
      memset((void*)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0, 38812);
    }
    DataFileIO::Close(v3);
  }
  return 1;
}
// 5D113: using guessed type _DWORD printf(const char *, ...);
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 62FF2: using guessed type _DWORD DataFileIO::FileLengthBytes(_DWORD);
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;

//----- (0003E690) --------------------------------------------------------
char sub_3E690(__int16 a1)
{
  char result; // al
  int v2; // ebx
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  char v5[64]; // [esp+0h] [ebp-70h] BYREF
  int v6; // [esp+40h] [ebp-30h]
  int v7; // [esp+44h] [ebp-2Ch]
  int v8; // [esp+48h] [ebp-28h]
  int v9; // [esp+4Ch] [ebp-24h]
  int v10; // [esp+50h] [ebp-20h]
  int v11; // [esp+54h] [ebp-1Ch]
  int v12; // [esp+58h] [ebp-18h]
  int v13; // [esp+5Ch] [ebp-14h]
  int v14; // [esp+60h] [ebp-10h]

  result = sub_3E7A0(a1);
  if ( result )
  {
    sprintf(v5, "%s/gam%05d.dat", aMovie_0, a1);
    v2 = *(_DWORD *)dword_AE400_AE3F0();
    v12 = *(_DWORD *)(dword_AE400_AE3F0() + 8597);
    v13 = *(_DWORD *)(dword_AE400_AE3F0() + 8601);
    v14 = *(_DWORD *)(dword_AE400_AE3F0() + 8605);
    v9 = *(_DWORD *)(dword_AE400_AE3F0() + 8609);
    v10 = *(_DWORD *)(dword_AE400_AE3F0() + 8613);
    v11 = *(_DWORD *)(dword_AE400_AE3F0() + 8617);
    v6 = *(_DWORD *)(dword_AE400_AE3F0() + 8621);
    v7 = *(_DWORD *)(dword_AE400_AE3F0() + 8625);
    v8 = *(_DWORD *)(dword_AE400_AE3F0() + 8629);
    sub_3EEA0_3F1E0(v5, (uint8_t*)dword_AE400_AE3F0());
    v3 = (_DWORD *)dword_AE400_AE3F0();
    v4 = (_DWORD *)(dword_AE400_AE3F0() + 8597);
    *(_DWORD *)(dword_AE400_AE3F0() + 8597) = v12;
    *++v4 = v13;
    v4[1] = v14;
    *(_DWORD *)((char *)v3 + 8609) = v9;
    *(_DWORD *)((char *)v3 + 8613) = v10;
    *(_DWORD *)((char *)v3 + 8617) = v11;
    *(_DWORD *)((char *)v3 + 8621) = v6;
    *(_DWORD *)((char *)v3 + 8625) = v7;
    *(_DWORD *)((char *)v3 + 8629) = v8;
    *v3 = v2;
    sub_419F0();
    sub_37220_375E0();
    *(_DWORD *)(dword_AE400_AE3F0() + 4593) = -1;
    return 1;
  }
  return result;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (0003E750) --------------------------------------------------------
void sub_3E410_3E750(__int16 a1)
{
  char v2[64]; // [esp+0h] [ebp-40h] BYREF

  sprintf(v2, "%s/gam%05d.dat", aMovie_0, a1);
  //fix!!! sub_62E60_63370((int)v2, dword_AE400_AE3F0(), (int)byte_38D09) == (_DWORD)byte_38D09;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (0003E7A0) --------------------------------------------------------
char sub_3E7A0(__int16 a1)
{
  FILE* v1; // eax
  char v3[64]; // [esp+0h] [ebp-40h] BYREF

  sprintf(v3, "%s/gam%05d.dat", aMovie_0, a1);
  v1 = DataFileIO::CreateOrOpenFile((char*)v3, 512);
  if ( v1 == nullptr )
    return 0;
  DataFileIO::Close(v1);
  return 1;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);

//----- (0003E7F0) --------------------------------------------------------
char sub_3E7F0(__int16 a1)
{
  char result; // al
  FILE* v2; // ebx
  char v3[68]; // [esp+0h] [ebp-44h] BYREF

  result = sub_3E980(a1);
  if ( result )
  {
    sprintf(v3, "%s/map%05d.dat", aMovie_0, a1);
    v2 = DataFileIO::CreateOrOpenFile((char*)v3, 512);
    DataFileIO::Read(v2, (uint8_t*)mapTerrainType_CC1E0_CC1D0, (int)sub_10000);
    DataFileIO::Read(v2, (uint8_t*)mapHeightmap_DC1E0_DC1D0, (int)sub_10000);
    DataFileIO::Read(v2, (uint8_t*)mapShading_EC1E0_EC1D0, (int)sub_10000);
    DataFileIO::Read(v2, (uint8_t*)mapAngle_FC1E0_FC1D0, (int)sub_10000);
    DataFileIO::Read(v2, (uint8_t*)mapEntityIndex_10C1E0_10C1D0, (int)&loc_1FFFE + 2);
    DataFileIO::Read(v2, (uint8_t*)byte_B5D30, 4802);
    DataFileIO::Close(v2);
    return 1;
  }
  return result;
}
// 10000: using guessed type void sub_10000();
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 10C1D0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7961];

//----- (0003E8C0) --------------------------------------------------------
char sub_3E8C0(__int16 a1)
{
  FILE* v1; // ebx
  char v3[68]; // [esp+0h] [ebp-44h] BYREF

  sprintf(v3, "%s/map%05d.dat", aMovie_0, a1);
  v1 = DataFileIO::CreateOrOpenFile((char*)v3, 546);
  FileWrite_62ED0_633E0(v1, (uint8_t*)mapTerrainType_CC1E0_CC1D0, (int)sub_10000);
  FileWrite_62ED0_633E0(v1, (uint8_t*)mapHeightmap_DC1E0_DC1D0, (int)sub_10000);
  FileWrite_62ED0_633E0(v1, (uint8_t*)mapShading_EC1E0_EC1D0, (int)sub_10000);
  FileWrite_62ED0_633E0(v1, (uint8_t*)mapAngle_FC1E0_FC1D0, (int)sub_10000);
  FileWrite_62ED0_633E0(v1, (uint8_t*)mapEntityIndex_10C1E0_10C1D0, (int)&loc_1FFFE + 2);
  FileWrite_62ED0_633E0(v1, (uint8_t*)byte_B5D30, 4802);
  DataFileIO::Close(v1);
  return 0;
}
// 10000: using guessed type void sub_10000();
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 10C1D0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7961];

//----- (0003E980) --------------------------------------------------------
char sub_3E980(__int16 a1)
{
  FILE* v1; // eax
  char v3[64]; // [esp+0h] [ebp-40h] BYREF

  sprintf(v3, "%s/map%05d.dat", aMovie_0, a1);
  v1 = DataFileIO::CreateOrOpenFile((char*)v3, 512);
  if ( v1 == nullptr )
    return 0;
  DataFileIO::Close(v1);
  return 1;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);

//----- (0003E9D0) --------------------------------------------------------
char sub_3E690_3E9D0(__int16 a1)
{
  char result; // al
  int v2; // ebx
  _DWORD *v3; // eax
  _DWORD *v4; // edi
  char v5[64]; // [esp+0h] [ebp-70h] BYREF
  int v6; // [esp+40h] [ebp-30h]
  int v7; // [esp+44h] [ebp-2Ch]
  int v8; // [esp+48h] [ebp-28h]
  int v9; // [esp+4Ch] [ebp-24h]
  int v10; // [esp+50h] [ebp-20h]
  int v11; // [esp+54h] [ebp-1Ch]
  int v12; // [esp+58h] [ebp-18h]
  int v13; // [esp+5Ch] [ebp-14h]
  int v14; // [esp+60h] [ebp-10h]

  result = sub_3EAE0(a1);
  if ( result )
  {
    sprintf(v5, "c:/CARPET.CD/%s/gam%05d.dat", "save", a1);
    v2 = *(_DWORD *)dword_AE400_AE3F0();
    v12 = *(_DWORD *)(dword_AE400_AE3F0() + 8597);
    v13 = *(_DWORD *)(dword_AE400_AE3F0() + 8601);
    v14 = *(_DWORD *)(dword_AE400_AE3F0() + 8605);
    v9 = *(_DWORD *)(dword_AE400_AE3F0() + 8609);
    v10 = *(_DWORD *)(dword_AE400_AE3F0() + 8613);
    v11 = *(_DWORD *)(dword_AE400_AE3F0() + 8617);
    v6 = *(_DWORD *)(dword_AE400_AE3F0() + 8621);
    v7 = *(_DWORD *)(dword_AE400_AE3F0() + 8625);
    v8 = *(_DWORD *)(dword_AE400_AE3F0() + 8629);
    sub_3EEA0_3F1E0(v5, (uint8_t*)dword_AE400_AE3F0());
    v3 = (_DWORD *)dword_AE400_AE3F0();
    v4 = (_DWORD *)(dword_AE400_AE3F0() + 8597);
    *(_DWORD *)(dword_AE400_AE3F0() + 8597) = v12;
    *++v4 = v13;
    v4[1] = v14;
    *(_DWORD *)((char *)v3 + 8609) = v9;
    *(_DWORD *)((char *)v3 + 8613) = v10;
    *(_DWORD *)((char *)v3 + 8617) = v11;
    *(_DWORD *)((char *)v3 + 8621) = v6;
    *(_DWORD *)((char *)v3 + 8625) = v7;
    *(_DWORD *)((char *)v3 + 8629) = v8;
    *v3 = v2;
    sub_419F0();
    sub_37220_375E0();
    *(_DWORD *)(dword_AE400_AE3F0() + 4593) = -1;
    return 1;
  }
  return result;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (0003EA90) --------------------------------------------------------
void sub_3E750_3EA90(__int16 a1)
{
  char v2[64]; // [esp+0h] [ebp-40h] BYREF

  sprintf(v2, "c:/CARPET.CD/%s/gam%05d.dat", "save", a1);
  //fix!!! sub_62E60_63370((int)v2, dword_AE400_AE3F0(), (int)byte_38D09) == (_DWORD)byte_38D09;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (0003EAE0) --------------------------------------------------------
char sub_3EAE0(__int16 a1)
{
  FILE* v1; // eax
  char v3[64]; // [esp+0h] [ebp-40h] BYREF

  sprintf(v3, "c:/CARPET.CD/%s/gam%05d.dat", "save", a1);
  v1 = DataFileIO::CreateOrOpenFile((char*)v3, 512);
  if ( v1 == nullptr )
    return 0;
  DataFileIO::Close(v1);
  return 1;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);

//----- (0003EB30) --------------------------------------------------------
char sub_3E7F0_3EB30(__int16 a1)
{
  char result; // al
  FILE* v2; // ebx
  char v3[68]; // [esp+0h] [ebp-44h] BYREF

  result = sub_3ECC0(a1);
  if ( result )
  {
    sprintf(v3, "c:/CARPET.CD/%s/map%05d.dat", "save", a1);
    v2 = DataFileIO::CreateOrOpenFile((char*)v3, 512);
    DataFileIO::Read(v2, (uint8_t*)mapTerrainType_CC1E0_CC1D0, (int)sub_10000);
    DataFileIO::Read(v2, (uint8_t*)mapHeightmap_DC1E0_DC1D0, (int)sub_10000);
    DataFileIO::Read(v2, (uint8_t*)mapShading_EC1E0_EC1D0, (int)sub_10000);
    DataFileIO::Read(v2, (uint8_t*)mapAngle_FC1E0_FC1D0, (int)sub_10000);
    DataFileIO::Read(v2, (uint8_t*)mapEntityIndex_10C1E0_10C1D0, (int)&loc_1FFFE + 2);
    DataFileIO::Read(v2, (uint8_t*)byte_B5D30, 4802);
    DataFileIO::Close(v2);
    return 1;
  }
  return result;
}
// 10000: using guessed type void sub_10000();
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 10C1D0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7961];

//----- (0003EC00) --------------------------------------------------------
char sub_3E8C0_3EC00(__int16 a1)
{
  FILE* v1; // ebx
  char v3[68]; // [esp+0h] [ebp-44h] BYREF

  sprintf(v3, "c:/CARPET.CD/%s/map%05d.dat", "save", a1);
  v1 = DataFileIO::CreateOrOpenFile((char*)v3, 546);
  FileWrite_62ED0_633E0(v1, (uint8_t*)mapTerrainType_CC1E0_CC1D0, (int)sub_10000);
  FileWrite_62ED0_633E0(v1, (uint8_t*)mapHeightmap_DC1E0_DC1D0, (int)sub_10000);
  FileWrite_62ED0_633E0(v1, (uint8_t*)mapShading_EC1E0_EC1D0, (int)sub_10000);
  FileWrite_62ED0_633E0(v1, (uint8_t*)mapAngle_FC1E0_FC1D0, (int)sub_10000);
  FileWrite_62ED0_633E0(v1, (uint8_t*)mapEntityIndex_10C1E0_10C1D0, (int)&loc_1FFFE + 2);
  FileWrite_62ED0_633E0(v1, (uint8_t*)byte_B5D30, 4802);
  DataFileIO::Close(v1);
  return 0;
}
// 10000: using guessed type void sub_10000();
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 10C1D0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7961];

//----- (0003ECC0) --------------------------------------------------------
char sub_3ECC0(__int16 a1)
{
  FILE* v1; // eax
  char v3[64]; // [esp+0h] [ebp-40h] BYREF

  sprintf(v3, "c:/CARPET.CD/%s/map%05d.dat", "save", a1);
  v1 = DataFileIO::CreateOrOpenFile((char*)v3, 512);
  if ( v1 == nullptr )
    return 0;
  DataFileIO::Close(v1);
  return 1;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);

//----- (0003ED10) --------------------------------------------------------
void sub_3ED10(_BYTE *a1)
{
  int v1; // edx
  int v2; // eax
  char v3; // dl
  FILE* v4; // ebp
  int v5; // edx
  int v6; // eax
  char v7; // bl
  int v8; // eax
  int v9; // ecx
  char v10[80]; // [esp+0h] [ebp-50h] BYREF

  if ( (*(_BYTE *)dword_AE408_AE3F8() & 4) != 0 )
  {
    if ( !*(_DWORD *)(dword_AE408_AE3F8() + 9) && !((int)&a1[-dword_AE400_AE3F0() - 29715] / 10) )
    {
      sprintf(v10, "%s/mvi%05d.dat", aMovie_0, *(__int16 *)(dword_AE408_AE3F8() + 13));
      v1 = (int)DataFileIO::CreateOrOpenFile((char*)v10, 512);
      v2 = dword_AE408_AE3F8();
      *(_DWORD *)(dword_AE408_AE3F8() + 9) = v1;
      if ( v1 == -1 )
      {
        v3 = *(_BYTE *)v2;
        *(_DWORD *)(v2 + 9) = 0;
        *(_BYTE *)v2 = v3 & 0xFB;
        return;
      }
      sub_3E690(*(_WORD *)(v2 + 13));
      sub_3E7F0(*(_WORD *)(dword_AE408_AE3F8() + 13));
      sub_59420_59930();
      FlvInitSet_356E0_35AA0();
    }
    v4 = (FILE*)*(_DWORD *)(dword_AE408_AE3F8() + 9);
    if ( v4 )
    {
      if ( *a1 == 2 )
      {
        sub_3EF90();
        *(_WORD *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13325) = 8;
        *a1 = 0;
        return;
      }
      if ( DataFileIO::Read(v4, (uint8_t*)a1, 10) != 10 )
      {
        sub_3EF90();
        *(_WORD *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13325) = 8;
        *a1 = 0;
      }
      if ( *a1 == 2 || sub_35AD0() )
      {
        sub_3EF90();
        *(_WORD *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13325) = 8;
LABEL_25:
        *a1 = 0;
      }
    }
  }
  else
  {
    if ( (*(_BYTE *)dword_AE408_AE3F8() & 2) == 0 )
      return;
    if ( !*(_DWORD *)(dword_AE408_AE3F8() + 9) && !((int)&a1[-dword_AE400_AE3F0() - 29715] / 10) )
    {
      sprintf(v10, "%s/mvi%05d.dat", aMovie_0, *(__int16 *)(dword_AE408_AE3F8() + 13));
      v5 = (int)DataFileIO::CreateOrOpenFile((char*)v10, 546);
      v6 = dword_AE408_AE3F8();
      *(_DWORD *)(dword_AE408_AE3F8() + 9) = v5;
      if ( v5 == -1 )
      {
        v7 = *(_BYTE *)v6;
        *(_DWORD *)(v6 + 9) = 0;
        *(_BYTE *)v6 = v7 & 0xFD;
        return;
      }
      sub_593B0_598C0();
      sub_3E410_3E750(*(_WORD *)(dword_AE408_AE3F8() + 13));
      sub_3E8C0(*(_WORD *)(dword_AE408_AE3F8() + 13));
      sub_37220_375E0();
      *(_DWORD *)(dword_AE400_AE3F0() + 4593) = -1;
      v8 = dword_AE408_AE3F8();
      *(_BYTE *)(dword_AE408_AE3F8() + 161) = 3;
      *(_DWORD *)(v8 + 162) = 200;
    }
    v9 = *(_DWORD *)(dword_AE408_AE3F8() + 9);
    if ( v9 )
    {
      if ( FileWrite_62ED0_633E0((FILE*)v9, (uint8_t*)a1, 10) != 10 )
        sub_3EF90();
      if ( *a1 == 12 )
        goto LABEL_25;
    }
  }
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (0003EF90) --------------------------------------------------------
_BYTE *sub_3EF90()
{
  _BYTE *result; // eax
  char v1; // dl

  result = (_BYTE *)dword_AE408_AE3F8();
  if ( *(_DWORD *)(dword_AE408_AE3F8() + 9) )
  {
    DataFileIO::Close((FILE*)*(_DWORD *)(dword_AE408_AE3F8() + 9));
    result = (_BYTE *)dword_AE408_AE3F8();
    v1 = *(_BYTE *)dword_AE408_AE3F8();
    *(_DWORD *)(dword_AE408_AE3F8() + 9) = 0;
    *result = v1 & 0xF9;
  }
  return result;
}
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (0003EFC0) --------------------------------------------------------
int access_3EC80_3EFC0(char* a1)
{
  return access(a1, 0);
}
// 63428: using guessed type _DWORD access(_DWORD, _DWORD);

void CreateGameDir_3EC90_3EFD0(uint8_t diskChar, char* dir1, char* dir2)
{
    char textBuffer1[144];
    char textBuffer2[144];

    if (dos_getdiskfree(diskChar - 64, 0))
        return;
    sprintf(textBuffer1, "%c:%s", diskChar, dir1);
    if (access_3EC80_3EFC0(FixPath(textBuffer1)) <= -1)
    {
        if (mkdir(FixPath(textBuffer1)))
            return;
        strcpy(textBuffer2, textBuffer1);
        strcpy(&textBuffer2[strlen(textBuffer2)], "/");
        strcpy(&textBuffer2[strlen(textBuffer2)], dir2);
        if ((access_3EC80_3EFC0(FixPath(textBuffer2)) & 0x8000u) != 0 && mkdir(FixPath(textBuffer2)))
            return;
    }
    else
    {
        strcpy(textBuffer2, textBuffer1);
        strcpy(&textBuffer2[strlen(textBuffer2)], "/");
        strcpy(&textBuffer2[strlen(textBuffer2)], dir2);
        if ((access_3EC80_3EFC0(FixPath(textBuffer2)) & 0x8000u) != 0 && mkdir(FixPath(textBuffer2)))
            return;
    }
}

//----- (0003F1E0) --------------------------------------------------------
int sub_3EEA0_3F1E0(char* path, uint8_t* buffer)
{
  FILE* file = DataFileIO::CreateOrOpenFile(FixPath(path), 512);
  if (file != nullptr )
  {
      int fileLenght = DataFileIO::FileLengthBytes(file);
    DataFileIO::Read(file, buffer, fileLenght);
    DataFileIO::Close(file);
    int fileLenght2 = sub_62B60_63070(buffer, buffer);
    if (fileLenght2 >= 0 )
    {
      //if ( !result )
        return fileLenght2;
    }
    else
    {
        if (fileLenght2 == -1) return fileLenght;
      printf("ERROR decompressing %s\n", path);
      return -2;
    }
  }
  return -1;
}
// 5D113: using guessed type _DWORD printf(const char *, ...);
// 62FF2: using guessed type _DWORD DataFileIO::FileLengthBytes(_DWORD);

//----- (0003F260) --------------------------------------------------------
int sub_3EF20_3F260()
{
  return 1;
}

bool access_3EF30_3F270(char* a1)
{
  return (unsigned __int16)access(a1, 0) == 0;
}

//----- (0003F290) --------------------------------------------------------
char sub_3EF50_3F290(char *a1, char *a2, const char *a3)
{
  //FILE* v4; // esi
  //int v6; // eax
  //int v7; // eax
  FILE* v8; // ebx
  FILE* v9; // ebp
  int v10; // edi
  int v11; // ebx
  int v12; // eax
  int v13; // esi
  int v14; // edx
  char textBuffer1[144];
  char textBuffer2[144];
  char textBuffer3[100];
  FILE* v18; // [esp+184h] [ebp-18h]
  int v19; // [esp+188h] [ebp-14h]

  if ( !access_3EF30_3F270(a1) )
    return 2;
  if ( !access_3EF30_3F270(a2) )
    return 1;
  sprintf(textBuffer1, "%s/%s.tab", a1, a3);
  sprintf(textBuffer2, "%s/%s.tab", a2, a3);
  FILE* file = DataFileIO::CreateOrOpenFile(textBuffer1, 512);
  if (file == nullptr )
    return 3;
  FILE* file2 = DataFileIO::CreateOrOpenFile(textBuffer2, 546);
  if (file2 == nullptr )
    return 3;
  int filesize = DataFileIO::FileLengthBytes(file);
  int filesize2 = DataFileIO::Read(file, begWscreen_2ECFF4_2ECFE4, filesize);
  FileWrite_62ED0_633E0(file2, begWscreen_2ECFF4_2ECFE4, filesize2);
  DataFileIO::Close(file);
  DataFileIO::Close(file2);
  sprintf(textBuffer1, "%s/%s.dat", a1, a3);
  sprintf(textBuffer2, "%s/%s.dat", a2, a3);
  v8 = DataFileIO::CreateOrOpenFile(textBuffer1, 512);
  v9 = v8;
  if ( v8 != nullptr )
  {
    v18 = DataFileIO::CreateOrOpenFile(textBuffer2, 546);
    if ( v18 != nullptr)
    {
      v10 = 0;
      v11 = DataFileIO::FileLengthBytes(v8);
      v19 = v11;
      while ( v11 )
      {
        if ( v11 <= 64000 )
          v12 = v11;
        else
          v12 = 64000;
        v13 = DataFileIO::Read(v9, (uint8_t*)begWscreen_2ECFF4_2ECFE4, v12);
        v11 -= v13;
        FileWrite_62ED0_633E0(v18, (uint8_t*)begWscreen_2ECFF4_2ECFE4, v13);
        v10 += v13;
        settextposition((__int16)dword_B76F0_B76E0, SHIWORD(dword_B76F0_B76E0));
        v14 = 100 * v10 / v19;
        if ( (__int16)v14 > 100 )
          LOWORD(v14) = 100;
        sprintf(textBuffer3, "%d%c", (__int16)v14, 37);
        outtext(textBuffer3);
      }
      DataFileIO::Close(v9);
      DataFileIO::Close(v18);
    }
  }
  memset((void*)begWscreen_2ECFF4_2ECFE4, 0, 64000);
  return 0;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 62FF2: using guessed type _DWORD DataFileIO::FileLengthBytes(_DWORD);
// 7A1B6: using guessed type _DWORD settextposition(_DWORD, _DWORD);
// 7A41E: using guessed type _DWORD outtext(_DWORD);
// B76E0: using guessed type int dword_B76F0_B76E0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

void sub_3F1D0_3F510()
{
	//fixed
	char helpStr1[20];
	char helpStr2[20];
	if (IsHiddenWord)
	{
		strcpy(helpStr1, "tmaps1-0");
		strcpy(helpStr2, "ddlevels");
	}
	else
	{
		strcpy(helpStr1, "tmaps0-0");
		strcpy(helpStr2, "levels");
	}
	//fixed

	//char textBuffer1[64];
	char textBuffer2[64];

	sprintf(textBuffer2, "%s%s/%s/%s.dat", "C:", "\\carpet.cd", "data", helpStr1);
	//sprintf(textBuffer1, "data/%s.dat", helpStr1);
	if (sub_3EF20_3F260())
	{
		sprintf(textBuffer2, "%s%s/%s", "C:", "\\carpet.cd", "data");
		dword_B76F0_B76E0 = gettextposition(outtext((char*)"Creating Setup Directories.."));
		if (!sub_3EF50_3F290((char*)"data", textBuffer2, helpStr1))
			sprintf(textBuffer2, "%s%s/%s/%s.dat", "C:", "\\carpet.cd", "data", helpStr1);
	}
	outtext((char*)"\n");
	sprintf(textBuffer2, "%s%s/%s/%s.dat", "C:", "\\carpet.cd", "levels", helpStr2);
	if (sub_3EF20_3F260())
	{
		sprintf(textBuffer2, "%s%s/%s", "C:", "\\carpet.cd", "levels");
		dword_B76F0_B76E0 = gettextposition(outtext((char*)"Setup levels.."));
		if (!sub_3EF50_3F290((char*)"levels", textBuffer2, helpStr2))
			sprintf(textBuffer2, "%s%s/%s/%s.dat", "C:", "\\carpet.cd", "levels", helpStr2);
	}
}

//----- (0003F6B0) --------------------------------------------------------
int sub_3F370_3F6B0()
{
  int result; // eax
  int v1; // [esp+0h] [ebp-38h] BYREF
  __int16 v2[14]; // [esp+1Ch] [ebp-1Ch] BYREF

  v2[0] = 0;
  result = int386(51, (uint32)v2, (uint32)&v1);
  dword_9AD98 = 0;
  return result;
}
// 63488: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 9AD98: using guessed type int dword_9AD98;
// 3F6B0: using guessed type __int16 var_1C[14];

//----- (0003F6D8) --------------------------------------------------------
void sub_3F398_3F6D8()
{
  unsigned __int16 v1; // bx
  unsigned __int16 v2; // si
  int v3; // ecx
  unsigned __int8 v4; // al

    //fix
    __int16 a1 = 0;
    //fix

  v1 = 0;
  v2 = 0;
  __outbyte(0x201u, a1);
  v3 = 10000;
  _disable();
  while ( 1 )
  {
    v4 = __inbyte(0x201u);
    if ( (v4 & 3) == 0 )
      break;
    if ( (v4 & 1) != 0 )
      ++v1;
    if ( (v4 & 2) != 0 )
      ++v2;
    if ( !--v3 )
    {
      _enable();
      byte_B7700_B76F0 = 0;
      return;
    }
  }
  _enable();
  byte_B7700_B76F0 = 2;
  word_B770A_B76FA = v1 >> 1;
  word_B7706_B76F6 = v1 + (v1 >> 1);
  word_B770C_B76FC = v2 >> 1;
  word_B7708_B76F8 = v2 + (v2 >> 1);
}
// B76F0: using guessed type char byte_B7700_B76F0;
// B76F6: using guessed type __int16 word_B7706_B76F6;
// B76F8: using guessed type __int16 word_B7708_B76F8;
// B76FA: using guessed type __int16 word_B770A_B76FA;
// B76FC: using guessed type __int16 word_B770C_B76FC;

//----- (0003F753) --------------------------------------------------------
void sub_3F753(unsigned __int8 a1)
{
  __int16 v1; // bx
  __int16 v2; // si
  int v3; // ecx
  unsigned __int8 v4; // al
  __int16 v5; // ax
  __int16 v6; // ax

  if ( byte_B7700_B76F0 )
  {
    v1 = 0;
    v2 = 0;
    __outbyte(0x201u, a1);
    v3 = 10000;
    _disable();
    while ( 1 )
    {
      v4 = __inbyte(0x201u);
      if ( (v4 & 3) == 0 )
        break;
      if ( (v4 & 1) != 0 )
        ++v1;
      if ( (v4 & 2) != 0 )
        ++v2;
      if ( !--v3 )
      {
        _enable();
        byte_B7700_B76F0 = 0;
        goto LABEL_19;
      }
    }
    _enable();
    byte_B771A = v4;
    v5 = 0;
    if ( v1 >= word_B770A_B76FA )
    {
      if ( v1 > word_B7706_B76F6 )
        v5 = 1;
    }
    else
    {
      v5 = -1;
    }
    word_B7702_B76F2 = v5;
    v6 = 0;
    if ( v2 >= word_B770C_B76FC )
    {
      if ( v2 > word_B7708_B76F8 )
        v6 = 1;
    }
    else
    {
      v6 = -1;
    }
    word_B7704_B76F4 = v6;
  }
  else
  {
LABEL_19:
    word_B7702_B76F2 = 0;
    word_B7704_B76F4 = 0;
    byte_B771A = -1;
  }
}
// B76F0: using guessed type char byte_B7700_B76F0;
// B76F2: using guessed type __int16 word_B7702_B76F2;
// B76F4: using guessed type __int16 word_B7704_B76F4;
// B76F6: using guessed type __int16 word_B7706_B76F6;
// B76F8: using guessed type __int16 word_B7708_B76F8;
// B76FA: using guessed type __int16 word_B770A_B76FA;
// B76FC: using guessed type __int16 word_B770C_B76FC;
// B771A: using guessed type char byte_B771A;

//----- (0003F80E) --------------------------------------------------------
void sub_3F4CE_3F80E()
{
  __int16 v1; // bx
  __int16 v2; // cx
  __int16 v3; // si
  __int16 v4; // di
  unsigned __int8 v5; // al
  int v8; // [esp+0h] [ebp-4h]

  v8 = 10000;
  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  __outbyte(0x201u, 0x10u);
  _disable();
  do
  {
    v5 = __inbyte(0x201u);
    if ( (v5 & 0xF) == 0 )
      break;
    if ( (v5 & 1) != 0 )
      ++v1;
    if ( (v5 & 2) != 0 )
      ++v3;
    if ( (v5 & 4) != 0 )
      ++v2;
    if ( (v5 & 8) != 0 )
      ++v4;
    --v8;
  }
  while ( v8 >= 0 );
  _enable();
  byte_B7700_B76F0 = (v5 & 3) == 0;
  byte_B76F1 = (v5 & 0xC) == 0;
}
// B76F0: using guessed type char byte_B7700_B76F0;
// B76F1: using guessed type char byte_B76F1;

//----- (0003F88D) --------------------------------------------------------
void sub_3F54D_3F88D(__int16 a1, __int16 a2, __int16 a3, __int16 a4)
{
  int savedregs; // [esp+8h] [ebp+0h] BYREF

  byte_B771A = sub_3F76D_sub_3FAAD((int)&savedregs);
  word_B7702_B76F2 = a2;
  word_B7704_B76F4 = a4;
  word_B7706 = a1;
  word_B7708 = a3;
}
// B76F2: using guessed type __int16 word_B7702_B76F2;
// B76F4: using guessed type __int16 word_B7704_B76F4;
// B7706: using guessed type __int16 word_B7706;
// B7708: using guessed type __int16 word_B7708;
// B771A: using guessed type char byte_B771A;

//----- (0003F8C7) --------------------------------------------------------
void sub_3F8C7(__int16 a1, __int16 a2, __int16 a3, __int16 a4)
{
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int savedregs; // [esp+8h] [ebp+0h] BYREF

  if ( byte_B7700_B76F0 )
  {
    byte_B771A = sub_3F76D_sub_3FAAD((int)&savedregs) & 0xF0;
    if ( byte_B7700_B76F0 )
    {
      v4 = 0;
      if ( a2 >= word_B770A_B76FA )
      {
        if ( a2 > word_B7706_B76F6 )
        {
          LOWORD(v4) = a2 - word_B7706_B76F6;
          v4 = ((unsigned __int16)word_B770E_B76FE * v4) >> 11;
          if ( (unsigned int)v4 > 0x80 )
            LOWORD(v4) = 128;
        }
      }
      else
      {
        v4 = (word_B7712_B7702 * (__int16)(a2 - word_B770A_B76FA)) >> 11;
        if ( v4 < -128 )
          LOWORD(v4) = -128;
      }
      word_B7702_B76F2 = v4;
      v5 = 0;
      if ( a4 >= word_B770C_B76FC )
      {
        if ( a4 > word_B7708_B76F8 )
        {
          LOWORD(v5) = a4 - word_B7708_B76F8;
          v5 = ((unsigned __int16)word_B7710_B7700 * v5) >> 11;
          if ( (unsigned int)v5 > 0x80 )
            LOWORD(v5) = 128;
        }
      }
      else
      {
        v5 = (word_B7714_B7704 * (__int16)(a4 - word_B770C_B76FC)) >> 11;
        if ( v5 < -128 )
          LOWORD(v5) = -128;
      }
      word_B7704_B76F4 = v5;
    }
    if ( byte_B76F1 )
    {
      v6 = 0;
      if ( a1 >= word_B770E )
      {
        if ( a1 > word_B770A )
        {
          LOWORD(v6) = a1 - word_B770A;
          v6 = ((unsigned __int16)word_B7712 * v6) >> 11;
          if ( (unsigned int)v6 > 0x80 )
            LOWORD(v6) = 128;
        }
      }
      else
      {
        v6 = (word_B7716 * (__int16)(a1 - word_B770E)) >> 11;
        if ( v6 < -128 )
          LOWORD(v6) = -128;
      }
      word_B7706 = v6;
      v7 = 0;
      if ( a3 >= word_B7710 )
      {
        if ( a3 > word_B770C )
        {
          LOWORD(v7) = a3 - word_B770C;
          v7 = ((unsigned __int16)word_B7714 * v7) >> 11;
          if ( (unsigned int)v7 > 0x80 )
            LOWORD(v7) = 128;
        }
      }
      else
      {
        v7 = (word_B7718 * (__int16)(a3 - word_B7710)) >> 11;
        if ( v7 < -128 )
          LOWORD(v7) = -128;
      }
      word_B7708 = v7;
    }
  }
  else
  {
    word_B7702_B76F2 = 0;
    word_B7704_B76F4 = 0;
    byte_B771A = -1;
  }
}
// B76F0: using guessed type char byte_B7700_B76F0;
// B76F1: using guessed type char byte_B76F1;
// B76F2: using guessed type __int16 word_B7702_B76F2;
// B76F4: using guessed type __int16 word_B7704_B76F4;
// B76F6: using guessed type __int16 word_B7706_B76F6;
// B76F8: using guessed type __int16 word_B7708_B76F8;
// B76FA: using guessed type __int16 word_B770A_B76FA;
// B76FC: using guessed type __int16 word_B770C_B76FC;
// B76FE: using guessed type __int16 word_B770E_B76FE;
// B7700: using guessed type __int16 word_B7710_B7700;
// B7702: using guessed type __int16 word_B7712_B7702;
// B7704: using guessed type __int16 word_B7714_B7704;
// B7706: using guessed type __int16 word_B7706;
// B7708: using guessed type __int16 word_B7708;
// B770A: using guessed type __int16 word_B770A;
// B770C: using guessed type __int16 word_B770C;
// B770E: using guessed type __int16 word_B770E;
// B7710: using guessed type __int16 word_B7710;
// B7712: using guessed type __int16 word_B7712;
// B7714: using guessed type __int16 word_B7714;
// B7716: using guessed type __int16 word_B7716;
// B7718: using guessed type __int16 word_B7718;
// B771A: using guessed type char byte_B771A;

//----- (0003FAAD) --------------------------------------------------------
unsigned __int8 sub_3F76D_sub_3FAAD(int a1)
{
  __int16 v1; // bx
  __int16 v2; // cx
  __int16 v3; // si
  __int16 v4; // di
  unsigned __int8 result; // al

  if ( byte_B76F1 )
    *(_BYTE *)(a1 - 5) = 15;
  else
    *(_BYTE *)(a1 - 5) = 3;
  *(_DWORD *)(a1 - 4) = 10000;
  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  _disable();
  __outbyte(0x201u, 0x10u);
  while ( 1 )
  {
    result = __inbyte(0x201u);
    if ( (result & *(_BYTE *)(a1 - 5)) == 0 )
      break;
    if ( (result & 1) != 0 )
      ++v1;
    if ( (result & 2) != 0 )
      ++v3;
    if ( (result & 4) != 0 )
      ++v2;
    if ( (result & 8) != 0 )
      ++v4;
    if ( --*(_DWORD *)(a1 - 4) < 0 )
    {
      byte_B7700_B76F0 = 0;
      break;
    }
  }
  _enable();
  return result;
}
// B76F0: using guessed type char byte_B7700_B76F0;
// B76F1: using guessed type char byte_B76F1;

void InitDigijoy_3F7D0_3FB10(char* textBuffer)
{
	memset(&byte_B7700_B76F0, 0, 43);
	sub_3F4CE_3F80E();
	sub_3F398_3F6D8();
	if (byte_B7700_B76F0)
	{
		sub_3F398_3F6D8();
		sub_3FB30_3FE70(word_90B34, word_90B36, textBuffer);
		byte_90B23 = 2;
	}
}

void InitAnojoy_3F820_sub_3FB60(__int16 a2, int a3, int a4, int a5, char a6)
{
	char result; // al
	int v17; // edi
	int v18; // ebx
	__int64 v19; // rtt
	__int64 v20; // rtt
	__int64 v21; // rtt
	__int64 v22; // rtt
	int v23; // [esp+0h] [ebp-1Ch]
	int v24; // [esp+4h] [ebp-18h]
	int v25; // [esp+8h] [ebp-14h]
	int v26; // [esp+Ch] [ebp-10h]

	sub_3F4CE_3F80E();
	sub_3F398_3F6D8();
	if (byte_B7700_B76F0)
	{
		byte_B7700_B76F0 = 1;
		int index1 = 0;
		int index2 = 0;
		int index3 = 0;
		sub_3FB30_3FE70(word_90B24, word_90B26, (char*)a3);
		do
		{
			sub_3F54D_3F88D(a2, index1, index2, index3);
			a2 = word_B7704_B76F4;
			index1 += word_B7702_B76F2;
			index2++;
			index3 += word_B7704_B76F4;
		} while ((unsigned __int16)index2 < 0x10u);
		v24 = (int)(index1 - (__CFSHL__((unsigned __int64)v8 >> 32, 4) + 16 * ((unsigned __int64)index1 >> 32))) >> 4;
		v25 = (int)(index3 - (__CFSHL__((unsigned __int64)v9 >> 32, 4) + 16 * ((unsigned __int64)index3 >> 32))) >> 4;
		index2 = 0;
		index1 = 0;
		index3 = 0;
		sub_3FB30_3FE70(word_90B2C, word_90B2E, (char*)a4);
		do
		{
			sub_3F54D_3F88D(a4, index1, index2, index3);
			index1 += word_B7702_B76F2;
			index2++;
			index3 += word_B7704_B76F4;
		} while ((unsigned __int16)index2 < 0x10u);
		v26 = (int)(index1 - (__CFSHL__((unsigned __int64)index1 >> 32, 4) + 16 * ((unsigned __int64)index1 >> 32))) >> 4;
		v23 = (int)(index3 - (__CFSHL__((unsigned __int64)v13 >> 32, 4) + 16 * ((unsigned __int64)index3 >> 32))) >> 4;
		index1 = 0;
		index2 = 0;
		index3 = 0;
		sub_3FB30_3FE70(word_90B34, word_90B36, (char*)a5);
		do
		{
			sub_3F54D_3F88D(a4, index1, index2, index3);
			index1 += word_B7702_B76F2;
			index2++;
			index3 += word_B7704_B76F4;
		} while ((unsigned __int16)index2 < 0x10u);
		v17 = (int)(index1 - (__CFSHL__((unsigned __int64)index1 >> 32, 4) + 16 * ((unsigned __int64)index1 >> 32))) >> 4;
		v18 = (int)(index3 - (__CFSHL__((unsigned __int64)index3 >> 32, 4) + 16 * ((unsigned __int64)index3 >> 32))) >> 4;
		if ((unsigned __int16)(v26 - v17) <= 0x1Eu)
		{
			word_B7706_B76F6 = 10000;
		}
		else
		{
			word_B7706_B76F6 = v17 + 3 * (unsigned __int16)(v26 - v17) / 10;
			LODWORD(v19) = (uint32)&loc_40000;
			HIDWORD(v19) = (int)&loc_40000 >> 31;
			word_B770E_B76FE = v19 / ((unsigned __int16)v26 - word_B7706_B76F6);
		}
		if ((unsigned __int16)(v23 - v18) <= 0x1Eu)
		{
			word_B7708_B76F8 = 10000;
		}
		else
		{
			word_B7708_B76F8 = v18 + 3 * (unsigned __int16)(v23 - v18) / 10;
			LODWORD(v20) = (uint32)&loc_40000;
			HIDWORD(v20) = (int)&loc_40000 >> 31;
			word_B7710_B7700 = v20 / ((unsigned __int16)v23 - word_B7708_B76F8);
		}
		if ((unsigned __int16)(v18 - v25) <= 0x1Eu)
		{
			word_B770C_B76FC = 0;
		}
		else
		{
			word_B770C_B76FC = v18 - 3 * (unsigned __int16)(v18 - v25) / 10;
			LODWORD(v21) = (uint32)&loc_40000;
			HIDWORD(v21) = (int)&loc_40000 >> 31;
			word_B7714_B7704 = v21 / (word_B770C_B76FC - (unsigned __int16)v25);
		}
		if ((unsigned __int16)(v17 - v24) <= 0x1Eu)
		{
			word_B770A_B76FA = 0;
		}
		else
		{
			word_B770A_B76FA = v17 - 3 * (unsigned __int16)(v17 - v24) / 10;
			LODWORD(v22) = (uint32)&loc_40000;
			HIDWORD(v22) = (int)&loc_40000 >> 31;
			word_B7712_B7702 = v22 / (word_B770A_B76FA - (unsigned __int16)v24);
		}
		result = a6;
		byte_90B23 = a6;
	}
}

//----- (0003FE70) --------------------------------------------------------
void sub_3FB30_3FE70(__int16 a1, __int16 a2, char* a3)
{
  unsigned __int8 v3; // al
  unsigned __int8 v4; // al

  do
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      CopyScreen_62FA8_634B8((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0xC8u);
    else
      CopyScreen_62FC4_634D4((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u);
    sub_4B560_4B8A0();
    v3 = a2;
    if ( a3 + 6 * (a1 + a2) )
    {
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        DrawBitmap_60CE0_611F0(a1, a2, (TypeTab*)a3);
      else
        DrawBitmap_60D18_61228(a1, a2, (TypeTab*)a3);
    }
    sub_3F753(v3);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
  }
  while ( (byte_B771A & 0x10) != 0 );
  sub_5CC54_5D164();
  do
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      CopyScreen_62FA8_634B8((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0xC8u);
    else
      CopyScreen_62FC4_634D4((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u);
    sub_4B560_4B8A0();
    v4 = a2;
    if ( a3 + 6 * (a1 + a2) )
    {
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        DrawBitmap_60CE0_611F0(a1, a2, (TypeTab*)a3);
      else
        DrawBitmap_60D18_61228(a1, a2, (TypeTab*)a3);
    }
    sub_3F753(v4);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
  }
  while ( (byte_B771A & 0x10) == 0 );
  sub_5CC54_5D164();
}
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// B771A: using guessed type char byte_B771A;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0003FFE0) --------------------------------------------------------
char sub_3FCA0_3FFE0(
        char a5,
        __int16 a6,
        __int16 a7,
        __int16 a8,
        __int16 a9,
        __int16 a10,
        __int16 a11)
{
  __int16 v11; // bx
  int v12; // eax
  int v13; // edx
  __int16 *v14; // eax
  __int16 v15; // dx
  __int16 v16; // ax
  int v17; // edx
  __int16 *v18; // eax
  __int16 v19; // dx
  __int64 v20; // rax
  __int16 v21; // ax

    //fix
    int a1 = 0;
    __int16 a2 = 0;
    __int16 a3 = 0;
    __int16 a4 = 0;
    //fix

  v11 = 0;
  if ( a5 )
  {
    if ( (byte_90B23 & 2) != 0 || (byte_90B23 & 1) != 0 )
    {
      if ( byte_B771A >= 0 )
      {
        LOBYTE(a2) = dword_AE400_AE3F0();
        a1 = 2049 * str_AE400_AE3F0->var_u16_8;
        if ( (*(_BYTE *)(dword_AE400_AE3F0() + a1 + 13341) & 3) == 0 )
          lastPressedKey_12EF70_12EF60 = 28;
      }
      if ( dword_9AD98 )
        LOBYTE(a1) = sub_3F370_3F6B0();
      HIBYTE(a2) = byte_90B20;
      mouseRightButton_12EFDC_12EFCC = 0;
      mouseRightButton2_12EFE2_12EFD2 = 0;
      mouseLeftButton_12EFDE_12EFCE = 0;
      mouseLeftButton2_12EFE4_12EFD4 = 0;
      if ( !byte_90B20 )
      {
        LOBYTE(a1) = 1;
        mouse_9AD90.x = 0;
        mouse_9AD90.y = 0;
        byte_90B20 = 1;
      }
      if ( (byte_90B23 & 2) != 0 )
        sub_3F753(a1);
      else
        sub_3F8C7(a2, 0, a3, a4);
      if ( word_B7704_B76F4 >= 0 )
      {
        if ( word_B7704_B76F4 <= 0 )
        {
          if ( word_B7702_B76F2 <= 0 )
          {
            if ( word_B7702_B76F2 < 0 )
                mouse_9AD90.x = mouse_9AD90.x - a10;
          }
          else
          {
              mouse_9AD90.x = a10 + mouse_9AD90.x;
          }
        }
        else
        {
            mouse_9AD90.y += a11;
        }
      }
      else
      {
        mouse_9AD90.y -= a11;
      }
      if (mouse_9AD90.x >= a6 )
      {
        if (mouse_9AD90.x > a8 )
            mouse_9AD90.x = a8;
      }
      else
      {
          mouse_9AD90.x = a6;
      }
      LOBYTE(a1) = mouse_9AD90.y;
      if ( mouse_9AD90.y >= a7 )
      {
        if ( mouse_9AD90.y > a9 )
          mouse_9AD90.y = a9;
      }
      else
      {
        mouse_9AD90.y = a7;
      }
      if ( (byte_B771A & 0x10) == 0 )
      {
        mouseLeftButton2_12EFE4_12EFD4 = 1;
        mouseLeftButton_12EFDE_12EFCE = 1;
      }
      if ( (byte_B771A & 0x20) == 0 )
      {
        mouseRightButton2_12EFE2_12EFD2 = 1;
        mouseRightButton_12EFDC_12EFCC = 1;
      }
    }
  }
  else
  {
    LOBYTE(a2) = 0;
    byte_90B20 = 0;
    if ( byte_9AD08 )
    {
      if ( dword_9AD98 )
        sub_3F370_3F6B0();
      sub_5B720();
      v12 = dword_90B14;
      word_90B0C[dword_90B14] = word_12EE9C_12EE8C[1];
      v13 = (v12 + 1) % 2;
      v14 = word_90B0C;
      dword_90B14 = v13;
      v15 = 2;
      do
      {
        a4 = *v14++;
        v11 += a4;
        --v15;
      }
      while ( v15 );
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        v16 = 400 * (v11 / 2) / 12743 + 200;
      else
        v16 = 480 * (v11 / 2) / 12743 + 240;
      mouse_9AD90.y = v16;
      v17 = dword_90B18 + 1;
      word_90B02[v17] = word_12EE9C_12EE8C[2];
      v11 = 0;
      v18 = (__int16 *)&unk_90B04;
      dword_90B18 = v17 % 2;
      v19 = 2;
      do
      {
        a3 = *v18++;
        v11 += a3;
        --v19;
      }
      while ( v19 );
      a2 = 12743;
      a1 = 640 * (v11 / 2) / 12743 + 320;
      mouse_9AD90.x = 640 * (v11 / 2) / 12743 + 320;
    }
    if ( (byte_90B23 & 2) != 0 || (byte_90B23 & 1) != 0 || (byte_90B23 & 0x20) != 0 )
    {
      if ( dword_9AD98 )
        sub_3F370_3F6B0();
      LOBYTE(a1) = byte_B7700_B76F0;
      if ( byte_B7700_B76F0 )
      {
        if ( (unsigned __int8)byte_B7700_B76F0 <= 1u )
        {
          sub_3F8C7(a2, v11, a3, a4);
          if ( (byte_90B23 & 0x20) != 0 || byte_9AD08 )
          {
            pressedKeys_12EEF0_12EEE0[72] = 0;
            pressedKeys_12EEF0_12EEE0[80] = 0;
            pressedKeys_12EEF0_12EEE0[75] = 0;
            pressedKeys_12EEF0_12EEE0[77] = 0;
          }
          if ( byte_B771A >= 0 )
          {
            a1 = 2049 * str_AE400_AE3F0->var_u16_8;
            if ( (*(_BYTE *)(dword_AE400_AE3F0() + a1 + 13341) & 3) == 0 )
              lastPressedKey_12EF70_12EF60 = 28;
          }
          if ( (byte_B771A & 0x40) == 0 || byte_9AD08 )
          {
            if ( ((byte_B771A & 0x40) != 0 || byte_9AD08) && (!byte_9AD08 || (byte_B771A & 0x40) == 0) )
            {
              if ( byte_9AD08 && (byte_B771A & 0x40) == 0 )
                LOBYTE(a1) = sub_5B7C0();
            }
            else
            {
              if ( word_B7704_B76F4 >= 0 )
              {
                if ( word_B7704_B76F4 > 0 )
                  pressedKeys_12EEF0_12EEE0[80] = 1;
              }
              else
              {
                pressedKeys_12EEF0_12EEE0[72] = 1;
              }
              if ( word_B7702_B76F2 <= 0 )
              {
                if ( word_B7702_B76F2 < 0 )
                  pressedKeys_12EEF0_12EEE0[75] = 1;
              }
              else
              {
                pressedKeys_12EEF0_12EEE0[77] = 1;
              }
            }
          }
          else
          {
            word_90B1C = 2 * word_B7702_B76F2;
            word_90B1E = 2 * word_B7704_B76F4;
            mouse_9AD90.x = 2 * word_B7702_B76F2 + 320;
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              LOWORD(a1) = word_90B1E + 200;
            else
              LOWORD(a1) = word_90B1E + 240;
            mouse_9AD90.y = a1;
          }
          if ( (byte_B771A & 0x10) != 0 || byte_90B21 )
          {
            if ( byte_90B21 && (byte_B771A & 0x10) != 0 )
            {
              byte_90B21 = 0;
              LOBYTE(a1) = 0;
              mouseLeftButton_12EFDE_12EFCE = 0;
              mouseLeftButton2_12EFE4_12EFD4 = 0;
            }
          }
          else
          {
            byte_90B21 = 1;
            mouseLeftButton2_12EFE4_12EFD4 = 1;
            mouseLeftButton_12EFDE_12EFCE = 1;
          }
          if ( (byte_B771A & 0x20) != 0 || byte_90B22 )
          {
            if ( byte_90B22 && (byte_B771A & 0x20) != 0 )
            {
              byte_90B22 = 0;
              mouseRightButton2_12EFE2_12EFD2 = 0;
              mouseRightButton_12EFDC_12EFCC = 0;
            }
          }
          else
          {
            byte_90B22 = 1;
            LOBYTE(a1) = 1;
            mouseRightButton2_12EFE2_12EFD2 = 1;
            mouseRightButton_12EFDC_12EFCC = 1;
          }
        }
        else if ( byte_B7700_B76F0 == 2 )
        {
          sub_3F753(2u);
          pressedKeys_12EEF0_12EEE0[72] = 0;
          pressedKeys_12EEF0_12EEE0[80] = 0;
          pressedKeys_12EEF0_12EEE0[75] = 0;
          pressedKeys_12EEF0_12EEE0[77] = 0;
          if ( byte_B771A >= 0 )
          {
            a1 = 2049 * str_AE400_AE3F0->var_u16_8;
            if ( (*(_BYTE *)(dword_AE400_AE3F0() + a1 + 13341) & 3) == 0 )
              lastPressedKey_12EF70_12EF60 = 28;
          }
          if ( (byte_B771A & 0x40) == 0 || byte_9AD08 )
          {
            if ( ((byte_B771A & 0x40) != 0 || byte_9AD08) && (!byte_9AD08 || (byte_B771A & 0x40) == 0) )
            {
              if ( byte_9AD08 && (byte_B771A & 0x40) == 0 )
                LOBYTE(a1) = sub_5B7C0();
            }
            else
            {
              if ( word_B7704_B76F4 >= 0 )
              {
                if ( word_B7704_B76F4 > 0 )
                  pressedKeys_12EEF0_12EEE0[80] = 1;
              }
              else
              {
                pressedKeys_12EEF0_12EEE0[72] = 1;
              }
              if ( word_B7702_B76F2 <= 0 )
              {
                if ( word_B7702_B76F2 < 0 )
                  pressedKeys_12EEF0_12EEE0[75] = 1;
              }
              else
              {
                pressedKeys_12EEF0_12EEE0[77] = 1;
              }
            }
          }
          else
          {
            word_90B1C = (28 * (__int16)(32 * word_B7702_B76F2 + word_90B1C)
                        - (__CFSHL__((28 * (__int16)(32 * word_B7702_B76F2 + word_90B1C)) >> 31, 5)
                         + 32 * ((28 * (__int16)(32 * word_B7702_B76F2 + word_90B1C)) >> 31))) >> 5;
            v20 = 31 * (__int16)(16 * word_B7704_B76F4 + word_90B1E);
            word_90B1E = (int)(v20 - (__CFSHL__(HIDWORD(v20), 5) + 32 * HIDWORD(v20))) >> 5;
            mouse_9AD90.x = 2 * word_90B1C + 320;
            v21 = 2 * word_90B1E;
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              LOWORD(a1) = v21 + 200;
            else
              LOWORD(a1) = v21 + 240;
            mouse_9AD90.y = a1;
          }
          if ( (byte_B771A & 0x10) != 0 || byte_90B21 )
          {
            if ( byte_90B21 && (byte_B771A & 0x10) != 0 )
            {
              LOBYTE(a1) = 0;
              byte_90B21 = 0;
              mouseLeftButton2_12EFE4_12EFD4 = 0;
              mouseLeftButton_12EFDE_12EFCE = 0;
            }
          }
          else
          {
            LOBYTE(a1) = 1;
            byte_90B21 = 1;
            mouseLeftButton2_12EFE4_12EFD4 = 1;
            mouseLeftButton_12EFDE_12EFCE = 1;
          }
          if ( (byte_B771A & 0x20) != 0 || byte_90B22 )
          {
            if ( byte_90B22 && (byte_B771A & 0x20) != 0 )
            {
              byte_90B22 = 0;
              mouseRightButton2_12EFE2_12EFD2 = 0;
              mouseRightButton_12EFDC_12EFCC = 0;
            }
          }
          else
          {
            LOBYTE(a1) = 1;
            byte_90B22 = 1;
            mouseRightButton2_12EFE2_12EFD2 = 1;
            mouseRightButton_12EFDC_12EFCC = 1;
          }
        }
      }
    }
  }
  return a1;
}
// 90B02: using guessed type __int16 word_90B02[];
// 90B0C: using guessed type __int16 word_90B0C[4];
// 90B14: using guessed type int dword_90B14;
// 90B18: using guessed type int dword_90B18;
// 90B1C: using guessed type __int16 word_90B1C;
// 90B1E: using guessed type __int16 word_90B1E;
// 90B20: using guessed type char byte_90B20;
// 90B21: using guessed type char byte_90B21;
// 90B22: using guessed type char byte_90B22;
// 90B23: using guessed type char byte_90B23;
// 9AD08: using guessed type char byte_9AD08;
// 9AD90: using guessed type int dword_9AD90;
// 9AD98: using guessed type int dword_9AD98;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// B76F0: using guessed type char byte_B7700_B76F0;
// B76F2: using guessed type __int16 word_B7702_B76F2;
// B76F4: using guessed type __int16 word_B7704_B76F4;
// B771A: using guessed type char byte_B771A;
// 12EE8E: using guessed type __int16 word_12EE8E;
// 12EE90: using guessed type __int16 word_12EE90;
// 12EF28: using guessed type char pressedKeys_12EEF0_12EEE0[72];
// 12EF2B: using guessed type char pressedKeys_12EEF0_12EEE0[75];
// 12EF2D: using guessed type char pressedKeys_12EEF0_12EEE0[77];
// 12EF30: using guessed type char pressedKeys_12EEF0_12EEE0[80];
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFCC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFCE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFD2: using guessed type __int16 mouseRightButton2_12EFE2_12EFD2;
// 12EFD4: using guessed type __int16 mouseLeftButton2_12EFE4_12EFD4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

void sub_40440_40780(Pathstruct* pathstruct)//211440_211780
{
	char input[20];
	sub_63010_63520();
	if (pathstruct->colorPalette_var28)
	{
		for (int i = 0; pathstruct[i].colorPalette_var28; i++)
			sub_634A0_639B0(&pathstruct[i]);
	}
	if (pathstruct->colorPalette_var28)
	{
		for (int i = 0; pathstruct[i].colorPalette_var28; i++)
		{
			int compVar = sub_634E0_639F0(&pathstruct[i]);
			if (compVar < 0)
			{
				SetPalette_319A0_319E0(begPalDat_AE428_AE418_26C428_26C418);
				printf("ERROR: Allocation %s.\n", &pathstruct[i]);
				printf("Press return to continue\n");
				gets_s(input);
			}
			else if (!compVar)
			{
				SetPalette_319A0_319E0(begPalDat_AE428_AE418_26C428_26C418);
				printf("ERROR: File %s.\n", &pathstruct[i]);
				printf("Press return to continue\n");
				gets_s(input);
			}
		}
	}
}


char inbytes[] = {0x64,0x61,0x74,0x61,0x5C,0x73,0x63,0x72,0x65,0x65,0x6E,0x73,0x5C,0x73,0x70,0x74,
0x72,0x73,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0xE4,0xAA,0x2E,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,
0x5C,0x73,0x63,0x72,0x65,0x65,0x6E,0x73,0x5C,0x73,0x70,0x74,0x72,0x73,0x2E,0x74,
0x61,0x62,0x00,0x00,0x00,0x00,0x00,0x00,0xDC,0xAA,0x2E,0x00,0xE0,0xAA,0x2E,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2A,0x50,0x41,0x4C,0x45,0x54,0x54,0x45,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x8C,0xAB,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,
0x00,0x00,0x00,0x00,0x2A,0x53,0x43,0x52,0x45,0x45,0x4E,0x20,0x42,0x41,0x43,0x4B,
0x55,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x94,0xAB,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0xFA,0x00,0x00,0x00,0x00,0x00,0x00,
0x2A,0x53,0x43,0x52,0x45,0x45,0x4E,0x20,0x42,0x41,0x43,0x4B,0x55,0x50,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x98,0xAB,0x2E,0x00,
0x00,0x00,0x00,0x00,0x00,0xFA,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x5C,0x73,0x63,0x72,
0x65,0x65,0x6E,0x73,0x5C,0x73,0x66,0x6F,0x6E,0x74,0x30,0x2E,0x64,0x61,0x74,0x00,
0x00,0x00,0x00,0x00,0x20,0xAB,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x5C,0x73,0x63,0x72,0x65,0x65,0x6E,0x73,
0x5C,0x73,0x66,0x6F,0x6E,0x74,0x30,0x2E,0x74,0x61,0x62,0x00,0x00,0x00,0x00,0x00,
0x18,0xAB,0x2E,0x00,0x1C,0xAB,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x64,0x61,0x74,0x61,0x5C,0x73,0x63,0x72,0x65,0x65,0x6E,0x73,0x5C,0x67,0x63,0x73,
0x70,0x72,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xAA,0x2E,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,
0x5C,0x73,0x63,0x72,0x65,0x65,0x6E,0x73,0x5C,0x67,0x63,0x73,0x70,0x72,0x2E,0x74,
0x61,0x62,0x00,0x00,0x00,0x00,0x00,0x00,0xE8,0xAA,0x2E,0x00,0xEC,0xAA,0x2E,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x5C,0x73,0x63,0x72,0x65,0x65,0x6E,0x73,
0x5C,0x6D,0x6D,0x73,0x70,0x72,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x00,
0xFC,0xAA,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x64,0x61,0x74,0x61,0x5C,0x73,0x63,0x72,0x65,0x65,0x6E,0x73,0x5C,0x6D,0x6D,0x73,
0x70,0x72,0x2E,0x74,0x61,0x62,0x00,0x00,0x00,0x00,0x00,0x00,0xF4,0xAA,0x2E,0x00,
0xF8,0xAA,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,
0x5C,0x73,0x63,0x72,0x65,0x65,0x6E,0x73,0x5C,0x6D,0x6D,0x6D,0x61,0x73,0x6B,0x2E,
0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x90,0xAB,0x2E,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x5C,0x73,0x63,0x72,
0x65,0x65,0x6E,0x73,0x5C,0x73,0x66,0x6F,0x6E,0x74,0x31,0x2E,0x64,0x61,0x74,0x00,
0x00,0x00,0x00,0x00,0x2C,0xAB,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x5C,0x73,0x63,0x72,0x65,0x65,0x6E,0x73,
0x5C,0x73,0x66,0x6F,0x6E,0x74,0x31,0x2E,0x74,0x61,0x62,0x00,0x00,0x00,0x00,0x00,
0x24,0xAB,0x2E,0x00,0x28,0xAB,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x64,0x61,0x74,0x61,0x5C,0x73,0x63,0x72,0x65,0x65,0x6E,0x73,0x5C,0x67,0x6C,0x6F,
0x62,0x65,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x62,0xAB,0x2E,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,
0x5C,0x73,0x63,0x72,0x65,0x65,0x6E,0x73,0x5C,0x74,0x69,0x6D,0x65,0x72,0x2E,0x64,
0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0xAB,0x2E,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2A,0x42,0x52,0x49,0x47,0x48,0x54,0x20,
0x54,0x41,0x42,0x4C,0x45,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x9C,0xAB,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x64,0x61,0x74,0x61,0x5C,0x73,0x63,0x72,0x65,0x65,0x6E,0x73,0x5C,0x70,0x6D,0x75,
0x6C,0x74,0x73,0x70,0x72,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x08,0xAB,0x2E,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,
0x5C,0x73,0x63,0x72,0x65,0x65,0x6E,0x73,0x5C,0x70,0x6D,0x75,0x6C,0x74,0x73,0x70,
0x72,0x2E,0x74,0x61,0x62,0x00,0x00,0x00,0x00,0xAB,0x2E,0x00,0x04,0xAB,0x2E,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x5C,0x73,0x63,0x72,
0x65,0x65,0x6E,0x73,0x5C,0x73,0x66,0x6F,0x6E,0x74,0x31,0x2E,0x64,0x61,0x74,0x00,
0x00,0x00,0x00,0x00,0x2C,0xAB,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x5C,0x73,0x63,0x72,0x65,0x65,0x6E,0x73,
0x5C,0x73,0x66,0x6F,0x6E,0x74,0x31,0x2E,0x74,0x61,0x62,0x00,0x00,0x00,0x00,0x00,
0x24,0xAB,0x2E,0x00,0x28,0xAB,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,
0x5C,0x73,0x63,0x72,0x65,0x65,0x6E,0x73,0x5C,0x73,0x66,0x6F,0x6E,0x74,0x32,0x2E,
0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x38,0xAB,0x2E,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x5C,0x73,0x63,0x72,
0x65,0x65,0x6E,0x73,0x5C,0x73,0x66,0x6F,0x6E,0x74,0x32,0x2E,0x74,0x61,0x62,0x00,
0x00,0x00,0x00,0x00,0x30,0xAB,0x2E,0x00,0x34,0xAB,0x2E,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x64,0x61,0x74,0x61,0x5C,0x73,0x63,0x72,0x65,0x65,0x6E,0x73,0x5C,0x6C,0x61,0x6E,
0x67,0x73,0x70,0x72,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x50,0xAB,0x2E,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,
0x5C,0x73,0x63,0x72,0x65,0x65,0x6E,0x73,0x5C,0x6C,0x61,0x6E,0x67,0x73,0x70,0x72,
0x2E,0x74,0x61,0x62,0x00,0x00,0x00,0x00,0x48,0xAB,0x2E,0x00,0x4C,0xAB,0x2E,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x69,0x6E,0x74,0x72,0x6F,0x5C,0x74,0x69,0x74,0x6C,0x65,0x2D,
0x30,0x34,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x54,0xAB,0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x70,0x12,0x22,0x00,0x00,0x00,0x70,0x13,0x22,0x00,0x00,0x00,0xF0,0x11,
0x22,0x00,0x00,0x00,0x60,0x10,0x22,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,
0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,
0x04,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x40,0x12,
0x22,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x01,
0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x72,0x00,0x00,0x41,0x08,
0x00,0x00,0x00,0x00,0x00,0x45,0x09,0x00,0x00,0x00,0x00,0x00,0x42,0x01,0x00,0x00,
0x00,0x01,0x00,0x4D,0x02,0x00,0x00,0x00,0x1E,0x00,0x53,0x01,0x00,0x00,0x00,0x2B,
0x00,0x53,0x02,0x00,0x00,0x00,0x82,0x00,0x53,0x03,0x00,0x00,0x00,0x73,0x66,0x6F,
0x00,0x00,0x41,0x0A,0x00,0x00,0x00,0x00,0x00,0x42,0x01,0x00,0x00,0x00,0x00,0x00,
0x45,0x08,0x00,0x00,0x00,0x01,0x00,0x4D,0x02,0x00,0x00,0x00,0x32,0x00,0x53,0x01,
0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x0A,0x00,0x00,0x00,0x00,0x00,0x45,0x05,0x00,
0x00,0x00,0x01,0x00,0x53,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x4F,0x05,
0x00,0x00,0x00,0x00,0x00,0x45,0x01,0x00,0x00,0x00,0x00,0x00,0x42,0x01,0x00,0x00,
0x00,0x01,0x00,0x4D,0x01,0x00,0x00,0x00,0x01,0x00,0x41,0x2C,0x01,0x00,0x00,0x04,
0x00,0x41,0x0A,0x00,0x00,0x00,0x14,0x00,0x53,0x01,0x00,0x00,0x00,0x14,0x00,0x51,
0x00,0x00,0x00,0x00,0x36,0x00,0x41,0x90,0x01,0x00,0x00,0x37,0x00,0x41,0x14,0x00,
0x00,0x00,0x38,0x00,0x53,0x02,0x00,0x00,0x00,0x38,0x00,0x51,0x01,0x00,0x00,0x00,
0x41,0x00,0x41,0x5A,0x00,0x00,0x00,0x42,0x00,0x51,0x02,0x00,0x00,0x00,0x42,0x00,
0x41,0x90,0x01,0x00,0x00,0x44,0x00,0x41,0x14,0x00,0x00,0x00,0x4C,0x00,0x53,0x03,
0x00,0x00,0x00,0x4C,0x00,0x51,0x03,0x00,0x00,0x00,0x50,0x00,0x41,0x58,0x02,0x00,
0x00,0x51,0x00,0x41,0x14,0x00,0x00,0x00,0x54,0x00,0x51,0x04,0x00,0x00,0x00,0x54,
0x00,0x53,0x04,0x00,0x00,0x00,0x5D,0x00,0x41,0xBC,0x02,0x00,0x00,0x5E,0x00,0x41,
0x14,0x00,0x00,0x00,0x62,0x00,0x53,0x05,0x00,0x00,0x00,0x62,0x00,0x51,0x05,0x00,
0x00,0x00,0x6A,0x00,0x41,0xC8,0x00,0x00,0x00,0x6B,0x00,0x41,0x14,0x00,0x00,0x00,
0x6E,0x00,0x51,0x06,0x00,0x00,0x00,0x76,0x00,0x41,0x96,0x00,0x00,0x00,0x77,0x00,
0x45,0x02,0x00,0x00,0x00,0x78,0x00,0x41,0x14,0x00,0x00,0x00,0x81,0x00,0x53,0x01,
0x00,0x00,0x00,0x81,0x00,0x51,0x07,0x00,0x00,0x00,0x84,0x00,0x41,0x90,0x01,0x00,
0x00,0x85,0x00,0x41,0x14,0x00,0x00,0x00,0x88,0x00,0x51,0x08,0x00,0x00,0x00,0x91,
0x00,0x41,0xF4,0x01,0x00,0x00,0x92,0x00,0x41,0x14,0x00,0x00,0x00,0x98,0x00,0x53,
0x02,0x00,0x00,0x00,0x98,0x00,0x51,0x09,0x00,0x00,0x00,0x9C,0x00,0x41,0xFA,0x00,
0x00,0x00,0x9D,0x00,0x51,0x0A,0x00,0x00,0x00,0x9F,0x00,0x41,0x14,0x00,0x00,0x00,
0xA5,0x00,0x53,0x03,0x00,0x00,0x00,0xA5,0x00,0x51,0x0B,0x00,0x00,0x00,0xA9,0x00,
0x41,0x2C,0x01,0x00,0x00,0xAA,0x00,0x51,0x0C,0x00,0x00,0x00,0xAC,0x00,0x41,0x14,
0x00,0x00,0x00,0xB3,0x00,0x53,0x04,0x00,0x00,0x00,0xB3,0x00,0x51,0x0D,0x00,0x00,
0x00,0xB8,0x00,0x41,0xF4,0x01,0x00,0x00,0xB9,0x00,0x41,0x14,0x00,0x00,0x00,0xBC,
0x00,0x53,0x05,0x00,0x00,0x00,0xBC,0x00,0x51,0x0E,0x00,0x00,0x00,0xC5,0x00,0x41,
0xC8,0x00,0x00,0x00,0xC6,0x00,0x41,0x14,0x00,0x00,0x00,0xD2,0x00,0x41,0x64,0x00,
0x00,0x00,0xD3,0x00,0x41,0x14,0x00,0x00,0x00,0xD3,0x00,0x51,0x0F,0x00,0x00,0x00,
0xD4,0x00,0x53,0x06,0x00,0x00,0x00,0xDD,0x00,0x41,0x05,0x00,0x00,0x00,0x22,0x01,
0x4D,0x02,0x00,0x00,0x00,0x2C,0x01,0x41,0x05,0x00,0x00,0x00,0x34,0x01,0x45,0x03,
0x00,0x00,0x00,0x3E,0x01,0x53,0x03,0x00,0x00,0x00,0x57,0x01,0x52,0x02,0x00,0x00,
0x00,0x73,0x01,0x41,0x0A,0x00,0x00,0x00,0x73,0x01,0x51,0x10,0x00,0x00,0x00,0x74,
0x01,0x53,0x01,0x00,0x00,0x00,0xA4,0x01,0x41,0x02,0x00,0x00,0x00,0xA5,0x01,0x49,
0x00,0x00,0x00,0x00,0xA9,0x01,0x50,0x05,0x00,0x00,0x00,0x82,0x02,0x54,0x02,0x00,
0x00,0x00,0x83,0x02,0x53,0x04,0x00,0x00,0x00,0xAD,0x02,0x41,0x50,0x00,0x00,0x00,
0xAE,0x02,0x41,0x02,0x00,0x00,0x00,0xAE,0x02,0x45,0x04,0x00,0x00,0x00,0xB6,0x03,
0x53,0x01,0x00,0x00,0x00,0xE4,0x03,0x5A,0x03,0x00,0x00,0x00,0x23,0x04,0x53,0x02,
0x00,0x00,0x00,0x38,0x04,0x53,0x0B,0x00,0x00,0x00,0xBE,0x04,0x53,0x03,0x00,0x00,
0x00,0xD2,0x04,0x53,0x04,0x00,0x00,0x00,0x26,0x05,0x52,0x05,0x00,0x00,0x00,0xFE,
0x05,0x54,0x05,0x00,0x00,0x00,0xFE,0x05,0x53,0x0C,0x00,0x00,0x00,0x09,0x06,0x53,
0x02,0x00,0x00,0x00,0x77,0x06,0x53,0x0E,0x00,0x00,0x00,0x83,0x06,0x53,0x06,0x00,
0x00,0x00,0xB8,0x06,0x53,0x07,0x00,0x00,0x00,0x08,0x07,0x53,0x0B,0x00,0x00,0x00,
0x65,0x07,0x53,0x08,0x00,0x00,0x00,0x9E,0x07,0x53,0x0D,0x00,0x00,0x00,0xEB,0x07,
0x53,0x02,0x00,0x00,0x00,0x0E,0x08,0x53,0x09,0x00,0x00,0x00,0x27,0x08,0x53,0x06,
0x00,0x00,0x00,0x4D,0x08,0x53,0x07,0x00,0x00,0x00,0x84,0x08,0x53,0x0F,0x00,0x00,
0x00,0xBA,0x08,0x53,0x06,0x00,0x00,0x00,0xEA,0x08,0x53,0x0A,0x00,0x00,0x00,0x06,
0x09,0x53,0x09,0x00,0x00,0x00,0x44,0x09,0x41,0x64,0x00,0x00,0x00,0x45,0x09,0x45,
0x0C,0x00,0x00,0x00,0x46,0x09,0x41,0x02,0x00,0x00,0x00,0x46,0x09,0x53,0x04,0x00,
0x00,0x00,0x5B,0x09,0x53,0x05,0x00,0x00,0x00,0xB4,0x09,0x52,0x02,0x00,0x00,0x00,
0xE9,0x09,0x53,0x01,0x00,0x00,0x00,0x22,0x0A,0x54,0x02,0x00,0x00,0x00,0x22,0x0A,
0x52,0x03,0x00,0x00,0x00,0x72,0x0A,0x54,0x03,0x00,0x00,0x00,0x89,0x0A,0x53,0x09,
0x00,0x00,0x00,0xA5,0x0A,0x52,0x03,0x00,0x00,0x00,0xE8,0x0A,0x54,0x03,0x00,0x00,
0x00,0xEC,0x0A,0x53,0x07,0x00,0x00,0x00,0x02,0x0B,0x53,0x0A,0x00,0x00,0x00,0x06,
0x0B,0x53,0x08,0x00,0x00,0x00,0x0F,0x0B,0x53,0x06,0x00,0x00,0x00,0x1C,0x0B,0x53,
0x08,0x00,0x00,0x00,0x1C,0x0B,0x53,0x0B,0x00,0x00,0x00,0x6D,0x0B,0x53,0x05,0x00,
0x00,0x00,0x72,0x0B,0x4D,0x02,0x00,0x00,0x00,0x7F,0x0B,0x41,0xC8,0x00,0x00,0x00,
0x80,0x0B,0x41,0x05,0x00,0x00,0x00,0xEA,0x00,0x00,0x41,0x05,0x00,0x00,0x00,0x00,
0x00,0x45,0x0A,0x00,0x00,0x00,0x02,0x00,0x53,0x01,0x00,0x00,0x00,0x0C,0x00,0x53,
0x02,0x00,0x00,0x00,0x12,0x00,0x53,0x02,0x00,0x00,0x00,0x18,0x00,0x53,0x01,0x00,
0x00,0x00,0x22,0x00,0x53,0x02,0x00,0x00,0x00,0x28,0x00,0x53,0x01,0x00,0x00,0x00,
0x30,0x00,0x53,0x01,0x00,0x00,0x00,0x38,0x00,0x53,0x02,0x00,0x00,0x00,0x3E,0x00,
0x53,0x01,0x00,0x00,0x00,0x50,0x00,0x53,0x02,0x00,0x00,0x00,0x56,0x00,0x53,0x01,
0x00,0x00,0x00,0x5C,0x00,0x53,0x01,0x00,0x00,0x00,0x64,0x00,0x53,0x02,0x00,0x00,
0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x0A,0x00,0x00,0x00,0x00,
0x00,0x42,0x01,0x00,0x00,0x00,0x00,0x00,0x45,0x06,0x00,0x00,0x00,0x01,0x00,0x4D,
0x02,0x00,0x00,0x00,0xC8,0x00,0x53,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x0A,
0x00,0x00,0x00,0x00,0x00,0x42,0x01,0x00,0x00,0x00,0x00,0x00,0x45,0x07,0x00,0x00,
0x00,0x01,0x00,0x4D,0x02,0x00,0x00,0x00,0xB4,0x00,0x53,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x41,0x0A,0x00,0x00,0x00,0x00,0x00,0x45,0x0B,0x00,0x00,0x00,0x01,0x00,
0x53,0x01,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x41,0x08,0x00,0x00,0x00,0x00,
0x00,0x45,0x09,0x00,0x00,0x00,0x00,0x00,0x42,0x01,0x00,0x00,0x00,0x01,0x00,0x4D,
0x02,0x00,0x00,0x00,0x1E,0x00,0x53,0x01,0x00,0x00,0x00,0x2B,0x00,0x53,0x02,0x00,
0x00,0x00,0x82,0x00,0x53,0x03,0x00,0x00,0x00,0x00,0x53,0x01,0x6C,0x77,0x26,0x00,
0x78,0x77,0x26,0x00,0x80,0x77,0x26,0x00,0x90,0x77,0x26,0x00,0x98,0x77,0x26,0x00,
0xAC,0x77,0x26,0x00,0xB4,0x77,0x26,0x00,0xC4,0x77,0x26,0x00,0xCC,0x77,0x26,0x00,
0xD8,0x77,0x26,0x00,0xE0,0x77,0x26,0x00,0xEC,0x77,0x26,0x00,0xF8,0x77,0x26,0x00,
0x08,0x78,0x26,0x00,0x14,0x78,0x26,0x00,0x2C,0x78,0x26,0x00,0x34,0x78,0x26,0x00,
0x4C,0x78,0x26,0x00,0x54,0x78,0x26,0x00,0x64,0x78,0x26,0x00,0x74,0x78,0x26,0x00,
0x8C,0x78,0x26,0x00,0x98,0x78,0x26,0x00,0x98,0x78,0x26,0x00,0x9C,0x78,0x26,0x00,
0x78,0x77,0x26,0x00,0xA8,0x78,0x26,0x00,0xB4,0x78,0x26,0x00,0xBC,0x78,0x26,0x00,
0xD8,0x77,0x26,0x00,0xCC,0x78,0x26,0x00,0x90,0x77,0x26,0x00,0xDC,0x78,0x26,0x00,
0xAC,0x77,0x26,0x00,0xF0,0x78,0x26,0x00,0x04,0x79,0x26,0x00,0x0C,0x79,0x26,0x00,
0x20,0x79,0x26,0x00,0x28,0x79,0x26,0x00,0x38,0x79,0x26,0x00,0x40,0x79,0x26,0x00,
0x4C,0x79,0x26,0x00,0x54,0x79,0x26,0x00,0x64,0x79,0x26,0x00,0x6C,0x79,0x26,0x00,
0x84,0x79,0x26,0x00,0x74,0x78,0x26,0x00,0x8C,0x78,0x26,0x00,0x98,0x78,0x26,0x00,
0x98,0x78,0x26,0x00,0x8C,0x79,0x26,0x00,0x8C,0x79,0x26,0x00,0x90,0x79,0x26,0x00,
0x90,0x79,0x26,0x00,0x98,0x78,0x26,0x00,0x98,0x78,0x26,0x00,0x94,0x79,0x26,0x00,
0x94,0x79,0x26,0x00,0x98,0x79,0x26,0x00,0x98,0x79,0x26,0x00,0x9C,0x79,0x26,0x00,
0x9C,0x79,0x26,0x00,0xA0,0x79,0x26,0x00,0xA0,0x79,0x26,0x00,0xA4,0x79,0x26,0x00,
0xA4,0x79,0x26,0x00,0x98,0x78,0x26,0x00,0x98,0x78,0x26,0x00,0xA8,0x79,0x26,0x00,
0xA8,0x79,0x26,0x00,0xAC,0x79,0x26,0x00,0xAC,0x79,0x26,0x00,0x98,0x79,0x26,0x00,
0x98,0x79,0x26,0x00,0x98,0x78,0x26,0x00,0x98,0x78,0x26,0x00,0xB0,0x79,0x26,0x00,
0xB0,0x79,0x26,0x00,0xB4,0x79,0x26,0x00,0xB4,0x79,0x26,0x00,0x98,0x78,0x26,0x00,
0x98,0x78,0x26,0x00,0xB8,0x79,0x26,0x00,0xB8,0x79,0x26,0x00,0xBC,0x79,0x26,0x00,
0xBC,0x79,0x26,0x00,0x98,0x78,0x26,0x00,0x98,0x78,0x26,0x00,0x33,0x00,0x2F,0x00,
0x4B,0x00,0x2D,0x00,0x64,0x00,0x2E,0x00,0x7E,0x00,0x2C,0x00,0x32,0x00,0x69,0x00,
0x4D,0x00,0x65,0x00,0x66,0x00,0x64,0x00,0x81,0x00,0x63,0x00,0xAA,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x96,0x00,0x00,0x00,0x24,0x00,0x00,0x00,0xA1,0x00,0x00,0x00,
0x25,0x00,0x00,0x00,0x9F,0x00,0x00,0x00,0x23,0x00,0x00,0x00,0xBF,0x00,0x00,0x00,
0x49,0x00,0x00,0x00,0x81,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0xAC,0x00,0x00,0x00,
0x68,0x00,0x00,0x00,0x94,0x00,0x00,0x00,0x1B,0x00,0x00,0x00,0xBA,0x00,0x00,0x00,
0x85,0x00,0x00,0x00,0x86,0x00,0x00,0x00,0x1F,0x00,0x00,0x00,0xAD,0x00,0x00,0x00,
0xA5,0x00,0x00,0x00,0x93,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,0x00,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,
0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0xB1,0x00,
0x30,0x00,0x09,0x00,0x04,0x00,0xB4,0x00,0x31,0x00,0x07,0x00,0x02,0x00,0xBA,0x00,
0x31,0x00,0x02,0x00,0x05,0x00,0xC0,0x00,0x2D,0x00,0x03,0x00,0x20,0x00,0xB1,0x00,
0x31,0x00,0x01,0x00,0x0D,0x00,0xB7,0x00,0x2A,0x00,0x04,0x00,0x28,0x00,0xB4,0x00,
0x27,0x00,0x08,0x00,0x0A,0x00,0x3D,0x00,0x2D,0x00,0x3D,0x00,0x5F,0x00,0xB3,0x00,
0x2D,0x00,0xB3,0x00,0x5F,0x00,0x00,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
0x30,0x2D,0x3D,0x00,0x00,0x71,0x77,0x65,0x72,0x74,0x79,0x75,0x69,0x6F,0x70,0x5B,
0x5D,0x00,0x00,0x61,0x73,0x64,0x66,0x67,0x68,0x6A,0x6B,0x6C,0x3B,0x27,0x60,0x00,
0x23,0x7A,0x78,0x63,0x76,0x62,0x6E,0x6D,0x2C,0x2E,0x2F,0x00,0x00,0x00,0x20,0x00,
0x21,0x22,0x5C,0x24,0x25,0x5E,0x26,0x2A,0x28,0x29,0x5F,0x2B,0x00,0x00,0x51,0x57,
0x45,0x52,0x54,0x59,0x55,0x49,0x4F,0x50,0x7B,0x7D,0x00,0x00,0x41,0x53,0x44,0x46,
0x47,0x48,0x4A,0x4B,0x4C,0x3A,0x40,0x7E,0x00,0x7C,0x5A,0x58,0x43,0x56,0x42,0x4E,
0x4D,0x3C,0x3E,0x3F,0x00,0x00,0x00,0x20,0x8D,0x80,0x00,0x00,0x00,0x00,0x8B,0xD2,
0x53,0x56,0x83,0xEC,0x2C,0xE8,0x16,0x5C,0x00,0x00,0x85,0xC0,0x74,0x09,0xC6,0x05,
0xB9,0xAB,0x2E,0x00,0x07,0xEB,0x08,0x30,0xE4,0x88,0x25,0xB9,0xAB,0x2E,0x00,0x30,
0xF6,0x31,0xDB,0x31,0xC9,0x31,0xF6,0x88,0x35,0xC4,0xAB,0x2E,0x00,0x66,0x89,0x1D,
0xB0,0xAB,0x2E,0x00,0x66,0x89,0x0D,0xB2,0xAB,0x2E,0x00,0x66,0x89,0x35,0xAC,0xAB,
0x2E,0x00,0x8A,0x0D,0xC5,0xAB,0x2E,0x00,0x30,0xD2,0x30,0xDB,0x66,0x89,0x15,0xAE,
0xAB,0x2E,0x00,0x88,0x35,0xBA,0xAB,0x2E,0x00,0x88,0x35,0xB6,0xAB,0x2E,0x00,0x80,
0xC9,0x02,0x88,0x35,0xBD,0xAB,0x2E,0x00,0x88,0x1D,0xC0,0xAB,0x2E,0x00,0xB2,0x02,
0xB3,0x02,0x88,0x0D,0xC5,0xAB,0x2E,0x00,0xB5,0x01,0x88,0x15,0xBF,0xAB,0x2E,0x00,
0x88,0x1D,0xC1,0xAB,0x2E,0x00,0xB7,0x06,0x88,0x2D,0xBC,0xAB,0x2E,0x00,0x88,0xCC,
0x31,0xD2,0x80,0xE4,0x42,0x89,0x15,0xA0,0xAB,0x2E,0x00,0x88,0x25,0xC5,0xAB,0x2E,
0x00,0xA0,0xC6,0xAB,0x2E,0x00,0x88,0x3D,0xC2,0xAB,0x2E,0x00,0x24,0xF8,0x52,0xA2,
0xC6,0xAB,0x2E,0x00,0xA1,0xF8,0xC3,0x26,0x00,0x68,0xC0,0x79,0x26,0x00,0x83,0xC0,
0x75,0x30,0xED,0x50,0x88,0x3D,0xBE,0xAB,0x2E,0x00,0x88,0x2D,0xC3,0xAB,0x2E,0x00,
0xE8,0x27,0x64,0x01,0x00,0x83,0xC4,0x0C,0x68,0xCC,0x79,0x26,0x00,0x68,0xD8,0x79,
0x26,0x00,0x68,0xDC,0x79,0x26,0x00,0x8D,0x44,0x24,0x0C,0x50,0xE8,0x0B,0x64,0x01,
0x00,0x83,0xC4,0x10,0x68,0x02,0x02,0x00,0x00,0x8D,0x44,0x24,0x04,0x50,0xE8,0x2D,
0x25,0x01,0x00,0x83,0xC4,0x08,0x89,0x44,0x24,0x28,0x83,0xF8,0xFF,0x75,0x41,0x8A,
0x25,0xC5,0xAB,0x2E,0x00,0x80,0xE4,0xFD,0x68,0x22,0x02,0x00,0x00,0x88,0x25,0xC5,
0xAB,0x2E,0x00,0x8D,0x44,0x24,0x04,0x50,0xE8,0x03,0x25,0x01,0x00,0x83,0xC4,0x08,
0x89,0x44,0x24,0x28,0x83,0xF8,0xFF,0x74,0x20,0x6A,0x04,0x8D,0x54,0x24,0x2C,0x52,
0x50,0xE8,0xDA,0x85,0x01,0x00,0x83,0xC4,0x0C,0x8B,0x5C,0x24,0x28,0x53,0xEB,0x01,
0x50,0xE8,0x4A,0x25,0x01,0x00,0x83,0xC4,0x04,0xA1,0xF8,0xC3,0x26,0x00,0xC6,0x80,
0x97,0x00,0x00,0x00,0x00,0x83,0xC4,0x2C,0x5E,0x5B,0xC3,0x90,0xE7,0xBE,0x21,0x00,
0xE0,0xBE,0x21,0x00,0xEE,0xBE,0x21,0x00,0x24,0xBF,0x21,0x00,0xF5,0xBE,0x21,0x00,
0xFC,0xBE,0x21,0x00,0x03,0xBF,0x21,0x00,0x0A,0xBF,0x21,0x00,0x11,0xBF,0x21,0x00,
0x18,0xBF,0x21,0x00,0x1F,0xBF,0x21,0x00,0x8D,0x80,0x00,0x00,0x00,0x00,0x8B,0xD2,
0x53,0x56,0x57,0x55,0x83,0x3D,0x6C,0xAA,0x2E,0x00,0x00,0x74,0x58,0x68,0xC0,0xAE,
0x21,0x00,0xE8,0x09,0x59,0xFF,0xFF,0x8A,0x25,0x1E,0xD0,0x2E,0x00,0x83,0xC4,0x04,
0xF6,0xC4,0x01,0x74,0x1B,0x8B,0x3D,0xE4,0xAA,0x2E,0x00,0x57,0x8B,0x2D,0xE0,0xAA,
0x2E,0x00,0x55,0xA1,0xDC,0xAA,0x2E,0x00,0x50,0xE8,0xE2,0xB3,0x01,0x00,0xEB,0x1A,
0x8B,0x1D,0xE4,0xAA,0x2E,0x00,0x53,0x8B,0x0D,0xE0,0xAA,0x2E,0x00,0x51,0x8B,0x35,
0xDC,0xAA,0x2E,0x00,0x56,0xE8,0x16,0xB4,0x01,0x00,0x83,0xC4,0x0C,0x31,0xD2,0x89,
0x15,0x6C,0xAA,0x2E,0x00,0xE8,0xE6,0x5B,0x00,0x00,0xA0,0xBE,0xAB,0x2E,0x00,0x3C,
0x0A,0x77,0x51,0x25,0xFF,0x00,0x00,0x00,0x2E,0xFF,0x24,0x85,0x2C,0xBE,0x21,0x00,
0xE8,0xCB,0x00,0x00,0x00,0xEB,0x3D,0xE8,0x04,0x28,0x00,0x00,0xEB,0x36,0xE8,0xAD,
0x11,0x00,0x00,0xEB,0x2F,0xE8,0xC6,0x2A,0x00,0x00,0xEB,0x28,0xE8,0xEF,0x39,0x00,
0x00,0xEB,0x21,0xE8,0x28,0x48,0x00,0x00,0xEB,0x1A,0xE8,0xF1,0x43,0x00,0x00,0xEB,
0x13,0xE8,0x0A,0x46,0x00,0x00,0xEB,0x0C,0xE8,0x93,0x42,0x00,0x00,0xEB,0x05,0xE8,
0x7C,0x29,0x00,0x00,0xFF,0x05,0xA0,0xAB,0x2E,0x00,0xE8,0xE1,0xB3,0x01,0x00,0x83,
0x3D,0x80,0x48,0x25,0x00,0x00,0x74,0x52,0x68,0xC0,0xAE,0x21,0x00,0xE8,0xDE,0x6B,
0x01,0x00,0x8A,0x15,0x1E,0xD0,0x2E,0x00,0x83,0xC4,0x04,0xF6,0xC2,0x01,0x74,0x15,
0x6A,0x00,0x68,0xC8,0x00,0x00,0x00,0x8B,0x3D,0xEC,0xC3,0x26,0x00,0x57,0xE8,0xB4,
0x65,0xFF,0xFF,0xEB,0x13,0x6A,0x00,0x68,0xE0,0x01,0x00,0x00,0x8B,0x35,0xEC,0xC3,
0x26,0x00,0x56,0xE8,0xC5,0x65,0xFF,0xFF,0x83,0xC4,0x0C,0xC7,0x05,0x6C,0xAA,0x2E,
0x00,0x01,0x00,0x00,0x00,0xE8,0xD6,0x5E,0xFD,0xFF,0x5D,0x5F,0x5E,0x5B,0xC3,0x90,
0x90,0xC1,0x21,0x00,0xEC,0xC1,0x21,0x00,0x8B,0xC2,0x21,0x00,0xE6,0xC2,0x21,0x00,
0x42,0xC3,0x21,0x00,0x3C,0xC4,0x21,0x00,0x98,0xC4,0x21,0x00,0x8D,0x44,0x20,0x00,
0x53,0x56,0x57,0x55,0x83,0xEC,0x2C,0x8A,0x15,0xC5,0xAB,0x2E,0x00,0x30,0xE4,0x31,
0xF6,0x88,0x64,0x24,0x28,0xF6,0xC2,0x01,0x75,0x05,0xE8,0x91,0x0E,0x00,0x00,0x80,
0x3D,0xE1,0xCE,0x2E,0x00,0x00,0x74,0x13,0x30,0xDB,0x88,0x1D,0xE1,0xCE,0x2E,0x00,
0xB7,0x01,0xBE,0x01,0x00,0x00,0x00,0x88,0x7C,0x24,0x28,0x8A,0x0D,0xD4,0xAA,0x2E,
0x00,0xF6,0xC1,0x01,0x75,0x05,0xF6,0xC1,0x40,0x74,0x43,0x0F,0xBF,0x05,0xCC,0xAA,
0x2E,0x00,0xD1,0xF8,0x3D,0x18,0x01,0x00,0x00,0x7C,0x33,0x3D,0x2E,0x01,0x00,0x00,
0x7F,0x2C,0x0F,0xBF,0x05,0xCE,0xAA,0x2E,0x00,0xD1,0xF8,0x83,0xF8,0x79,0x7C,0x1E,
0x3D,0x93,0x00,0x00,0x00,0x7F,0x17,0x80,0x3D,0xB9,0xAB,0x2E,0x00,0x07,0x75,0x0E,
0x30,0xE4,0xB2,0x01,0x88,0x25,0xE1,0xCE,0x2E,0x00,0x88,0x54,0x24,0x28,0x0F,0xBF,
0x05,0xCC,0xAA,0x2E,0x00,0xB6,0xFF,0xD1,0xF8,0x88,0x35,0xBB,0xAB,0x2E,0x00,0x83,
0xF8,0x38,0x7C,0x62,0x3D,0x92,0x00,0x00,0x00,0x7F,0x5B,0x0F,0xBF,0x15,0xCE,0xAA,
0x2E,0x00,0xD1,0xFA,0x83,0xFA,0x40,0x7C,0x4D,0x81,0xFA,0x8F,0x00,0x00,0x00,0x7F,
0x45,0x80,0x3D,0xB9,0xAB,0x2E,0x00,0x07,0x75,0x20,0x8A,0x3D,0xD4,0xAA,0x2E,0x00,
0xF6,0xC7,0x01,0x74,0x31,0x88,0xF9,0x80,0xE1,0xFE,0x88,0x0D,0xD4,0xAA,0x2E,0x00,
0x30,0xED,0x88,0x2D,0xB9,0xAB,0x2E,0x00,0xEB,0x1C,0xA1,0x84,0x48,0x25,0x00,0x31,
0xDB,0x8A,0x58,0x05,0x83,0xEA,0x40,0x83,0xEB,0x02,0x89,0xD0,0xC1,0xFA,0x1F,0xF7,
0xFB,0xA2,0xBB,0xAB,0x2E,0x00,0xF6,0x05,0xD4,0xAA,0x2E,0x00,0x01,0x0F,0x84,0xC8,
0x05,0x00,0x00,0x0F,0xBF,0x05,0xCC,0xAA,0x2E,0x00,0x31,0xD2,0xD1,0xF8,0x66,0x89,
0x15,0xCE,0xCF,0x2E,0x00,0x3D,0xAB,0x00,0x00,0x00,0x7C,0x60,0x3D,0x08,0x01,0x00,
0x00,0x7F,0x59,0x0F,0xBF,0x05,0xCE,0xAA,0x2E,0x00,0xD1,0xF8,0x83,0xF8,0x2A,0x7C,
0x4B,0x3D,0x93,0x00,0x00,0x00,0x7F,0x44,0x8A,0x3D,0xC3,0xAB,0x2E,0x00,0xFE,0xC7,
0x88,0x3D,0xC3,0xAB,0x2E,0x00,0x80,0xFF,0x07,0x75,0x08,0x30,0xED,0x88,0x2D,0xC3,
0xAB,0x2E,0x00,0x80,0x3D,0xC3,0xAB,0x2E,0x00,0x03,0x75,0x07,0xC6,0x05,0xC3,0xAB,
0x2E,0x00,0x04,0x80,0x3D,0xC3,0xAB,0x2E,0x00,0x05,0x0F,0x85,0x5B,0x05,0x00,0x00,
0xC6,0x05,0xC3,0xAB,0x2E,0x00,0x06,0xE9,0x4F,0x05,0x00,0x00,0x0F,0xBF,0x05,0xCC,
0xAA,0x2E,0x00,0xD1,0xF8,0x83,0xF8,0x38,0x0F,0x8C,0x3D,0x05,0x00,0x00,0x3D,0x92,
0x00,0x00,0x00,0x0F,0x8F,0x32,0x05,0x00,0x00,0x0F,0xBF,0x05,0xCE,0xAA,0x2E,0x00,
0xD1,0xF8,0x83,0xF8,0x40,0x0F,0x8C,0x20,0x05,0x00,0x00,0x3D,0x8F,0x00,0x00,0x00,
0x0F,0x8F,0x15,0x05,0x00,0x00,0xA0,0xB9,0xAB,0x2E,0x00,0x3C,0x06,0x0F,0x87,0x08,
0x05,0x00,0x00,0x25,0xFF,0x00,0x00,0x00,0x2E,0xFF,0x24,0x85,0x90,0xBF,0x21,0x00,
0xE8,0xCB,0x06,0x00,0x00,0x85,0xC0,0x0F,0x84,0xEE,0x04,0x00,0x00,0x31,0xC0,0xA0,
0xBB,0xAB,0x2E,0x00,0x8B,0x0C,0xC5,0xAC,0xB9,0x21,0x00,0x51,0x68,0xEC,0x79,0x26,
0x00,0x68,0xB0,0xA9,0x2E,0x00,0xE8,0x01,0x60,0x01,0x00,0x31,0xC0,0xA0,0xBB,0xAB,
0x2E,0x00,0x83,0xC4,0x0C,0x8B,0x3C,0xC5,0xB0,0xB9,0x21,0x00,0x57,0x68,0xEC,0x79,
0x26,0x00,0x68,0x90,0xA9,0x2E,0x00,0xB3,0x01,0xE8,0xDE,0x5F,0x01,0x00,0x83,0xC4,
0x0C,0x88,0x1D,0xB9,0xAB,0x2E,0x00,0xE9,0x9F,0x04,0x00,0x00,0xE8,0x6F,0x06,0x00,
0x00,0x85,0xC0,0x0F,0x84,0x92,0x04,0x00,0x00,0x31,0xC0,0xA0,0xBB,0xAB,0x2E,0x00,
0x8B,0x14,0xC5,0x0C,0xBA,0x21,0x00,0x52,0x68,0xEC,0x79,0x26,0x00,0x68,0xD0,0xA9,
0x2E,0x00,0xE8,0xA5,0x5F,0x01,0x00,0x31,0xC0,0xA0,0xBB,0xAB,0x2E,0x00,0x83,0xC4,
0x0C,0x8B,0x1C,0xC5,0x10,0xBA,0x21,0x00,0x53,0x68,0xEC,0x79,0x26,0x00,0x68,0xF0,
0xA9,0x2E,0x00,0xE8,0x84,0x5F,0x01,0x00,0x83,0xC4,0x0C,0x68,0x78,0x77,0x26,0x00,
0x68,0x90,0xA9,0x2E,0x00,0xE8,0xA6,0x8C,0x01,0x00,0x83,0xC4,0x08,0x85,0xC0,0x75,
0x2E,0x68,0x78,0x77,0x26,0x00,0x68,0xF0,0xA9,0x2E,0x00,0xE8,0x90,0x8C,0x01,0x00,
0x83,0xC4,0x08,0x85,0xC0,0x75,0x0C,0xC6,0x05,0xB9,0xAB,0x2E,0x00,0x06,0xE9,0x18,
0x04,0x00,0x00,0xC6,0x05,0xB9,0xAB,0x2E,0x00,0x05,0xE9,0x0C,0x04,0x00,0x00,0xC6,
0x05,0xB9,0xAB,0x2E,0x00,0x02,0xE9,0x00,0x04,0x00,0x00,0xE8,0xD0,0x05,0x00,0x00,
0x85,0xC0,0x0F,0x84,0xF3,0x03,0x00,0x00,0x31,0xC0,0xA0,0xBB,0xAB,0x2E,0x00,0x8B,
0x3C,0xC5,0x74,0xBA,0x21,0x00,0x57,0x68,0xEC,0x79,0x26,0x00,0x68,0x70,0xAA,0x2E,
0x00,0xE8,0x06,0x5F,0x01,0x00,0x31,0xC0,0xA0,0xBB,0xAB,0x2E,0x00,0x83,0xC4,0x0C,
0x8B,0x2C,0xC5,0x78,0xBA,0x21,0x00,0x55,0x68,0xEC,0x79,0x26,0x00,0x68,0x8E,0xAA,
0x2E,0x00,0xE8,0xE5,0x5E,0x01,0x00,0xB0,0x03,0x83,0xC4,0x0C,0xA2,0xB9,0xAB,0x2E,
0x00,0xE9,0xA5,0x03,0x00,0x00,0xE8,0x75,0x05,0x00,0x00,0x85,0xC0,0x0F,0x84,0x98,
0x03,0x00,0x00,0x31,0xC0,0xA0,0xBB,0xAB,0x2E,0x00,0x8B,0x1C,0xC5,0x8C,0xBA,0x21,
0x00,0x53,0x68,0xEC,0x79,0x26,0x00,0x68,0x7A,0xAA,0x2E,0x00,0xE8,0xAB,0x5E,0x01,
0x00,0x31,0xC0,0xA0,0xBB,0xAB,0x2E,0x00,0x83,0xC4,0x0C,0x8B,0x0C,0xC5,0x90,0xBA,
0x21,0x00,0x51,0x68,0xEC,0x79,0x26,0x00,0x68,0xA2,0xAA,0x2E,0x00,0xE8,0x8A,0x5E,
0x01,0x00,0xB5,0x04,0x83,0xC4,0x0C,0x88,0x2D,0xB9,0xAB,0x2E,0x00,0xE9,0x49,0x03,
0x00,0x00,0xE8,0x19,0x05,0x00,0x00,0x85,0xC0,0x0F,0x84,0x3C,0x03,0x00,0x00,0x31,
0xC0,0xA0,0xBB,0xAB,0x2E,0x00,0x8B,0x2C,0xC5,0xBC,0xBA,0x21,0x00,0x55,0x68,0xEC,
0x79,0x26,0x00,0x68,0xC0,0xAA,0x2E,0x00,0xE8,0x4F,0x5E,0x01,0x00,0x31,0xC0,0xA0,
0xBB,0xAB,0x2E,0x00,0x83,0xC4,0x0C,0x8B,0x14,0xC5,0xC0,0xBA,0x21,0x00,0x52,0x68,
0xEC,0x79,0x26,0x00,0x68,0xB6,0xAA,0x2E,0x00,0xE8,0x2E,0x5E,0x01,0x00,0x83,0xC4,
0x0C,0x68,0x38,0x79,0x26,0x00,0xB3,0x05,0x68,0xF0,0xA9,0x2E,0x00,0x88,0x1D,0xB9,
0xAB,0x2E,0x00,0xE8,0x48,0x8B,0x01,0x00,0x83,0xC4,0x08,0x85,0xC0,0x0F,0x84,0xC0,
0xFE,0xFF,0xFF,0x68,0x4C,0x79,0x26,0x00,0x68,0xF0,0xA9,0x2E,0x00,0xE8,0x2E,0x8B,
0x01,0x00,0x83,0xC4,0x08,0x85,0xC0,0x0F,0x84,0xA6,0xFE,0xFF,0xFF,0x68,0x64,0x79,
0x26,0x00,0x68,0xF0,0xA9,0x2E,0x00,0xE8,0x14,0x8B,0x01,0x00,0x83,0xC4,0x08,0x85,
0xC0,0x0F,0x84,0x8C,0xFE,0xFF,0xFF,0x68,0x20,0x79,0x26,0x00,0x68,0xF0,0xA9,0x2E,
0x00,0xE8,0xFA,0x8A,0x01,0x00,0x83,0xC4,0x08,0x85,0xC0,0x0F,0x84,0x72,0xFE,0xFF,
0xFF,0x68,0xF0,0x79,0x26,0x00,0x68,0xEC,0x79,0x26,0x00,0xB1,0x06,0x68,0x84,0xAA,
0x2E,0x00,0x88,0x0D,0xB9,0xAB,0x2E,0x00,0xE8,0x9F,0x5D,0x01,0x00,0x83,0xC4,0x0C,
0x68,0xF0,0x79,0x26,0x00,0x68,0xEC,0x79,0x26,0x00,0x68,0x98,0xAA,0x2E,0x00,0xE8,
0x88,0x5D,0x01,0x00,0x83,0xC4,0x0C,0xE9,0x4F,0x02,0x00,0x00,0xE8,0x1F,0x04,0x00,
0x00,0x85,0xC0,0x0F,0x84,0x42,0x02,0x00,0x00,0x31,0xC0,0xA0,0xBB,0xAB,0x2E,0x00,
0x8B,0x0C,0xC5,0xDC,0xBA,0x21,0x00,0x51,0x68,0xEC,0x79,0x26,0x00,0x68,0x84,0xAA,
0x2E,0x00,0xE8,0x55,0x5D,0x01,0x00,0x31,0xC0,0xA0,0xBB,0xAB,0x2E,0x00,0x83,0xC4,
0x0C,0x8B,0x3C,0xC5,0xE0,0xBA,0x21,0x00,0x57,0x68,0xEC,0x79,0x26,0x00,0x68,0x98,
0xAA,0x2E,0x00,0xE8,0x34,0x5D,0x01,0x00,0xB6,0x06,0x83,0xC4,0x0C,0x88,0x35,0xB9,
0xAB,0x2E,0x00,0xE9,0xF3,0x01,0x00,0x00,0xE8,0xC3,0x03,0x00,0x00,0x85,0xC0,0x0F,
0x84,0xE6,0x01,0x00,0x00,0x31,0xC0,0xA0,0xBB,0xAB,0x2E,0x00,0x8B,0x14,0xC5,0xF4,
0xBA,0x21,0x00,0x52,0x68,0xEC,0x79,0x26,0x00,0x68,0x10,0xAA,0x2E,0x00,0xE8,0xF9,
0x5C,0x01,0x00,0x31,0xC0,0xA0,0xBB,0xAB,0x2E,0x00,0x83,0xC4,0x0C,0x8B,0x1C,0xC5,
0xF8,0xBA,0x21,0x00,0x53,0x68,0xEC,0x79,0x26,0x00,0x68,0xAC,0xAA,0x2E,0x00,0xE8,
0xD8,0x5C,0x01,0x00,0x83,0xC4,0x0C,0x68,0xB8,0x79,0x26,0x00,0x68,0xAC,0xAA,0x2E,
0x00,0xE8,0xFA,0x89,0x01,0x00,0x83,0xC4,0x08,0x85,0xC0,0x0F,0x85,0x82,0x01,0x00,
0x00,0x68,0xCC,0x79,0x26,0x00,0x68,0xD8,0x79,0x26,0x00,0x68,0xF4,0x79,0x26,0x00,
0x8D,0x44,0x24,0x0C,0x50,0xE8,0xA2,0x5C,0x01,0x00,0x83,0xC4,0x10,0x68,0x08,0x7A,
0x26,0x00,0x8D,0x44,0x24,0x04,0x50,0xE8,0xB6,0x76,0x01,0x00,0x89,0xC3,0x83,0xC4,
0x08,0x85,0xC0,0x74,0x43,0x68,0xB6,0xAA,0x2E,0x00,0x68,0xA2,0xAA,0x2E,0x00,0x68,
0x8E,0xAA,0x2E,0x00,0x68,0x90,0xA9,0x2E,0x00,0x68,0x0C,0x7A,0x26,0x00,0x50,0xE8,
0x3D,0x77,0x01,0x00,0x83,0xC4,0x18,0x68,0x98,0xAA,0x2E,0x00,0x68,0xF0,0xA9,0x2E,
0x00,0x68,0x24,0x7A,0x26,0x00,0x53,0xE8,0x25,0x77,0x01,0x00,0x83,0xC4,0x10,0x53,
0xE8,0x41,0x77,0x01,0x00,0x83,0xC4,0x04,0x68,0xCC,0x79,0x26,0x00,0x68,0xD8,0x79,
0x26,0x00,0x68,0x38,0x7A,0x26,0x00,0x8D,0x44,0x24,0x0C,0x50,0xE8,0x2B,0x5C,0x01,
0x00,0x83,0xC4,0x10,0x68,0x22,0x02,0x00,0x00,0x8D,0x44,0x24,0x04,0x50,0xE8,0x4D,
0x1D,0x01,0x00,0x89,0xC3,0x83,0xC4,0x08,0x83,0xF8,0xFF,0x0F,0x84,0xC9,0x00,0x00,
0x00,0x6A,0x20,0x68,0x90,0xA9,0x2E,0x00,0x50,0xE8,0x22,0x7E,0x01,0x00,0x83,0xC4,
0x0C,0x6A,0x20,0x68,0xB0,0xA9,0x2E,0x00,0x53,0xE8,0x12,0x7E,0x01,0x00,0x83,0xC4,
0x0C,0x6A,0x20,0x68,0xF0,0xA9,0x2E,0x00,0x53,0xE8,0x02,0x7E,0x01,0x00,0x83,0xC4,
0x0C,0x6A,0x20,0x68,0xD0,0xA9,0x2E,0x00,0x53,0xE8,0xF2,0x7D,0x01,0x00,0x83,0xC4,
0x0C,0x6A,0x0A,0x68,0x8E,0xAA,0x2E,0x00,0x53,0xE8,0xE2,0x7D,0x01,0x00,0x83,0xC4,
0x0C,0x6A,0x0A,0x68,0x70,0xAA,0x2E,0x00,0x53,0xE8,0xD2,0x7D,0x01,0x00,0x83,0xC4,
0x0C,0x6A,0x0A,0x68,0xA2,0xAA,0x2E,0x00,0x53,0xE8,0xC2,0x7D,0x01,0x00,0x83,0xC4,
0x0C,0x6A,0x0A,0x68,0x7A,0xAA,0x2E,0x00,0x53,0xE8,0xB2,0x7D,0x01,0x00,0x83,0xC4,
0x0C,0x6A,0x0A,0x68,0xB6,0xAA,0x2E,0x00,0x53,0xE8,0xA2,0x7D,0x01,0x00,0x83,0xC4,
0x0C,0x6A,0x0A,0x68,0xC0,0xAA,0x2E,0x00,0x53,0xE8,0x92,0x7D,0x01,0x00,0x83,0xC4,
0x0C,0x6A,0x0A,0x68,0x98,0xAA,0x2E,0x00,0x53,0xE8,0x82,0x7D,0x01,0x00,0x83,0xC4,
0x0C,0x6A,0x0A,0x68,0x84,0xAA,0x2E,0x00,0x53,0xE8,0x72,0x7D,0x01,0x00,0x83,0xC4,
0x0C,0x53,0xE8,0xE9,0x1C,0x01,0x00,0x83,0xC4,0x04,0xC6,0x05,0xB9,0xAB,0x2E,0x00,
0x07,0xEB,0x08,0x30,0xE4,0x88,0x25,0xB9,0xAB,0x2E,0x00,0xF6,0x05,0x1E,0xD0,0x2E,
0x00,0x01,0x74,0x1A,0x68,0xC8,0x00,0x00,0x00,0x8B,0x15,0xE4,0xCF,0x2E,0x00,0x52,
0x8B,0x1D,0xEC,0xC3,0x26,0x00,0x53,0xE8,0x0C,0x7E,0x01,0x00,0xEB,0x17,0x68,0xE0,
0x01,0x00,0x00,0x8B,0x2D,0xE4,0xCF,0x2E,0x00,0x55,0xA1,0xEC,0xC3,0x26,0x00,0x50,
0xE8,0x0F,0x7E,0x01,0x00,0x83,0xC4,0x0C,0xE8,0xD3,0x01,0x00,0x00,0xF6,0x05,0x1E,
0xD0,0x2E,0x00,0x01,0x74,0x0C,0x68,0xC8,0x00,0x00,0x00,0xE8,0xD0,0x1B,0x01,0x00,
0xEB,0x0A,0x68,0xE0,0x01,0x00,0x00,0xE8,0xD4,0xE7,0x00,0x00,0x83,0xC4,0x04,0x80,
0x7C,0x24,0x28,0x00,0x0F,0x84,0x6B,0x00,0x00,0x00,0x31,0xC0,0xA0,0xC3,0xAB,0x2E,
0x00,0x66,0x8B,0x04,0xC5,0x04,0xBC,0x21,0x00,0x25,0xFF,0xFF,0x00,0x00,0x50,0xE8,
0x1C,0x6A,0x00,0x00,0x83,0xC4,0x04,0xE8,0xB4,0x08,0x00,0x00,0xF6,0x05,0xC5,0xAB,
0x2E,0x00,0x80,0x75,0x0C,0xE8,0x56,0xA4,0xFE,0xFF,0x80,0x0D,0xC5,0xAB,0x2E,0x00,
0x80,0x8A,0x25,0xC5,0xAB,0x2E,0x00,0xF6,0xC4,0x02,0x74,0x0E,0xF6,0xC4,0x04,0x74,
0x09,0xF6,0x05,0xD4,0xAA,0x2E,0x00,0x40,0x74,0x0D,0x85,0xF6,0x75,0x09,0xC6,0x05,
0xBE,0xAB,0x2E,0x00,0x07,0xEB,0x07,0xC6,0x05,0xBE,0xAB,0x2E,0x00,0x02,0x80,0x25,
0xD4,0xAA,0x2E,0x00,0xBE,0x83,0xC4,0x2C,0x5D,0x5F,0x5E,0x5B,0xC3,0x8D,0x40,0x00,
0x53,0x8A,0x15,0x0A,0xCF,0x2E,0x00,0x31,0xC0,0x84,0xD2,0x75,0x09,0x80,0x3D,0x16,
0xCF,0x2E,0x00,0x00,0x74,0x32,0x80,0x3D,0x60,0xCF,0x2E,0x00,0x10,0x75,0x29,0xBA,
0x01,0x00,0x00,0x00,0x8B,0x1D,0xF0,0xC3,0x26,0x00,0x89,0x15,0x80,0x48,0x25,0x00,
0x0F,0xBF,0x53,0x08,0x89,0xD0,0xC1,0xE0,0x0B,0x01,0xD0,0xC6,0x84,0x03,0x0F,0x34,
0x00,0x00,0x01,0xB8,0x01,0x00,0x00,0x00,0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,
0x53,0x56,0x31,0xDB,0x8B,0x15,0xC4,0xA5,0x26,0x00,0x8B,0x74,0x24,0x10,0x89,0xF0,
0xC1,0xE0,0x04,0x29,0xF0,0x8D,0x04,0xC5,0x00,0x00,0x00,0x00,0x8D,0x34,0x02,0xE8,
0x8C,0xFF,0xFF,0xFF,0x85,0xC0,0x74,0x05,0xBB,0x01,0x00,0x00,0x00,0x66,0x83,0x3D,
0xCE,0xCF,0x2E,0x00,0x00,0x75,0x1D,0x66,0x83,0x3D,0xCC,0xCF,0x2E,0x00,0x00,0x75,
0x13,0x66,0x83,0x3D,0xCA,0xCF,0x2E,0x00,0x00,0x75,0x09,0x80,0x3D,0x60,0xCF,0x2E,
0x00,0x00,0x74,0x27,0x30,0xD2,0x88,0x15,0x60,0xCF,0x2E,0x00,0x31,0xC0,0x30,0xF6,
0x31,0xDB,0x66,0xA3,0xCA,0xCF,0x2E,0x00,0x66,0x89,0x15,0xCC,0xCF,0x2E,0x00,0x66,
0x89,0x1D,0xCE,0xCF,0x2E,0x00,0xBB,0x01,0x00,0x00,0x00,0x3B,0x35,0xC4,0xA5,0x26,
0x00,0x73,0x05,0xBB,0x01,0x00,0x00,0x00,0x85,0xDB,0x75,0x0B,0x83,0x7C,0x24,0x0C,
0x00,0x74,0x04,0xFF,0x54,0x24,0x0C,0x85,0xDB,0x74,0x84,0x5E,0x5B,0xC3,0x8B,0xC0,
0x53,0x56,0xE8,0x79,0x01,0x00,0x00,0xBE,0x01,0x00,0x00,0x00,0x30,0xD2,0x8B,0x18,
0x80,0x3B,0x21,0x74,0x0F,0x3A,0x15,0xBB,0xAB,0x2E,0x00,0x74,0x07,0x83,0xC0,0x08,
0xFE,0xC2,0xEB,0xEA,0x8B,0x00,0x80,0x38,0x21,0x75,0x02,0x31,0xF6,0x89,0xF0,0x5E,
0x5B,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,0x8B,0xC0,
0x53,0xE8,0x7A,0x5E,0x00,0x00,0x6A,0x4E,0x6A,0x5A,0x6A,0x40,0x6A,0x38,0xE8,0xED,
0x5D,0x00,0x00,0x83,0xC4,0x10,0xE8,0x25,0x01,0x00,0x00,0x85,0xC0,0x75,0x08,0x50,
0xE8,0x4B,0x03,0x00,0x00,0xEB,0x06,0x50,0xE8,0x63,0x01,0x00,0x00,0x83,0xC4,0x04,
0x80,0x3D,0xB9,0xAB,0x2E,0x00,0x07,0x75,0x3E,0xF6,0x05,0x1E,0xD0,0x2E,0x00,0x01,
0x74,0x1A,0xA1,0xE8,0xAA,0x2E,0x00,0x83,0xC0,0x42,0x50,0x68,0xE0,0x00,0x00,0x00,
0x68,0x2A,0x02,0x00,0x00,0xE8,0xF6,0x58,0x01,0x00,0xEB,0x18,0xA1,0xE8,0xAA,0x2E,
0x00,0x83,0xC0,0x42,0x50,0x68,0xE0,0x00,0x00,0x00,0x68,0x2A,0x02,0x00,0x00,0xE8,
0x14,0x59,0x01,0x00,0x83,0xC4,0x0C,0xE8,0x24,0x5E,0x00,0x00,0xF6,0x05,0x1E,0xD0,
0x2E,0x00,0x01,0x74,0x46,0x31,0xD2,0x8A,0x15,0xC3,0xAB,0x2E,0x00,0x0F,0xBF,0x1C,
0xD5,0x02,0xBC,0x21,0x00,0x8D,0x04,0x9D,0x00,0x00,0x00,0x00,0x29,0xD8,0x8B,0x1D,
0xE8,0xAA,0x2E,0x00,0x01,0xC0,0x01,0xD8,0x50,0x66,0x8B,0x04,0xD5,0x00,0xBC,0x21,
0x00,0x01,0xC0,0x98,0x50,0x66,0x8B,0x04,0xD5,0xFE,0xBB,0x21,0x00,0x01,0xC0,0x98,
0x50,0xE8,0x8A,0x58,0x01,0x00,0x83,0xC4,0x0C,0x5B,0xC3,0x31,0xD2,0x8A,0x15,0xC3,
0xAB,0x2E,0x00,0x0F,0xBF,0x1C,0xD5,0x02,0xBC,0x21,0x00,0x8D,0x04,0x9D,0x00,0x00,
0x00,0x00,0x29,0xD8,0x8B,0x1D,0xE8,0xAA,0x2E,0x00,0x01,0xC0,0x01,0xD8,0x50,0x66,
0x8B,0x04,0xD5,0x00,0xBC,0x21,0x00,0x01,0xC0,0x98,0x50,0x66,0x8B,0x04,0xD5,0xFE,
0xBB,0x21,0x00,0x01,0xC0,0x98,0x50,0xE8,0x7C,0x58,0x01,0x00,0x83,0xC4,0x0C,0x5B,
0xC3,0x8D,0x40,0x00,0xF9,0xC9,0x21,0x00,0xFF,0xC9,0x21,0x00,0x05,0xCA,0x21,0x00,
0x0B,0xCA,0x21,0x00,0x11,0xCA,0x21,0x00,0x17,0xCA,0x21,0x00,0x1D,0xCA,0x21,0x00,
0x23,0xCA,0x21,0x00,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x92,0x00,0x00,0x00,0x00,
0x8A,0x15,0xB9,0xAB,0x2E,0x00,0x80,0xFA,0x07,0x77,0x3A,0x81,0xE2,0xFF,0x00,0x00,
0x00,0x2E,0xFF,0x24,0x95,0xB4,0xC9,0x21,0x00,0xB8,0xAC,0xB9,0x21,0x00,0xC3,0xB8,
0x0C,0xBA,0x21,0x00,0xC3,0xB8,0x74,0xBA,0x21,0x00,0xC3,0xB8,0x8C,0xBA,0x21,0x00,
0xC3,0xB8,0xBC,0xBA,0x21,0x00,0xC3,0xB8,0xDC,0xBA,0x21,0x00,0xC3,0xB8,0xF4,0xBA,
0x21,0x00,0xC3,0x31,0xC0,0xC3,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x54,0x22,0x00,
0x53,0x56,0x57,0x55,0x83,0xEC,0x0C,0x8B,0x74,0x24,0x20,0x85,0xF6,0x0F,0x84,0x6B,
0x01,0x00,0x00,0x6A,0x19,0xA1,0x84,0x48,0x25,0x00,0x6A,0x22,0x0F,0xB6,0x68,0x05,
0x6A,0x26,0x8A,0x25,0x88,0x48,0x25,0x00,0x8B,0x15,0x8C,0xAB,0x2E,0x00,0x80,0xE4,
0xFD,0x52,0x88,0x25,0x88,0x48,0x25,0x00,0xE8,0x13,0x17,0x01,0x00,0x88,0x44,0x24,
0x14,0x83,0xC4,0x10,0x6A,0x11,0x6A,0x18,0x6A,0x1E,0x8B,0x0D,0x8C,0xAB,0x2E,0x00,
0x51,0x88,0x44,0x24,0x10,0xE8,0xF6,0x16,0x01,0x00,0x83,0xC4,0x10,0x6A,0x17,0x6A,
0x1E,0x30,0xDB,0x6A,0x20,0x88,0xC7,0xA1,0x8C,0xAB,0x2E,0x00,0x50,0x31,0xFF,0x83,
0xED,0x02,0xE8,0xD9,0x16,0x01,0x00,0x83,0xC4,0x10,0x8A,0x15,0xB9,0xAB,0x2E,0x00,
0x88,0x44,0x24,0x08,0x80,0xFA,0x06,0x0F,0x85,0xF9,0x00,0x00,0x00,0x8A,0x64,0x24,
0x04,0x8A,0x35,0xBB,0xAB,0x2E,0x00,0x88,0x25,0x8A,0x48,0x25,0x00,0x84,0xF6,0x75,
0x05,0xA2,0x8A,0x48,0x25,0x00,0x3A,0x1D,0xBA,0xAB,0x2E,0x00,0x75,0x06,0x88,0x3D,
0x8A,0x48,0x25,0x00,0x8B,0x15,0x4C,0xC3,0x26,0x00,0x52,0x0F,0xBF,0xC7,0x50,0x6A,
0x00,0x68,0x84,0x48,0x25,0x00,0xFE,0xC3,0xE8,0xA3,0x5D,0x00,0x00,0x83,0xC4,0x10,
0x01,0xEF,0x8A,0x04,0x24,0x8A,0x2D,0xBB,0xAB,0x2E,0x00,0xA2,0x8A,0x48,0x25,0x00,
0x38,0xEB,0x75,0x09,0x8A,0x44,0x24,0x08,0xA2,0x8A,0x48,0x25,0x00,0x3A,0x1D,0xBA,
0xAB,0x2E,0x00,0x75,0x06,0x88,0x3D,0x8A,0x48,0x25,0x00,0x8B,0x0D,0x50,0xC3,0x26,
0x00,0x51,0x0F,0xBF,0xC7,0x50,0x6A,0x00,0x68,0x84,0x48,0x25,0x00,0xE8,0x5E,0x5D,
0x00,0x00,0x83,0xC4,0x10,0x80,0x3D,0xB9,0xAB,0x2E,0x00,0x06,0x75,0x0A,0x6A,0x10,
0xE8,0xBB,0x00,0x00,0x00,0x83,0xC4,0x04,0x80,0x3D,0xB9,0xAB,0x2E,0x00,0x07,0x73,
0x4D,0xE8,0xBA,0x5B,0x00,0x00,0x6A,0x0E,0x6A,0x54,0x6A,0x2B,0x6A,0x42,0xE8,0x2D,
0x5B,0x00,0x00,0x31,0xC0,0xA0,0xB9,0xAB,0x2E,0x00,0x83,0xC4,0x10,0x88,0x3D,0x8A,
0x48,0x25,0x00,0x66,0x8B,0x04,0x45,0xB4,0x48,0x25,0x00,0x25,0xFF,0xFF,0x00,0x00,
0x8B,0x14,0x85,0x28,0xC2,0x26,0x00,0x52,0x6A,0x01,0x6A,0x01,0x68,0x84,0x48,0x25,
0x00,0xE8,0xFA,0x5C,0x00,0x00,0x83,0xC4,0x10,0xE8,0x92,0x5B,0x00,0x00,0x83,0xC4,
0x0C,0x5D,0x5F,0x5E,0x5B,0xC3,0x8B,0x06,0x80,0x38,0x21,0x74,0x88,0x8A,0x04,0x24,
0x8A,0x35,0xBB,0xAB,0x2E,0x00,0xA2,0x8A,0x48,0x25,0x00,0x38,0xF3,0x75,0x09,0x8A,
0x44,0x24,0x08,0xA2,0x8A,0x48,0x25,0x00,0x3A,0x1D,0xBA,0xAB,0x2E,0x00,0x75,0x06,
0x88,0x3D,0x8A,0x48,0x25,0x00,0x8B,0x06,0x50,0x0F,0xBF,0xC7,0x50,0x6A,0x00,0x83,
0xC6,0x08,0x68,0x84,0x48,0x25,0x00,0xFE,0xC3,0x01,0xEF,0xE8,0xA0,0x5C,0x00,0x00,
0x83,0xC4,0x10,0xEB,0xB1,0x8D,0x80,0x00,0x00,0x00,0x00,0x8D,0x52,0x00,0x8B,0xDB,
0x53,0x56,0x57,0x55,0x83,0xEC,0x40,0x8B,0x5C,0x24,0x54,0xA1,0x84,0x48,0x25,0x00,
0x0F,0xB6,0x70,0x05,0x8D,0x44,0x24,0x28,0x50,0xE8,0xB2,0x5A,0x00,0x00,0x83,0xC4,
0x04,0x6A,0x11,0x6A,0x18,0x6A,0x1E,0x8B,0x15,0x8C,0xAB,0x2E,0x00,0x52,0xE8,0x3D,
0x15,0x01,0x00,0x83,0xC4,0x10,0x8B,0x0D,0x6C,0xC2,0x26,0x00,0x51,0x68,0x4C,0x7A,
0x26,0x00,0xA2,0x8A,0x48,0x25,0x00,0x8D,0x44,0x24,0x08,0x50,0xE8,0x5B,0x55,0x01,
0x00,0x83,0xC4,0x0C,0x89,0xE0,0x50,0x0F,0xBF,0xC3,0x50,0x6A,0x00,0x68,0x84,0x48,
0x25,0x00,0xE8,0x29,0x5C,0x00,0x00,0x83,0xC4,0x10,0x68,0xB0,0xA9,0x2E,0x00,0x68,
0xEC,0x79,0x26,0x00,0x8D,0x44,0x24,0x08,0x50,0x83,0xEE,0x02,0xE8,0x2B,0x55,0x01,
0x00,0x83,0xC4,0x0C,0x89,0xE0,0x01,0xF3,0x50,0x0F,0xBF,0xC3,0x50,0x8D,0x44,0x24,
0x08,0x50,0x8B,0x7C,0x24,0x38,0x8B,0x54,0x24,0x34,0x68,0x84,0x48,0x25,0x00,0x29,
0xD7,0xE8,0xAA,0x5A,0x00,0x00,0x29,0xC7,0x83,0xC4,0x08,0x0F,0xBF,0xC7,0x50,0x68,
0x84,0x48,0x25,0x00,0xE8,0xD7,0x5B,0x00,0x00,0x83,0xC4,0x10,0x8B,0x3D,0x70,0xC2,
0x26,0x00,0x57,0x68,0x4C,0x7A,0x26,0x00,0x8D,0x44,0x24,0x08,0x50,0xE8,0xDA,0x54,
0x01,0x00,0x83,0xC4,0x0C,0x89,0xE0,0x01,0xF3,0x50,0x0F,0xBF,0xC3,0x50,0x6A,0x00,
0x68,0x84,0x48,0x25,0x00,0xE8,0xA6,0x5B,0x00,0x00,0x83,0xC4,0x10,0x68,0xD0,0xA9,
0x2E,0x00,0x68,0xEC,0x79,0x26,0x00,0x8D,0x44,0x24,0x08,0x50,0x01,0xF3,0xE8,0xA9,
0x54,0x01,0x00,0x83,0xC4,0x0C,0x89,0xE0,0x50,0x0F,0xBF,0xC3,0x50,0x8D,0x44,0x24,
0x08,0x50,0x8B,0x7C,0x24,0x38,0x8B,0x4C,0x24,0x34,0x68,0x84,0x48,0x25,0x00,0x29,
0xCF,0xE8,0x2A,0x5A,0x00,0x00,0x29,0xC7,0x83,0xC4,0x08,0x0F,0xBF,0xC7,0x50,0x68,
0x84,0x48,0x25,0x00,0xE8,0x57,0x5B,0x00,0x00,0x83,0xC4,0x10,0x6A,0x04,0x68,0x78,
0x77,0x26,0x00,0x68,0x90,0xA9,0x2E,0x00,0x01,0xF3,0xE8,0x20,0xA6,0x01,0x00,0x83,
0xC4,0x0C,0x85,0xC0,0x0F,0x84,0xA1,0x00,0x00,0x00,0x68,0x70,0xAA,0x2E,0x00,0x8B,
0x2D,0x84,0xC2,0x26,0x00,0x55,0x68,0x54,0x7A,0x26,0x00,0x8D,0x44,0x24,0x0C,0x50,
0xE8,0x37,0x54,0x01,0x00,0x83,0xC4,0x10,0x89,0xE0,0x50,0x0F,0xBF,0xC3,0x50,0x6A,
0x00,0x68,0x84,0x48,0x25,0x00,0xE8,0x05,0x5B,0x00,0x00,0x83,0xC4,0x10,0x68,0x7A,
0xAA,0x2E,0x00,0xA1,0x88,0xC2,0x26,0x00,0x50,0x68,0x54,0x7A,0x26,0x00,0x8D,0x44,
0x24,0x0C,0x50,0xE8,0x04,0x54,0x01,0x00,0x83,0xC4,0x10,0x89,0xE0,0x01,0xF3,0x50,
0x0F,0xBF,0xC3,0x50,0x6A,0x00,0x68,0x84,0x48,0x25,0x00,0xE8,0xD0,0x5A,0x00,0x00,
0x83,0xC4,0x10,0x68,0xC0,0xAA,0x2E,0x00,0x8B,0x15,0x8C,0xC2,0x26,0x00,0x52,0x68,
0x54,0x7A,0x26,0x00,0x8D,0x44,0x24,0x0C,0x50,0xE8,0xCE,0x53,0x01,0x00,0x83,0xC4,
0x10,0x89,0xE0,0x01,0xF3,0x50,0x0F,0xBF,0xC3,0x50,0x6A,0x00,0x68,0x84,0x48,0x25,
0x00,0x01,0xF3,0xE8,0x98,0x5A,0x00,0x00,0x83,0xC4,0x10,0x6A,0x04,0x68,0x78,0x77,
0x26,0x00,0x68,0xF0,0xA9,0x2E,0x00,0xE8,0x63,0xA5,0x01,0x00,0x83,0xC4,0x0C,0x85,
0xC0,0x74,0x34,0x68,0x84,0xAA,0x2E,0x00,0x8B,0x0D,0x90,0xC2,0x26,0x00,0x51,0x68,
0x54,0x7A,0x26,0x00,0x8D,0x44,0x24,0x0C,0x50,0xE8,0x7E,0x53,0x01,0x00,0x83,0xC4,
0x10,0x89,0xE0,0x50,0x0F,0xBF,0xC3,0x50,0x6A,0x00,0x68,0x84,0x48,0x25,0x00,0xE8,
0x4C,0x5A,0x00,0x00,0x83,0xC4,0x10,0x83,0xC4,0x40,0x5D,0x5F,0x5E,0x5B,0xC3,0x90,
0x53,0x56,0x57,0x55,0x6A,0x00,0x6A,0x10,0x6A,0x00,0xE8,0x61,0x63,0x01,0x00,0x83,
0xC4,0x0C,0x68,0xC8,0xAF,0x21,0x00,0xE8,0x04,0x49,0xFF,0xFF,0x83,0xC4,0x04,0x8B,
0x15,0xEC,0xC3,0x26,0x00,0x52,0x68,0x60,0x7A,0x26,0x00,0xE8,0x50,0x33,0xFF,0xFF,
0x83,0xC4,0x08,0x8B,0x1D,0x8C,0xAB,0x2E,0x00,0x53,0x68,0x7C,0x7A,0x26,0x00,0xE8,
0x3C,0x33,0xFF,0xFF,0x8A,0x25,0x1E,0xD0,0x2E,0x00,0x83,0xC4,0x08,0xF6,0xC4,0x01,
0x74,0x1B,0x8B,0x2D,0xF0,0xAA,0x2E,0x00,0x55,0xA1,0xEC,0xAA,0x2E,0x00,0x50,0x8B};
Pathstruct outbytes[100];

void convert() {
    memcpy(outbytes, inbytes, 100 * 44);
    for (int i = 0; i < 100; i++)
    {
        printf("{ \"%s\", %x,%x,%d,%d },\n", outbytes[i].path, outbytes[i].colorPalette_var28, outbytes[i].var32_end_buffer, outbytes[i].var36_size_buffer, outbytes[i].var40_alloc_type);
    }
};

//----- (000404F0_00040830) --------------------------------------------------------
int sub_main(int argc, char* argv[])//2114f0_211830
{
	//convert();
	//fix
	mkdir(gameDataPath2.c_str());
	//fix

	//VGA_Init(0, 1280, 960, true);
	VGA_Init(0, 640, 480, true);
	VGA_Resize(320, 200);

	CreateGameDir_3EC90_3EFD0('C', (char*)"\\carpet.cd", (char*)"save");
	CreateGameDir_3EC90_3EFD0('C', (char*)"\\carpet.cd", (char*)"data");
	CreateGameDir_3EC90_3EFD0('C', (char*)"\\carpet.cd", (char*)"levels");
	TopProcedure_340B0_34470(argc, (const char**)argv);
	return 0;
}

//----- (00040890) --------------------------------------------------------
int sub_40890()
{
  int result; // eax

  memset((void*)(dword_AE400_AE3F0() + 12), 0, 20);
  memset((void*)(dword_AE400_AE3F0() + 32), 0, 4);
  memset((void*)(dword_AE400_AE3F0() + 36), 0, 2);
  memset((void*)(dword_AE400_AE3F0() + 38), 0, 2);
  memset((void*)(dword_AE400_AE3F0() + 40), 0, 4);
  memset((void*)(dword_AE400_AE3F0() + 580), 0, 1);
  memset((void*)((char *)&dword_38C9F + dword_AE400_AE3F0()), 0, 106);
  memset((void*)(dword_AE400_AE3F0() + 9177), 0, 48);
  memset((void*)(dword_AE400_AE3F0() + 29795), 0, (size_t)((char *)&loc_2809F + 1));
  memset((void*)(dword_AE408_AE3F8() + 23), 0, 1);
  memset((void*)(dword_AE408_AE3F8() + 93), 0, 16);
  memset((void*)(dword_AE408_AE3F8() + 150), 0, 1);
  memset((void*)(dword_AE408_AE3F8() + 152), 0, 1);
  memset((void*)(dword_AE408_AE3F8() + 184), 0, 14);
  memset((void*)(dword_AE408_AE3F8() + 36378), 0, 4);
  memset((void*)(dword_AE408_AE3F8() + 36382), 0, 80);
  memset((void*)(dword_AE408_AE3F8() + 36462), 0, 4);
  memset((void*)(dword_AE408_AE3F8() + 36466), 0, 4);
  memset((void*)(dword_AE408_AE3F8() + 36470), 0, 4);
  memset((void*)(dword_AE408_AE3F8() + 36474), 0, 4);
  memset(mapEntityIndex_10C1E0_10C1D0, 0, (size_t)((char *)&loc_1FFFE + 2));
  memset(mapTerrainType_CC1E0_CC1D0, 0, (size_t)sub_10000);
  memset(mapHeightmap_DC1E0_DC1D0, 0, (size_t)sub_10000);
  memset(mapShading_EC1E0_EC1D0, 0, (size_t)sub_10000);
  memset(mapAngle_FC1E0_FC1D0, 0, (size_t)sub_10000);
  memset((void*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC), 0, 64000);
  result = dword_AE408_AE3F8();
  *(_DWORD *)dword_AE408_AE3F8() &= 0xFFFE3FFF;
  return result;
}
// 10000: using guessed type void sub_10000();
// 38C9F: using guessed type int dword_38C9F;
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 10C1D0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7961];

//----- (00040AE0) --------------------------------------------------------
int sub_407A0_40AE0()
{
  char v0; // bl

  v0 = byte_939E5;
  byte_939E5 = 0;
  sub_40890();
  DrawTextLine_5AD10_5B220((char*)aLoadLevel);
  sub_3E440(*(_WORD *)(dword_AE408_AE3F8() + 17), (void *)(dword_AE400_AE3F0() + 193795));
  if ( (*(_BYTE *)dword_AE408_AE3F8() & 0x10) == 0 )
    *(_WORD *)(dword_AE400_AE3F0() + 10) = *(_WORD *)&byte_38C95[dword_AE400_AE3F0()];
  DrawTextLine_5AD10_5B220((char*)aGenerateMap);
  sub_31AE0(dword_AE400_AE3F0() + 193795);
  sub_37580();
  DrawTextLine_5AD10_5B220((char*)aGenerateFeatur);
  sub_367F0(dword_AE400_AE3F0() + 193795);
  DrawTextLine_5AD10_5B220((char*)aInitialiseMode);
  memset(&word_AE454_AE444, 0, 6);
  sub_37220_375E0();
  *(_DWORD *)(dword_AE400_AE3F0() + 4593) = -1;
  sub_37800(0, 1);
  byte_939E5 = v0;
  sub_3E090();
  return sub_48570(dword_AE400_AE3F0() + 29795 + 164
                                       * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333));
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 939E5: using guessed type char byte_939E5;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// AE444: using guessed type __int16 word_AE454_AE44X;

//----- (00040C10) --------------------------------------------------------
int sub_408D0_40C10()
{
  char v0; // bl
  int v2; // [esp-4h] [ebp-8h]

  v0 = byte_939E5;
  byte_939E5 = 0;
  sub_40890();
  sub_3E440(*(_WORD *)(dword_AE408_AE3F8() + 17), (void *)(dword_AE400_AE3F0() + 193795));
  v2 = dword_AE400_AE3F0() + 193795;
  *(_WORD *)(dword_AE400_AE3F0() + 10) = *(_WORD *)(dword_AE400_AE3F0() + 232597);
  sub_31AE0(v2);
  sub_37580();
  sub_367F0(dword_AE400_AE3F0() + 193795);
  memset(&word_AE454_AE444, 0, 6);
  sub_37220_375E0();
  *(_DWORD *)(dword_AE400_AE3F0() + 4593) = -1;
  sub_37800(0, 1);
  byte_939E5 = v0;
  sub_3E090();
  return sub_48570(dword_AE400_AE3F0() + 29795 + 164
                                       * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333));
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 939E5: using guessed type char byte_939E5;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// AE444: using guessed type __int16 word_AE454_AE44X;

//----- (00040D20) --------------------------------------------------------
_BOOL1 sub_40D20(unsigned __int16 a1)
{
  char v1; // al

  v1 = mapAngle_FC1E0_FC1D0[a1] & 7;
  return v1 != 5 && v1 != 2 && v1 != 3;
}

//----- (00040D50) --------------------------------------------------------
char sub_40D50(__int16 a1, __int16 a2, __int16 a3, char a4)
{
  __int16 v4; // bx
  char v5; // al
  unsigned __int16 v6; // bx
  char v8; // [esp+0h] [ebp-10h]
  unsigned __int16 v9; // [esp+4h] [ebp-Ch]

  LOBYTE(v9) = a1;
  HIBYTE(v9) = a2;
  v8 = 0;
  v4 = a3 + (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v9];
  if ( v4 > 200 )
  {
    v4 = 200;
    if ( !a1 && !a2 )
      v8 = 1;
  }
  if ( v4 < 0 )
  {
    v4 = 0;
    if ( !a1 && !a2 )
      v8 = 1;
  }
  if ( a4 && mapAngle_FC1E0_FC1D0[v9] < 0 )
    return 1;
  mapHeightmap_DC1E0_DC1D0[v9] = v4;
  if ( v4 )
  {
    v5 = mapAngle_FC1E0_FC1D0[v9] & 0xF8 | 1;
  }
  else
  {
    LOBYTE(v6) = a1 - 1;
    HIBYTE(v6) = a2 - 1;
    if ( !sub_40D20(v6) )
      goto LABEL_24;
    LOBYTE(v6) = v6 + 1;
    if ( !sub_40D20(v6) )
      goto LABEL_24;
    LOBYTE(v6) = v6 + 1;
    if ( !sub_40D20(v6) )
      goto LABEL_24;
    HIBYTE(v6) = a2;
    if ( !sub_40D20(v6) )
      goto LABEL_24;
    LOBYTE(v6) = v6 - 2;
    if ( !sub_40D20(v6) )
      goto LABEL_24;
    HIBYTE(v6) = a2 + 1;
    if ( !sub_40D20(v6) )
      goto LABEL_24;
    LOBYTE(v6) = v6 + 1;
    if ( !sub_40D20(v6) )
      goto LABEL_24;
    LOBYTE(v6) = v6 + 1;
    if ( !sub_40D20(v6) )
      goto LABEL_24;
    v5 = mapAngle_FC1E0_FC1D0[v9] & 0xF0;
  }
  mapAngle_FC1E0_FC1D0[v9] = v5;
LABEL_24:
  if ( a4 )
    sub_33F80(v9, v9);
  else
    sub_34200(v9, v9);
  return v8;
}

//----- (00041070) --------------------------------------------------------
int sub_40D30_41070(__int16 *a1, __int16 a2, __int16 a3, __int16 a4, char a5)
{
  int v5; // ebx
  int v6; // esi
  int v7; // edi
  int v8; // eax
  int v9; // ebx
  int v10; // eax
  int v12; // [esp+0h] [ebp-14h] BYREF
  int v13[4]; // [esp+4h] [ebp-10h] BYREF

  LOWORD(v5) = a3;
  v6 = (a1[36] + 128) >> 8;
  v7 = (a1[37] + 128) >> 8;
  if ( a3 > (int)(a1[40] - (__CFSHL__((unsigned __int64)a1[40] >> 32, 8) + ((unsigned __int64)a1[40] >> 32 << 8))) >> 8 )
    v5 = (int)(a1[40] - (__CFSHL__((unsigned __int64)a1[40] >> 32, 8) + ((unsigned __int64)a1[40] >> 32 << 8))) >> 8;
  v8 = sub_11410(a2, (__int16)v5);
  v9 = v8;
  if ( v8 )
  {
    while ( sub_114B0(v9, (uint32*)v13, (uint32*)&v12) == 1 )
    {
      if ( sub_40D50(v6 + LOWORD(v13[0]), v7 + v12, a4, a5) )
      {
        v10 = sub_11490(v9);
        LOBYTE(v10) = 1;
        return nullsub_3(v10);
      }
    }
    v8 = sub_11490(v9);
  }
  LOBYTE(v8) = 0;
  return nullsub_3(v8);
}
// 41130: using guessed type int nullsub_3(_DWORD);
// 41070: using guessed type int var_10[4];

//----- (00041160) --------------------------------------------------------
int sub_41160(unsigned __int16 a1, unsigned __int16 a2)
{
  int v2; // eax
  int i; // ebx
  char v4; // ah
  int v5; // ebx
  int result; // eax

  v2 = dword_AE400_AE3F0() + 29795;
  for ( i = 164 * mapEntityIndex_10C1E0_10C1D0[a1]; ; i = dword_AE400_AE3F0() + 29795 )
  {
    v5 = v2 + i;
    result = dword_AE400_AE3F0() + 29795;
    if ( v5 == dword_AE400_AE3F0() + 29795 )
      break;
    if ( *(__int16 *)(v5 + 24) != a2 )
    {
      switch ( *(_BYTE *)(v5 + 64) )
      {
        case 2:
          sub_41E80_421C0(v5);
          break;
        case 5:
          v4 = *(_BYTE *)(v5 + 65);
          if ( v4 != 16 && v4 != 6 && v4 != 8 )
          {
            *(_DWORD *)(v5 + 12) = -1;
            *(_WORD *)(v5 + 38) = a2;
            *(_WORD *)(v5 + 40) = a2;
          }
          break;
        default:
          break;
      }
    }
    v2 = 164 * *(unsigned __int16 *)(v5 + 20);
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// 10C1D0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7961];

//----- (0004121C) --------------------------------------------------------
char sub_40EDC_4121C(_BYTE *a1, _BYTE *a2, char a3, char a4, char a5, __int16 a6, __int16 a7, __int16 a8)
{
  _BYTE *v8; // esi
  char v10; // bl
  char v11; // bh
  char v12; // cl
  _BYTE *v13; // esi
  char v14; // ch
  __int16 v15; // ax
  char result; // al
  _BYTE *v17; // [esp-14h] [ebp-20h]
  char v18; // [esp+7h] [ebp-5h]
  __int16 v19; // [esp+8h] [ebp-4h]
  __int16 v20; // [esp+Ah] [ebp-2h]

  v8 = a1;
  v20 = 256;
  do
  {
    v10 = ((unsigned __int16)(a6 * (char)(a3 - *v8)) >> 8) + *v8;
    v11 = ((unsigned __int16)(a7 * (char)(a4 - v8[1])) >> 8) + v8[1];
    v12 = ((unsigned __int16)(a8 * (char)(a5 - v8[2])) >> 8) + v8[2];
    v17 = v8;
    v13 = a1;
    v19 = 0x7FFF;
    v14 = 0;
    do
    {
      v15 = (char)(v13[2] - v12) * (char)(v13[2] - v12);
      if ( (__int16)(v15 + 2 * (char)(v13[1] - v11) * (char)(v13[1] - v11) + 2 * (char)(*v13 - v10) * (char)(*v13 - v10)) < v19 )
      {
        v18 = v14;
        v19 = v15 + 2 * (char)(v13[1] - v11) * (char)(v13[1] - v11) + 2 * (char)(*v13 - v10) * (char)(*v13 - v10);
      }
      v13 += 3;
      ++v14;
    }
    while ( v14 );
    result = v18;
    *a2++ = v18;
    v8 = v17 + 3;
    --v20;
  }
  while ( v20 );
  return result;
}
// 412AE: variable 'v18' is possibly undefined

//----- (000412C7) --------------------------------------------------------
__int16 sub_40F87_412C7(__int16 a1, __int16 a2)
{
  int v2; // ebx
  int v4; // ebx
  int v5; // eax
  int v6; // ebx

  if ( a1 )
  {
    v2 = a2;
  }
  else
  {
    v2 = a2;
    if ( !a2 )
      return 0;
  }
  if ( a1 < 0 )
  {
    v5 = -a1;
    if ( v2 < 0 )
    {
      v6 = -v2;
      if ( v5 < v6 )
        return 2048 - word_9374C[-256 * a1 / (unsigned int)v6];
      else
        return word_9374C[(v6 << 8) / (unsigned int)v5] + 1536;
    }
    else if ( v5 < v2 )
    {
      return word_9374C[-256 * a1 / (unsigned int)v2] + 1024;
    }
    else
    {
      return 1536 - word_9374C[(v2 << 8) / (unsigned int)v5];
    }
  }
  else if ( v2 < 0 )
  {
    v4 = -v2;
    if ( a1 < v4 )
      return word_9374C[(a1 << 8) / (unsigned int)v4];
    else
      return 512 - word_9374C[(v4 << 8) / (unsigned int)a1];
  }
  else if ( a1 < v2 )
  {
    return 1024 - word_9374C[(a1 << 8) / (unsigned int)v2];
  }
  else
  {
    return word_9374C[(v2 << 8) / (unsigned int)a1] + 512;
  }
}
// 9374C: using guessed type __int16 word_9374C[258];

//----- (0004140E) --------------------------------------------------------
unsigned int Distance_410CE_4140E(unsigned int a1)
{
  unsigned int v1; // eax
  unsigned int i; // ebx

  if ( !a1 )
    return 0;
  _BitScanReverse((unsigned long*)&v1, a1);
  for ( i = (unsigned __int16)word_41444[v1]; (int)(a1 / i) < (int)i; i = (a1 / i + i) >> 1 )
    ;
  return i;
}
// 41444: using guessed type __int16 word_41444[];

//----- (00041484) --------------------------------------------------------
void sub_41484(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4)
{
  __outbyte(0x3C8u, a1);
  __outbyte(0x3C9u, a2);
  __outbyte(0x3C9u, a3);
  __outbyte(0x3C9u, a4);
}

//----- (00041517) --------------------------------------------------------
int sub_411D7_41517(void *a2, unsigned __int16 a3, char a4)
{
  int v4; // eax
  int v6; // [esp-8h] [ebp-Ch]

  //fix
  int a1 = 0;
  //fix

  v6 = a1;
  LOBYTE(a1) = a4;
  BYTE1(a1) = a4;
  v4 = a1 << 16;
  LOBYTE(v4) = a4;
  BYTE1(v4) = a4;
  memset32((char*)a2, v4, 80 * a3);
  return v6;
}

int sub_411FD_4153D(void* a2, unsigned __int16 a3, char a4)
{
	int v4; // eax
	int v6; // [esp-8h] [ebp-Ch]

	//fix
	int a1 = 0;
	//fix

	v6 = a1;
	LOBYTE(a1) = a4;
	BYTE1(a1) = a4;
	v4 = a1 << 16;
	LOBYTE(v4) = a4;
	BYTE1(v4) = a4;
	memset32((char*)a2, v4, 160 * a3);
	return v6;
}

void sub_41230_41570()//212230_
{
	if (!str_AE408_AE3F8->var_u32_168)
	{
		void* testAlloc = malloc_42540_42880(60000);
		byte_968F0 = 1;
		str_AE400_AE3F0->set.var_u8_8608 = 32;

		//fix
		if (testAlloc)
			freeMem_1314AC_13149C = 0x1000000;
		else
			freeMem_1314AC_13149C = 0;
		//fix

		if (freeMem_1314AC_13149C <= 0x800000)
		{
			if (freeMem_1314AC_13149C <= 0x700000)
			{
				if (freeMem_1314AC_13149C <= 0x600000)
				{
					if (freeMem_1314AC_13149C <= 0x500000)
					{
						if (freeMem_1314AC_13149C <= 0x400000)
						{
							if (freeMem_1314AC_13149C <= 0x300000)
							{
								if (freeMem_1314AC_13149C <= 0x200000)
								{
									if (freeMem_1314AC_13149C <= 0x100000)
									{
										printf("ERROR : NOT ENOUGH MEMORY.\n");
										exit(1);
									}
									str_AE408_AE3F8->var_u32_172 = freeMem_1314AC_13149C - 430000;
									str_AE400_AE3F0->set.var_u8_8608 = 16;
									str_AE400_AE3F0->set.var_u8_8631 = 0;
									byte_939EC = 3;
								}
								else
								{
									str_AE408_AE3F8->var_u32_172 = freeMem_1314AC_13149C - 1398576;
									byte_939EC = 0;
									str_AE400_AE3F0->set.var_u8_8631 = 0;
								}
							}
							else
							{
								str_AE408_AE3F8->var_u32_172 = freeMem_1314AC_13149C - 1398576;
								byte_939EC = 0;
								str_AE400_AE3F0->set.var_u8_8631 = 0;
							}
						}
						else
						{
							str_AE408_AE3F8->var_u32_172 = freeMem_1314AC_13149C - 2398576;
							str_AE400_AE3F0->set.var_u8_8631 = 0;
							byte_939EC = 1;
						}
					}
					else
					{
						str_AE408_AE3F8->var_u32_172 = freeMem_1314AC_13149C - 2398576;
						str_AE400_AE3F0->set.var_u8_8631 = 0;
						byte_939EC = 1;
					}
				}
				else
				{
					str_AE408_AE3F8->var_u32_172 = freeMem_1314AC_13149C - 2398576;
					str_AE400_AE3F0->set.var_u8_8631 = 0;
					byte_939EC = 1;
				}
			}
			else
			{
				str_AE408_AE3F8->var_u32_172 = freeMem_1314AC_13149C - 3398576;
				byte_939EC = 1;
			}
		}
		else
		{
			byte_939EC = 1;
			str_AE408_AE3F8->var_u32_172 = 0x400000;
		}
		str_AE408_AE3F8->var_u32_168 = (Type_168*)malloc_42540_42880(str_AE408_AE3F8->var_u32_172);
		if (str_AE408_AE3F8->var_u32_172 <= 0x96000)
		{
			printf("ERROR : NOT ENOUGH MEMORY.\n");
			exit(1);
		}
		if (str_AE400_AE3F0->set.var_u8_8608 >= 0x10u)
		{
			if (str_AE400_AE3F0->set.var_u8_8608 <= 0x10u)
			{
				sub_40440_40780(&pathStrArray[PSdatablk0dat]);
			}
			else if (str_AE400_AE3F0->set.var_u8_8608 == 32)
			{
				sub_40440_40780(&pathStrArray[PSdatablk1dat]);
			}
		}
		sub_44470_447B0();
		free_426E0_42A20(testAlloc);
	}
}

//----- (000417D0) --------------------------------------------------------
void sub_41490_417D0()
{
  _DWORD v0; // eax
  int v1; // ebx
  int i; // esi

  //fix
  v1 = 0;
  //fix

  if ( freeMem_1314AC_13149C <= 0x96000 )
  {
    byte_93950 = 0;
    v0 = 0x96000;
    if ( dword_AE3EC_AE3DC )
    {
      //fix v1 = ios::failure::cause(dword_AE3EC_AE3DC);
      if ( v1 <= 0x96000 )
      {
        for ( i = 0; i < 10; ++i )
        {
          if ( v1 >= 0x96000 )
            break;
          v1 += sub_58C30_59140(0x96000 - v1 + 1024);
        }
      }
      //fix v0 = (void *)ios::failure::cause(dword_AE3EC_AE3DC);
    }
    sub_42730_42A70(*(_DWORD *)(dword_AE408_AE3F8() + 168), *(_DWORD *)(dword_AE408_AE3F8() + 172) - ((_DWORD)v0 + 256));
  }
  else
  {
    byte_93950 = 1;
  }
}
// 36D90: using guessed type _DWORD ios::failure::cause(_DWORD);
// 93950: using guessed type char byte_93950;
// AE3DC: using guessed type int dword_AE3EC_AE3DC;
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 13149C: using guessed type int freeMem_1314AC_13149C;

//----- (00041880) --------------------------------------------------------
void sub_41540_41880()
{
  if ( !byte_93950 && !sub_42AE0(*(_DWORD *)(dword_AE408_AE3F8() + 168), *(_DWORD *)(dword_AE408_AE3F8() + 172)) )
  {
    sub_44840_44B80();
    printf("ERROR : UNABLE TO GROW MEMORY.\n");
    exit(1);
  }
}
// 5D113: using guessed type _DWORD printf(const char *, ...);
// 93950: using guessed type char byte_93950;
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00041900) --------------------------------------------------------
unsigned __int16 sub_415C0_41900()
{
  unsigned __int16 result; // ax
  int v1; // edi
  int i; // esi
  int v3; // ebx
  int v4; // eax
  __int16 v5; // cx

  result = dword_AE408_AE3F8();
  if ( (*(_WORD *)dword_AE408_AE3F8() & 0x110) == 0 )
  {
    v1 = 0;
    for ( i = 0; ; i += 2049 )
    {
      result = *(_WORD *)(dword_AE400_AE3F0() + 10);
      if ( v1 >= result )
        break;
      v3 = dword_AE400_AE3F0() + i;
      if ( *(_BYTE *)(dword_AE400_AE3F0() + i + 13329) )
      {
        v4 = *(_DWORD *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(v3 + 13333) + 160);
        if ( *(_WORD *)(v4 + 50) )
        {
          if ( *(_DWORD *)(dword_AE408_AE3F8() + 188) )
          {
            if ( 100
               * (*(_DWORD *)(v4 + 308) + *(_DWORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(v4 + 50) + 29935))
               / *(_DWORD *)(dword_AE408_AE3F8() + 188) <= *(unsigned __int16 *)&byte_38C93[dword_AE400_AE3F0()] )
            {
              *(_WORD *)(v3 + 13323) = 0;
            }
            else
            {
              v5 = *(_WORD *)(v3 + 13323);
              if ( v5 < 16 )
                *(_WORD *)(v3 + 13323) = v5 + 1;
              else
                *(_BYTE *)(v3 + 13325) |= 2u;
            }
          }
        }
      }
      ++v1;
    }
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (000419F0) --------------------------------------------------------
unsigned int sub_419F0()
{
  int v0; // edi
  int v1; // ecx
  int v2; // ebx
  int v3; // edx
  int v4; // esi
  int v5; // eax
  unsigned int result; // eax
  char *v7; // esi

  v0 = dword_AE400_AE3F0();
  v1 = dword_AE400_AE3F0() + 29795;
  v2 = 0;
  v3 = 0;
  while ( v2 < *(unsigned __int16 *)(v0 + 10) )
  {
    v4 = 164 * *(unsigned __int16 *)(v3 + v0 + 13333);
    ++v2;
    v5 = v3 + v0 + 13323 + 1103;
    v3 += 2049;
    *(_DWORD *)(v1 + v4 + 160) = v5;
  }
  result = v0 + 29959;
  v7 = (char *)&unk_99018 - *(_DWORD *)(v1 + 164 * *(unsigned __int16 *)(v0 + 13333) + 156);
  while ( result < v0 + 193795 )
  {
    if ( *(_BYTE *)(result + 64) )
      *(_DWORD *)(result + 156) += (int)v7;
    result += 164;
  }
  dword_AE400_AE3F0(v0);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00041AC0) --------------------------------------------------------
char sub_41780_41AC0()
{
  int v0; // esi
  int v1; // eax
  unsigned int i; // ebx
  char v3; // dh
  _DWORD *v4; // edi
  int v5; // eax
  int v6; // esi
  _DWORD *v7; // ecx
  _DWORD *v8; // edx
  int *v9; // eax
  char v10; // bl
  int **v11; // ebp
  unsigned __int8 v12; // bl
  int v13; // ebx
  int v14; // eax
  char v15; // ch
  _BYTE *j; // ebx
  char v17; // cl
  int v18; // edx
  int v19; // eax
  int v20; // ecx
  int v21; // edi
  int v22; // eax
  char v24[256]; // [esp+0h] [ebp-168h] BYREF
  int v25[20]; // [esp+100h] [ebp-68h] BYREF
  _DWORD *v26; // [esp+150h] [ebp-18h]
  int v27; // [esp+154h] [ebp-14h]

  v0 = dword_AE400_AE3F0();
  *(_DWORD *)(dword_AE400_AE3F0() + 4) = 9377 * *(_DWORD *)(dword_AE400_AE3F0() + 4) + 9439;
  v1 = dword_AE408_AE3F8();
  if ( (*(_BYTE *)(dword_AE408_AE3F8() + 2) & 1) != 0 )
    goto LABEL_52;
  for ( i = v0 + 29959; i < v0 + 193795; i += 164 )
  {
    v3 = *(_BYTE *)(i + 64);
    dword_AE400_AE3F0(v0);
    if ( v3 && (*(_BYTE *)(i + 17) & 4) != 0 )
      sub_41E90_421D0((Type_AE400_29795*)i);
    v0 = dword_AE400_AE3F0();
  }
  dword_AE400_AE3F0(v0);
  memset(v25, 0, sizeof(v25));
  v4 = 0;
  memset((void*)(dword_AE408_AE3F8() + 36382), 0, 80);
  v5 = dword_AE408_AE3F8();
  v6 = dword_AE400_AE3F0();
  *(_DWORD *)(dword_AE408_AE3F8() + 36466) = 0;
  v7 = 0;
  *(_DWORD *)(v5 + 36470) = 0;
  v8 = 0;
  *(_DWORD *)(v5 + 36462) = 0;
  v26 = 0;
  *(_DWORD *)(v5 + 36474) = 0;
  v9 = (int *)(v6 + 29959);
  while ( (unsigned int)v9 < v6 + 193795 )
  {
    v10 = *((_BYTE *)v9 + 64);
    if ( !v10 )
      goto LABEL_40;
    switch ( v10 )
    {
      case 3:
        if ( v9[3] >= 0 && (v9[4] & 0x10) == 0 )
        {
          if ( v7 )
            *v7 = (uint32)v9;
          else
            *(_DWORD *)(dword_AE408_AE3F8() + 36462) = (uint32)v9;
          v13 = v6 + 29795;
          v7 = (uint32*)v9;
          goto LABEL_39;
        }
        goto LABEL_40;
      case 5:
        if ( v9[3] >= 0 && *((_BYTE *)v9 + 70) != 120 )
        {
          v11 = (int **)v25[*((char *)v9 + 65)];
          if ( v11 )
            *v11 = v9;
          else
            *(_DWORD *)(dword_AE408_AE3F8() + 4 * *((char *)v9 + 65) + 36382) = (uint32)v9;
          *v9 = v6 + 29795;
          v25[*((char *)v9 + 65)] = (int)v9;
        }
        goto LABEL_40;
      case 9:
        if ( v8 )
          *v8 = (uint32)v9;
        else
          *(_DWORD *)(dword_AE408_AE3F8() + 36474) = (uint32)v9;
        *v9 = v6 + 29795;
        v8 = (uint32*)v9;
        goto LABEL_40;
      case 10:
        v12 = *((_BYTE *)v9 + 65);
        if ( v12 < 0x27u )
          goto LABEL_40;
        if ( v12 <= 0x28u )
        {
          if ( v4 )
            *v4 = (uint32)v9;
          else
            *(_DWORD *)(dword_AE408_AE3F8() + 36466) = (uint32)v9;
          v13 = v6 + 29795;
          v4 = (uint32*)v9;
          goto LABEL_39;
        }
        if ( v12 == 45 )
        {
          if ( v26 )
            *v26 = (uint32)v9;
          else
            *(_DWORD *)(dword_AE408_AE3F8() + 36470) = (uint32)v9;
          v13 = v6 + 29795;
          v26 = (uint32*)v9;
LABEL_39:
          *v9 = v13;
        }
LABEL_40:
        v9 += 41;
        break;
      default:
        goto LABEL_40;
    }
  }
  v14 = dword_AE408_AE3F8();
  v15 = *(_BYTE *)dword_AE408_AE3F8();
  dword_AE400_AE3F0(v6);
  if ( (v15 & 0x10) == 0 )
    v14 = sub_55430();
  sub_16540(v14);
  sub_48570(164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333) + dword_AE400_AE3F0() + 29795);
  v0 = dword_AE400_AE3F0();
  for ( j = (_BYTE *)(dword_AE400_AE3F0() + 29959); ; j += 164 )
  {
    v1 = v0 + 193795;
    if ( (unsigned int)j >= v0 + 193795 )
      break;
    v17 = j[64];
    dword_AE400_AE3F0(v0);
    if ( v17 )
    {
      v18 = v17;
      v19 = 18 * v17;
      v20 = (char)j[70];
      v21 = 14 * v20;
      v22 = 14 * v20 + *(int *)((char *)&dword_96902 + v19);
      LOWORD(v21) = (char)j[70];
      v27 = v21;
      if ( *(_WORD *)(v22 + 4) == (_WORD)v21 )
      {
        if ( *(_DWORD *)(v22 + 10) )
        {
          (*(void (**)(_BYTE *))(v22 + 6))(j);
          ++j[63];
        }
      }
      else
      {
        sprintf(v24, "STATE-ID does not match. CLASS %d, MODEL %d, STATE %d", v18, (char)j[65], v20);
        sub_41E80_421C0((int)j);
      }
    }
    v0 = dword_AE400_AE3F0();
  }
LABEL_52:
  LOBYTE(v1) = pressedKeys_12EEF0_12EEE0[20];
  dword_AE400_AE3F0(v0);
  if ( pressedKeys_12EEF0_12EEE0[20] && pressedKeys_12EEF0_12EEE0[38] )
    LOBYTE(v1) = nullsub_3(v1);
  return v1;
}
// 41130: using guessed type int nullsub_3(_DWORD);
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 96902: using guessed type int dword_96902;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 12EEF4: using guessed type char pressedKeys_12EEF0_12EEE0[20];
// 12EF06: using guessed type char pressedKeys_12EEF0_12EEE0[38];
// 41AC0: using guessed type int var_68[20];
// 41AC0: using guessed type char var_168[256];

//----- (00041E60) --------------------------------------------------------
char sub_41E60(int a1, int a2)
{
  int v2; // esi

  if ( (*(_BYTE *)(dword_AE408_AE3F8() + 2) & 1) == 0 )
  {
    *(_WORD *)(a1 + 14 * (*(unsigned __int16 *)(a1 + 16) - 1) + 586) = *(_WORD *)(a2 + 72);
    *(_WORD *)(a1 + 14 * (*(unsigned __int16 *)(a1 + 16) - 1) + 588) = *(_WORD *)(a2 + 74);
    sub_11F50((axis_3d*)(__int16 *)(a2 + 72));
    *(_WORD *)(14 * (*(unsigned __int16 *)(a1 + 16) - 1) + a1 + 590) = *(_WORD *)(a2 + 76);
    *(_WORD *)(a1 + 14 * (*(unsigned __int16 *)(a1 + 16) - 1) + 592) = *(_WORD *)(a2 + 30);
    *(_WORD *)(a1 + 14 * (*(unsigned __int16 *)(a1 + 16) - 1) + 598) = *(_WORD *)(a1 + 584);
    *(_WORD *)(a1 + 14 * (*(unsigned __int16 *)(a1 + 16) - 1) + 596) = *(_WORD *)(*(_DWORD *)(a2 + 160) + 327);
    v2 = *(_DWORD *)(a2 + 160);
    *(_WORD *)(a1 + 14 * (*(unsigned __int16 *)(a1 + 16) - 1) + 594) = *(__int16 *)(v2 + 329) / 2
                                                                     + ((int)(*(__int16 *)(v2 + 22)
                                                                            - (__CFSHL__(
                                                                                 (unsigned __int64)*(__int16 *)(v2 + 22) >> 32,
                                                                                 4)
                                                                             + 16
                                                                             * ((unsigned __int64)*(__int16 *)(v2 + 22) >> 32))) >> 4)
                                                                     * *(unsigned __int8 *)(dword_AE408_AE3F8() + 94)
                                                                     - ((int)(*(__int16 *)(v2 + 22)
                                                                            - (__CFSHL__(
                                                                                 (unsigned __int64)*(__int16 *)(v2 + 22) >> 32,
                                                                                 3)
                                                                             + 8
                                                                             * ((unsigned __int64)*(__int16 *)(v2 + 22) >> 32))) >> 3);
  }
  return 1;
}
// AE3F8: using guessed type int dword_AE408_AE3F8();

//SYNCHRONIZED WITH REMC1
int sub_41C70_41FB0(Type_AE400_29795* event, axis_3d* position)
{
  int result; // eax
  if ((event->var_u32_29867_72.x >> 8) == (position->x >> 8) && (event->var_u32_29867_72.y >> 8) == (position->y >> 8))
  {
    result = 0;
    event->var_u32_29867_72 = *position;
  }
  else
  {
    sub_41DD0_42110(event);
    sub_41CF0_42030(event, position);
    return 1;
  }
  return result;
}

//----- (00042000) --------------------------------------------------------
int sub_42000(__int16 a1, int a2, int a3)
{
  sub_41DD0_42110((Type_AE400_29795*)a2);
  sub_41CF0_42030((Type_AE400_29795*)a2, (axis_3d*)a3);
  return 1;
}

//SYNCHRONIZED WITH REMC1
void sub_41CF0_42030(Type_AE400_29795* a1, axis_3d* a2)//212CF0_
{
  if ( (a1->var_29811_16.byte[0] & 4) == 0 )
  {
    a1->var_u16_29817_22 = 0;
    a1->var_u16_29815_20 = mapEntityIndex_10C1E0_10C1D0[256 * (a2->y >> 8) + (a2->x >> 8)];
    if (a1->var_u16_29815_20)
        str_AE400_AE3F0->str_29795[a1->var_u16_29815_20].var_u16_29817_22 = a1 - str_AE400_AE3F0->str_29795;
    mapEntityIndex_10C1E0_10C1D0[256 * (a2->y >> 8) + (a2->x >> 8)] = a1 - str_AE400_AE3F0->str_29795;
    a1->var_u32_29867_72 = *a2;
    a1->var_29811_16.byte[0] |= 4u;
  }
}

//SYNCHRONIZED WITH REMC1
void sub_41DD0_42110(Type_AE400_29795* a2)
{
  if ( (a2->var_29811_16.byte[0] & 4) != 0 )
  {
    if (a2->var_u16_29817_22)
        str_AE400_AE3F0->str_29795[a2->var_u16_29817_22].var_u16_29815_20 = a2->var_u16_29815_20;
    else
      mapEntityIndex_10C1E0_10C1D0[256 * (a2->var_u32_29867_72.y >> 8) + (a2->var_u32_29867_72.x >> 8)] = a2->var_u16_29815_20;
    if (a2->var_u16_29815_20)
    {
      str_AE400_AE3F0->str_29795[a2->var_u16_29815_20].var_u16_29817_22 = a2->var_u16_29817_22;
    }
    a2->var_29811_16.byte[0] &= ~4u;
  }
}

//SYNCHRONIZED WITH REMC1
void sub_41E80_421C0(Type_AE400_29795* event)
{
  event->var_29811_16.byte[1] |= 4u;
}

//SYNCHRONIZED WITH REMC1
void sub_41E90_421D0(Type_AE400_29795* a2)
{
  sub_41DD0_42110(a2);
  a2->var_u8_29859_64 = 0;
  str_AE400_AE3F0->var_u32_40++;
  str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40] = a2;
}

//----- (00042200) --------------------------------------------------------
void sub_41EC0_42200(axis_3d* a1x, unsigned __int16 a2, __int16 a3, __int16 a4)
{
  _WORD *result; // eax
  unsigned __int16 v5; // bx
  int v6; // edx

  //result = a1;
  LOBYTE(v5) = a3;
  LOWORD(v6) = a4;
  if ( a4 )
  {
    HIBYTE(v5) = HIBYTE(a3) & 7;
    HIBYTE(a2) &= 7u;
    if ( v5 )
    {
      a1x->z -= (unsigned int)(a4 * cos_90B4C[v5]) >> 16;
      v6 = (a4 * (int)sin_9134C[v5]) >> 16;
    }
    a1x->x += (unsigned int)((__int16)v6 * cos_90B4C[a2]) >> 16;
    a1x->y -= (unsigned int)((_DWORD)sin_9134C[a2] * (__int16)v6) >> 16;
  }
}
// 90B4C: using guessed type int dword_90B4C[256];
// 9134C: using guessed type void (*dword_9134C[2])();

//----- (00042290) --------------------------------------------------------
_WORD *sub_41F50_42290(int a1, _WORD *a2)
{
  _WORD *result; // eax
  unsigned __int16 v3; // dx
  unsigned __int8 v4; // cl
  unsigned __int8 v5; // bl
  unsigned __int8 v6; // bl

  result = a2;
  LOBYTE(v3) = *(_BYTE *)(a1 + 1);
  HIBYTE(v3) = *(_BYTE *)(a1 + 3);
  v4 = mapHeightmap_DC1E0_DC1D0[v3];
  *a2 = v4;
  LOBYTE(v3) = v3 + 1;
  a2[1] = v4;
  *a2 -= (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3];
  v5 = mapHeightmap_DC1E0_DC1D0[v3];
  ++HIBYTE(v3);
  a2[1] += v5;
  *a2 -= (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3];
  v6 = mapHeightmap_DC1E0_DC1D0[v3];
  LOBYTE(v3) = v3 - 1;
  a2[1] -= v6;
  *a2 += (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3];
  a2[1] -= (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3];
  return result;
}

//SYNCHRONIZED WITH REMC1
int sub_42000_42340(axis_3d* a1x, int a2, int a3, int a4, int a5)
{
  int v5; // ecx
  int result; // eax

  v5 = a1x->z;
  result = 0;
  if ( v5 <= a2 + a4 )
  {
    if ( v5 > a2 + a3 )
    {
        a1x->z = v5 + 25 * a5 / 100;
      result = 1;
    }
  }
  else
  {
    result = 1;
    a1x->z += a5;
  }
  if (a1x->z < a2 + a3 )
  {
    result = 1;
    a1x->z = a3 + a2;
  }
  return result;
}

//----- (000423D0) --------------------------------------------------------
int sub_423D0(int a1, int a2, int a3, int a4, int a5)
{
  int v5; // esi
  int v6; // ecx

  v5 = 0;
  if ( (sub_11760(a1) & 1) != 0 && !a2 )
    a3 = -768;
  v6 = *(__int16 *)(a1 + 4);
  if ( v6 <= a2 + a4 )
  {
    if ( v6 > a2 + a3 )
    {
      v5 = 1;
      *(_WORD *)(a1 + 4) = v6 + 25 * a5 / 100;
    }
  }
  else
  {
    v5 = 1;
    *(_WORD *)(a1 + 4) += a5;
  }
  if ( *(__int16 *)(a1 + 4) < a2 + a3 )
  {
    v5 = 1;
    *(_WORD *)(a1 + 4) = a2 + a3;
  }
  if ( *(__int16 *)(a1 + 4) == -768 )
    return -1;
  return v5;
}

//----- (00042490) --------------------------------------------------------
__int16 sub_42150_42490(axis_3d* a1x, axis_3d* a2x)
{
  return sub_40F87_412C7(a2x->x - a1x->x, a2x->y - a1x->y);
}

//SYNCHRONIZED WITH REMC1
__int16 sub_42180_424C0(axis_3d* a1x, axis_3d* a2x)
{
  __int16 v3; // [esp-4h] [ebp-8h]

  v3 = -(__int16)sub_423D0_42710(a1x, a2x);
  return sub_40F87_412C7(a1x->z - a2x->z, v3);
}

//----- (00042550) --------------------------------------------------------
int sub_42210_42550(__int16 a1, __int16 a2)
{
  __int64 v2; // rax
  int result; // eax

  v2 = (a1 & 0x7FF) - (a2 & 0x7FF);
  result = (HIDWORD(v2) ^ v2) - HIDWORD(v2);
  if ( (unsigned __int16)result > 0x400u )
    return 2048 - result;
  return result;
}

//----- (00042580) --------------------------------------------------------
int sub_42240_42580(int a1, __int16 a2)
{
  int v2; // ecx
  int v3; // ebx

  v2 = a1;
  BYTE1(v2) = BYTE1(a1) & 7;
  v3 = (a2 & 0x7FF) - (unsigned __int16)v2;
  if ( !v3 )
    return v2 ^ (unsigned __int16)v2;
  if ( (int)abs32(v3) > 1024 )
  {
    if ( v3 >= 0 )
      v3 -= 2048;
    else
      v3 += 2048;
  }
  if ( v3 )
    return v3 / (int)abs32(v3);
  else
    return 0;
}

//----- (000425E0) --------------------------------------------------------
int sub_422A0_425E0(unsigned __int16 a1, __int16 a2, int a3, unsigned __int16 a4)
{
  int v4; // ebx
  int v5; // esi
  int v6; // eax

  if ( a1 == a2 )
    return 0;
  v4 = sub_42210_42550(a1, a2);
  v5 = sub_42240_42580(a1, a2);
  v6 = v4;
  if ( (__int16)v4 > (int)a4 )
    v6 = a4;
  return v5 * v6;
}

//----- (00042640) --------------------------------------------------------
int sub_42640(_WORD *a1, _WORD *a2)
{
  int v2; // ebx
  __int64 v3; // rax
  int v4; // eax

  v2 = abs16(*a2 - *a1);
  v3 = (__int16)(a2[1] - a1[1]);
  v4 = (HIDWORD(v3) ^ v3) - HIDWORD(v3);
  if ( v2 < v4 )
    return v4;
  return v2;
}

//SYNCHRONIZED WITH REMC1
unsigned int sub_42340_42680(axis_3d* a1x, axis_3d* a2x)
{
  int v2 = (__int16)(a2x->y - a1x->y);
  return Distance_410CE_4140E((__int16)(a2x->x - a1x->x) * (__int16)(a2x->x - a1x->x) + v2 * v2 + (__int16)(a2x->z - a1x->z)
                                                                      * (__int16)(a2x->z - a1x->z));
  //(x1-x2)^2+(y1-y2)^2+(z1-z2)^2
}

//----- (000426D0) --------------------------------------------------------
int sub_426D0(_WORD *a1, _WORD *a2)
{
  int v2; // edx

  v2 = (__int16)(a2[1] - a1[1]);
  return (__int16)(*a2 - *a1) * (__int16)(*a2 - *a1) + v2 * v2 + (__int16)(a2[2] - a1[2]) * (__int16)(a2[2] - a1[2]);
}

//----- (00042710) --------------------------------------------------------
unsigned int sub_423D0_42710(axis_3d* a1x, axis_3d* a2x)
{
  int v2; // edx

  v2 = (__int16)(a2x->y - a1x->y);
  return Distance_410CE_4140E((__int16)(a2x->x - a1x->x) * (__int16)(a2x->x - a1x->x) + v2 * v2);
}

//----- (00042750) --------------------------------------------------------
int sub_42750(_WORD *a1, _WORD *a2)
{
  int v2; // edx

  v2 = (__int16)(a2[1] - a1[1]);
  return v2 * v2 + (__int16)(*a2 - *a1) * (__int16)(*a2 - *a1);
}

//SYNCHRONIZED WITH REMC1
void sub_424F0_42830(Type_AE400_29795* a1x, unsigned __int8 a2)
{
    a1x->var_u8_29865_70 = a2;
}

//----- (00042850) --------------------------------------------------------
int sub_42510_42850(int a1)
{
  int result; // eax

  if ( *(_BYTE *)(a1 + 88) >= *(_BYTE *)(a1 + 89) )
    return 1;
  result = 0;
  ++*(_BYTE *)(a1 + 88);
  return result;
}

//----- (00042870) --------------------------------------------------------
char sub_42530_42870(char a1)
{
  char result; // al

  result = a1;
  byte_93954 = a1;
  return result;
}
// 93954: using guessed type char byte_93954;

void* malloc_42540_42880(size_t size) {
    void* result = malloc(size);
    memset(result, 0, size);
    return result;
}

//----- (00042880) --------------------------------------------------------
void* malloc_42540_42880_orig(size_t size)
{
  unsigned int v1; // edi
  int result; // eax
  int *v3; // edx
  unsigned int v4; // ebx
  int *i; // esi
  unsigned int v6; // ecx

  v1 = size + 3;
  LOWORD(v1) = (size + 3) & 0xFFFC;
  sub_63010_63520();
  result = (int)malloc_425C0_42900(v1);
  if ( !result )
  {
    v3 = &dword_1302A0_130290;
    v4 = -1;
    for ( i = 0; v3; v3 = (int *)v3[2] )
    {
      v6 = v3[1];
      if ( v1 <= v6 && v4 > v6 && !*((_BYTE *)v3 + 16) )
      {
        v4 = v3[1];
        i = v3;
      }
    }
    if ( i && sub_42990((int)i, v1) )
    {
      sub_63338_63848();
      memset((void*)*i, 0, v1);
      return (void*)*i;
    }
    else
    {
      return 0;
    }
  }
  return (void*)result;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 130290: using guessed type int dword_1302A0_130290;

//----- (00042900) --------------------------------------------------------
void* malloc_425C0_42900(size_t size)
{
    return malloc(size);
}

int malloc_425C0_42900_orig(int a1)
{
  int *v1; // edx
  unsigned int v2; // ebx
  int *v3; // esi
  unsigned int v4; // edi
  unsigned int v5; // ecx

  sub_63010_63520();
  v1 = &dword_1302A0_130290;
  v2 = -1;
  v4 = a1 + 15;
  v3 = 0;
  for ( LOWORD(v4) = (a1 + 15) & 0xFFF0; v1; v1 = (int *)v1[2] )
  {
    v5 = v1[1];
    if ( v4 <= v5 && v2 > v5 && !*((_BYTE *)v1 + 16) && dword_12F6A4_12F694[3 * *((unsigned __int8 *)v1 + 17)] )
    {
      v3 = v1;
      v2 = v1[1];
    }
  }
  if ( !v3 || !sub_42990((int)v3, v4) )
    return 0;
  sub_63338_63848();
  memset((void*)*v3, 0, v4);
  return *v3;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 12F694: using guessed type int dword_12F6A4_12F694[];
// 130290: using guessed type int dword_1302A0_130290;

//----- (00042990) --------------------------------------------------------
char sub_42990(int a1, int a2)
{
  char result; // al
  int *i; // edx
  char v4; // al
  int v5; // edi

  if ( a2 == *(_DWORD *)(a1 + 4) )
  {
    *(_BYTE *)(a1 + 16) = byte_93954;
    return 1;
  }
  else
  {
    for ( i = &dword_1302A0_130290; i < &dword_131490; i = (int *)((char *)i + 18) )
    {
      if ( !i[1] )
        break;
    }
    if ( i == &dword_131490 )
    {
      return 0;
    }
    else
    {
      i[1] = *(_DWORD *)(a1 + 4) - a2;
      *i = a2 + *(_DWORD *)a1;
      v4 = byte_93954;
      *(_DWORD *)(a1 + 4) = a2;
      *(_BYTE *)(a1 + 16) = v4;
      *((_BYTE *)i + 17) = *(_BYTE *)(a1 + 17);
      i[2] = *(_DWORD *)(a1 + 8);
      i[3] = a1;
      v5 = *(_DWORD *)(a1 + 8);
      if ( v5 )
        *(_DWORD *)(v5 + 12) = (uint32)i;
      result = 1;
      *(_DWORD *)(a1 + 8) = (uint32)i;
    }
  }
  return result;
}
// 93954: using guessed type char byte_93954;
// 130290: using guessed type int dword_1302A0_130290;
// 131490: using guessed type int dword_131490;

void free_426E0_42A20(void* buffer)
{
    free(buffer);
}

//----- (00042A20) --------------------------------------------------------
void free_426E0_42A20_orig(void* buffer)
{
  int *v1; // ebx
  char v2; // cl
  int *i; // ebx

  v1 = &dword_1302A0_130290;
  v2 = 0;
  if ( &dword_1302A0_130290 )
  {
    while ((int)buffer != *v1 )
    {
      v1 = (int *)v1[2];
      if ( !v1 )
        goto LABEL_5;
    }
    v2 = 1;
    *((_BYTE *)v1 + 16) = 0;
  }
LABEL_5:
  if ( v2 == 1 )
  {
    for ( i = &dword_1302A0_130290; i; i = (int *)i[2] )
    {
      if ( !*((_BYTE *)i + 16) )
        sub_42BA0((int)i);
    }
  }
  return sub_63338_63848();
}
// 130290: using guessed type int dword_1302A0_130290;

//----- (00042A70) --------------------------------------------------------
int sub_42730_42A70(int a1, int a2)
{
  int v2; // eax
  int *v3; // ebx
  char v4; // cl
  int *i; // ebx

  v2 = a2 + 3;
  v3 = &dword_1302A0_130290;
  v4 = 0;
  if ( &dword_1302A0_130290 )
  {
    while ( a1 != *v3 )
    {
      v3 = (int *)v3[2];
      if ( !v3 )
        goto LABEL_5;
    }
    *((_BYTE *)v3 + 16) = 0;
    LOBYTE(v2) = (a2 + 3) & 0xFC;
    sub_42990((int)v3, v2);
    v4 = 1;
  }
LABEL_5:
  if ( v4 == 1 )
  {
    for ( i = &dword_1302A0_130290; i; i = (int *)i[2] )
    {
      if ( !*((_BYTE *)i + 16) )
        sub_42BA0((int)i);
    }
  }
  sub_63338_63848();
  return 1;
}
// 130290: using guessed type int dword_1302A0_130290;

//----- (00042AE0) --------------------------------------------------------
int sub_42AE0(int a1, int a2)
{
  int *v2; // ebx
  unsigned int v3; // ecx
  int v4; // edi
  unsigned int v5; // edx
  int v6; // edx
  char v7; // al
  int *i; // ebx
  char v10; // [esp+0h] [ebp-Ch]

  v2 = &dword_1302A0_130290;
  v3 = a2 + 3;
  LOBYTE(v3) = (a2 + 3) & 0xFC;
  v10 = 0;
  if ( &dword_1302A0_130290 )
  {
    while ( a1 != *v2 )
    {
      v2 = (int *)v2[2];
      if ( !v2 )
        goto LABEL_13;
    }
    v4 = v2[2];
    *((_BYTE *)v2 + 16) = 0;
    if ( !v4 || *(_BYTE *)(v4 + 16) )
      return 0;
    v5 = v2[1] + *(_DWORD *)(v4 + 4);
    if ( v5 <= v3 )
    {
      if ( v5 < v3 )
        return 0;
      sub_42BA0(v4);
    }
    else
    {
      *(_DWORD *)(v4 + 4) = v5 - v3;
      v6 = v2[2];
      v7 = byte_93954;
      v2[1] = v3;
      *(_BYTE *)(v6 + 16) = v7;
    }
    v10 = 1;
    *((_BYTE *)v2 + 16) = byte_93954;
  }
LABEL_13:
  if ( v10 == 1 )
  {
    for ( i = &dword_1302A0_130290; i; i = (int *)i[2] )
    {
      if ( !*((_BYTE *)i + 16) )
        sub_42BA0((int)i);
    }
  }
  sub_63338_63848();
  return 1;
}
// 93954: using guessed type char byte_93954;
// 130290: using guessed type int dword_1302A0_130290;

//----- (00042BA0) --------------------------------------------------------
int sub_42BA0(int a1)
{
  int result; // eax
  int v2; // edx
  int v3; // ebx

  result = a1;
  if ( *(_DWORD *)(a1 + 12) )
  {
    *(_BYTE *)(a1 + 16) = 0;
    v2 = *(_DWORD *)(a1 + 12);
    if ( *(_BYTE *)(a1 + 17) == *(_BYTE *)(v2 + 17) && !*(_BYTE *)(v2 + 16) )
    {
      v3 = *(_DWORD *)(a1 + 8);
      if ( v3 )
        *(_DWORD *)(v3 + 12) = v2;
      *(_DWORD *)(*(_DWORD *)(a1 + 12) + 8) = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(*(_DWORD *)(a1 + 12) + 4) += *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = 0;
    }
  }
  return result;
}

//----- (00042BF0) --------------------------------------------------------
void sub_428B0_42BF0()
{
  if ( lastPressedKey_12EF70_12EF60 == 1
    || mouseLeftButton_12EFDE_12EFCE && mouseX_9AD8C >= 568 && mouseX_9AD8C <= 606 && mouseY_9AD8E >= 96 && mouseY_9AD8E <= 134 )
  {
    word_93988 = 1;
    lastPressedKey_12EF70_12EF60 = 0;
    mouseLeftButton_12EFDE_12EFCE = 0;
    FadeInOut_61CC0_621D0(0, 0x10u, 0);
  }
  else
  {
    mouseLeftButton_12EFDE_12EFCE = 0;
  }
}
// 93988: using guessed type __int16 word_93988;
// 9AD8C: using guessed type __int16 mouseX_9AD8C;
// 9AD8E: using guessed type __int16 mouseY_9AD8E;
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFCE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;

//----- (00042C70) --------------------------------------------------------
int sub_42C70(_BYTE *a1, char *a2, unsigned __int8 a3)
{
  const char *v3; // edx
  char *v5; // edi
  char v6; // al
  char v7; // al
  char *v8; // esi
  char *v9; // edi
  char v10; // al
  char v11; // al
  char v13; // ah

  v3 = (char*)(a1 + 26);
  v5 = (char*)(a1 + 26);
  do
  {
    v6 = *a2;
    *v5 = *a2;
    if ( !v6 )
      break;
    v7 = a2[1];
    a2 += 2;
    v5[1] = v7;
    v5 += 2;
  }
  while ( v7 );
  while ( strlen(v3) < 0xF )
  {
    v8 = asc_A9608;
    v9 = (char *)&v3[strlen(v3)];
    do
    {
      v10 = *v8;
      *v9 = *v8;
      if ( !v10 )
        break;
      v11 = v8[1];
      v8 += 2;
      v9[1] = v11;
      v9 += 2;
    }
    while ( v11 );
  }
  *a1 = -80;
  if ( SetNetbios_431A0_434E0((myNCB*)a1) == -1 )
    return -99;
  while ( 1 )
  {
    v13 = a1[49];
    if ( v13 != -1 )
      break;
    sub_428B0_42BF0();
    sub_4E3D0_4E710(a3);
  }
  if ( v13 )
    sub_4E850(a3);
  else
    sub_4E470_4E7B0(a3);
  return -(unsigned __int8)a1[49];
}

//----- (00042D40) --------------------------------------------------------
int sub_42A00_42D40(__int16 a1)
{
  char *v1; // esi
  char *v2; // edi
  char v3; // al
  char v4; // al
  char *v5; // esi
  const char *v6; // edi
  char *v7; // edi
  char v8; // al
  char v9; // al
  __int16 v11; // ax
  char *v12; // esi
  char *v13; // edi
  char v14; // al
  char v15; // al
  char v16[32]; // [esp+0h] [ebp-20h] BYREF

  *(_BYTE *)connection_93990[word_9395A] = -112;
  sprintf(v16, "%s%d", aTester, a1);
  v1 = v16;
  v2 = (char *)(connection_93990[word_9395A] + 10);
  do
  {
    v3 = *v1;
    *v2 = *v1;
    if ( !v3 )
      break;
    v4 = v1[1];
    v1 += 2;
    v2[1] = v4;
    v2 += 2;
  }
  while ( v4 );
  while ( strlen((const char *)(connection_93990[word_9395A] + 10)) < 0xF )
  {
    v5 = asc_A9608;
    v6 = (const char *)(connection_93990[word_9395A] + 10);
    v7 = (char *)&v6[strlen(v6)];
    do
    {
      v8 = *v5;
      *v7 = *v5;
      if ( !v8 )
        break;
      v9 = v5[1];
      v5 += 2;
      v7[1] = v9;
      v7 += 2;
    }
    while ( v9 );
  }
  *(_BYTE *)(connection_93990[word_9395A] + 42) = 0;
  *(_BYTE *)(connection_93990[word_9395A] + 43) = 0;
  if ( SetNetbios_431A0_434E0(connection_93990[word_9395A]) == -1 )
    return -99;
  while ( *(_BYTE *)(connection_93990[word_9395A] + 49) == 0xFF && *(_BYTE *)(connection_93990[a1] + 49) == 0xFF )
  {
    sub_4E3D0_4E710(a1);
    sub_428B0_42BF0();
    if ( word_93988 == 1 )
    {
      sub_42C70_42FB0(word_9395A);
      return -1;
    }
  }
  v11 = 0;
  if ( !*(_BYTE *)(connection_93990[a1] + 49) )
  {
    sub_42C70_42FB0(word_9395A);
    v11 = 1;
  }
  if ( !*(_BYTE *)(connection_93990[word_9395A] + 49) )
  {
    sub_42C70_42FB0(a1);
    v11 = 1;
  }
  if ( v11 == 1 )
    sub_4E470_4E7B0(a1);
  if ( !*(_BYTE *)(connection_93990[word_9395A] + 49) )
  {
    sub_42C70_42FB0(a1);
    v12 = (char *)(connection_93990[word_9395A] + 10);
    v13 = (char *)(connection_93990[a1] + 10);
    do
    {
      v14 = *v12;
      *v13 = *v12;
      if ( !v14 )
        break;
      v15 = v12[1];
      v12 += 2;
      v13[1] = v15;
      v13 += 2;
    }
    while ( v15 );
    *(_BYTE *)(connection_93990[a1] + 2) = *(_BYTE *)(connection_93990[word_9395A] + 2);
    *(_BYTE *)(connection_93990[a1] + 49) = *(_BYTE *)(connection_93990[word_9395A] + 49);
  }
  return -*(unsigned __int8 *)(connection_93990[a1] + 49);
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 9395A: using guessed type __int16 word_9395A;
// 93988: using guessed type __int16 word_93988;
// 93990: using guessed type int connection_93990[7];

//----- (00042FB0) --------------------------------------------------------
int sub_42C70_42FB0(__int16 a1)
{
  unsigned int v2; // [esp-4h] [ebp-8h]

  if ( *(_BYTE *)(connection_93990[a1] + 49) == 0xFF )
  {
    *(_BYTE *)mainconnection_9398C = 53;
    v2 = (unsigned int)mainconnection_9398C;
    *(_WORD *)(mainconnection_9398C + 6) = (unsigned int)connection_93990[a1] >> 4;
    if ( SetNetbios_431A0_434E0((myNCB*)v2) == -1 )
      return -99;
    do
    {
      while ( *(_BYTE *)(mainconnection_9398C + 49) == 0xFF )
        ;
    }
    while ( *(_BYTE *)(connection_93990[a1] + 49) == 0xFF );
  }
  return -*(unsigned __int8 *)(mainconnection_9398C + 49);
}
// 9398C: using guessed type int mainconnection_9398C;
// 93990: using guessed type int connection_93990[7];

int NetworkInit_42CF0_43030()
{
    if (dos_getvect(92))
    {
        mainconnection_9398C->ncb_command_0 = 0x7F;
        if (SetNetbios_431A0_434E0(mainconnection_9398C) == -1)
            return -1;
        if (mainconnection_9398C->ncb_retcode_1 == 3)
            return 0;
    }
    return -1;
}

//----- (00043080) --------------------------------------------------------
int sub_43080(_BYTE *a1, char *a2)
{
  const char *v2; // edx
  char *v4; // edi
  char v5; // al
  char v6; // al
  char *v7; // esi
  char *v8; // edi
  char v9; // al
  char v10; // al

  v2 = (char*)(a1 + 26);
  v4 = (char*)(a1 + 26);
  do
  {
    v5 = *a2;
    *v4 = *a2;
    if ( !v5 )
      break;
    v6 = a2[1];
    a2 += 2;
    v4[1] = v6;
    v4 += 2;
  }
  while ( v6 );
  while ( strlen(v2) < 0xF )
  {
    v7 = asc_A9608;
    v8 = (char *)&v2[strlen(v2)];
    do
    {
      v9 = *v7;
      *v8 = *v7;
      if ( !v9 )
        break;
      v10 = v7[1];
      v7 += 2;
      v8[1] = v10;
      v8 += 2;
    }
    while ( v10 );
  }
  *a1 = -79;
  if ( SetNetbios_431A0_434E0((myNCB*)a1) == -1 )
    return -99;
  while ( a1[49] == 0xFF )
    ;
  return -(unsigned __int8)a1[49];
}

//----- (00043120) --------------------------------------------------------
int sub_43120(_BYTE *a1)
{
  int v2; // eax

  *a1 = -110;
  if ( SetNetbios_431A0_434E0((myNCB*)a1) == -1 )
    return -99;
  while ( a1[49] == 0xFF )
    ;
  v2 = (unsigned __int8)a1[49];
  a1[2] = 0;
  return -v2;
}

//----- (00043150) --------------------------------------------------------
int sub_43150(__int16 a1)
{
  char *v1; // esi
  char *v2; // edi
  char v3; // al
  char v4; // al
  char *v5; // esi
  const char *v6; // edi
  char *v7; // edi
  char v8; // al
  char v9; // al
  char v12[32]; // [esp+0h] [ebp-20h] BYREF

  if ( *(_BYTE *)(connection_93990[a1] + 49) == 0xFF )
    return -*(unsigned __int8 *)(connection_93990[a1] + 49);
  sprintf(v12, "%s%d", aTester, a1);
  *(_BYTE *)connection_93990[a1] = -111;
  v1 = v12;
  v2 = (char *)(connection_93990[a1] + 10);
  do
  {
    v3 = *v1;
    *v2 = *v1;
    if ( !v3 )
      break;
    v4 = v1[1];
    v1 += 2;
    v2[1] = v4;
    v2 += 2;
  }
  while ( v4 );
  while ( strlen((const char *)(connection_93990[a1] + 10)) < 0xF )
  {
    v5 = asc_A9608;
    v6 = (const char *)(connection_93990[a1] + 10);
    v7 = (char *)&v6[strlen(v6)];
    do
    {
      v8 = *v5;
      *v7 = *v5;
      if ( !v8 )
        break;
      v9 = v5[1];
      v5 += 2;
      v7[1] = v9;
      v7 += 2;
    }
    while ( v9 );
  }
  *(_BYTE *)(connection_93990[a1] + 42) = 0;
  *(_BYTE *)(connection_93990[a1] + 43) = 0;
  if ( SetNetbios_431A0_434E0(connection_93990[a1]) != -1 )
  {
    *(_WORD *)(connection_93990[a1] + 4) = 0;
    return -*(unsigned __int8 *)(connection_93990[a1] + 49);
  }
  return -99;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 93990: using guessed type int connection_93990[7];

//----- (00043270) --------------------------------------------------------
int sub_43270(unsigned int a1, void *a2)
{
  unsigned int v2; // eax
  char v4; // ah

  *(_BYTE *)a1 = -107;
  v2 = (unsigned int)packet_93964;
  *(_WORD *)(a1 + 8) = 2048;
  *(_WORD *)(a1 + 6) = v2 >> 4;
  if ( SetNetbios_431A0_434E0((myNCB*)a1) == -1 )
    return -99;
  do
    v4 = *(_BYTE *)(a1 + 49);
  while ( v4 == -1 );
  if ( v4 )
    return -*(unsigned __int8 *)(a1 + 49);
  qmemcpy(a2, (const void *)packet_93964, *(unsigned __int16 *)(a1 + 8));
  return *(unsigned __int16 *)(a1 + 8);
}
// 93964: using guessed type int packet_93964;

//----- (000432F0) --------------------------------------------------------
int sub_432F0(unsigned int a1, char *a2, unsigned int a3)
{
  unsigned int v4; // esi
  int result; // eax

  v4 = 0;
  if ( a3 >> 11 )
  {
    while ( 1 )
    {
      result = sub_43270(a1, a2);
      if ( result != 2048 )
        break;
      ++v4;
      a2 += 2048;
      if ( v4 >= a3 >> 11 )
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    result = sub_43270(a1, a2);
    if ( result == (a3 & 0x7FF) )
      return a3;
  }
  return result;
}

//----- (00043350) --------------------------------------------------------
int sub_43350(unsigned int a1, int a2, unsigned __int16 a3)
{
  unsigned int v3; // edx

  *(_BYTE *)a1 = -107;
  v3 = (unsigned int)packet_93968[a3] >> 4;
  *(_WORD *)(a1 + 8) = 2048;
  *(_WORD *)(a1 + 6) = v3;
  if ( SetNetbios_431A0_434E0((myNCB*)a1) == -1 )
    return -99;
  else
    return 1;
}
// 93968: using guessed type int packet_93968[8];

//----- (000433C0) --------------------------------------------------------
int sub_433C0(unsigned int a1, const void *a2, unsigned int a3)
{
  unsigned int v3; // eax

  qmemcpy((void *)packet_93960, a2, a3);
  *(_BYTE *)a1 = -108;
  v3 = (unsigned int)packet_93960;
  *(_WORD *)(a1 + 8) = a3;
  *(_WORD *)(a1 + 6) = v3 >> 4;
  if ( SetNetbios_431A0_434E0((myNCB*)a1) == -1 )
    return -99;
  while ( *(_BYTE *)(a1 + 49) == 0xFF )
    ;
  return -*(unsigned __int8 *)(a1 + 49);
}
// 93960: using guessed type int packet_93960;

//----- (00043430) --------------------------------------------------------
int sub_43430(unsigned int a1, char *a2, unsigned int a3)
{
  unsigned int v4; // esi
  int result; // eax

  v4 = 0;
  if ( !(a3 >> 11) )
    return sub_433C0(a1, a2, a3 & 0x7FF);
  while ( 1 )
  {
    LOWORD(result) = sub_433C0(a1, a2, 0x800u);
    if ( (_WORD)result )
      break;
    ++v4;
    a2 += 2048;
    if ( v4 >= a3 >> 11 )
      return sub_433C0(a1, a2, a3 & 0x7FF);
  }
  return (__int16)result;
}

//----- (00043490) --------------------------------------------------------
int sub_43490()
{
  __int16 i; // bx
  int v1; // esi
  int result; // eax

  for ( i = 0; i < 8; ++i )
  {
    v1 = i;
    result = sub_43170_434B0(i);
    byte_939B0[v1] = result;
  }
  return result;
}

//----- (000434B0) --------------------------------------------------------
int sub_43170_434B0(__int16 a1)
{
  int v2; // eax

  if ( a1 == word_9395A )
    return 2;
  v2 = (int)connection_93990[a1];
  return *(_BYTE *)(v2 + 2) && !*(_BYTE *)(v2 + 49);
}
// 9395A: using guessed type __int16 word_9395A;
// 93990: using guessed type int connection_93990[7];

//----- (000434E0) --------------------------------------------------------
int SetNetbios_431A0_434E0(myNCB* connection)
{
	//fix
	/*
  int v2[13]; // [esp+0h] [ebp-80h] BYREF
  int v3[7]; // [esp+34h] [ebp-4Ch] BYREF
  int v4[7]; // [esp+50h] [ebp-30h] BYREF
  char v5[20]; // [esp+6Ch] [ebp-14h] BYREF
  */

	connection->ncb_cmd_cplt_49 = 0;
	/*
  memset(v2, 0, 50);
  LOWORD(v2[9]) = a1 >> 4;
  HIWORD(v2[8]) = v2[9];
  v2[4] = 0;
  v2[7] = 256;
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  memset(v5, 0, 12);
  segread((uint32)v5);
  v4[5] = (int)v2;
  v4[0] = 768;
  v4[1] = 92;
  int386x(49, (uint32)v4, (uint32)v3, (uint32)v5);
  return (v3[6] == 0) - 1;
  */
  //makeNetwork(connection);//fix - add network
	return 0;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 63BCC: using guessed type _DWORD segread(_DWORD);
// 63BF6: using guessed type _DWORD int386x(_DWORD, _DWORD, _DWORD, _DWORD);

void InitNetwork_43270_435B0()
{
	int networkInited = 1;
	if (!byte_93958 && !mainconnection_9398C)
	{
		system(aNetbios);
		mainconnection_9398C = (myNCB*)malloc_425C0_42900(66);
		if (!mainconnection_9398C)
			networkInited = -1;
		else
		{
			if (NetworkInit_42CF0_43030() == -1)
				return;
			packet_93960 = (uint8_t*)malloc_425C0_42900(2048);
			if (packet_93960 && (packet_93964 = (uint8_t*)malloc_425C0_42900(2048)) != 0)
			{
				for (int i = 0; i != 8; i++)
				{
					packet_93968[i] = (uint8_t*)malloc_425C0_42900(2048);
					if (!packet_93968[i])
						networkInited = -1;
					connection_93990[i] = (myNCB*)malloc_425C0_42900(66);
					if (!connection_93990[i])
						networkInited = -1;
				}
				byte_93958 = 1;
			}
			else
			{
				networkInited = -1;
			}
		}
	}
	if (networkInited == -1)
	{
		if (mainconnection_9398C)
			free_426E0_42A20((void*)mainconnection_9398C);
		if (packet_93960)
			free_426E0_42A20((void*)packet_93960);
		if (packet_93964)
			free_426E0_42A20((void*)packet_93964);
		for (int j = 0; j != 8; j++)
		{
			if (connection_93990[j])
				free_426E0_42A20((void*)connection_93990[j]);
			if (packet_93968[j])
				free_426E0_42A20((void*)packet_93968[j]);
		}
	}
}

//----- (00043700) --------------------------------------------------------
void sub_433C0_43700()
{
  int v0; // ebx
  void* v2; // [esp-4h] [ebp-14h]

  if ( byte_93958 )
  {
    v0 = 0;
    free_426E0_42A20(mainconnection_9398C);
    do
    {
      free_426E0_42A20(connection_93990[v0]);
      v2 = packet_93968[v0++];
      free_426E0_42A20(v2);
    }
    while ( v0 != 8 );
    free_426E0_42A20(packet_93960);
    free_426E0_42A20(packet_93964);
    byte_93958 = 0;
  }
}
// 93958: using guessed type char byte_93958;
// 93960: using guessed type int packet_93960;
// 93964: using guessed type int packet_93964;
// 93968: using guessed type int packet_93968[];
// 9398C: using guessed type int mainconnection_9398C;
// 93990: using guessed type int connection_93990[7];

//----- (00043770) --------------------------------------------------------
int sub_43430_43770(char *a1, __int16 a2)
{
  char *v3; // edi
  int v4; // ebx
  char v5; // al
  char v6; // al
  unsigned int v7; // eax
  int v8; // ebx
  int v10; // ebx
  int v11; // edx
  char *v12; // esi
  char *v13; // edi
  char v14; // al
  char v15; // al
  int i; // ebx
  int v17; // ebx
  int j; // esi
  int v19; // ebx
  int v20; // edi
  int v21; // esi
  __int16 v22; // bx
  _BYTE *v23; // [esp-8h] [ebp-2Ch]
  char v24[36]; // [esp+0h] [ebp-24h] BYREF

  if ( byte_93958 )
  {
    if ( byte_93959 )
      return word_9395A;
    v3 = aTester;
    v4 = 0;
    word_93988 = (unsigned __int8)byte_93959;
    word_9395C = a2;
    do
    {
      v5 = *a1;
      *v3 = *a1;
      if ( !v5 )
        break;
      v6 = a1[1];
      a1 += 2;
      v3[1] = v6;
      v3 += 2;
    }
    while ( v6 );
    do
      byte_939AF[++v4] = 0;
    while ( v4 < 8 );
    v8 = 0;
    word_9395A = -1;
    do
    {
      if ( word_9395A != -1 || word_93988 )
        break;
      sprintf(v24, "%s%d", aTester, v8);
      v7 = sub_42C70((_BYTE *)connection_93990[v8], v24, v8);
      if ( v7 < 0xFFFE7961 )
      {
        if ( !v7 )
          word_9395A = v8;
      }
      else if ( v7 > 0xFFFE7961 && v7 == -13 )
      {
        v23 = (_BYTE *)connection_93990[v8--];
        sub_43080(v23, v24);
      }
      ++v8;
    }
    while ( v8 < 8 );
    if ( word_9395A == -1 )
      return -1;
    if ( word_93988 )
    {
      sprintf(v24, "%s%d", aTester, word_9395A);
      sub_43080((_BYTE *)connection_93990[v8], v24);
      return -1;
    }
    v10 = 0;
    v11 = 0;
    do
    {
      if ( v10 != word_9395A )
      {
        v12 = (char *)(connection_93990[word_9395A] + 26);
        v13 = (char *)(connection_93990[v11] + 26);
        do
        {
          v14 = *v12;
          *v13 = *v12;
          if ( !v14 )
            break;
          v15 = v12[1];
          v12 += 2;
          v13[1] = v15;
          v13 += 2;
        }
        while ( v15 );
        *(_BYTE *)(connection_93990[v11] + 3) = *(_BYTE *)(connection_93990[word_9395A] + 3);
      }
      ++v10;
      ++v11;
    }
    while ( v10 < 8 );
    for ( i = 0; i < word_9395C; ++i )
    {
      if ( i != word_9395A )
        sub_43150(i);
    }
    v17 = 0;
    for ( j = 0; v17 < word_9395C; ++j )
    {
      if ( v17 != word_9395A && *(_BYTE *)(connection_93990[j] + 49) == 0xFF )
      {
        sub_42A00_42D40(v17);
        if ( word_93988 )
          break;
      }
      ++v17;
    }
    do
    {
      sub_428B0_42BF0();
      v19 = 0;
      v20 = 0;
      v21 = 0;
      while ( v19 < word_9395C )
      {
        if ( v19 != word_9395A && *(_BYTE *)(connection_93990[v21] + 49) )
        {
          if ( word_93988 )
            sub_42C70_42FB0(v19);
        }
        else
        {
          sub_4E470_4E7B0(v19);
          if ( word_93988 )
          {
            if ( v19 == word_9395A )
            {
              sprintf(v24, "%s%d", aTester, word_9395A);
              sub_43080((_BYTE *)connection_93990[v21], v24);
            }
            else
            {
              sub_43120((_BYTE *)connection_93990[v21]);
            }
          }
          ++v20;
        }
        ++v21;
        ++v19;
      }
    }
    while ( v20 != word_9395C && !word_93988 );
    v22 = word_93988;
    if ( !word_93988 )
    {
      sub_43490();
      word_9398A = v22;
      byte_93959 = 1;
      return word_9395A;
    }
  }
  return -1;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 93958: using guessed type char byte_93958;
// 93959: using guessed type char byte_93959;
// 9395A: using guessed type __int16 word_9395A;
// 9395C: using guessed type __int16 word_9395C;
// 93988: using guessed type __int16 word_93988;
// 9398A: using guessed type __int16 word_9398A;
// 93990: using guessed type int connection_93990[7];

//----- (00043AA0) --------------------------------------------------------
int sub_43AA0(__int16 a1)
{
  __int16 i; // bx
  int result; // eax
  __int16 v3; // bx
  char v4[32]; // [esp+0h] [ebp-20h] BYREF

  if ( byte_93958 && byte_93959 )
  {
    if ( a1 == word_9395A )
    {
      for ( i = 0; i < word_9395C; ++i )
      {
        if ( i != word_9395A )
        {
          sub_42C70_42FB0(i);
          sub_43120((_BYTE *)connection_93990[i]);
        }
      }
      sprintf(v4, "%s%d", aTester, word_9395A);
      sub_43080((_BYTE *)connection_93990[a1], v4);
      byte_93959 = 0;
    }
    else
    {
      sub_42C70_42FB0(a1);
      sub_43120((_BYTE *)connection_93990[a1]);
    }
    result = sub_43490();
    v3 = 0;
    if ( word_9395C > 0 )
    {
      while ( !byte_939B0[v3] )
      {
        if ( ++v3 >= word_9395C )
          return result;
      }
      word_9398A = v3;
    }
  }
  return result;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 93958: using guessed type char byte_93958;
// 93959: using guessed type char byte_93959;
// 9395A: using guessed type __int16 word_9395A;
// 9395C: using guessed type __int16 word_9395C;
// 9398A: using guessed type __int16 word_9398A;
// 93990: using guessed type int connection_93990[7];

//----- (00043BB0) --------------------------------------------------------
void sub_43BB0(unsigned __int16 a1, char *a2, unsigned int a3)
{
  if ( byte_93958 && byte_939B0[a1] == 1 )
  {
    sub_43430((unsigned int)connection_93990[a1], a2, a3);
    if ( *(_BYTE *)(connection_93990[a1] + 49) )
      sub_43150(a1);
  }
}
// 93958: using guessed type char byte_93958;
// 93990: using guessed type int connection_93990[7];

//----- (00043C10) --------------------------------------------------------
void sub_43C10(unsigned __int16 a1, char *a2, unsigned int a3)
{
  if ( byte_93958 && byte_939B0[a1] == 1 )
  {
    sub_432F0((unsigned int)connection_93990[a1], a2, a3);
    if ( *(_BYTE *)(connection_93990[a1] + 49) )
      sub_43150(a1);
  }
}
// 93958: using guessed type char byte_93958;
// 93990: using guessed type int connection_93990[7];

//----- (00043C70) --------------------------------------------------------
void sub_43C70(char *a1, unsigned int a2)
{
  signed __int16 i; // bx
  signed __int16 j; // bx

  if ( byte_93958 )
  {
    if ( word_9395A == (unsigned __int16)word_9398A )
    {
      for ( i = 0; i < word_9395C; ++i )
      {
        if ( i != word_9395A )
          sub_43C10(i, &a1[a2 * i], a2);
      }
      for ( j = 0; j < word_9395C; ++j )
      {
        if ( j != word_9395A )
          sub_43BB0(j, a1, a2 * word_9395C);
      }
    }
    else
    {
      sub_43BB0(word_9398A, &a1[a2 * word_9395A], a2);
      sub_43C10(word_9398A, a1, word_9395C * a2);
    }
  }
}
// 93958: using guessed type char byte_93958;
// 9395A: using guessed type __int16 word_9395A;
// 9395C: using guessed type __int16 word_9395C;
// 9398A: using guessed type __int16 word_9398A;

//----- (00043E60) --------------------------------------------------------
char sub_43B20_sub_43E60(int a1, unsigned int a2)
{
  int v2; // eax
  char *v3; // eax
  int v4; // eax
  char *v5; // eax
  unsigned __int16 v6; // dx
  int v7; // eax
  char *v8; // eax
  char *v9; // eax
  char *v10; // eax

  byte_9EBDD = 0;
  byte_9EBE7 = 0;
  byte_9EBE8 = 0;
  byte_9EBE9 = 0;
  byte_9EBEA = 0;
  byte_9EBEB = 0;
  byte_9EBEC = 0;
  byte_9EC0D = 0;
  byte_9EC17 = 0;
  byte_9EC18 = 0;
  byte_9EC19 = 0;
  byte_9EC1A = 0;
  byte_9EC1B = 0;
  byte_9EC1C = 0;
  byte_9EBED = 0;
  byte_9EBF7 = 0;
  byte_9EBF8 = 0;
  byte_9EBF9 = 0;
  byte_9EBFA = 0;
  byte_9EBFB = 0;
  byte_9EBFC = 0;
  sub_5D883_5DD93(a1, 0xFF00u, 0);
  byte_939D4 = 1;
  sub_606A9((int)&unk_A961C, __DS__);
  word_CBF38 = 0;
  dword_CBF5C = dword_CBF60;
  dword_CBF34 = 0;
  v2 = sub_6086F(
         a2,
         (unsigned int)&dword_CBF5C,
         (unsigned __int16)__DS__,
         (int)&unk_CBF30,
         (unsigned __int16)__DS__,
         (unsigned int)&dword_CBFCC);
  if ( v2 )
  {
    v3 = sub_63C9C(v2);
    printf("\nError : %s\n", v3);
    sub_60845();
    LOBYTE(v4) = sub_5DE58();
    byte_939CC = 0;
    byte_939CD = 0;
  }
  else
  {
    LOBYTE(v4) = a2 - 1;
    switch ( a2 )
    {
      case 0xA001u:
        byte_CBFDF = 0;
        byte_CBFDE = 2;
        break;
      case 0xA002u:
        v5 = sub_44190(aDataInstBnk);
        word_CBFDC = 0;
        dword_CBFD8 = (int)v5;
        if ( v5 )
        {
          v6 = 0;
          v7 = sub_63CE1(dword_CBFCC, (int)v5, 0, 1);
          if ( v7 )
          {
            v8 = sub_63C9C(v7);
            printf("\nError : %s\n", v8);
            sub_60D1C(dword_CBFCC, 1);
            sub_60845();
            sub_5DE58();
            HIBYTE(v6) = 0;
            byte_939CC = 0;
            byte_939CD = 0;
          }
          v9 = sub_44190(aDataDrumBnk);
          word_CBFD6 = v6;
          dword_CBFD2 = (int)v9;
          if ( v9 )
          {
            v4 = sub_63CE1(dword_CBFCC, (int)v9, v6, 1);
            if ( v4 )
            {
              v10 = sub_63C9C(v4);
              printf("\nError : %s\n", v10);
              sub_60D1C(dword_CBFCC, 1);
              sub_60845();
              LOBYTE(v4) = sub_5DE58();
              byte_939CC = 0;
              byte_939CD = 0;
            }
            if ( byte_939CC )
            {
              byte_CBFDF = 1;
              byte_CBFDE = 0;
            }
          }
          else
          {
            LOBYTE(v4) = printf("\nError : Unable to load drum.bnk.\n");
            byte_939CC = 0;
            byte_939CD = 0;
          }
        }
        else
        {
          LOBYTE(v4) = printf("\nError : Unable to load inst.bnk.\n");
          byte_939CC = 0;
          byte_939CD = 0;
        }
        break;
      case 0xA004u:
        byte_CBFDF = 0;
        byte_CBFDE = 1;
        break;
      case 0xA008u:
        LOBYTE(v4) = 2;
        byte_CBFDF = 0;
        byte_CBFDE = 2;
        break;
      default:
        break;
    }
    if ( byte_939CC )
    {
      v4 = sub_5CEF0_5D400(0);
      if ( v4 )
      {
        printf("\nError opening music files\n");
        sub_60D1C(dword_CBFCC, 1);
        sub_60845();
        LOBYTE(v4) = sub_5DE58();
        byte_939CC = 0;
        byte_939CD = 0;
      }
    }
  }
  return v4;
}
// 4405D: conditional instruction was optimized away because dx.2==0
// 5D113: using guessed type _DWORD printf(const char *, ...);
// 939CC: using guessed type char byte_939CC;
// 939CD: using guessed type char byte_939CD;
// 939D4: using guessed type char byte_939D4;
// 9EBDD: using guessed type char byte_9EBDD;
// 9EBE7: using guessed type char byte_9EBE7;
// 9EBE8: using guessed type char byte_9EBE8;
// 9EBE9: using guessed type char byte_9EBE9;
// 9EBEA: using guessed type char byte_9EBEA;
// 9EBEB: using guessed type char byte_9EBEB;
// 9EBEC: using guessed type char byte_9EBEC;
// 9EBED: using guessed type char byte_9EBED;
// 9EBF7: using guessed type char byte_9EBF7;
// 9EBF8: using guessed type char byte_9EBF8;
// 9EBF9: using guessed type char byte_9EBF9;
// 9EBFA: using guessed type char byte_9EBFA;
// 9EBFB: using guessed type char byte_9EBFB;
// 9EBFC: using guessed type char byte_9EBFC;
// 9EC0D: using guessed type char byte_9EC0D;
// 9EC17: using guessed type char byte_9EC17;
// 9EC18: using guessed type char byte_9EC18;
// 9EC19: using guessed type char byte_9EC19;
// 9EC1A: using guessed type char byte_9EC1A;
// 9EC1B: using guessed type char byte_9EC1B;
// 9EC1C: using guessed type char byte_9EC1C;
// CBF34: using guessed type int dword_CBF34;
// CBF38: using guessed type __int16 word_CBF38;
// CBF5C: using guessed type int dword_CBF5C;
// CBF60: using guessed type int dword_CBF60;
// CBFCC: using guessed type int dword_CBFCC;
// CBFD2: using guessed type int dword_CBFD2;
// CBFD6: using guessed type __int16 word_CBFD6;
// CBFD8: using guessed type int dword_CBFD8;
// CBFDC: using guessed type __int16 word_CBFDC;
// CBFDE: using guessed type char byte_CBFDE;
// CBFDF: using guessed type char byte_CBFDF;

//----- (00044190) --------------------------------------------------------
char *sub_44190(const char *a1)
{
  char *v1; // esi
  int v2; // ebp
  int v3; // eax
  int v4; // edi
  char *v5; // eax
  int v6; // ebx

  v1 = 0;
  v2 = 0;
  v3 = GetRNCFilesize_63910_63E20((Pathstruct*)a1);
  v4 = v3;
  if ( v3 > 0 )
  {
    v5 = (char *)malloc_42540_42880(v3);
    v6 = (int)v5;
    v1 = v5;
    if ( v5 )
    {
      if ( sub_3EEA0_3F1E0((char*)a1, (uint8_t*)v5) != v4 )
      {
        free_426E0_42A20((void*)v6);
        v1 = (char *)(v6 ^ (unsigned int)v1);
      }
    }
  }
  if ( v1 )
    return v1;
  return (char *)v2;
}

//----- (00044200) --------------------------------------------------------
void sub_43EC0_44200()
{
  unsigned __int16 v5; // ax
  char *v6; // eax
  unsigned __int16 v7; // ax
  char *v8; // eax
  int result; // eax
  unsigned __int16 v10; // ax
  char *v11; // eax
  char *v12; // eax
  _BYTE v13[16]; // [esp+0h] [ebp-10h] BYREF

    //fix
    v5 = 0;
    v10 = 0;
    //fix
  //        __int16 a1,
  //int a2,
    int a3 = 0;
    unsigned __int16 a4 = 0;
    unsigned __int16 a5 = 0;
    //fix

  if ( !stricmp(&unk_CC148, aSblast_0) )
  {
    a5 = -8192;
    a4 = 22050;
    word_CC1B4 = 60;
  }
  else if ( !strcmp(&unk_CC148, aSbpro_0) )
  {
    a5 = -8191;
    a3 = 120;
    a4 = 22050;
    word_CC1B4 = 120;
  }
  else if ( !strcmp(&unk_CC148, aSb16) )
  {
    a5 = -8169;
    a4 = -21436;
    word_CC1B4 = 240;
    byte_939ED = 1;
  }
  else if ( !strcmp(&unk_CC148, aAdlibg_0) )
  {
    a5 = -8183;
    a4 = 22050;
    word_CC1B4 = 60;
  }
  else if ( !strcmp(&unk_CC148, aMicrosoft8) )
  {
    a5 = -8181;
    a4 = 22050;
    word_CC1B4 = 60;
  }
  else if ( !strcmp(&unk_CC148, aMicrosoft16) )
  {
    a3 = 1;
    a5 = -8179;
    word_CC1B4 = 240;
    a4 = -21436;
    byte_939ED = 1;
  }
  else if ( !strcmp(&unk_CC148, aPas8) )
  {
    a5 = -8189;
    a4 = 22050;
    word_CC1B4 = 60;
  }
  else if ( !strcmp(&unk_CC148, aPas16) )
  {
    a5 = -8188;
    a4 = -21436;
    word_CC1B4 = 240;
    byte_939ED = 1;
  }
  else if ( !strcmp(&unk_CC148, aGravis_0) )
  {
    a5 = -8192;
    a4 = 22050;
    word_CC1B4 = 60;
  }
  else if ( !strcmp(&unk_CC148, aSoundmasterii) )
  {
    a5 = -8190;
    a3 = 60;
    a4 = 22050;
    word_CC1B4 = 60;
  }
  else if ( !strcmp(&unk_CC148, aCompatible_0) )
  {
    a5 = -8192;
    a4 = 22050;
    word_CC1B4 = 60;
  }
  else
  {
    byte_939E4 = 0;
    byte_939E5 = 0;
  }
  if ( !byte_939EC )
  {
LABEL_35:
    a4 = 11025;
    word_CC1B4 = 60;
    switch ( a5 )
    {
      case 0xE004:
        a5 = -8189;
        byte_939ED = 0;
        break;
      case 0xE017:
        a5 = -8170;
        byte_939ED = 0;
        break;
      case 0xE00D:
        a5 = -8181;
        byte_939ED = 0;
        break;
    }
    goto LABEL_41;
  }
  if ( (unsigned __int8)byte_939EC > 1u )
  {
    if ( byte_939EC != 3 )
      goto LABEL_41;
    goto LABEL_35;
  }
  a4 = 22050;
  switch ( a5 )
  {
    case 0xE004:
      a5 = -8189;
      a3 = 60;
      word_CC1B4 = 60;
      byte_939ED = 0;
      break;
    case 0xE017:
      a5 = -8170;
      word_CC1B4 = 120;
      byte_939ED = 0;
      break;
    case 0xE00D:
      a5 = -8181;
      word_CC1B4 = 60;
      byte_939ED = 0;
      break;
  }
LABEL_41:
  if ( byte_939E6 )
  {
    //fix v5 = sub_63A9D_63FAD(a1, a2, (int)&asc_A971F[1], __DS__);
    if ( v5 )
    {
      v6 = sub_63C9C(v5);
      printf("\nError : %s\n", v6);
LABEL_63:
      byte_939E4 = 0;
      byte_939E5 = 0;
      sub_61610_61B20((Pathstruct*)(char*)"data/snds0-0.dat");
      return;
    }
    v7 = 1;
    a3 = 0;
    do
    {
      if ( !v7 )
        break;
      ++a3;
      v7 = sub_63C5A_6416A(v13, a5, byte_CC0B2, __DS__, (unsigned int)v13);
    }
    while ( (__int16)a3 < 5 );
    if ( v7 || (v7 = sub_64758((unsigned int)&dword_CC124, __DS__)) != 0 )
    {
      v8 = sub_63C9C(v7);
      printf("\nError : %s\n", v8);
      sub_64116();
      byte_939E4 = 0;
      byte_939E5 = 0;
      sub_61610_61B20((Pathstruct*)(char*)"data/snds0-0.dat");
      return;
    }
    sub_64116();
  }
  else
  {
    dword_CC124 = dword_CC13C;
    dword_CC128 = dword_CC140;
    dword_CC12C = dword_CC1AC;
    dword_CC116 = a5;
  }
  sub_64CD0((int)&asc_A971F[1], __DS__);
  if ( !byte_939D4 )
    sub_5D883_5DD93(a3, 0xFF00u, 0);
  dword_93A54 = a4;
  //fix
  /*v10 = sub_64846_64D56(
          a2,
          a5,
          dword_CC116,
          (unsigned int)&dword_CC124,
          (unsigned __int16)__DS__,
          (unsigned int)&unk_93A44,
          (unsigned __int16)__DS__,
          (unsigned int)&dword_CC130);*/
  if ( !v10 )
  {
    result = sub_5DE8B((unsigned __int16)word_CC1B4, dword_93A60, word_93A64, (unsigned int)&dword_CC138);
    if ( !(_WORD)result )
      return;
    v12 = sub_63C9C((unsigned __int16)result);
    printf("\nError : %s\n", v12);
    if ( !byte_939D4 )
      sub_5DE58();
    sub_65488(dword_CC130, 1, 1);
    sub_64D2C();
    goto LABEL_63;
  }
  v11 = sub_63C9C(v10);
  printf("\nError : %s\n", v11);
  if ( !byte_939D4 )
    sub_5DE58();
  sub_64D2C();
  byte_939E4 = 0;
  byte_939E5 = 0;
  sub_61610_61B20((Pathstruct*)(char*)"data/snds0-0.dat");
}
// 5D113: using guessed type _DWORD printf(const char *, ...);
// 62405: using guessed type _DWORD stricmp(_DWORD, _DWORD);
// 63EF0: using guessed type _DWORD strcmp(_DWORD, _DWORD);
// 939D4: using guessed type char byte_939D4;
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// 939E6: using guessed type char byte_939E6;
// 939EC: using guessed type char byte_939EC;
// 939ED: using guessed type char byte_939ED;
// 93A54: using guessed type int dword_93A54;
// 93A60: using guessed type int dword_93A60;
// 93A64: using guessed type __int16 word_93A64;
// CC116: using guessed type int dword_CC116;
// CC124: using guessed type int dword_CC124;
// CC128: using guessed type int dword_CC128;
// CC12C: using guessed type int dword_CC12C;
// CC130: using guessed type int dword_CC130;
// CC138: using guessed type int dword_CC138;
// CC13C: using guessed type int dword_CC13C;
// CC140: using guessed type int dword_CC140;
// CC1AC: using guessed type int dword_CC1AC;
// CC1B4: using guessed type __int16 word_CC1B4;

//----- (000447B0) --------------------------------------------------------
void sub_44470_447B0()
{
  //unsigned int v0; // esi
  int result; // eax
  uint32* v2; // ebx
  unsigned int v3; // eax
  int v4; // edx
  int v5; // ebp
  int v6; // esi
  unsigned __int16 v7; // bx
  char v8; // di
  unsigned __int16 v9; // bx
  int v10; // esi
  char v11; // di
  unsigned __int16 i; // bx
  unsigned __int16 j; // bx
  unsigned __int16 v14; // si
  char *v15; // [esp-1Ch] [ebp-54h]
  char *v16; // [esp-1Ch] [ebp-54h]
  char *v17; // [esp-1Ch] [ebp-54h]
  char v18; // [esp-18h] [ebp-50h]
  char v19; // [esp-14h] [ebp-4Ch]
  char v20; // [esp-10h] [ebp-48h]
  __int16 v21; // [esp-Ch] [ebp-44h]
  __int16 v22; // [esp-Ch] [ebp-44h]
  __int16 v23; // [esp-8h] [ebp-40h]
  __int16 v24; // [esp-8h] [ebp-40h]
  __int16 v25; // [esp-4h] [ebp-3Ch]
  __int16 v26; // [esp-4h] [ebp-3Ch]
  int v27; // [esp+4h] [ebp-34h]
  int v28; // [esp+8h] [ebp-30h]
  //int v29; // [esp+Ch] [ebp-2Ch]
  int v30; // [esp+10h] [ebp-28h]
  char v31; // [esp+18h] [ebp-20h]
  char v32; // [esp+1Ch] [ebp-1Ch]
  char v33; // [esp+20h] [ebp-18h]
  char v34; // [esp+24h] [ebp-14h]

  sub_29BA0_29BE0(str_AE400_AE3F0->set.var_u8_8608);
  result = 0x100u / (256 / str_AE400_AE3F0->set.var_u8_8608);
  v27 = 0;
  v2 = dword_9334C;
  v28 = result;
  if ( result > 0 )
  {
    v30 = 0;
    do
    {
      v3 = 0;
      if (256 / str_AE400_AE3F0->set.var_u8_8608)
      {
        v4 = 0;
        do
        {
          ++v2;
          ++v3;
          v5 = v4 + (int)begBlkDat_AE3F0_26C3F0_26C3E0 + v30;
          v4 += str_AE400_AE3F0->set.var_u8_8608;
          *(v2 - 1) = v5;
        }
        while ( v3 < 256 / str_AE400_AE3F0->set.var_u8_8608 );
      }
      result = v27 + 1;
      v30 += str_AE400_AE3F0->set.var_u8_8608 << 8;
      v27 = result;
    }
    while ( result < v28 );
  }
  if ( !byte_90B48 )
  {
    result = sub_3EEA0_3F1E0((char*)"data/dtables.dat", (uint8_t*)strPal.fog_B7934_B7924);
    if ( result <= 0 )
      byte_90B48 = 1;
  }
  if ( byte_90B48 )
  {
    v6 = 256;
    v7 = 0;
    v32 = *(_BYTE *)(begPalDat_AE428_AE418_26C428_26C418 + 766);
    v8 = *(_BYTE *)(begPalDat_AE428_AE418_26C428_26C418 + 765);
    v31 = *(_BYTE *)(begPalDat_AE428_AE418_26C428_26C418 + 767);
    sub_72807_72D17((unsigned __int8 *)begPalDat_AE428_AE418_26C428_26C418, (uint8*)strPal.byte_CB934_CB924);
    do
    {
      v25 = v6;
      v23 = v6;
      v21 = v6;
      v15 = &strPal.fog_B7934_B7924[256 * v7];
      v6 -= 8;
      ++v7;
      sub_40EDC_4121C((_BYTE *)begPalDat_AE428_AE418_26C428_26C418, (uint8*)v15, v8, v32, v31, v21, v23, v25);
    }
    while ( v7 < 0x20u );
    v9 = 32;
    v34 = *(_BYTE *)begPalDat_AE428_AE418_26C428_26C418;
    v10 = 0;
    v11 = *(_BYTE *)(begPalDat_AE428_AE418_26C428_26C418 + 2);
    v33 = *(_BYTE *)(begPalDat_AE428_AE418_26C428_26C418 + 1);
    do
    {
      v26 = v10;
      v24 = v10;
      v22 = v10;
      v16 = &strPal.fog_B7934_B7924[256 * v9];
      v10 += 8;
      ++v9;
      sub_40EDC_4121C((_BYTE *)begPalDat_AE428_AE418_26C428_26C418, (uint8*)v16, v34, v33, v11, v22, v24, v26);
    }
    while ( v9 < 0x40u );
    for ( i = 0; i < 0x100u; ++i )
    {
      v20 = *(_BYTE *)(begPalDat_AE428_AE418_26C428_26C418 + 3 * i + 2);
      v19 = *(_BYTE *)(begPalDat_AE428_AE418_26C428_26C418 + 3 * i + 1);
      v18 = *(_BYTE *)(begPalDat_AE428_AE418_26C428_26C418 + 3 * i);
      v17 = &strPal.byte_BB934_BB924[256 * i];
      sub_40EDC_4121C((_BYTE *)begPalDat_AE428_AE418_26C428_26C418, (uint8*)v17, v18, v19, v20, 85, 85, 85);
    }
    for ( j = 0; j < 0x100u; ++j )
    {
      v14 = j;
      strPal.byte_CBC34_CBC24[v14] = Distance_410CE_4140E((unsigned int)sub_10000 - v14 * v14);
    }
    strPal.byte_CBC34_CBC24[0] = -1;
    return sub_62E60_63370((int)(char*)"data/dtables.dat", (int)strPal.fog_B7934_B7924, &unk_CBF34_CBF24 - (_UNKNOWN *)strPal.fog_B7934_B7924);
  }
}
// 10000: using guessed type void sub_10000();
// 90B48: using guessed type char byte_90B48;
// 9334C: using guessed type int dword_9334C[148];
// AE3E0: using guessed type int begBlkDat_AE3F0_26C3F0_26C3E0;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE418: using guessed type int begPalDat_AE428_AE418_26C428_26C418;

//----- (00044A40) --------------------------------------------------------
void sub_44700_44A40(char *a1, char** a2, int a3)
{
  for (int i = 0; i < a3 / 4; i++)
  {
    a2[i] = a1;
    a1 += strlen(a1) + 1;
  }
  sub_44470_447B0();
}
// 44A58: control flows out of bounds to 44A31

//----- (00044A70) --------------------------------------------------------
void sub_44730_44A70()
{
  __int16 v1; // dx

  if ( !byte_93A84 )
  {
    byte_93A84 = 1;
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
    else
      sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
    if ( (*(_WORD *)dword_AE408_AE3F8() & 0x110) != 0 )
    {
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        sub_61B90_620A0((unsigned __int8 *)begPalDat_AE428_AE418_26C428_26C418);
      else
        sub_61C30_62140((unsigned __int8 *)begPalDat_AE428_AE418_26C428_26C418);
    }
    else
    {
      FadeInOut_61CC0_621D0(0, 0x10u, 0);
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        sub_61B90_620A0((unsigned __int8 *)begWscreen_2ECFF4_2ECFE4);
      else
        sub_61C30_62140((unsigned __int8 *)begWscreen_2ECFF4_2ECFE4);
    }
    sub_5C214_5C724();
    if ( !dword_9AD98 )
    {
      sub_44840_44B80();
      printf("ERROR : MOUSE DRIVER NOT FOUND.\n");
      exit(1);
    }
    v1 = (int)begPointersTab_AE450_AE440_26C450_26C440;
    sub_5C05C_5C56C(begPointersTab_AE450_AE440_26C450_26C440);
    if ( (*(_BYTE *)dword_AE408_AE3F8() & 8) != 0 )
      sub_5BAF0();
    else
      sub_37143(dword_AE408_AE3F8(), v1);
  }
}
// 5D113: using guessed type _DWORD printf(const char *, ...);
// 93A84: using guessed type char byte_93A84;
// 9AD98: using guessed type int dword_9AD98;
// AE3F8: using guessed type int dword_AE408_AE3F8();
// AE418: using guessed type int begPalDat_AE428_AE418_26C428_26C418;
// AE440: using guessed type int begPointersTab_AE450_AE440_26C450_26C440;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00044B80) --------------------------------------------------------
void sub_44840_44B80()
{
  if ( byte_93A84 != 1 )
    JUMPOUT(0x44B76);
  sub_3F370_3F6B0();
  if ( (*(_BYTE *)dword_AE408_AE3F8() & 8) != 0 )
    sub_5B5F4_5BB04();
  else
    sub_36DC2_37182();
  sub_5CD70_5D280();
  sub_433C0_43700();
  return sub_5A4EA_5A9FA();
}
// 44B87: control flows out of bounds to 44B76
// 93A84: using guessed type char byte_93A84;
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00044C20) --------------------------------------------------------
int sub_448E0_44C20()
{
  int v0; // edx
  int v1; // esi
  int v2; // eax
  int v3; // ebx
  int v4; // ecx
  int v5; // ecx
  int v6; // eax
  int v7; // eax
  int v8; // ebx
  int v9; // ecx
  int v10; // eax
  int v11; // ebx
  int v12; // eax
  int v13; // eax
  int v14; // ebx
  int v15; // eax
  int v16; // ebx
  int v17; // edx
  int result; // eax
  int v19; // [esp+0h] [ebp-18h]
  int v20; // [esp+4h] [ebp-14h]

  v0 = 0;
  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333);
  v2 = 0;
  v3 = 0;
  v19 = 0;
  v20 = 0;
  do
  {
    if ( *(int *)((char *)&dword_38CA3 + dword_AE400_AE3F0() + v3) )
    {
      v4 = *(_DWORD *)(v1 + 160);
      ++v20;
      if ( *(_WORD *)(v4 + v0 + 676) )
      {
        *(_BYTE *)(v4 + v2 + 892) = 1;
        ++v19;
      }
    }
    v5 = *(_DWORD *)(v1 + 160);
    if ( *(_WORD *)(v5 + v0 + 676) )
      *(_BYTE *)(v5 + v2 + 892) = 1;
    v3 += 4;
    ++v2;
    v0 += 2;
  }
  while ( v2 < 24 );
  if ( v20 )
  {
    *(_DWORD *)(*(_DWORD *)(v1 + 160) + 363) = 100 * v19 / v20;
    v6 = *(_DWORD *)(v1 + 160);
    if ( *(int *)(v6 + 363) <= 100 )
      goto LABEL_13;
  }
  else
  {
    v6 = *(_DWORD *)(v1 + 160);
  }
  *(_DWORD *)(v6 + 363) = 100;
LABEL_13:
  if ( *(int *)((char *)&dword_38C9F + dword_AE400_AE3F0()) )
  {
    *(_DWORD *)(*(_DWORD *)(v1 + 160) + 359) = 100
                                             * *(_DWORD *)(*(_DWORD *)(v1 + 160) + 359)
                                             / *(int *)((char *)&dword_38C9F + dword_AE400_AE3F0());
    v7 = *(_DWORD *)(v1 + 160);
    if ( *(int *)(v7 + 359) <= 100 )
      goto LABEL_18;
  }
  else
  {
    v7 = *(_DWORD *)(v1 + 160);
  }
  *(_DWORD *)(v7 + 359) = 100;
LABEL_18:
  v8 = *(_DWORD *)(v1 + 160);
  v9 = *(_DWORD *)(v8 + 343);
  if ( v9 )
  {
    *(_DWORD *)(v8 + 367) = 100 * *(_DWORD *)(v8 + 347) / v9;
    v10 = *(_DWORD *)(v1 + 160);
    if ( *(int *)(v10 + 367) > 100 )
      *(_DWORD *)(v10 + 367) = 100;
  }
  else
  {
    *(_DWORD *)(v8 + 367) = 100;
  }
  v11 = *(_DWORD *)(v1 + 160);
  v12 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(v11 + 50);
  if ( v12 )
  {
    *(_DWORD *)(v11 + 371) = 100 * (*(_DWORD *)(v11 + 308) + *(_DWORD *)(v12 + 140)) / *(_DWORD *)(dword_AE408_AE3F8() + 188);
    v13 = *(_DWORD *)(v1 + 160);
    if ( *(int *)(v13 + 371) > 100 )
      *(_DWORD *)(v13 + 371) = 100;
  }
  else
  {
    *(_DWORD *)(v11 + 371) = 0;
  }
  *(_DWORD *)(*(_DWORD *)(v1 + 160) + 375) = 0;
  v14 = 0;
  if ( v20 )
  {
    *(_DWORD *)(*(_DWORD *)(v1 + 160) + 375) += *(_DWORD *)(*(_DWORD *)(v1 + 160) + 363);
    v14 = 1;
  }
  if ( *(int *)((char *)&dword_38C9F + dword_AE400_AE3F0()) )
  {
    ++v14;
    *(_DWORD *)(*(_DWORD *)(v1 + 160) + 375) += *(_DWORD *)(*(_DWORD *)(v1 + 160) + 359);
  }
  v15 = *(_DWORD *)(v1 + 160);
  if ( *(_DWORD *)(v15 + 343) )
  {
    ++v14;
    *(_DWORD *)(v15 + 375) += *(_DWORD *)(v15 + 367);
  }
  *(_DWORD *)(*(_DWORD *)(v1 + 160) + 375) += *(_DWORD *)(*(_DWORD *)(v1 + 160) + 371);
  v16 = v14 + 1;
  if ( !v16 )
    v16 = 1;
  *(int *)(*(_DWORD *)(v1 + 160) + 375) /= v16;
  v17 = *(_DWORD *)(v1 + 160);
  result = dword_AC5D4_AC5C4 - *(_DWORD *)(v17 + 379);
  *(_DWORD *)(v17 + 379) = result;
  return result;
}
// 38C9F: using guessed type int dword_38C9F;
// 38CA3: using guessed type int dword_38CA3;
// AC5C4: using guessed type int dword_AC5D4_AC5C4;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00044F20) --------------------------------------------------------
__int16 sub_44BE0_44F20(int a1, char a2)
{
  __int16 result; // ax

  result = *(_WORD *)(dword_AE400_AE3F0() + 8);
  if ( result == *(_WORD *)(*(_DWORD *)(a1 + 160) + 48) )
  {
    result = dword_AE408_AE3F8();
    *(_BYTE *)(dword_AE408_AE3F8() + 152) = a2;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00044F50) --------------------------------------------------------
signed int sub_44F50(int a1)
{
  int v1; // ebx
  int v2; // esi
  signed int result; // eax

  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333);
  v2 = *(_DWORD *)(v1 + 160);
  result = sub_42340_42680((_WORD *)(a1 + 72), (_WORD *)(v1 + 72));
  if ( result <= *(_DWORD *)(v2 + 396) )
    *(_DWORD *)(*(_DWORD *)(v1 + 160) + 396) = result;
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00044FD0) --------------------------------------------------------
signed int sub_44FD0(int a1)
{
  int v1; // ebx
  int v2; // esi
  signed int result; // eax

  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333);
  v2 = *(_DWORD *)(v1 + 160);
  result = sub_42340_42680((_WORD *)(a1 + 72), (_WORD *)(v1 + 72));
  if ( result <= *(_DWORD *)(v2 + 400) )
    *(_DWORD *)(*(_DWORD *)(v1 + 160) + 400) = result;
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00045070) --------------------------------------------------------
int sub_45070(int a1, int a2)
{
  int v2; // ebx
  int v3; // edx
  __int16 v4; // ax
  int v5; // ecx
  char v6; // dh
  int v7; // eax
  unsigned __int16 v8; // dx
  int v9; // esi
  int v10; // eax
  int v11; // eax
  int v12; // ecx
  int v13; // edi
  char v14; // ah
  int v15; // edx
  int v16; // eax
  int v17; // eax
  int v18; // ebp
  int v19; // ecx
  int v20; // eax
  __int16 v21; // dx
  int v22; // eax
  int v23; // ecx
  int v24; // eax
  int v25; // ecx
  int v26; // eax
  int v27; // edx
  unsigned __int16 v28; // di
  unsigned int j; // eax
  int k; // eax
  int result; // eax
  int v32; // [esp+0h] [ebp-24h] BYREF
  __int16 v33; // [esp+4h] [ebp-20h]
  int v34; // [esp+8h] [ebp-1Ch]
  int i; // [esp+Ch] [ebp-18h]
  int v36; // [esp+10h] [ebp-14h]

  v2 = a2;
  v34 = 0;
  sub_37220_375E0();
  v3 = (a1 - (dword_AE400_AE3F0() + 13323)) / 2049;
  v32 = *(_DWORD *)(dword_AE400_AE3F0() + 6 * v3 + 9177);
  v33 = *(_WORD *)(dword_AE400_AE3F0() + 6 * v3 + 9181);
  v4 = sub_11F50((axis_3d*)(__int16 *)&v32);
  ++HIBYTE(v4);
  v5 = dword_AE400_AE3F0();
  v33 = v4;
  if ( a2 == dword_AE400_AE3F0() + 29795 )
  {
    v2 = sub_373F0_377B0((int)&v32, 3, *(_BYTE *)(a1 + 9) == 1);
    v34 = 1;
  }
  else
  {
    v6 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(a2 + 70) = *(_BYTE *)(a1 + 9) == 1;
    v7 = *(_DWORD *)(a2 + 160);
    *(_BYTE *)(a2 + 16) = v6 & 0xDF;
    if ( *(_WORD *)(v7 + 50) )
    {
      v8 = *(_WORD *)(v7 + 50);
      v32 = *(_DWORD *)(v5 + 164 * v8 + 29867);
      v33 = *(_WORD *)(v5 + 164 * v8 + 29871);
    }
    sub_41C70_41FB0((Type_AE400_29795*)a2, (axis_3d*)&v32);
  }
  *(_DWORD *)(v2 + 160) = a1 + 1103;
  *(_WORD *)(*(_DWORD *)(v2 + 160) + 48) = (a1 - (dword_AE400_AE3F0() + 13323)) / 2049;
  *(_WORD *)(*(_DWORD *)(v2 + 160) + 331) = 100;
  *(_DWORD *)(*(_DWORD *)(v2 + 160) + 351) = 2000;
  *(_WORD *)(*(_DWORD *)(v2 + 160) + 12) = 0;
  *(_WORD *)(*(_DWORD *)(v2 + 160) + 24) = 0;
  *(_WORD *)(*(_DWORD *)(v2 + 160) + 26) = 0;
  *(_WORD *)(*(_DWORD *)(v2 + 160) + 22) = 0;
  v9 = 0;
  *(_WORD *)(*(_DWORD *)(v2 + 160) + 16) = 0;
  do
  {
    v10 = v9 + *(_DWORD *)(v2 + 160);
    if ( *(int *)(v10 + 532) < 0 )
    {
      *(_DWORD *)(v10 + 532) = 0;
    }
    else
    {
      v11 = sub_373F0_377B0(v2 + 72, 12, *(_DWORD *)(v10 + 532));
      v12 = v11;
      if ( v11 )
      {
        v13 = dword_AE400_AE3F0() + 29795;
        v36 = 164;
        *(_DWORD *)(*(_DWORD *)(v2 + 160) + v9 + 532) = (v11 - (dword_AE400_AE3F0() + 29795)) / 164;
        *(_WORD *)(v11 + 42) = (v2 - v13) / 164;
        *(_BYTE *)(v11 + 16) |= 1u;
        if ( *(_BYTE *)(*(char *)(v11 + 65) + *(_DWORD *)(v2 + 160) + 916) )
        {
          *(_WORD *)(v11 + 86) = 280;
          v14 = *(_BYTE *)(v11 + 18);
          *(_DWORD *)(v12 + 132) = 0;
          *(_BYTE *)(v12 + 18) = v14 | 4;
        }
      }
      else
      {
        *(_DWORD *)(v9 + *(_DWORD *)(v2 + 160) + 532) = 0;
      }
    }
    v9 += 4;
  }
  while ( v9 != 96 );
  if ( v34 )
  {
    *(_DWORD *)(*(_DWORD *)(v2 + 160) + 379) = dword_AC5D4_AC5C4;
    switch ( *(_WORD *)(*(_DWORD *)(v2 + 160) + 48) )
    {
      case 0:
        sub_36FA0_37360(v2, 44);
        break;
      case 1:
        sub_36FA0_37360(v2, 273);
        break;
      case 2:
        sub_36FA0_37360(v2, 274);
        break;
      case 3:
        sub_36FA0_37360(v2, 275);
        break;
      case 4:
        sub_36FA0_37360(v2, 276);
        break;
      case 5:
        sub_36FA0_37360(v2, 277);
        break;
      case 6:
        sub_36FA0_37360(v2, 278);
        break;
      case 7:
        sub_36FA0_37360(v2, 279);
        break;
      default:
        break;
    }
    sub_45C10_45F50((Type_AE400_29795*)v2);
    if ( *(_BYTE *)(a1 + 9) == 1 )
    {
      v15 = dword_AE400_AE3F0();
      *(_WORD *)(*(_DWORD *)(v2 + 160) + 522) = *(_WORD *)&byte_385D7[216 * *(__int16 *)(*(_DWORD *)(v2 + 160) + 48)
                                                                    + dword_AE400_AE3F0()];
      *(_WORD *)(*(_DWORD *)(v2 + 160) + 524) = *(__int16 *)((char *)&word_385DF[108
                                                                               * *(__int16 *)(*(_DWORD *)(v2 + 160) + 48)]
                                                           + v15);
      *(_WORD *)(*(_DWORD *)(v2 + 160) + 526) = *(__int16 *)((char *)&word_385DB[108
                                                                               * *(__int16 *)(*(_DWORD *)(v2 + 160) + 48)]
                                                           + v15);
      v16 = *(_DWORD *)(v2 + 160);
      if ( *(_WORD *)(v16 + 708) )
      {
        if ( byte_38C97[v15 + *(__int16 *)(v16 + 48)] )
        {
          v17 = sub_373F0_377B0(v2 + 72, 3, 2);
          v18 = v17;
          if ( v17 )
          {
            v19 = dword_AE400_AE3F0() + 29795;
            *(_WORD *)(v17 + 24) = *(_WORD *)(v2 + 24);
            *(_WORD *)(*(_DWORD *)(v2 + 160) + 50) = (v17 - v19) / 164;
            sub_55370_558A0((v2 - v19) / 164, -1, 30);
            for ( i = 0; ; ++i )
            {
              v22 = dword_AE400_AE3F0();
              v23 = (unsigned __int8)byte_38C97[dword_AE400_AE3F0() + *(__int16 *)(*(_DWORD *)(v2 + 160) + 48)];
              if ( v23 <= i )
                break;
              *(_DWORD *)(dword_AE400_AE3F0() + 29867) = *(_DWORD *)(v18 + 150);
              *(_WORD *)(v22 + 29871) = *(_WORD *)(v18 + 154);
              v20 = v22 + 29795;
              v21 = *(_WORD *)(v18 + 24);
              *(_BYTE *)(v20 + 65) = 0;
              *(_WORD *)(v20 + 26) = 0;
              *(_WORD *)(v20 + 24) = v21;
              *(_BYTE *)(v20 + 71) = i;
              sub_279D0(v20);
            }
            *(_WORD *)(v18 + 26) = (unsigned __int8)v23 - 1;
            sub_37510((_WORD *)v18, (unsigned __int8)v23 - 1);
            sub_47FA0(v18);
            v24 = *(_DWORD *)(v18 + 136);
            *(_DWORD *)(v18 + 140) = v24;
            if ( v24 < 0 )
              *(_DWORD *)(v18 + 140) = 0;
            if ( *(_DWORD *)(v18 + 140) > (int)&loc_4E1FC + 4 )
              *(_DWORD *)(v18 + 140) = (uint32)((char *)&loc_4E1FC + 4);
          }
        }
      }
    }
    *(_DWORD *)(*(_DWORD *)(v2 + 160) + 359) = 0;
  }
  v25 = dword_AE400_AE3F0();
  *(_WORD *)(a1 + 10) = (v2 - (dword_AE400_AE3F0() + 29795)) / 164;
  if ( *(_WORD *)(v25 + 8) == *(_WORD *)(*(_DWORD *)(v2 + 160) + 48) )
    *(_BYTE *)(v2 + 16) |= 1u;
  if ( *(_UNKNOWN **)(a1 + 24) == &unk_AE89E )
  {
    *(_DWORD *)(v2 + 136) = (uint32)&unk_F4240;
    *(_DWORD *)(v2 + 8) = (uint32)&unk_F4240;
  }
  else
  {
    *(_DWORD *)(v2 + 136) = 1000;
    *(_DWORD *)(v2 + 8) = 10000;
  }
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(v2 + 8);
  v26 = *(_DWORD *)(v2 + 136);
  v27 = *(_DWORD *)(v2 + 160);
  *(_DWORD *)(v2 + 140) = v26;
  *(_DWORD *)(v27 + 322) = v26;
  sub_45C10_45F50((Type_AE400_29795*)v2);
  v28 = *(_WORD *)(*(_DWORD *)(v2 + 160) + 50);
  if ( v28 )
    sub_48110(164 * v28 + dword_AE400_AE3F0() + 29795);
  for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36462); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
  {
    if ( *(_WORD *)(j + 24) != *(_WORD *)(v2 + 24) && *(_BYTE *)(j + 65) <= 1u )
      *(_WORD *)(8 * *(__int16 *)(*(_DWORD *)(v2 + 160) + 48) + *(_DWORD *)(j + 160) + 460) = -24609;
  }
  *(_WORD *)(*(_DWORD *)(v2 + 160) + 314) = 0;
  *(_WORD *)(*(_DWORD *)(v2 + 160) + 316) = 0;
  if ( *(_BYTE *)(v2 + 65) == 1 )
  {
    memset((void*)(*(_DWORD *)(v2 + 160) + 415), 0, 1);
    for ( k = 0; k != 64; *(_WORD *)(*(_DWORD *)(v2 + 160) + k + 452) = 24607 )
      k += 8;
    *(_WORD *)(*(_DWORD *)(v2 + 160) + 756) = 4 * *(_WORD *)(*(_DWORD *)(v2 + 160) + 48);
  }
  *(_DWORD *)(*(_DWORD *)(v2 + 160) + 396) = 2048;
  *(_DWORD *)(*(_DWORD *)(v2 + 160) + 400) = 2048;
  *(_WORD *)(*(_DWORD *)(v2 + 160) + 46) = 0;
  memset((void*)(*(_DWORD *)(v2 + 160) + 333), 16, 8);
  result = dword_AE400_AE3F0();
  *(_DWORD *)(dword_AE400_AE3F0() + 4593) = -1;
  if ( *(_WORD *)(*(_DWORD *)(v2 + 160) + 48) == *(_WORD *)(result + 8) )
  {
    result = dword_AE408_AE3F8();
    *(_BYTE *)(dword_AE408_AE3F8() + 150) = 0;
  }
  return result;
}
// 385DB: using guessed type __int16 word_385DB[];
// 385DF: using guessed type __int16 word_385DF[];
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AC5C4: using guessed type int dword_AC5D4_AC5C4;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00045750) --------------------------------------------------------
int sub_45410_45750(int a1)
{
  unsigned __int16 v1; // si
  unsigned __int16 v2; // ax
  unsigned __int16 v3; // ax
  int v4; // ebx
  __int16 v5; // ax
  unsigned __int16 v7; // [esp+0h] [ebp-28h]
  __int16 v8; // [esp+Ch] [ebp-1Ch]
  __int16 v9; // [esp+10h] [ebp-18h]
  int v10; // [esp+14h] [ebp-14h]

  v10 = 1;
  if ( sub_11810((__int16*)&word_AE454_AE444) == 256 )
  {
    v1 = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(uint16*)&word_AE454_AE444);
    v8 = sub_42180_424C0((_WORD *)(a1 + 72), (uint16*)&word_AE454_AE444);
    v7 = sub_42340_42680((_WORD *)(a1 + 72), (uint16*)&word_AE454_AE444);
    *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
    word_AE454_AE444.z = *(_WORD *)(a1 + 76);
    v9 = ((((int)v1 >> 9) + 1) << 9) & 0x7FF;
    v2 = sub_42210_42550(v1, (int)v1 >> 9 << 9);
    sub_41EC0_42200(
        (axis_3d*)(uint16*)&word_AE454_AE444,
      (int)v1 >> 9 << 9,
      v8,
      (v7 * (512 - v2) - (__CFSHL__((v7 * (512 - v2)) >> 31, 9) + ((v7 * (512 - v2)) >> 31 << 9))) >> 9);
    if ( sub_11810((__int16*)&word_AE454_AE444) == 256 )
    {
      *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
      word_AE454_AE444.z = *(_WORD *)(a1 + 76);
      v3 = sub_42210_42550(v1, v9);
      sub_41EC0_42200(
          (axis_3d*)(uint16*)&word_AE454_AE444,
        v9,
        v8,
        (v7 * (512 - v3) - (__CFSHL__((v7 * (512 - v3)) >> 31, 9) + ((v7 * (512 - v3)) >> 31 << 9))) >> 9);
      if ( sub_11810((__int16*)&word_AE454_AE444) == 256 )
        v10 = 0;
    }
  }
  v4 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 12);
  v5 = sub_11F50((axis_3d*)(__int16*)&word_AE454_AE444);
  if ( word_AE454_AE444.z < v5 + v4 )
    word_AE454_AE444.z = *(_WORD *)(*(_DWORD *)(a1 + 156) + 12) + v5;
  return v10;
}
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//SYNCHRONIZED WITH REMC1
void sub_455D0_45910(Type_AE400_29795* a1x)//2165D0_
{
  int v1; // eax
  int v2; // eax
  __int16 v3; // si
  int v4; // ecx
  int v5; // edx
  __int16 v6; // ax
  //int v7; // eax
  __int16 v8; // dx
  __int16 v9; // di
  unsigned __int16 v10; // ax
  //int v11; // eax
  __int16 v12; // dx
  //int v13; // ecx
  __int16 v14; // di
  int v15; // eax
  __int64 v16; // rax
  //_WORD *v17; // eax
  __int16 v18; // si
  __int16 v19; // dx
  unsigned int v20; // edi
  signed int v21; // ebp
  int v22; // ecx
  int v23; // esi
  __int16 v24; // di
  __int16 v25; // ax
  __int16 v26; // ax
  //int v27; // eax
  __int16 v28; // di
  unsigned int v29; // eax

  word_AE454_AE444 = a1x->var_u32_29867_72;
  a1x->var_u32_29955_160->u16_327 += a1x->var_u32_29955_160->word_0x4_4;
  a1x->var_u32_29955_160->u16_329 += a1x->var_u32_29955_160->word_0x6_6;
  v1 = a1x->var_u32_29955_160->u16_327;
  a1x->var_u16_29825_30 = (a1x->var_u16_29825_30 + ((v1 - (__CFSHL__(v1 >> 31, 3) + 8 * (v1 >> 31))) >> 3)) & 0x7FF;
  v2 = a1x->var_u32_29955_160->v_12 - a1x->actSpeed_29921_126;
  if ( v2 )
    v2 /= (int)abs32(v2);
  a1x->actSpeed_29921_126 += v2 * dword_93A88;
  v3 = sub_11F50(&word_AE454_AE444);
  v4 = a1x->var_u32_29951_156->v_10;
  v5 = ((word_AE454_AE444.z - v3 - v4) << 10) / v4;
  if ( v5 < -256 )
    v5 = -256;
  if ( v5 > 256 )
    v5 = 256;
  v6 = a1x->var_u32_29955_160->u16_329;
  HIBYTE(v6) &= 7u;
  a1x->var_u16_29827_32 = v6;
  if ( v6 > 1024 )
    v6 -= 2048;
  if (a1x->actSpeed_29921_126 >= 0 || v6 <= 0 )
  {
    if (a1x->actSpeed_29921_126 >= 0 || v6 >= 0 )
    {
      if (a1x->actSpeed_29921_126 <= 0 || v6 >= 0 )
      {
        if (a1x->actSpeed_29921_126 <= 0 || v6 <= 0 )
        {
          if ( !a1x->actSpeed_29921_126 && word_AE454_AE444.z > a1x->var_u32_29951_156->v_10 + v3 )
            word_AE454_AE444.z -= 8;
        }
        else
        {
          a1x->var_u32_29955_160->v_28 = a1x->var_u32_29955_160->u16_329;
        }
      }
      else
      {
          a1x->var_u32_29955_160->v_28 = (v6 * -v5 - (__CFSHL__((v6 * -v5) >> 31, 8) + ((v6 * -v5) >> 31 << 8))) >> 8;
      }
    }
    else
    {
        a1x->var_u32_29955_160->v_28 = a1x->var_u32_29955_160->u16_329;
    }
  }
  else
  {
      a1x->var_u32_29955_160->v_28 = (v6 * -v5 - (__CFSHL__((v6 * -v5) >> 31, 8) + ((v6 * -v5) >> 31 << 8))) >> 8;
  }
  v8 = a1x->var_u32_29955_160->v_28;
  HIBYTE(v8) &= 7u;
  a1x->var_u32_29955_160->v_28 = v8;
  sub_41EC0_42200(&word_AE454_AE444, a1x->var_u16_29825_30, a1x->var_u32_29955_160->v_28, a1x->actSpeed_29921_126);
  v9 = a1x->var_u32_29955_160->v_16;
  if ( v9 )
  {
    v10 = a1x->var_u16_29825_30;
    HIBYTE(v10) += 2;
    sub_41EC0_42200(&word_AE454_AE444, v10, 0, v9);
  }
  v12 = a1x->var_u32_29955_160->v_22;
  if ( v12 )
  {
    if ( v12 > 128 )
        a1x->var_u32_29955_160->v_22 = 128;
    sub_41EC0_42200(&word_AE454_AE444, a1x->var_u32_29955_160->v_24, 0, a1x->var_u32_29955_160->v_22);
    v14 = a1x->var_u32_29955_160->v_22;
    if ( v14 )
      v15 = v14 / (int)abs16(v14);
    else
      LOWORD(v15) = 0;
    a1x->var_u32_29955_160->v_22 += v15 * dword_93A94;
    v16 = a1x->var_u32_29955_160->v_22;
    if ( (int)((HIDWORD(v16) ^ v16) - HIDWORD(v16)) < 4 )
        a1x->var_u32_29955_160->v_22 = 0;
  }
  v18 = a1x->var_u32_29955_160->u16_410 + word_AE454_AE444.y;
  v19 = a1x->var_u32_29955_160->u16_412;
  word_AE454_AE444.x += a1x->var_u32_29955_160->u16_408;
  word_AE454_AE444.y = v18;
  word_AE454_AE444.z += v19;
  a1x->var_u32_29955_160->u16_408 = 0;
  a1x->var_u32_29955_160->u16_410 = 0;
  a1x->var_u32_29955_160->u16_412 = 0;
  v20 = dword_AE400_AE3F0() + 29795 + 164 * a1x->var_u32_29955_160->u16_314;
  if ( v20 > dword_AE400_AE3F0() + 29795 )
  {
    v21 = sub_42340_42680(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v20 + 72));
    if ( v21 >= 5120 || *(int *)(v20 + 12) < 0 || a1x->var_u32_29955_160->u16_316 == 1000 )
    {
      a1x->var_u32_29955_160->u16_314 = 0;
      a1x->var_u32_29955_160->u16_316 = 0;
    }
    v22 = 3 * a1x->actSpeed_29923_128 / 2;
    v23 = (v21 - a1x->var_u32_29955_160->u32_318) / (1024 / (__int16)v22);
    if ( (__int16)v23 < -(__int16)v22 )
      v23 = 3 * a1x->actSpeed_29923_128 / -2;
    if ( (__int16)v23 > (__int16)v22 )
      LOWORD(v23) = 3 * a1x->actSpeed_29923_128 / 2;
    v24 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v20 + 72));
    v25 = a1x->var_u16_29825_30 + sub_422A0_425E0(a1x->var_u16_29825_30, v24, 5, 0x82u);
    HIBYTE(v25) &= 7u;
    a1x->var_u16_29825_30 = v25;
    sub_41EC0_42200(&word_AE454_AE444, v24, a1x->var_u16_29827_32, v23);
    a1x->var_u32_29955_160->u16_316++;
  }
  v26 = sub_45410_45750(a1x);
  if ( v26 )
    sub_41C70_41FB0(a1x, &word_AE454_AE444);
  if ( sub_11810(&a1x->var_u32_29867_72) == 1 )
  {
    sub_55370_558A0(0, *(_WORD *)(dword_AE400_AE3F0() + 8), 1);
    sub_55890_55DC0(0, *(_WORD *)(dword_AE400_AE3F0() + 8), 2);
  }
  else
  {
    sub_55370_558A0(0, *(_WORD *)(dword_AE400_AE3F0() + 8), 2);
    sub_55890_55DC0(0, *(_WORD *)(dword_AE400_AE3F0() + 8), 1);
  }
  if ( a1x->var_u32_29955_160->u32_396 >= 1536 )
  {
    sub_55890_55DC0(0, *(_WORD *)(dword_AE400_AE3F0() + 8), 5);
  }
  else
  {
    sub_55370_558A0(0, *(_WORD *)(dword_AE400_AE3F0() + 8), 5);
    a1x->var_u32_29955_160->u32_396 = 2048;
  }
  if ( a1x->var_u32_29955_160->u32_400 >= 1536 )
  {
    sub_55890_55DC0(0, *(_WORD *)(dword_AE400_AE3F0() + 8), 31);
  }
  else
  {
    sub_55370_558A0(0, *(_WORD *)(dword_AE400_AE3F0() + 8), 31);
    a1x->var_u32_29955_160->u32_400 = 2048;
  }
  if ( a1x->var_u32_29955_160->var_48 == *(_WORD *)(dword_AE400_AE3F0() + 8) )
  {
    v28 = a1x->var_u32_29955_160->v_46;
    if ( v28 <= 0 )
    {
      sub_20D00(1);
    }
    else
    {
        a1x->var_u32_29955_160->v_46 = v28 - 1;
      sub_20D00(2);
    }
  }
  if ( (a1x->var_u8_29858_63 & 0x3F) == 0 )
  {
    v29 = 9377 * a1x->rand_29799_4 + 9439;
    a1x->rand_29799_4 = v29;
    if ( !(v29 % 0xB) )
      sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 46);
  }
}

//SYNCHRONIZED WITH REMC1
void sub_45C10_45F50(Type_AE400_29795* a1x)
{
  //int result; // eax
  //int v2; // ebx
  int v3; // ecx

  memset(a1x->var_u32_29955_160->var_676.var_u16, 0, 48);
  //for ( result = 0; result != 96; result += 4 )
  for (int i = 0; i < 24; i++)
  {
    //v2 = *(_DWORD *)(a1 + 160);
    v3 = a1x->var_u32_29955_160->var_14958_1635_532[i];// *(_DWORD*)(v2 + result + 532);
    if ( v3 )
      //*(_WORD *)(v2 + 2 * *(char *)(164 * v3 + dword_AE400_AE3F0() + 29860) + 676) = *(_WORD *)(v2 + result + 532);
        a1x->var_u32_29955_160->var_676.var_u16[str_AE400_AE3F0->str_29795[v3].var_u8_29860_65] = a1x->var_u32_29955_160->var_14958_1635_532[i];
  }
}

//----- (00045FD0) --------------------------------------------------------
void sub_45C90_45FD0(Type_AE400_29795* a1x)
{
  //int v1; // eax
  //int v2; // eax
  //int v3; // eax
  unsigned __int8 v4; // dh
  //int v5; // edx
  //int v6; // eax
  int v7; // ebp
  int v8; // edi
  int v9; // edx
  //int v10; // eax
  int v11; // ecx
  //int v12; // eax
  __int16 v13; // cx
  char v14; // [esp+0h] [ebp-14h]

  v14 = 0;
  if ( (str_AE408_AE3F8->var_u8_2 & 1) == 0 )
    sub_45C10_45F50(a1x);
  a1x->actSpeed_29923_128 = dword_93A90;
  if ( (str_AE408_AE3F8->var_u8_2 & 1) == 0 )
  {
    //v1 = *(_DWORD *)(a1 + 160);
    if (a1x->var_u32_29955_160->var_50)
    {
      if ( sub_11950(a1x, &str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_50]))
        v14 = 1;
    }
  }
  sub_46840_46B80(a1x);
  if ( (str_AE408_AE3F8->var_u8_2 & 1) == 0 && v14 )
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
      //v2 = 164 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 50) + dword_AE400_AE3F0() + 29795;
      if (str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_50].str_29885_90.var_u16_29889_94)
          str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_50].str_29885_90.var_u16_29885_90 += a1x->str_29885_90.var_u16_29885_90;
      else
          str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_50].str_29885_90.var_u16_29885_90 = a1x->str_29885_90.var_u16_29885_90;
      str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_50].str_29885_90.var_u16_29889_94 = a1x->str_29885_90.var_u16_29889_94;
    }
    a1x->var_u32_29955_160->u16_331 = 2;
  }
  if ( (str_AE408_AE3F8->var_u8_2 & 1) == 0 )
  {
    if (a1x->var_u32_29955_160->u16_331)
    {
      memset(&a1x->str_29885_90, 0, 36);
      a1x->var_u32_29955_160->u16_331--;
    }
    else
    {
      sub_46540_46880(a1x);
    }
    //v3 = *(_DWORD *)(a1 + 160);
    v4 = a1x->var_u32_29955_160->u8_326;
    if ( v4 < 0xC8u )
        a1x->var_u32_29955_160->u8_326 = v4 + 1;
  }
  sub_455D0_45910(a1x);
  if (a1x->actLife_29807_12 >= 0 )
  {
    if ( (str_AE408_AE3F8->var_u8_2 & 1) == 0 )
    {
      //v6 = *(_DWORD *)(a1 + 160);
        a1x->var_u32_29935_140 += a1x->var_u16_29927_132;
      v7 = a1x->var_u32_29955_160->u32_383;
      if ( v7 )
          a1x->var_u32_29955_160->u32_383 = v7 - 1;
      else
          a1x->actLife_29807_12 += *(__int16 *)(v6 + 341);
      if (a1x->var_u32_29935_140 < 0 )
          a1x->var_u32_29935_140 = 0;
      v8 = a1x->var_u32_29931_136;
      if (a1x->var_u32_29935_140 > v8 )
          a1x->var_u32_29935_140 = v8;
      if (a1x->actLife_29807_12 < -1 )
          a1x->actLife_29807_12 = -1;
      v9 = a1x->maxLife_29803_8;
      if (a1x->actLife_29807_12 > v9 )
          a1x->actLife_29807_12 = v9;
      //v10 = *(_DWORD *)(a1 + 160);
      v11 = a1x->var_u32_29955_160->u32_351;
      if ( v11 )
          a1x->var_u32_29955_160->u32_351 = v11 - 1;
      //v12 = *(_DWORD *)(a1 + 160);
      v13 = a1x->var_u32_29955_160->u16_528;
      if ( v13 )
          a1x->var_u32_29955_160->u16_528 = v13 - 1;
      if ( v14 || (a1x->var_29811_16.byte[1] & 0x10) != 0 )
      {
          a1x->var_u16_29927_132 = a1x->var_u32_29931_136 / 200;
        a1x->var_u32_29955_160->u16_341 = a1x->maxLife_29803_8 / 250;
        if (a1x->var_u16_29927_132 < 1000 )
            a1x->var_u16_29927_132 = 1000;
        a1x->var_29811_16.byte[1] &= ~0x10u;
      }
      else
      {
          a1x->var_u16_29927_132 = a1x->var_u32_29931_136 / 2000;
        a1x->var_u32_29955_160->u16_341 = a1x->maxLife_29803_8 / 2000;
        if (a1x->var_u16_29927_132 < 100 )
            a1x->var_u16_29927_132 = 100;
      }
    }
  }
  else
  {
    //v5 = dword_AE400_AE3F0();
    a1x->var_u8_29865_70 = 2;
    a1x->var_u16_29841_46 = 0;
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 16);
  }
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 93A90: using guessed type int dword_93A90;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00046300) --------------------------------------------------------
int sub_46300(int a1)
{
  __int16 v1; // cx
  int v2; // edi
  __int16 v3; // ax
  __int16 v4; // si
  int v5; // eax
  int result; // eax
  unsigned __int16 v7; // di
  int v8; // eax
  int v9; // edx
  int v10; // eax
  char *v11; // esi
  char *v12; // edi
  char v13; // al
  char v14; // al
  int v15; // eax
  unsigned int v16; // ebp
  __int16 v17; // dx
  int v18; // esi
  unsigned int v19; // eax
  int v20; // esi
  int v21; // edx
  __int64 v22; // rax
  int v23; // ebp
  unsigned int j; // ebp
  int v25; // ecx
  int i; // [esp+0h] [ebp-14h]

  sub_455D0_45910((Type_AE400_29795*)a1);
  if ( *(_BYTE *)(dword_AE408_AE3F8() + 99) )
    sub_44BE0_44F20((Type_AE400_29795*)a1, 7);
  v1 = *(_WORD *)(a1 + 46) - 2;
  *(_WORD *)(a1 + 76) += *(_WORD *)(a1 + 46);
  *(_WORD *)(a1 + 46) = v1;
  if ( v1 < -256 )
    *(_WORD *)(a1 + 46) = -256;
  if ( *(__int16 *)(a1 + 46) > 0 )
    *(_WORD *)(a1 + 46) = 0;
  v2 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 12);
  v3 = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  v4 = v3;
  if ( *(__int16 *)(a1 + 76) < v3 + v2 )
    *(_WORD *)(a1 + 76) = *(_WORD *)(*(_DWORD *)(a1 + 156) + 12) + v3;
  v5 = sub_373F0_377B0((int)&word_AE454_AE444, 10, 1);
  if ( v5 )
  {
    *(_BYTE *)(v5 + 16) |= 0x80u;
    *(_WORD *)(v5 + 24) = *(_WORD *)(a1 + 24);
  }
  result = v4 + *(__int16 *)(*(_DWORD *)(a1 + 156) + 12);
  if ( *(__int16 *)(a1 + 76) == result )
  {
    sub_37220_375E0();
    v7 = *(_WORD *)(a1 + 38);
    if ( v7 )
    {
      v8 = dword_AE400_AE3F0() + 164 * v7;
      if ( *(_BYTE *)(v8 + 29859) == 3 && *(_BYTE *)(v8 + 29860) <= 1u )
      {
        v9 = *(_DWORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 38) + 29955);
        v10 = *(__int16 *)(*(_DWORD *)(a1 + 160) + 48);
        ++*(_WORD *)(v9 + 2 * v10 + 30);
      }
    }
    v11 = (char *)dword_AE238_AE228[54];
    v12 = (char *)(dword_AE400_AE3F0()
                 + 13323
                 + 2049 * str_AE400_AE3F0->var_u16_8
                 + 28
                 + 68 * *(__int16 *)(*(_DWORD *)(a1 + 160) + 48));
    do
    {
      v13 = *v11;
      *v12 = *v11;
      if ( !v13 )
        break;
      v14 = v11[1];
      v11 += 2;
      v12[1] = v14;
      v12 += 2;
    }
    while ( v14 );
    *(_WORD *)(2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 68 * *(__int16 *)(*(_DWORD *)(a1 + 160) + 48) + 13415) = 100;
    memset((void*)(a1 + 90), 0, 36);
    for ( i = 0; i != 96; i += 4 )
    {
      v15 = i + *(_DWORD *)(a1 + 160);
      v16 = dword_AE400_AE3F0() + 29795 + 164 * *(_DWORD *)(v15 + 532);
      if ( v16 <= dword_AE400_AE3F0() + 29795 )
      {
        *(_DWORD *)(v15 + 532) = -1;
      }
      else
      {
        *(_DWORD *)(v15 + 532) = *(char *)(v16 + 65);
        if ( (*(_BYTE *)(v16 + 18) & 4) != 0 )
          *(_BYTE *)(*(_DWORD *)(a1 + 160) + *(char *)(v16 + 65) + 916) = 1;
        else
          *(_BYTE *)(*(char *)(v16 + 65) + *(_DWORD *)(a1 + 160) + 916) = 0;
        *(_BYTE *)(v16 + 16) &= ~1u;
        ++*(_BYTE *)(v16 + 70);
        *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
        word_AE454_AE444.z = *(_WORD *)(a1 + 76);
        v17 = 9377 * *(_WORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        v18 = *(_DWORD *)(a1 + 4);
        word_AE454_AE444.x += (v17 & 0x1FF) - 256;
        *(_DWORD *)(a1 + 4) = 9377 * v18 + 9439;
        word_AE454_AE444.y += ((9377 * v18 + 9439) & 0x1FF) - 256;
        sub_41C70_41FB0((Type_AE400_29795*)v16, &word_AE454_AE444);
        v19 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = v19;
        *(_DWORD *)(v16 + 12) = v19 % 0x5A + 200;
      }
    }
    v20 = sub_373F0_377B0(a1 + 72, 10, 40);
    if ( v20 )
    {
      v21 = *(_DWORD *)(a1 + 160);
      *(_BYTE *)(a1 + 70) = 3;
      v22 = 255 - *(__int16 *)(v21 + 526);
      v23 = dword_AE408_AE3F8();
      *(_WORD *)(a1 + 26) = 32 * ((int)(v22 - (__CFSHL__(HIDWORD(v22), 3) + 8 * HIDWORD(v22))) >> 3) + 32;
      for ( j = *(_DWORD *)(v23 + 36466); ; j = *(_DWORD *)j )
      {
        v25 = dword_AE400_AE3F0() + 29795;
        if ( j <= dword_AE400_AE3F0() + 29795 )
          break;
        if ( *(_BYTE *)(j + 65) == 39 && *(unsigned __int16 *)(j + 144) == (a1 - v25) / 164 )
          *(_WORD *)(j + 144) = (v20 - v25) / 164;
      }
    }
    result = dword_AE400_AE3F0();
    *(_BYTE *)(a1 + 16) |= 0x20u;
    --*(_DWORD *)(result + 4593);
  }
  return result;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AE300: using guessed type int dword_AE300;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE446: using guessed type __int16 word_AE454_AE444.y;

//----- (000466F0) --------------------------------------------------------
int sub_466F0(int a1)
{
  _WORD *v1; // edi
  int result; // eax

  v1 = (_WORD *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 38) + 72);
  *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)v1);
  *(_WORD *)(a1 + 36) = sub_42180_424C0((_WORD *)(a1 + 72), v1);
  *(_WORD *)(a1 + 30) += sub_422A0_425E0(*(_WORD *)(a1 + 30), *(_WORD *)(a1 + 34), 5, 0x16u);
  *(_BYTE *)(a1 + 31) &= 7u;
  *(_WORD *)(a1 + 32) += sub_422A0_425E0(*(_WORD *)(a1 + 32), *(_WORD *)(a1 + 36), 5, 0x16u);
  *(_BYTE *)(a1 + 33) &= 7u;
  *(_WORD *)(a1 + 32) = 0;
  *(_WORD *)(*(_DWORD *)(a1 + 160) + 329) = *(_WORD *)(a1 + 32);
  result = *(_DWORD *)(a1 + 160);
  *(_WORD *)(result + 327) = 0;
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000467C0) --------------------------------------------------------
int sub_467C0(int a1)
{
  int v1; // ecx
  int v2; // edx
  int result; // eax
  __int16 v4; // cx

  *(_WORD *)(*(_DWORD *)(a1 + 160) + 22) = 0;
  v1 = *(_DWORD *)(a1 + 160);
  v2 = 2049 * *(__int16 *)(v1 + 48);
  result = dword_AE400_AE3F0();
  if ( *(_BYTE *)(dword_AE400_AE3F0() + v2 + 13332) == 1 )
  {
    if ( (*(_BYTE *)(dword_AE408_AE3F8() + 1) & 2) == 0 )
    {
      if ( *(_WORD *)(v1 + 50) )
      {
        v4 = *(_WORD *)(a1 + 26);
        if ( v4 )
          *(_WORD *)(a1 + 26) = v4 - 1;
        else
          return sub_45070(dword_AE400_AE3F0() + 13323 + v2, a1);
      }
      else
      {
        *(_BYTE *)(dword_AE400_AE3F0() + v2 + 13329) = 0;
      }
    }
  }
  else
  {
    sub_44BE0_44F20(a1, 7);
    return sub_466F0(a1);
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00046860) --------------------------------------------------------
int sub_46520_46860(int a1)
{
  int result; // eax
  int v2; // edx

  result = a1;
  v2 = *(_DWORD *)(a1 + 160);
  if ( v2 )
    *(_WORD *)(v2 + 46) = 100;
  return result;
}

//SYNCHRONIZED WITH REMC1
int sub_46540_46880(Type_AE400_29795* a1x)
{
  int v1; // edi
  int v3; // esi
  int v4; // eax
  int v5; // eax
  //int v6; // eax
  unsigned __int16 v7; // cx
  unsigned int v8; // eax
  //int v9; // eax
  int v10; // eax
  char v11; // cl
  Type_AE400_29795* v12x; // eax
  Type_AE400_29795* v13x; // edi
  axis_3d* v14x; // edi
  //int v15; // eax
  //int v16; // eax
  Type_AE400_29795* v17x; // edx

  v1 = 0;
  if (a1x->actLife_29807_12 < 0 )
    return 2;
  if (a1x->str_29885_90.var_u16_29913_118)
  {
    v3 = dword_AE400_AE3F0() + 29795 + 164 * a1x->str_29885_90.var_u16_29913_118;
    if ( v3 )
    {
      *(_WORD *)(*(_DWORD *)(v3 + 160) + 314) = a1x - str_AE400_AE3F0->str_29795;
      *(_WORD *)(*(_DWORD *)(v3 + 160) + 316) = 200;
      *(_DWORD *)(*(_DWORD *)(v3 + 160) + 318) = sub_42340_42680(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v3 + 72));
      v4 = *(_DWORD *)(v3 + 160);
      if ( *(int *)(v4 + 318) < 1024 )
        *(_DWORD *)(v4 + 318) = 1024;
      v5 = *(_DWORD *)(v3 + 160);
      if ( *(int *)(v5 + 318) > 3072 )
        *(_DWORD *)(v5 + 318) = 3072;
    }
    a1x->str_29885_90.var_u16_29913_118 = 0;
    *(_BYTE *)(a1x->var_u32_29955_160 + 392) = 4;
    *(_DWORD *)(a1x->var_u32_29955_160 + 383) = 16;
    sub_46520_46860(a1x);
  }
  v7 = a1x->str_29885_90.var_u16_29907_112;
  if ( v7 )
  {
    v8 = dword_AE400_AE3F0() + 29795 + 164 * v7;
    if ( v8 >= dword_AE400_AE3F0() + 29795 )
    {
      if ( *(_BYTE *)(v8 + 64) == 3 )
        *(_DWORD *)(v8 + 140) += a1x->str_29885_90.var_u16_29903_108;
      a1x->var_u32_29935_140 -= a1x->str_29885_90.var_u16_29903_108;
      *(_BYTE *)(a1x->var_u32_29955_160 + 392) = 4;
      *(_DWORD *)(a1x->var_u32_29955_160 + 383) = 16;
    }
    sub_46520_46860(a1x);
    a1x->str_29885_90.var_u16_29907_112 = 0;
  }
  if (a1x->str_29885_90.var_u16_29889_94)
  {
    if ( (a1x->var_29811_16.byte[1] & 0x40) != 0 )
    {
      v10 = (a1x->str_29885_90.var_u16_29885_90 - (__CFSHL__(a1x->str_29885_90.var_u16_29885_90 >> 31, 2) + 4 * (a1x->str_29885_90.var_u16_29885_90 >> 31))) >> 2;
      a1x->var_u32_29935_140 -= v10;
      v11 = a1x->var_29811_16.byte[1];
      a1x->str_29885_90.var_u16_29885_90 = v10;
      a1x->var_29811_16.byte[1] = v11 & 0xBF;
    }
    v12x = str_AE400_AE3F0->str_29795;
    v13x = &str_AE400_AE3F0->str_29795[a1x->str_29885_90.var_u16_29889_94];
    a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
    if ( v13x > v12x )
    {
      v14x = &v13x->var_u32_29867_72;
      *(_WORD *)(a1x->var_u32_29955_160 + 24) = sub_42150_42490(v14x, &a1x->var_u32_29867_72);
      *(_WORD *)(a1x->var_u32_29955_160 + 26) = sub_42180_424C0(v14x, &a1x->var_u32_29867_72);
      *(_WORD *)(a1x->var_u32_29955_160 + 22) = a1x->str_29885_90.var_u16_29885_90 / 10;
      if ( *(__int16 *)(a1x->var_u32_29955_160 + 22) < 0 )
        *(_WORD *)(a1x->var_u32_29955_160 + 22) = 0;
      if ( *(__int16 *)(a1x->var_u32_29955_160 + 22) > 80 )
        *(_WORD *)(a1x->var_u32_29955_160 + 22) = 80;
    }
    sub_44BE0_44F20(a1x, 2);
    *(_BYTE *)(a1x->var_u32_29955_160 + 392) = 4;
    v17x = str_AE400_AE3F0->str_29795;
    *(_DWORD *)(a1x->var_u32_29955_160 + 383) = 16;
    sub_55370_558A0(a1x - v17x, -1, 17);
    if (a1x->actLife_29807_12 < 0 )
    {
      a1x->var_u16_29833_38 = a1x->str_29885_90.var_u16_29889_94;
      return 2;
    }
    v1 = 1;
    sub_46520_46860(a1x);
    a1x->str_29885_90.var_u16_29889_94 = 0;
  }
  return v1;
}

//----- (00046B80) --------------------------------------------------------
void sub_46840_46B80(Type_AE400_29795* a1x)
{
  //int v1; // eax
  //unsigned __int16 v2; // di
  __int16 v3; // cx
  //int v4; // eax
  //int v5; // eax
  //int v6; // eax
  //int v7; // eax
  __int16 v8; // ax
  __int16 v9; // si
  int v10; // eax
  __int16 v11; // di
  __int16 v12; // si
  int v13; // eax
  //int v14; // eax
  //int v15; // eax
  //int v16; // eax

  //v1 = *(_DWORD *)(a1 + 160);
  if (a1x->var_u32_29955_160->dw_0.dword != 48 )
  {
    v3 = 0;
    a1x->var_u32_29955_160->v_14 = 0;
    //v4 = *(_DWORD *)(a1 + 160);
    if ( (a1x->var_u32_29955_160->dw_0.byte[0] & 1) != 0 && a1x->var_u32_29955_160->v_12 < dword_93A90 )
      v3 = 1;
    //v5 = *(_DWORD *)(a1 + 160);
    if ( (a1x->var_u32_29955_160->dw_0.byte[0] & 2) != 0 && a1x->var_u32_29955_160->v_12 > dword_93A8C )
      v3 = -1;
    if ( v3 )
    {
        a1x->var_u32_29955_160->v_12 += dword_93A88 * v3;
      //v6 = *(_DWORD *)(a1 + 160);
      if (a1x->var_u32_29955_160->v_12 < dword_93A8C )
          a1x->var_u32_29955_160->v_12 = dword_93A8C;
      //v7 = *(_DWORD *)(a1 + 160);
      if (a1x->var_u32_29955_160->v_12 > dword_93A90 )
          a1x->var_u32_29955_160->v_12 = dword_93A90;
      a1x->var_u32_29955_160->v_14 = 1;
    }
    v8 = 0;
    if ( (a1x->var_u32_29955_160->dw_0.word[0] & 4) != 0 )
      v8 = -1;
    if ( (a1x->var_u32_29955_160->dw_0.word[0] & 8) != 0 )
      v8 = 1;
    if ( v8 )
    {
        a1x->var_u32_29955_160->v_16 += word_93AA8 * v8;
      //v16 = *(_DWORD *)(a1 + 160);
      if (a1x->var_u32_29955_160->v_16 < dword_93AAC )
          a1x->var_u32_29955_160->v_16 = dword_93AAC;
      //v15 = *(_DWORD *)(a1 + 160);
      if (a1x->var_u32_29955_160->v_16 <= dword_93AB0 )
        goto LABEL_37;
    }
    else
    {
      v9 = a1x->var_u32_29955_160->v_16;
      if ( v9 )
        v10 = v9 / (int)abs16(v9);
      else
        LOWORD(v10) = 0;
      v11 = v10;
      a1x->var_u32_29955_160->v_16 += v10 * word_93AB4;
      v12 = a1x->var_u32_29955_160->v_16;
      if ( v12 )
        v13 = v12 / (int)abs16(v12);
      else
        v13 = 0;
      if ( v11 != v13 )
          a1x->var_u32_29955_160->v_16 = 0;
      //v14 = *(_DWORD *)(a1 + 160);
      if (a1x->var_u32_29955_160->v_16 < dword_93AAC )
          a1x->var_u32_29955_160->v_16 = dword_93AAC;
      //v15 = *(_DWORD *)(a1 + 160);
      if (a1x->var_u32_29955_160->v_16 <= dword_93AB0 )
        goto LABEL_37;
    }
    a1x->var_u32_29955_160->v_16 = dword_93AB0;
LABEL_37:
    sub_46B00_46E40(
      a1x,
        &str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_14958_1635_532[a1x->var_u32_29955_160->var_u16_2043_940]],
      256,
      16);
    sub_46B00_46E40(
      a1x,
        &str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_14958_1635_532[a1x->var_u32_29955_160->var_u16_2047_944]],
      512,
      32);
    return;
  }
  //v2 = *(_WORD *)(v1 + 50);
  if (a1x->var_u32_29955_160->var_50)
      str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_50].actLife_29807_12 = -1;
}
// 93A88: using guessed type int dword_93A88;
// 93A8C: using guessed type int dword_93A8C;
// 93A90: using guessed type int dword_93A90;
// 93AA8: using guessed type __int16 word_93AA8;
// 93AAC: using guessed type int dword_93AAC;
// 93AB0: using guessed type int dword_93AB0;
// 93AB4: using guessed type __int16 word_93AB4;
// AE3F0: using guessed type int dword_AE400_AE3F0();

//SYNCHRONIZED WITH REMC1
void sub_46B00_46E40(Type_AE400_29795* a1x, Type_AE400_29795* a2x, int a3, int a4)
{
  unsigned __int8 v5; // al
  //int v6; // edi
  //int v7; // edi
  int v8; // eax

  if ( a2x <= str_AE400_AE3F0->str_29795)
    return;
  if ( (a4 & a1x->var_u32_29955_160->dw_0.dword) == 0 )
  {
    if ( !a2x->var_u8_29856_61 || (a3 & a1x->var_29811_16.dword) == 0 )
      return;
    goto LABEL_32;
  }
  v5 = a2x->var_u8_29860_65;
  if ( v5 < 0x10u )
  {
    if ( v5 != 2 )
      goto LABEL_20;
    if (str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_676.var_u16[21]].var_48)
        str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_676.var_u16[21]].var_48 = 0;
    if ( a1x->var_u32_29935_140 >= a2x->var_u32_29931_136)
    {
LABEL_20:
      if (a2x->var_u8_29857_62)
      {
        a2x->var_u8_29856_61++;
        v8 = a1x->var_u32_29935_140 / a2x->var_u32_29931_136;
        if ( (__int16)v8 > a2x->var_u8_29857_62)
          LOWORD(v8) = a2x->var_u8_29857_62;
        if (a2x->var_u8_29856_61 < 0 )
            a2x->var_u8_29856_61 = 0;
        if (a2x->var_u8_29856_61 > (__int16)v8 )
            a2x->var_u8_29856_61 = v8;
        a1x->var_29811_16.byte[1] &= 0xFCu;
        a1x->var_29811_16.dword |= a3;
        return;
      }
      if (a1x->var_u32_29935_140 < a2x->var_u32_29931_136)
        return;
LABEL_32:
      a2x->var_48 = a2x->var_50;
      a1x->var_29811_16.byte[1] &= 0xFCu;
      a1x->var_29811_16.dword |= a3;
      a1x->var_29811_16.byte[0] &= ~0x20u;
    }
  }
  else
  {
    if ( v5 <= 0x10u )
    {
      if (a2x->var_48)
      {
        sub_55370_558A0(0, a1x->var_u32_29955_160->var_48, 29);
        return;
      }
      if (a1x->var_u32_29935_140 < a2x->var_u32_29931_136)
        return;
      goto LABEL_32;
    }
    if ( v5 != 21 )
      goto LABEL_20;
    if (str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_676.var_u16[2]].var_48)
        str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_676.var_u16[2]].var_48 = 0;
    if (a1x->var_u32_29935_140 >= a2x->var_u32_29931_136)
      goto LABEL_20;
  }
}

//----- (00046FE0) --------------------------------------------------------
unsigned int sub_46FE0(int a1, int a2, int a3)
{
  unsigned int v3; // esi
  unsigned int v4; // edi
  unsigned int i; // ebx
  unsigned int v6; // eax

  v3 = -1;
  v4 = 0;
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36466); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    if ( *(_BYTE *)(i + 65) == 39 && *(unsigned __int16 *)(i + 144) == *(__int16 *)(a1 + 24) && i != a2 && i != a3 )
    {
      v6 = sub_426D0((_WORD *)(a1 + 72), (_WORD *)(i + 72));
      if ( v6 < v3 )
      {
        v4 = i;
        v3 = v6;
      }
    }
  }
  return v4;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00047060) --------------------------------------------------------
int sub_47060(int a1, __int16 a2)
{
  int result; // eax
  __int16 v3; // bx
  int v4; // eax
  int v5; // edx

  result = *(_DWORD *)(dword_AE400_AE3F0() + 164 * *(__int16 *)(a1 + 24) + 29955);
  v3 = *(_WORD *)(result + 708);
  if ( v3 )
  {
    if ( a2 )
    {
      v4 = 164 * v3;
      v5 = v4 + dword_AE400_AE3F0();
      LOWORD(v4) = *(_WORD *)(v4 + dword_AE400_AE3F0() + 29845);
      result = v4 - 1;
      *(_WORD *)(v5 + 29843) = result;
    }
    else
    {
      result = 41 * v3;
      *(_WORD *)(dword_AE400_AE3F0() + 164 * v3 + 29843) = 0;
    }
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000470F0) --------------------------------------------------------
__int16 sub_470F0(int a1)
{
  int v1; // eax
  char v2; // dl
  unsigned int i; // ebx

  LOWORD(v1) = *(_WORD *)(a1 + 50);
  if ( (_WORD)v1 )
  {
    if ( (_WORD)v1 == 1 )
    {
      *(_BYTE *)(a1 + 70) = 5;
      *(_WORD *)(a1 + 48) = 3;
      *(_WORD *)(a1 + 50) = 0;
    }
    else
    {
      --*(_WORD *)(a1 + 50);
      sub_47060(a1, 1);
      LOWORD(v1) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
      *(_WORD *)(a1 + 76) = v1;
    }
  }
  else
  {
    if ( sub_48200(a1) == 2 )
    {
      *(_BYTE *)(a1 + 70) = 6;
    }
    else if ( (*(_BYTE *)(a1 + 16) & 0x40) != 0 )
    {
      *(_WORD *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 70) = 5;
    }
    *(_WORD *)(a1 + 76) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
    LOWORD(v1) = *(_WORD *)(a1 + 24);
    v2 = *(_BYTE *)(a1 + 63);
    *(_WORD *)(a1 + 144) = v1;
    if ( (v2 & 1) == 0 )
    {
      sub_47470(a1);
      sub_37510((_WORD *)a1, *(_WORD *)(a1 + 26));
      sub_47740(a1);
      v1 = *(_DWORD *)(a1 + 140);
      if ( v1 < *(_DWORD *)(a1 + 136) )
      {
        for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36466); ; i = *(_DWORD *)i )
        {
          LOWORD(v1) = dword_AE400_AE3F0() + 29795;
          if ( i <= dword_AE400_AE3F0() + 29795 )
            break;
          if ( *(_BYTE *)(i + 65) == 39 && *(unsigned __int16 *)(i + 144) == *(__int16 *)(a1 + 24) && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)i) )
          {
            *(_DWORD *)(a1 + 140) += *(_DWORD *)(i + 140);
            LOWORD(v1) = sub_41E80_421C0(i);
            return v1;
          }
        }
      }
    }
  }
  return v1;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00047250) --------------------------------------------------------
char sub_47250(int a1)
{
  __int16 v1; // ax
  char v2; // dh
  __int16 v3; // cx
  __int16 v4; // ax

  v1 = *(_WORD *)(a1 + 48);
  switch ( v1 )
  {
    case 0:
      sub_12C50((_WORD *)a1);
      if ( !*(_WORD *)(a1 + 26) || (LOBYTE(v1) = sub_12D10((_WORD *)a1), (_BYTE)v1) )
      {
        if ( (*(_BYTE *)(a1 + 16) & 2) == 0 )
        {
          v3 = *(_WORD *)(a1 + 86);
          v4 = *(_WORD *)(*(_DWORD *)(164 * *(__int16 *)(a1 + 24) + dword_AE400_AE3F0() + 29955) + 48);
          *(_BYTE *)(a1 + 16) |= 2u;
          *(_WORD *)(a1 + 86) = v4 + v3;
        }
        LOBYTE(v1) = sub_47CA0(a1);
      }
      else
      {
        v2 = *(_BYTE *)(a1 + 16);
        *(_WORD *)(a1 + 48) = 2;
        *(_BYTE *)(a1 + 16) = v2 & 0xBF;
      }
      break;
    case 1:
    case 4:
    case 6:
      v1 = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
      *(_WORD *)(a1 + 76) = v1;
      break;
    case 2:
      *(_BYTE *)(a1 + 70) = 4;
      LOBYTE(v1) = sub_47060(a1, 0);
      *(_WORD *)(a1 + 48) = 0;
      break;
    case 3:
      sub_47060(a1, 1);
      LOBYTE(v1) = sub_47360(a1);
      break;
    case 5:
      sub_47060(a1, 1);
      *(_WORD *)(a1 + 76) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
      LOBYTE(v1) = sub_473C0(a1);
      break;
    default:
      return v1;
  }
  return v1;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00047360) --------------------------------------------------------
int sub_47360(int a1)
{
  int result; // eax
  int v2; // ebx

  result = sub_373F0_377B0(a1 + 150, 10, 42);
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 71) = *(_BYTE *)(a1 + 26);
    *(_WORD *)(result + 24) = *(_WORD *)(a1 + 24);
    result = (a1 - (dword_AE400_AE3F0() + 29795)) / 164;
    *(_WORD *)(v2 + 42) = result;
    *(_WORD *)(a1 + 48) = 4;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000473C0) --------------------------------------------------------
int sub_473C0(int a1)
{
  int result; // eax
  int v2; // ebx

  result = sub_373F0_377B0(a1 + 150, 10, 41);
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 71) = *(_BYTE *)(a1 + 26);
    *(_WORD *)(result + 24) = *(_WORD *)(a1 + 24);
    result = (a1 - (dword_AE400_AE3F0() + 29795)) / 164;
    *(_WORD *)(v2 + 42) = result;
    *(_WORD *)(a1 + 48) = 6;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00047420) --------------------------------------------------------
int sub_47420(int a1)
{
  int result; // eax

  result = sub_37AD0();
  if ( result )
  {
    sub_47DB0(a1);
    *(_BYTE *)(a1 + 70) = 4;
    sub_47470(a1);
    result = sub_47740(a1);
    *(_WORD *)(a1 + 48) = 0;
    *(_WORD *)(a1 + 50) = 5;
  }
  else
  {
    *(_BYTE *)(a1 + 70) = 4;
  }
  return result;
}

//----- (00047470) --------------------------------------------------------
int sub_47470(int a1)
{
  int v1; // esi
  int result; // eax
  int v3; // ebp
  int v4; // esi
  int v5; // eax
  int v6; // esi
  int v7; // ecx
  int v8; // edi
  __int16 v9; // ax
  unsigned int v10; // eax
  int v11; // eax
  __int16 v12; // ax
  int v13; // edi
  int j; // ebp
  int v15; // esi
  int v16; // eax
  __int16 v17; // ax
  __int16 v18; // [esp-4h] [ebp-24h]
  int v19; // [esp+0h] [ebp-20h]
  int i; // [esp+8h] [ebp-18h]
  __int16 v21; // [esp+Ch] [ebp-14h]

  //fix
  v12 = 0;
  v17 = 0;
  //fix

  v1 = *(_DWORD *)(a1 + 136);
  result = *(_DWORD *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * *(__int16 *)(a1 + 24) + 29955) + 308) + *(_DWORD *)(a1 + 140);
  v3 = 0;
  if ( result > v1 )
    v3 = *(_DWORD *)(a1 + 140) - v1;
  if ( !*(_WORD *)(a1 + 26) )
    v3 = *(_DWORD *)(a1 + 140);
  if ( v3 > 0 )
  {
    v4 = v3 / 1000;
    v21 = sub_37AD0();
    if ( v21
      || (sub_37220_375E0(), result = sub_37AD0(), v4 = 8, v21 = result, *(_DWORD *)(dword_AE400_AE3F0() + 4593) = -1, (_WORD)result) )
    {
      if ( v4 < 1 )
        v4 = 1;
      if ( v4 > 32 )
        v4 = 32;
      if ( v21 < 0 )
        v21 = 0;
      if ( v21 > v4 )
        v21 = v4;
      v19 = v3 / v21;
      for ( i = 0; v21 > i; ++i )
      {
        *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
        word_AE454_AE444.z = *(_WORD *)(a1 + 76);
        v5 = sub_373F0_377B0((int)&word_AE454_AE444, 10, 39);
        v6 = v5;
        if ( v5 )
        {
          *(_DWORD *)(v5 + 140) = v19;
          v7 = *(_DWORD *)(v5 + 4);
          *(_WORD *)(v5 + 144) = *(_WORD *)(a1 + 24);
          *(_DWORD *)(v5 + 4) = 9377 * v7 + 9439;
          *(_WORD *)(v5 + 150) = 0;
          *(_WORD *)(v5 + 152) = 0;
          *(_WORD *)(v5 + 126) = (9377 * v7 + 9439) % 0x30u + 16;
          v8 = *(__int16 *)(a1 + 76);
          v9 = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
          *(_WORD *)(v6 + 46) = (1024
                               - (v8
                                - v9)
                               - (__CFSHL__((1024 - (v8 - v9)) >> 31, 3)
                                + 8 * ((1024 - (v8 - v9)) >> 31))) >> 3;
          v10 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
          *(_DWORD *)(a1 + 4) = v10;
          v18 = v10 % 0x1400 + 3840;
          v11 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
          *(_DWORD *)(a1 + 4) = v11;
          sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, v11 & 0x7FF, 0, v18);
          sub_41C70_41FB0((Type_AE400_29795*)v6, &word_AE454_AE444);
          v13 = *(_DWORD *)(v6 + 140);
          v3 -= v13;
          *(_DWORD *)(a1 + 140) -= v13;
          if ( v3 < v19 )
            v19 = v3;
        }
      }
      for ( j = 0; j < 4; ++j )
      {
        *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
        word_AE454_AE444.z = *(_WORD *)(a1 + 76);
        result = sub_373F0_377B0((int)&word_AE454_AE444, 10, 54);
        v15 = result;
        if ( result )
        {
          *(_WORD *)(result + 24) = *(_WORD *)(a1 + 24);
          v16 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
          *(_DWORD *)(a1 + 4) = v16;
          sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, v16 & 0x7FF, 0, 6400);
          result = sub_41C70_41FB0((Type_AE400_29795*)v15, &word_AE454_AE444);
        }
      }
    }
  }
  return result;
}
// 474D5: conditional instruction was optimized away because ebp.4>=1
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;

//----- (00047740) --------------------------------------------------------
int sub_47740(int a1)
{
  int v1; // ebp
  __int16 v2; // dx
  __int16 v3; // bx
  int i; // esi
  int v5; // edx
  int v6; // eax
  int v7; // edi
  int v8; // ecx
  unsigned int v9; // ebx
  unsigned int v10; // eax
  int v11; // eax
  int v12; // eax
  int v13; // edi
  unsigned int v14; // ebx
  int result; // eax
  __int16 v16; // bx
  int v17; // edi
  _BYTE *v18; // eax
  int v19; // ebx
  int v20; // edx
  int v21; // [esp+Ch] [ebp-2Ch]
  int v22; // [esp+1Ch] [ebp-1Ch]
  __int16 v23; // [esp+20h] [ebp-18h]
  __int16 v24; // [esp+24h] [ebp-14h]

  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(a1 + 24);
  switch ( *(_WORD *)(a1 + 26) )
  {
    case 1:
      v2 = 1;
      v3 = 0;
      goto LABEL_10;
    case 2:
      v24 = 1;
      v23 = 0;
      break;
    case 3:
      v24 = 1;
      v23 = 4;
      break;
    case 4:
      v2 = 2;
      v3 = 6;
      goto LABEL_10;
    case 5:
      v24 = 2;
      v23 = 14;
      break;
    case 6:
      v24 = 3;
      v23 = 18;
      break;
    case 7:
      v2 = 3;
      v3 = 34;
LABEL_10:
      v24 = v2;
      v23 = v3;
      break;
    default:
      v24 = 0;
      v23 = 0;
      break;
  }
  for ( i = 0; (__int16)i < v24; ++i )
  {
    while ( 1 )
    {
      *(_DWORD *)(*(_DWORD *)(v1 + 160) + 294) = 0;
      v5 = *(_DWORD *)(v1 + 160);
      v21 = 2 * (__int16)i;
      v6 = 164 * *(unsigned __int16 *)(v5 + v21 + 52);
      v7 = dword_AE400_AE3F0();
      v8 = dword_AE400_AE3F0() + 29795;
      v9 = dword_AE400_AE3F0() + 29795 + v6;
      if ( v9 <= dword_AE400_AE3F0() + 29795 )
      {
        v12 = sub_373F0_377B0(a1 + 72, 3, 3);
        if ( v12 )
        {
          *(_WORD *)(v12 + 24) = *(_WORD *)(a1 + 24);
          *(_WORD *)(v12 + 86) += *(_WORD *)(*(_DWORD *)(v1 + 160) + 48);
          *(_WORD *)(v12 + 144) = *(_WORD *)(a1 + 24);
          *(_WORD *)(v21 + *(_DWORD *)(v1 + 160) + 52) = (v12 - (dword_AE400_AE3F0() + 29795)) / 164;
          *(_BYTE *)(v12 + 70) = 9;
        }
        goto LABEL_27;
      }
      if ( *(int *)(v9 + 12) >= 0 )
        break;
      sub_27690((_WORD *)v6, dword_AE400_AE3F0() + 29795 + v6);
      sub_41E80_421C0(v9);
      *(_WORD *)(v21 + *(_DWORD *)(v1 + 160) + 52) = 0;
LABEL_27:
      if ( (__int16)++i >= v24 )
        goto LABEL_32;
    }
    if ( *(_DWORD *)(v5 + 308) + *(_DWORD *)(a1 + 140) >= *(_DWORD *)(a1 + 136) )
    {
      LOWORD(v11) = (a1 - v8) / 164;
    }
    else
    {
      if ( *(unsigned __int8 *)(a1 + 63) % v24 )
        goto LABEL_23;
      if ( *(_BYTE *)(v9 + 70) != 9 )
        goto LABEL_23;
      *(_WORD *)(v9 + 146) = (a1 - v8) / 164;
      if ( *(_DWORD *)(v9 + 136) <= *(_DWORD *)(v9 + 140) )
        goto LABEL_23;
      *(_WORD *)(v7 + 29941) = 0;
      v10 = sub_46FE0(
              v9,
              v8
            + 164
            * *(unsigned __int16 *)(164 * *(unsigned __int16 *)(*(_DWORD *)(v1 + 160) + 2 * (((__int16)i + 1) % 3) + 52)
                                  + v7
                                  + 29941),
              v8
            + 164
            * *(unsigned __int16 *)(v7
                                  + 164 * *(unsigned __int16 *)(*(_DWORD *)(v1 + 160) + 2 * (((__int16)i + 2) % 3) + 52)
                                  + 29941));
      if ( !v10 )
        goto LABEL_23;
      v11 = (int)(v10 - (dword_AE400_AE3F0() + 29795)) / 164;
    }
    *(_WORD *)(v9 + 146) = v11;
LABEL_23:
    *(_DWORD *)(*(_DWORD *)(v1 + 160) + 294) += *(_DWORD *)(v9 + 140);
    *(_DWORD *)(*(_DWORD *)(v1 + 160) + 290) += *(_DWORD *)(v9 + 136);
  }
LABEL_32:
  while ( (__int16)i < 3 )
  {
    v13 = 2 * (__int16)i;
    v14 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(v13 + *(_DWORD *)(v1 + 160) + 52);
    if ( v14 > dword_AE400_AE3F0() + 29795 )
    {
      sub_27690(
        (_WORD *)(dword_AE400_AE3F0() + 29795),
        dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(v13 + *(_DWORD *)(v1 + 160) + 52));
      sub_41E80_421C0(v14);
      *(_WORD *)(v13 + *(_DWORD *)(v1 + 160) + 52) = 0;
    }
    LOWORD(i) = i + 1;
  }
  result = a1;
  v16 = *(_WORD *)(a1 + 46);
  if ( v16 > 0 )
    *(_WORD *)(a1 + 46) = v16 - 1;
  v22 = 0;
  if ( v23 > 0 )
  {
    do
    {
      v17 = 2 * (__int16)v22;
      v18 = (_BYTE *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(v17 + *(_DWORD *)(v1 + 160) + 84));
      if ( (unsigned int)v18 <= dword_AE400_AE3F0() + 29795 )
      {
        if ( !*(_WORD *)(a1 + 46) )
        {
          v19 = sub_373F0_377B0(a1 + 72, 5, 15);
          if ( v19 )
          {
            *(_WORD *)(a1 + 46) = 16;
            *(_WORD *)(v19 + 24) = *(_WORD *)(a1 + 24);
            v20 = dword_AE400_AE3F0() + 29795;
            *(_WORD *)(v19 + 144) = *(_WORD *)(a1 + 24);
            *(_WORD *)(v17 + *(_DWORD *)(v1 + 160) + 84) = (v19 - v20) / 164;
            *(_WORD *)(v19 + 30) = 512;
            *(_WORD *)(v19 + 34) = *(_WORD *)(v19 + 30);
            *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(v19 + 72);
            word_AE454_AE444.z = *(_WORD *)(v19 + 76);
            word_AE454_AE444.x += 128;
            word_AE454_AE444.y += 640;
            word_AE454_AE444.z = sub_11F50((axis_3d*)(__int16*)&word_AE454_AE444);
            sub_41C70_41FB0((Type_AE400_29795*)v19, &word_AE454_AE444);
          }
        }
      }
      else if ( v18[64] != 5 || v18[65] != 15 || v18[70] == 95 )
      {
        *(_WORD *)(*(_DWORD *)(v1 + 160) + 2 * (__int16)v22 + 84) = 0;
        *(_WORD *)(a1 + 46) = 16;
      }
      result = v22 + 1;
      v22 = result;
    }
    while ( (__int16)result < v23 );
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE446: using guessed type __int16 word_AE454_AE444.y;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (00047CA0) --------------------------------------------------------
char sub_47CA0(int a1)
{
  int v1; // eax
  int v2; // esi
  __int16 v3; // dx
  int v4; // ecx
  __int16 v6; // [esp-4h] [ebp-10h]

  v1 = sub_3BB30(a1 + 150);
  v2 = v1;
  if ( v1 )
  {
    sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 10);
    v3 = *(_WORD *)(a1 + 26);
    *(_BYTE *)(a1 + 16) &= ~0x40u;
    *(_WORD *)(a1 + 26) = v3 + 1;
    v6 = *(_WORD *)(a1 + 26);
    *(_BYTE *)(a1 + 70) = 5;
    *(_WORD *)(a1 + 48) = 4;
    sub_37510((_WORD *)a1, v6);
    sub_47FA0(a1);
    v4 = dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(a1 + 24);
    v1 = (a1 - (dword_AE400_AE3F0() + 29795)) / 164;
    *(_WORD *)(*(_DWORD *)(v4 + 160) + 50) = v1;
    *(_WORD *)(*(_DWORD *)(v4 + 160) + 416) = *(_WORD *)(a1 + 26);
    *(_WORD *)(v2 + 42) = v1;
    *(_WORD *)(v2 + 24) = *(_WORD *)(a1 + 24);
    LOBYTE(v3) = *(_BYTE *)(v2 + 18);
    LOBYTE(v1) = *(_BYTE *)(a1 + 26);
    *(_BYTE *)(v2 + 60) = 0;
    *(_BYTE *)(v2 + 71) = v1;
    *(_BYTE *)(v2 + 18) = v3 | 1;
  }
  return v1;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00047DB0) --------------------------------------------------------
int sub_47DB0(int a1)
{
  int v1; // esi
  int v2; // edx
  int v3; // ecx
  int v4; // edi
  int result; // eax
  __int16 v6; // [esp-4h] [ebp-10h]

  if ( *(__int16 *)(a1 + 26) > 0 )
  {
    v1 = 10 * *(_DWORD *)(a1 + 136) / 100;
    *(_DWORD *)(a1 + 136) -= v1;
    sub_47470(a1);
    v2 = a1 - (dword_AE400_AE3F0() + 29795);
    *(_DWORD *)(a1 + 136) += v1;
    sub_55370_558A0(v2 / 164, -1, 30);
    v3 = dword_AE400_AE3F0();
    v4 = dword_AE400_AE3F0() + 29867;
    *(_DWORD *)(dword_AE400_AE3F0() + 29867) = *(_DWORD *)(a1 + 150);
    *(_WORD *)(v4 + 4) = *(_WORD *)(a1 + 154);
    *(_BYTE *)(v3 + 29866) = *(_BYTE *)(a1 + 26);
    *(_WORD *)(v3 + 29819) = *(_WORD *)(a1 + 24);
    *(_BYTE *)(v3 + 29860) = 0;
    *(_WORD *)(v3 + 29821) = 0;
    *(_WORD *)(v3 + 29837) = (a1 - (v3 + 29795)) / 164;
    sub_28FE0(v3 + 29795);
    v6 = *(_WORD *)(a1 + 26) - 1;
    *(_WORD *)(a1 + 26) = v6;
    sub_37510((_WORD *)a1, v6);
    sub_47FA0(a1);
    result = sub_47060(a1, 1);
  }
  if ( !*(_WORD *)(a1 + 26) )
  {
    sub_47060(a1, 0);
    *(_WORD *)(*(_DWORD *)(164 * *(__int16 *)(a1 + 24) + dword_AE400_AE3F0() + 29955) + 50) = 0;
    return sub_41E80_421C0(a1);
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00047F10) --------------------------------------------------------
int sub_47F10(_DWORD *a1, int a2, int a3, int a4)
{
  int result; // eax
  int v5; // edx
  int v6; // ecx

  result = a3;
  if ( a3 )
  {
    v5 = a1[3];
    v6 = 0;
    a1[2] = a3;
    if ( v5 < 0 )
    {
      v6 = -v5;
      if ( -v5 > a3 / 2 )
        v6 = a3 / 2;
    }
    result = a1[2] - v6;
    a1[3] = result;
  }
  if ( a2 )
  {
    result = a4 / *(__int16 *)(a2 + 50);
    *(_DWORD *)(a2 + 136) = a4;
    *(_DWORD *)(a2 + 140) = result;
  }
  a1[34] = a4;
  return result;
}

//----- (00047FA0) --------------------------------------------------------
int sub_47FA0(int a1)
{
  int v1; // eax
  __int16 v2; // bx
  int result; // eax

  v1 = 164 * *(__int16 *)(a1 + 24) + dword_AE400_AE3F0() + 29795;
  if ( *(_BYTE *)(v1 + 70) <= 1u && (v2 = *(_WORD *)(*(_DWORD *)(v1 + 160) + 708)) != 0 )
    result = 164 * v2 + dword_AE400_AE3F0() + 29795;
  else
    result = 0;
  switch ( *(_WORD *)(a1 + 26) )
  {
    case 0:
      result = sub_47F10((_DWORD *)a1, result, 0, 5000);
      break;
    case 1:
      result = sub_47F10((_DWORD *)a1, result, 20000, 10000);
      break;
    case 2:
      result = sub_47F10((_DWORD *)a1, result, 40000, 20000);
      break;
    case 3:
      result = sub_47F10((_DWORD *)a1, result, 40000, 40000);
      break;
    case 4:
      result = sub_47F10((_DWORD *)a1, result, 60000, (int)&loc_13880);
      break;
    case 5:
      result = sub_47F10((_DWORD *)a1, result, 60000, (int)&loc_270FA + 6);
      break;
    case 6:
      result = sub_47F10((_DWORD *)a1, result, (int)&loc_13880, (int)&loc_4E1FC + 4);
      break;
    case 7:
      result = sub_47F10((_DWORD *)a1, result, (int)&loc_13880, 30000000);
      break;
    default:
      return result;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00048110) --------------------------------------------------------
int sub_48110(int a1)
{
  int v1; // ebx
  int result; // eax
  __int16 v3; // dx
  int v4; // ebx
  _BOOL1 v5; // zf
  int v6; // ebx
  int v7; // edx
  int v8; // ecx

  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(a1 + 24);
  BYTE1(result) = *(_BYTE *)(v1 + 70);
  if ( BYTE1(result) <= 1u && (v3 = *(_WORD *)(*(_DWORD *)(v1 + 160) + 708)) != 0 )
  {
    v4 = 164 * v3;
    v5 = dword_AE400_AE3F0() + 29795 + v4 == 0;
    v6 = dword_AE400_AE3F0() + 29795 + v4;
  }
  else
  {
    v6 = 0;
    v5 = 1;
  }
  if ( !v5 )
  {
    switch ( *(_WORD *)(a1 + 26) )
    {
      case 0:
        v7 = 5000;
        break;
      case 1:
        v7 = 10000;
        break;
      case 2:
        v7 = 20000;
        break;
      case 3:
        v7 = 40000;
        break;
      case 4:
        v7 = (int)&loc_13880;
        break;
      case 5:
        v7 = (int)&loc_270FA + 6;
        break;
      case 6:
        v7 = (int)&loc_4E1FC + 4;
        break;
      case 7:
        v7 = 30000000;
        break;
      default:
        v7 = 0;
        break;
    }
    v8 = *(__int16 *)(v6 + 50);
    *(_DWORD *)(v6 + 136) = v7;
    result = v7 / v8;
    *(_DWORD *)(v6 + 140) = v7 / v8;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00048200) --------------------------------------------------------
int sub_48200(int a1)
{
  int v1; // esi
  int v3; // ecx
  __int16 v4; // ax
  int v5; // edx
  int v6; // eax

  v1 = 0;
  if ( *(int *)(a1 + 12) < 0 )
    return 2;
  if ( *(_WORD *)(a1 + 94) )
  {
    v3 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 90);
    *(_DWORD *)(a1 + 12) = v3;
    if ( v3 < 0 )
    {
      v4 = *(_WORD *)(a1 + 94);
      *(_WORD *)(a1 + 94) = 0;
      *(_WORD *)(a1 + 38) = v4;
      return 2;
    }
    v5 = *(__int16 *)(a1 + 24);
    *(_WORD *)(a1 + 94) = 0;
    v6 = dword_AE400_AE3F0();
    *(_DWORD *)(a1 + 90) = 0;
    v1 = 1;
    *(_BYTE *)(*(_DWORD *)(164 * v5 + v6 + 29955) + 391) = 4;
  }
  if ( *(unsigned __int16 *)(a1 + 124) == *(__int16 *)(a1 + 24) )
  {
    if ( *(__int16 *)(a1 + 26) < 7 )
      *(_BYTE *)(a1 + 16) |= 0x40u;
    *(_WORD *)(a1 + 124) = 0;
  }
  return v1;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000482D0) --------------------------------------------------------
int sub_482D0(int a1)
{
  unsigned int v1; // ebp
  char v2; // ah
  signed int v3; // esi
  int v4; // eax
  __int16 v5; // ax
  signed int v6; // eax
  unsigned int v7; // edi
  int v8; // esi
  int v9; // edx
  __int16 *v10; // edx
  __int16 v11; // ax
  __int16 v12; // ax
  int v14; // [esp-Ch] [ebp-1Ch]
  int v15; // [esp-8h] [ebp-18h]
  int v16; // [esp-4h] [ebp-14h]

  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 146);
  if ( v1 > dword_AE400_AE3F0() + 29795 )
  {
    *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
    word_AE454_AE444.z = *(_WORD *)(a1 + 76);
    *(_WORD *)(a1 + 30) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v1 + 72));
    v2 = *(_BYTE *)(v1 + 64);
    if ( v2 == 10 )
    {
      if ( *(unsigned __int16 *)(v1 + 144) != *(__int16 *)(a1 + 24) )
      {
LABEL_17:
        v10 = *(__int16 **)(a1 + 156);
        v16 = v10[7];
        v15 = v10[5];
        v14 = v10[6];
        v11 = sub_11F50((axis_3d*)(__int16*)&word_AE454_AE444);
        v12 = sub_42000_42340((int)&word_AE454_AE444, v11, v14, v15, v16);
        sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
        return sub_48510(a1);
      }
      v3 = sub_423D0_42710((axis_3d*)(uint16*)&word_AE454_AE444, (axis_3d*)(_WORD *)(v1 + 72));
      if ( v3 > 1024 )
      {
        *(_BYTE *)(v1 + 16) &= ~0x40u;
      }
      else
      {
        v4 = (a1 - (dword_AE400_AE3F0() + 29795)) / 164;
        *(_BYTE *)(v1 + 16) |= 0x40u;
        *(_WORD *)(v1 + 146) = v4;
        if ( sub_11950((Type_AE400_29795*)v1, (Type_AE400_29795*)a1) )
        {
          *(_DWORD *)(a1 + 140) += *(_DWORD *)(v1 + 140);
          v5 = *(_WORD *)(v1 + 144);
          *(_WORD *)(a1 + 146) = 0;
          *(_WORD *)(a1 + 144) = v5;
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 8);
          sub_41E80_421C0(v1);
        }
      }
      v6 = *(__int16 *)(a1 + 126);
      if ( v3 <= v6 )
      {
        word_AE454_AE444.x = *(_WORD *)(v1 + 72);
        word_AE454_AE444.y = *(_WORD *)(v1 + 74);
        goto LABEL_17;
      }
    }
    else
    {
      if ( v2 == 3 )
      {
        v7 = *(__int16 *)(v1 + 26) * *(__int16 *)(a1 + 126);
        if ( sub_423D0_42710((axis_3d*)(uint16*)&word_AE454_AE444, (axis_3d*)(_WORD *)(v1 + 72)) <= v7 )
        {
          v8 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 12);
          if ( word_AE454_AE444.z <= v8 + (__int16)sub_11F50((axis_3d*)(__int16*)&word_AE454_AE444) && *(__int16 *)(v1 + 26) > 0 )
          {
            word_AE454_AE444.x = *(_WORD *)(v1 + 72);
            v9 = *(_DWORD *)(v1 + 140);
            word_AE454_AE444.y = *(_WORD *)(v1 + 74);
            *(_DWORD *)(v1 + 140) = *(_DWORD *)(a1 + 140) + v9;
            *(_DWORD *)(a1 + 140) = 0;
            *(_WORD *)(a1 + 144) = *(_WORD *)(a1 + 24);
            *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 8);
          }
          goto LABEL_17;
        }
      }
      LOWORD(v6) = *(_WORD *)(a1 + 126);
    }
    sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), v6);
    goto LABEL_17;
  }
  return sub_48510(a1);
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE446: using guessed type __int16 word_AE454_AE444.y;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (00048510) --------------------------------------------------------
int sub_48510(int a1)
{
  int v1; // edx
  int v3; // edx

  v1 = 0;
  if ( *(int *)(a1 + 12) < 0 )
    return 2;
  if ( *(_WORD *)(a1 + 94) )
  {
    v3 = *(_DWORD *)(a1 + 160);
    *(_DWORD *)(a1 + 12) -= *(_DWORD *)(a1 + 90);
    *(_BYTE *)(v3 + 393) = 4;
    if ( *(int *)(a1 + 12) < 0 )
    {
      *(_WORD *)(a1 + 38) = *(_WORD *)(a1 + 94);
      return 2;
    }
    v1 = 1;
    *(_WORD *)(a1 + 94) = 0;
  }
  return v1;
}

//----- (00048570) --------------------------------------------------------
int sub_48570(int a1)
{
  unsigned __int16 v1; // cx
  int i; // edx
  int v3; // eax
  int v4; // ebx
  int v5; // eax
  int v6; // edx
  unsigned int v7; // ebx
  int result; // eax
  unsigned __int8 v9; // al
  char v10; // ah
  unsigned __int8 v11; // al
  int v12; // eax

  v1 = 0;
  for ( i = dword_AE400_AE3F0() + 13323; ; i += 2049 )
  {
    v4 = dword_AE400_AE3F0();
    if ( v1 >= *(_WORD *)(dword_AE400_AE3F0() + 10) )
      break;
    v3 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(i + 10);
    *(_DWORD *)(v3 + 136) = *(_DWORD *)(*(_DWORD *)(v3 + 160) + 322);
    ++v1;
    *(_DWORD *)(*(_DWORD *)(v3 + 160) + 308) = 0;
  }
  v5 = dword_AE408_AE3F8();
  v6 = *(_DWORD *)(*(_DWORD *)(a1 + 160) + 322);
  *(_DWORD *)(dword_AE408_AE3F8() + 192) = 0;
  v7 = v4 + 29959;
  *(_DWORD *)(v5 + 188) = v6;
  for ( result = dword_AE400_AE3F0() + 193795; v7 < dword_AE400_AE3F0() + 193795; result = dword_AE400_AE3F0() + 193795 )
  {
    v9 = *(_BYTE *)(v7 + 64);
    if ( v9 < 5u )
    {
      if ( v9 != 3 )
        goto LABEL_20;
      v10 = *(_BYTE *)(v7 + 65);
      if ( v10 != 2 && v10 != 3 )
        goto LABEL_20;
    }
    else if ( v9 > 5u )
    {
      if ( v9 != 10 )
        goto LABEL_20;
      v11 = *(_BYTE *)(v7 + 65);
      if ( v11 < 0x27u )
        goto LABEL_20;
      if ( v11 > 0x27u )
      {
        if ( v11 == 45 )
        {
          v12 = sub_48680(v7);
          if ( v12 )
          {
            if ( *(_DWORD *)(v12 + 160) )
              *(_DWORD *)(*(_DWORD *)(v12 + 160) + 308) += *(_DWORD *)(v7 + 140);
          }
        }
        goto LABEL_20;
      }
    }
    sub_48680(v7);
LABEL_20:
    v7 += 164;
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00048680) --------------------------------------------------------
int sub_48680(int a1)
{
  int result; // eax

  result = 0;
  if ( *(_WORD *)(a1 + 144) )
  {
    result = 164 * *(unsigned __int16 *)(a1 + 144) + dword_AE400_AE3F0() + 29795;
    *(_DWORD *)(result + 136) += *(_DWORD *)(a1 + 140);
  }
  *(_DWORD *)(dword_AE408_AE3F8() + 188) += *(_DWORD *)(a1 + 140);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00048700) --------------------------------------------------------
void sub_48700(__int16 a1, __int16 a2, __int16 a3, __int16 a4)
{
  __int16 *v4; // esi
  __int16 v5; // bx

  if ( byte_939E4 && byte_939E5 && a2 <= (int)(unsigned __int16)word_CC1B6 )
  {
    v4 = word_CBFE0;
    v5 = 0;
    while ( a1 != *v4 || a2 != v4[1] || sub_65708(dword_CC130, v5) )
    {
      ++v5;
      v4 += 2;
      if ( v5 >= 32 )
        goto LABEL_10;
    }
    sub_65E75(dword_CC130, v5);
LABEL_10:
    sub_488B0(a1, a2, a3, a4);
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// CBFE0: using guessed type __int16 word_CBFE0[];
// CC130: using guessed type int dword_CC130;
// CC1B6: using guessed type __int16 word_CC1B6;

//----- (000487B0) --------------------------------------------------------
void sub_487B0(__int16 a1, __int16 a2, __int16 a3, __int16 a4)
{
  __int16 *v4; // esi
  __int16 v5; // bx
  char v6; // [esp+0h] [ebp-10h]

  if ( byte_939E4 && byte_939E5 && a2 <= (int)(unsigned __int16)word_CC1B6 )
  {
    v4 = word_CBFE0;
    v5 = 0;
    v6 = 0;
    while ( __PAIR32__(a2, a1) != *(_DWORD *)v4 || sub_65708(dword_CC130, v5) )
    {
      ++v5;
      v4 += 2;
      if ( v5 >= 32 )
        goto LABEL_9;
    }
    v6 = 1;
LABEL_9:
    if ( !v6 )
      sub_488B0(a1, a2, a3, a4);
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// CBFE0: using guessed type __int16 word_CBFE0[];
// CC130: using guessed type int dword_CC130;
// CC1B6: using guessed type __int16 word_CC1B6;

//----- (00048860) --------------------------------------------------------
int sub_48860(__int16 a1, __int16 a2, __int16 a3, __int16 a4)
{
  int result; // eax

  if ( byte_939E4 && byte_939E5 )
  {
    result = a2;
    if ( a2 <= (int)(unsigned __int16)word_CC1B6 )
      return sub_488B0(a1, a2, a3, a4);
  }
  return result;
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// CC1B6: using guessed type __int16 word_CC1B6;

//----- (000488B0) --------------------------------------------------------
bool sub_488B0(__int16 a1, __int16 a2, __int16 a3, __int16 a4)
{
  __int16 v4; // bx
  bool result; // eax
  int v6; // edx
  int v7; // eax
  int v8; // edx

  v4 = 0;
  while ( 1 )
  {
    result = sub_65708(dword_CC130, v4);
    if ( result )
      break;
    if ( ++v4 >= 32 )
      return result;
  }
  word_CBFE0[2 * v4] = a1;
  word_93A00 = a3;
  word_CBFE2[2 * v4] = a2;
  word_93A0C = 768;
  word_93A22 = a4;
  word_93A02 = v4;
  word_CC060[v4] = (int)(a3 - (__CFSHL__((unsigned __int64)a3 >> 32, 8) + ((unsigned __int64)a3 >> 32 << 8))) >> 8;
  word_939F4 = __DS__;
  v6 = 32 * a2 + dword_CC144;
  v7 = *(_DWORD *)(v6 + 26) - 16;
  v8 = *(_DWORD *)(v6 + 18);
  dword_939F8 = v7;
  dword_939F0 = v8;
  dword_CC134 = sub_6586C(dword_CC130, (unsigned int)&dword_939F0);
  return 1;
}
// 939F0: using guessed type int dword_939F0;
// 939F4: using guessed type __int16 word_939F4;
// 939F8: using guessed type int dword_939F8;
// 93A00: using guessed type __int16 word_93A00;
// 93A02: using guessed type __int16 word_93A02;
// 93A0C: using guessed type __int16 word_93A0C;
// 93A22: using guessed type __int16 word_93A22;
// CBFE0: using guessed type __int16 word_CBFE0[];
// CBFE2: using guessed type __int16 word_CBFE2[63];
// CC060: using guessed type __int16 word_CC060[];
// CC130: using guessed type int dword_CC130;
// CC134: using guessed type int dword_CC134;
// CC144: using guessed type int dword_CC144;

//----- (00048A50) --------------------------------------------------------
char sub_48710_48A50(int a1, int a2, __int16 a3, __int16 a4, int a5, int a6, __int16 a7, int a8)
{
  int v8; // edx
  int v9; // eax
  int v10; // ebx
  __int64 v11; // rtt
  int v12; // ebx
  int v13; // ebp
  int v14; // ebx
  __int16 v15; // bx
  int v16; // ebp
  int v17; // ebx
  int v18; // edx
  int v19; // esi
  int v20; // edi
  int v21; // eax
  int v22; // edx
  int v23; // esi
  int v24; // eax
  int v25; // ebx
  int i; // eax
  int v27; // ebx
  unsigned int v28; // ebx
  unsigned __int8 v29; // al
  unsigned __int8 v30; // ah
  unsigned __int16 v31; // di
  int v32; // eax
  int v33; // eax
  unsigned __int8 v34; // ah
  int v35; // eax
  unsigned __int8 v36; // al
  char v37; // al
  unsigned __int8 v38; // ah
  int v39; // edi
  int v40; // edx
  int v41; // esi
  int v42; // edi
  char *v43; // edx
  __int16 v44; // cx
  __int16 v45; // di
  int v46; // edi
  char *v47; // edx
  int v48; // ebx
  int v49; // edi
  int v50; // edx
  int v51; // esi
  int v52; // edi
  int v53; // esi
  char *v54; // edx
  char *v55; // ebx
  char result; // al
  char *v57; // eax
  int v58; // [esp+4h] [ebp-54h]
  int v59; // [esp+8h] [ebp-50h]
  int v60; // [esp+Ch] [ebp-4Ch]
  int v61; // [esp+10h] [ebp-48h]
  int v62; // [esp+14h] [ebp-44h]
  int v63; // [esp+18h] [ebp-40h]
  int v64; // [esp+18h] [ebp-40h]
  int v65; // [esp+20h] [ebp-38h]
  int v66; // [esp+24h] [ebp-34h]
  int v67; // [esp+28h] [ebp-30h]
  signed int v68; // [esp+2Ch] [ebp-2Ch]
  int v69; // [esp+30h] [ebp-28h]
  int v70; // [esp+34h] [ebp-24h]
  char *v71; // [esp+38h] [ebp-20h]
  char *v72; // [esp+3Ch] [ebp-1Ch]
  unsigned __int16 j; // [esp+40h] [ebp-18h]
  char v74; // [esp+44h] [ebp-14h]

  v8 = a1;
  v9 = a2;
  v10 = a8;
  v59 = 0;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    v8 = a1 >> 1;
    v9 = a2 >> 1;
    v10 = 2 * a8;
    a5 >>= 1;
    a6 >>= 1;
  }
  v65 = scrWidth_12EFF0_12EFE0 * v9 + (int)begWscreen_2ECFF4_2ECFE4 + v8;
  LODWORD(v11) = (uint32)sub_10000;
  HIDWORD(v11) = (int)sub_10000 >> 31;
  v12 = v11 / v10;
  v58 = a5 / 2;
  v13 = v12 * cos_90B4C[a7 & 0x7FF];
  v14 = ((int)sin_9134C[a7 & 0x7FF] * v12) >> 16;
  v70 = a6 / 2;
  sub_5A3C0_5A8D0(1);
  v62 = v14;
  v69 = 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333) + dword_AE400_AE3F0() + 29795;
  v15 = *(_WORD *)(*(_DWORD *)(v69 + 160) + 686);
  v16 = -v13 >> 16;
  if ( v15 )
    v59 = *(__int16 *)(dword_AE400_AE3F0() + 164 * v15 + 29843);
  v17 = *(_DWORD *)(v69 + 160);
  if ( *(_WORD *)(v17 + 50) )
  {
    v18 = (__int16)(*(_WORD *)(v69 + 72) - a3);
    v19 = v18 * v62;
    v20 = v70 + ((v16 * v18 + (__int16)(*(_WORD *)(v69 + 74) - a4) * v62) >> 16);
    v21 = dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(v17 + 50);
    v22 = (__int16)(*(_WORD *)(v21 + 29867) - a3);
    v23 = v58 + ((v19 - v16 * (__int16)(*(_WORD *)(v69 + 74) - a4)) >> 16);
    v24 = (__int16)(*(_WORD *)(v21 + 29869) - a4);
    v25 = v58 + ((v22 * v62 - v16 * v24) >> 16);
    v63 = ((v16 * v22 + v62 * v24) >> 16) + v70;
    v68 = Distance_410CE_4140E((v25 - v23) * (v25 - v23) + (v63 - v20) * (v63 - v20));
    v66 = (unsigned __int16)sub_40F87_412C7(v25 - v23, v63 - v20);
    for ( i = (*(_DWORD *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13341) & 3) + 4;
          i <= v68;
          *(_BYTE *)(v65 + v27 + scrWidth_12EFF0_12EFE0 * v64) = strPal.byte_BB934_BB924[256
                                                                * *(unsigned __int8 *)(v65 + v27 + scrWidth_12EFF0_12EFE0 * v64)
                                                                + (unsigned __int8)byte_AE167_AE157] )
    {
      v27 = ((i * cos_90B4C[v66]) >> 16) + v23;
      v64 = v20 + ((-i * (int)sin_9134C[v66]) >> 16);
      if ( v27 < 0 )
        break;
      if ( v27 >= a5 )
        break;
      if ( v64 < 0 )
        break;
      if ( v64 >= a6 )
        break;
      if ( v27 < word_12C1E2[2 * v64] )
        break;
      if ( v27 >= word_12C1E0[2 * v64] )
        break;
      i += 4;
    }
  }
  v28 = dword_AE400_AE3F0() + 29959;
  while ( v28 < dword_AE400_AE3F0() + 193795 )
  {
    v29 = 0;
    v60 = 1;
    switch ( *(_BYTE *)(v28 + 64) )
    {
      case 2:
        v34 = *(_BYTE *)(v28 + 65);
        if ( v34 )
        {
          if ( v34 <= 1u )
          {
            if ( *(_BYTE *)(dword_AE408_AE3F8() + 95) )
            {
              v74 = (char)byte_AD167_AD157[1];
              v29 = 1;
            }
          }
          else if ( v34 == 3 )
          {
            if ( *(_BYTE *)(dword_AE408_AE3F8() + 95) )
            {
              v74 = (char)byte_AD167_AD157[1];
              v29 = 1;
            }
          }
          else
          {
            v74 = 28;
            v29 = 1;
          }
        }
        else
        {
          if ( *(_BYTE *)(v28 + 70) != 2 )
            v29 = 1;
          v74 = 28;
        }
        goto LABEL_66;
      case 3:
        v38 = *(_BYTE *)(v28 + 65);
        if ( v38 >= 2u )
        {
          if ( v38 <= 2u )
          {
            v29 = *(_BYTE *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * *(__int16 *)(v28 + 24) + 29955) + 48) + 58;
          }
          else if ( v38 == 3 && (*(_WORD *)(v28 + 24) == *(_WORD *)(v69 + 24) || v59) )
          {
            v29 = *(_BYTE *)(*(_DWORD *)(164 * *(__int16 *)(v28 + 24) + dword_AE400_AE3F0() + 29955) + 48) + 66;
          }
        }
        goto LABEL_66;
      case 5:
        if ( *(_BYTE *)(v28 + 70) != 120 && (*(_BYTE *)(v28 + 16) & 1) == 0 )
        {
          v35 = *(__int16 *)(v28 + 24);
          if ( v35 == (int)(v28 - (dword_AE400_AE3F0() + 29795)) / 164 )
          {
            v36 = *(_BYTE *)(v28 + 65);
            if ( v36 < 0xCu || v36 > 0xEu )
              v37 = (char)byte_AD167_AD157[1];
            else
              v37 = byte_AD167_AD157[16];
          }
          else
          {
            v37 = byte_99B58[1+2 * *(__int16 *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * v35 + 29955) + 48)];
          }
          v74 = v37;
          v29 = 1;
        }
        goto LABEL_66;
      case 9:
        goto LABEL_32;
      case 0xA:
        v30 = *(_BYTE *)(v28 + 65);
        if ( v30 < 0x22u )
        {
          if ( v30 >= 3u && v30 == 18 )
            goto LABEL_66;
          goto LABEL_32;
        }
        if ( v30 <= 0x22u )
        {
          v60 = 2;
LABEL_32:
          v33 = 164 * *(__int16 *)(v28 + 24) + dword_AE400_AE3F0();
          if ( *(_BYTE *)(v33 + 29859) == 3 )
            v74 = byte_99B58[2 * *(__int16 *)(*(_DWORD *)(v33 + 29955) + 48)];
          else
            v74 = byte_AE067;
          v29 = 1;
          goto LABEL_66;
        }
        if ( v30 < 0x27u || v30 > 0x27u )
          goto LABEL_32;
        v31 = *(_WORD *)(v28 + 144);
        if ( v31 && (v32 = dword_AE400_AE3F0() + 164 * v31, *(_BYTE *)(v32 + 29859) == 3) )
        {
          v74 = byte_99B58[2 * *(__int16 *)(*(_DWORD *)(v32 + 29955) + 48) + *(unsigned __int8 *)(dword_AE408_AE3F8() + 96)];
          v29 = 1;
        }
        else
        {
          v29 = 1;
          v74 = -24;
        }
LABEL_66:
        if ( !v29 )
          goto LABEL_97;
        v39 = (__int16)(*(_WORD *)(v28 + 72) - a3);
        v40 = (__int16)(*(_WORD *)(v28 + 74) - a4);
        v41 = v58 + ((v39 * v62 - v16 * v40) >> 16);
        if ( v41 < 0 )
          goto LABEL_97;
        if ( v41 >= a5 )
          goto LABEL_97;
        v42 = ((v16 * v39 + v62 * v40) >> 16) + v70;
        if ( v42 < 0 || v42 >= a6 || v41 < word_12C1E2[2 * v42] || v41 >= word_12C1E0[2 * v42] )
          goto LABEL_97;
        v43 = (char *)(v42 * scrWidth_12EFF0_12EFE0 + v41 + v65);
        if ( v29 <= 1u )
        {
          *v43 = v74;
          if ( v60 > 1 )
          {
            v46 = scrWidth_12EFF0_12EFE0;
            v43[1] = v74;
            v47 = &v43[v46];
            *v47 = v74;
            v47[1] = v74;
          }
        }
        else
        {
          if ( typeResolution_12F02E_12F01E != 1 )
          {
            if ( v29 < 0x3Cu )
            {
              if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              {
LABEL_83:
                DrawBitmap_60CE0_611F0(v41, v42 - *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 6 * v29 + 5), (TypeTab*)(begSprTab_AE42C_AE41C_26C42C_26C41C + 6 * v29));
                goto LABEL_97;
              }
              goto LABEL_84;
            }
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
            {
LABEL_78:
              DrawBitmap_60CE0_611F0(
                v41 - ((int)*(unsigned __int8 *)(6 * v29 + begSprTab_AE42C_AE41C_26C42C_26C41C + 4) >> 1),
                v42 - *(unsigned __int8 *)(6 * v29 + begSprTab_AE42C_AE41C_26C42C_26C41C + 5),
                  (TypeTab*)(6 * v29 + begSprTab_AE42C_AE41C_26C42C_26C41C));
              goto LABEL_97;
            }
            goto LABEL_94;
          }
          if ( v29 >= 0x42u && v29 < 0x4Au )
          {
            LOWORD(v41) = 2 * v41;
            LOWORD(v42) = 2 * v42;
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              goto LABEL_78;
LABEL_94:
            DrawBitmap_60D18_61228(
              v41 - ((int)*(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 6 * v29 + 4) >> 1),
              v42 - *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 6 * v29 + 5),
                (TypeTab*)(begSprTab_AE42C_AE41C_26C42C_26C41C + 6 * v29));
            goto LABEL_97;
          }
          if ( v29 >= 0x3Au && v29 < 0x42u )
          {
            LOWORD(v41) = 2 * v41;
            LOWORD(v42) = 2 * v42;
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              goto LABEL_83;
LABEL_84:
            DrawBitmap_60D18_61228(v41, v42 - *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 6 * v29 + 5), (TypeTab*)(begSprTab_AE42C_AE41C_26C42C_26C41C + 6 * v29));
            goto LABEL_97;
          }
          if ( v29 == 83 || v29 == 84 )
          {
            v44 = 2 * v41;
            v45 = 2 * v42;
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              DrawBitmap_60CE0_611F0(
                v44 - ((int)*(unsigned __int8 *)(6 * v29 + begSprTab_AE42C_AE41C_26C42C_26C41C + 4) >> 1),
                v45 - ((int)*(unsigned __int8 *)(6 * v29 + begSprTab_AE42C_AE41C_26C42C_26C41C + 5) >> 1),
                  (TypeTab*)(6 * v29 + begSprTab_AE42C_AE41C_26C42C_26C41C));
            else
              DrawBitmap_60D18_61228(
                v44 - ((int)*(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 6 * v29 + 4) >> 1),
                v45 - ((int)*(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 6 * v29 + 5) >> 1),
                  (TypeTab*)(begSprTab_AE42C_AE41C_26C42C_26C41C + 6 * v29));
          }
        }
LABEL_97:
        v28 += 164;
        break;
      case 0xB:
        switch ( *(_BYTE *)(v28 + 65) )
        {
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            v29 = 83;
            break;
          case 0x1F:
            v29 = 84;
            break;
          default:
            goto LABEL_66;
        }
        goto LABEL_66;
      case 0xC:
        if ( (*(_BYTE *)(v28 + 16) & 1) == 0 )
        {
          v74 = byte_AD167_AD157[3841];
          v29 = 1;
        }
        goto LABEL_66;
      default:
        goto LABEL_66;
    }
  }
  if ( v59 )
  {
    for ( j = 0; j < *(_WORD *)(dword_AE400_AE3F0() + 10); ++j )
    {
      if ( j != str_AE400_AE3F0->var_u16_8 )
      {
        v67 = 2049 * j;
        v48 = 164 * *(unsigned __int16 *)(v67 + dword_AE400_AE3F0() + 13333) + dword_AE400_AE3F0() + 29795;
        if ( *(int *)(v48 + 12) >= 0 )
        {
          v49 = (__int16)(*(_WORD *)(v48 + 72) - a3);
          v50 = (__int16)(*(_WORD *)(v48 + 74) - a4);
          v51 = ((v49 * v62 - v16 * v50) >> 16) + v58;
          if ( v51 >= 0 && v51 < a5 )
          {
            v52 = ((v16 * v49 + v62 * v50) >> 16) + v70;
            if ( v52 >= 0 && v52 < a6 && v51 >= word_12C1E2[2 * v52] && v51 < word_12C1E0[2 * v52] )
            {
              if ( typeResolution_12F02E_12F01E == 1 )
                DrawText_5A180_5A690(
                  (char*)(v67 + dword_AE400_AE3F0() + 13323 + 1034),
                  (__int16)(2 * v51 + 2),
                  2 * v52,
                  byte_99B58[1+2 * *(__int16 *)(*(_DWORD *)(v48 + 160) + 48)]);
              else
                DrawText_5A180_5A690(
                  (char*)(v67 + dword_AE400_AE3F0() + 13323 + 1034),
                  (__int16)(v51 + 2),
                  v52,
                  byte_99B58[1+2 * *(__int16 *)(*(_DWORD *)(v48 + 160) + 48)]);
            }
          }
        }
      }
    }
  }
  v61 = a5 / 12;
  v53 = 11264;
  v54 = (char *)(a5 / 2 + v65 + scrWidth_12EFF0_12EFE0 * (a6 / 2) - 1);
  v71 = v54;
  v55 = v54;
  result = strPal.fog_B7934_B7924[(unsigned __int8)*v54 + 11264];
  v72 = v54;
  for ( *v54 = result; v61; --v61 )
  {
    v72 -= scrWidth_12EFF0_12EFE0;
    v53 -= 2048 / (a5 / 12);
    v71 += scrWidth_12EFF0_12EFE0;
    v57 = &strPal.fog_B7934_B7924[v53 & 0xFF00];
    *v72 = v57[(unsigned __int8)*v72];
    v55[1] = v57[(unsigned __int8)v55[1]];
    *v71 = v57[(unsigned __int8)*v71];
    ++v55;
    *(v54 - 1) = v57[(unsigned __int8)*(v54 - 1)];
    --v54;
    result = v61 - 1;
  }
  return result;
}
// 49393: variable 'v74' is possibly undefined
// 10000: using guessed type void sub_10000();
// 90B4C: using guessed type int dword_90B4C[256];
// 9134C: using guessed type void (*dword_9134C[2])();
// AD158: using guessed type char byte_AD158;
// AD167: using guessed type char byte_AD167;
// AE058: using guessed type char byte_AE058;
// AE067: using guessed type char byte_AE067;
// AE157: using guessed type char byte_AE167_AE157;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// AE41C: using guessed type int begSprTab_AE42C_AE41C_26C42C_26C41C;
// 12C1E0: using guessed type __int16 word_12C1E0[];
// 12C1E2: using guessed type __int16 word_12C1E2[959];
// 12EFE0: using guessed type int scrWidth_12EFF0_12EFE0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00049640) --------------------------------------------------------
int DrawMinimap_49300_49640(int a1, int a2, int a3, int a4, int a5, int a6, __int16 a7, int a8, int a9, int a10)
{
  int v10; // ebx
  int v11; // edx
  int v12; // edi
  __int16 *i; // ebx
  int v14; // edi
  __int16 *v15; // ecx
  int v16; // ebx
  __int16 *j; // esi
  int v18; // eax
  int v19; // ebx
  int result; // eax
  int v21; // ecx
  int v22; // ebx
  _BYTE *v23; // edi
  int v24; // esi
  int v25; // ecx
  int v26; // eax
  int v27; // edx
  int v28; // ecx
  int v29; // ebx
  _BYTE *v30; // edi
  int v31; // esi
  int v32; // ecx
  int v33; // eax
  int v34; // edx
  int m; // [esp+0h] [ebp-38h]
  int v36; // [esp+4h] [ebp-34h]
  int v37; // [esp+8h] [ebp-30h]
  int v38; // [esp+10h] [ebp-28h]
  int v39; // [esp+18h] [ebp-20h]
  int v40; // [esp+1Ch] [ebp-1Ch]
  int v41; // [esp+20h] [ebp-18h]
  int k; // [esp+24h] [ebp-14h]
  int v43; // [esp+28h] [ebp-10h]
  int v44; // [esp+2Ch] [ebp-Ch]
  int v45; // [esp+30h] [ebp-8h]
  __int16 *v46; // [esp+34h] [ebp-4h]

  v10 = a1;
  v11 = a2;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    v10 = a1 >> 1;
    v11 = a2 >> 1;
    a5 >>= 1;
    a6 >>= 1;
    a8 *= 2;
  }
  v38 = scrWidth_12EFF0_12EFE0 * v11 + v10 + (int)begWscreen_2ECFF4_2ECFE4;
  if ( a10 )
  {
    v12 = a6;
    for ( i = word_12C1E0; v12; --v12 )
    {
      i += 2;
      *((_DWORD *)i - 1) = (unsigned __int16)a5;
    }
  }
  else
  {
    v14 = a6 / 2;
    v41 = 0;
    v15 = &word_12C1E0[2 * (a6 / 2)];
    v16 = a5 >> 1;
    for ( j = v15 - 2; v14; --v14 )
    {
      v18 = (v16 * (unsigned __int8)strPal.byte_CBC34_CBC24[v41 >> 16]) >> 8;
      *v15 = v18 + v16;
      *j = v18 + v16;
      v15[1] = v16 - v18;
      j[1] = v16 - v18;
      j -= 2;
      v15 += 2;
      v41 += 0x1000000 / (a6 >> 1);
    }
  }
  v19 = a7 & 0x7FF;
  v40 = (a8 * cos_90B4C[v19]) >> 16;
  v39 = (a8 * (int)sin_9134C[v19]) >> 16;
  v37 = a6 * v40 / a5;
  v36 = a6 * v39 / a5;
  v44 = a3 - (a5 * v36 - a6 * v40) / 2;
  v46 = word_12C1E0;
  v43 = a4 - (a6 * v39 + a5 * v37) / 2;
  v45 = v38;
  if ( a10 )
  {
    result = a6;
    for ( k = a6; k; --k )
    {
      v21 = v46[1];
      v22 = v44 + v21 * v36;
      v23 = (_BYTE *)(v21 + v45);
      v24 = *v46 - v21;
      v25 = v43 + v21 * v37;
      v26 = 0;
      HIWORD(v27) = 0;
      do
      {
        LOBYTE(v27) = BYTE1(v22);
        BYTE1(v27) = BYTE1(v25);
        LOBYTE(v26) = mapTerrainType_CC1E0_CC1D0[v27];
        BYTE1(v27) = mapShading_EC1E0_EC1D0[v27];
        LOBYTE(v27) = strPal.byte_CB934_CB924[v26];
        *v23++ = strPal.fog_B7934_B7924[v27];
        v22 += v36;
        v25 += v37;
        --v24;
      }
      while ( v24 );
      v45 += scrWidth_12EFF0_12EFE0;
      v46 += 2;
      v44 -= v40;
      v43 += v39;
      result = k - 1;
    }
  }
  else
  {
    result = a6;
    for ( m = a6; m; --m )
    {
      v28 = v46[1];
      v29 = v44 + v28 * v36;
      v30 = (_BYTE *)(v28 + v45);
      v31 = *v46 - v28;
      v32 = v43 + v28 * v37;
      v33 = 0;
      HIWORD(v34) = 0;
      do
      {
        LOBYTE(v34) = BYTE1(v29);
        BYTE1(v34) = BYTE1(v32);
        LOBYTE(v33) = mapTerrainType_CC1E0_CC1D0[v34];
        BYTE1(v34) = mapShading_EC1E0_EC1D0[v34];
        LOBYTE(v34) = strPal.byte_CB934_CB924[v33];
        LOBYTE(v34) = strPal.fog_B7934_B7924[v34];
        BYTE1(v34) = *v30;
        *v30++ = strPal.byte_BB934_BB924[v34];
        v29 += v36;
        v32 += v37;
        --v31;
      }
      while ( v31 );
      v45 += scrWidth_12EFF0_12EFE0;
      result = v39;
      v46 += 2;
      v44 -= v40;
      v43 += v39;
    }
  }
  return result;
}
// 90B4C: using guessed type int dword_90B4C[256];
// 9134C: using guessed type void (*dword_9134C[2])();
// 12C1E0: using guessed type __int16 word_12C1E0[];
// 12EFE0: using guessed type int scrWidth_12EFF0_12EFE0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00049BD0) --------------------------------------------------------
int sub_49BD0(int a1)
{
  __int16 v1; // dx
  int v2; // edx
  int v3; // eax
  int v4; // ecx
  __int64 v5; // rax
  int v6; // ebp
  int result; // eax
  int v8; // eax

  v1 = *(_WORD *)(a1 + 94);
  *(_BYTE *)(a1 + 18) |= 2u;
  if ( v1 )
  {
    v2 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 90);
    *(_DWORD *)(a1 + 12) = v2;
    if ( v2 < 0 )
    {
      v3 = sub_373F0_377B0(a1 + 72, 10, 6);
      v4 = v3;
      if ( v3 )
      {
        *(_WORD *)(v3 + 24) = *(_WORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 94) + 29819);
        v5 = 3 * *(__int16 *)(a1 + 84);
        *(_WORD *)(v4 + 46) = (int)(v5 - (__CFSHL__(HIDWORD(v5), 2) + 4 * HIDWORD(v5))) >> 2;
        LODWORD(v5) = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = v5;
        HIDWORD(v5) = (unsigned int)v5 % 0x3C + 130;
        *(_DWORD *)(v4 + 12) = HIDWORD(v5);
        v6 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 12) = HIDWORD(v5);
        *(_DWORD *)(a1 + 16) = v6 & 0xFFFDFFF7;
        BYTE4(v5) = *(_BYTE *)(a1 + 18);
        *(_BYTE *)(a1 + 70) = 1;
        *(_BYTE *)(a1 + 18) = BYTE4(v5) | 2;
        sub_42000((unsigned int)v5 / 0x3C, a1, a1 + 72);
      }
    }
    *(_WORD *)(a1 + 94) = 0;
  }
  *(_WORD *)(a1 + 76) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  result = sub_11810((__int16 *)(a1 + 72));
  if ( result == 1 )
  {
    v8 = sub_373F0_377B0(a1 + 72, 10, 5);
    if ( v8 )
      *(_WORD *)(v8 + 24) = *(_WORD *)(a1 + 24);
    return sub_41E80_421C0(a1);
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00049D00) --------------------------------------------------------
int sub_49D00(int a1)
{
  int v1; // edx
  unsigned __int16 v2; // si
  int result; // eax
  int v4; // eax

  v1 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v1;
  if ( v1 < 60 )
  {
    v2 = *(_WORD *)(a1 + 86);
    *(_BYTE *)(a1 + 70) = 2;
    if ( v2 >= 0x53u )
    {
      if ( v2 <= 0x53u )
      {
        sub_373F0((_WORD *)a1, 226);
      }
      else if ( v2 == 84 )
      {
        sub_373F0((_WORD *)a1, 227);
      }
    }
  }
  *(_WORD *)(a1 + 76) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  result = sub_11810((__int16 *)(a1 + 72));
  if ( result == 1 )
  {
    v4 = sub_373F0_377B0(a1 + 72, 10, 5);
    if ( v4 )
      *(_WORD *)(v4 + 24) = *(_WORD *)(a1 + 24);
    return sub_41E80_421C0(a1);
  }
  return result;
}

//----- (00049D90) --------------------------------------------------------
int sub_49D90(_WORD *a1)
{
  int result; // eax
  int v2; // eax

  a1[38] = sub_11F50((axis_3d*)(short*)(a1 + 36));
  result = sub_11810((short*)(a1 + 36));
  if ( result == 1 )
  {
    v2 = sub_373F0_377B0((int)(a1 + 36), 10, 5);
    if ( v2 )
      *(_WORD *)(v2 + 24) = a1[12];
    return sub_41E80_421C0((int)a1);
  }
  return result;
}

//----- (00049DE0) --------------------------------------------------------
int sub_49DE0(int a1)
{
  int result; // eax

  *(_BYTE *)(a1 + 18) |= 2u;
  result = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  *(_WORD *)(a1 + 76) = result;
  return result;
}

//----- (00049E10) --------------------------------------------------------
int sub_49E10(int a1)
{
  unsigned __int16 v1; // di
  int v2; // esi
  int v3; // ebx
  int result; // eax

  v1 = 0;
  v2 = dword_AE400_AE3F0() + 13323;
  while ( v1 < *(_WORD *)(dword_AE400_AE3F0() + 10) )
  {
    v3 = 164 * *(unsigned __int16 *)(v2 + 10) + dword_AE400_AE3F0() + 29795;
    if ( *(int *)(v3 + 12) >= 0 && sub_11950((Type_AE400_29795*)v3, (Type_AE400_29795*)a1) )
      *(_BYTE *)(v3 + 17) |= 0x10u;
    v2 += 2049;
    ++v1;
  }
  result = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  *(_WORD *)(a1 + 76) = result;
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00049E90) --------------------------------------------------------
int sub_49E90(int a1)
{
  int result; // eax

  *(_BYTE *)(a1 + 18) |= 2u;
  result = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  *(_WORD *)(a1 + 76) = result;
  return result;
}

//----- (0004ACC0) --------------------------------------------------------
void sub_4A980_4ACC0()
{
  char tempPath[40];
  FILE* file;

  if ( sub_505A0_508E0() )
    byte_12CBC9_12CBB9 = 7;
  else
    byte_12CBC9_12CBB9 = 0;
  byte_12CBD4_12CBC4 = 0;
  word_12CBC0_12CBB0 = 0;
  word_12CBC2_12CBB2 = 0;
  word_12CBBC_12CBAC = 0;
  word_12CBBE_12CBAE = 0;
  byte_12CBCA_12CBBA = 0;
  byte_12CBC6_12CBB6 = 0;
  byte_12CBCD_12CBBD = 0;
  byte_12CBD0_12CBC0 = 0;
  byte_12CBCF_12CBBF = 2;
  byte_12CBD1_12CBC1 = 2;
  byte_12CBCC_12CBBC = 1;
  dword_12CBB0_12CBA0 = 0;
  byte_12CBD5_12CBC5 = byte_12CBD5_12CBC5 & 0x40 | 2;
  byte_12CBD2_12CBC2 = 6;
  byte_12CBD6_12CBC6 &= 0xF8u;
  mainMenuSelector_12CBCE_12CBBE = 6;
  byte_12CBD3_12CBC3 = 0;
  sprintf(str_AE408_AE3F8->textBuffer_117, "CARPET%d", 0);
  sprintf(tempPath, "%s%s\\intro.pld", "C:", "\\carpet.cd");
  file = DataFileIO::CreateOrOpenFile(FixPath(tempPath), 514);
  if (file == nullptr )
  {
    byte_12CBD5_12CBC5 &= ~2u;
    file = DataFileIO::CreateOrOpenFile(FixPath(tempPath), 546);
    if (file != nullptr )
    {
      FileWrite_62ED0_633E0(file, (uint8_t*)file, sizeof(uint8_t*));
      DataFileIO::Close(file);
    }
  }
  else
  {
    DataFileIO::Close(file);
  }
  str_AE408_AE3F8->var_u8_151 = 0;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 12CBA0: using guessed type int dword_12CBB0_12CBA0;
// 12CBAC: using guessed type __int16 word_12CBBC_12CBAC;
// 12CBAE: using guessed type __int16 word_12CBBE_12CBAE;
// 12CBB0: using guessed type __int16 word_12CBC0_12CBB0;
// 12CBB2: using guessed type __int16 word_12CBC2_12CBB2;
// 12CBB6: using guessed type char byte_12CBC6_12CBB6;
// 12CBB9: using guessed type char byte_12CBC9_12CBB9;
// 12CBBA: using guessed type char byte_12CBCA_12CBBA;
// 12CBBC: using guessed type char byte_12CBCC_12CBBC;
// 12CBBD: using guessed type char byte_12CBCD_12CBBD;
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBBF: using guessed type char byte_12CBCF_12CBBF;
// 12CBC0: using guessed type char byte_12CBD0_12CBC0;
// 12CBC1: using guessed type char byte_12CBD1_12CBC1;
// 12CBC2: using guessed type char byte_12CBD2_12CBC2;
// 12CBC3: using guessed type char byte_12CBD3_12CBC3;
// 12CBC4: using guessed type char byte_12CBD4_12CBC4;
// 12CBC5: using guessed type char byte_12CBD5_12CBC5;
// 12CBC6: using guessed type char byte_12CBD6_12CBC6;
// 4ACC0: using guessed type int var_C[3];

//----- (0004AE60) --------------------------------------------------------
void sub_4AB20_4AE60()//_21BE60
{
  int v5; // eax

  if ( bool_12CA7C_12CA6C )
  {
    sub_40440_40780(&pathStrArray_21AB80_21AEC0[PSdatascreenssptrsdat]);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    {
      sub_65D70_66280((uint8_t*)begSptrsTab_12CAEC_2EAAEC_2EAADC, test_12CAF0_2EAAF0_2EAAE0, begSptrsDat_12CB64_2EAB64_2EAAE4);
    }
    else
    {
      sub_65DC0_662D0((uint8_t*)begSptrsTab_12CAEC_2EAAEC_2EAADC, test_12CAF0_2EAAF0_2EAAE0, begSptrsDat_12CB64_2EAB64_2EAAE4);
    }
    bool_12CA7C_12CA6C = false;
  }
  sub_50770_50AB0();
  //fix !!!
  mainMenuSelector_12CBCE_12CBBE = 6;
  //fix !!!
  switch ( mainMenuSelector_12CBCE_12CBBE )
  {
    case 0:
      sub_4D6F0();
      break;
    case 1:
      sub_4AC70_4AFB0();
      break;
    case 2:
      sub_4C0A0();
      break;
    case 4:
      sub_4D9C0();
      break;
    case 5:
      sub_4E8F0();
      break;
    case 6:
      sub_4F3F0_4F730();
      break;
    case 7:
      sub_4EFC0_4F300();
      break;
    case 8:
      sub_4F520();
      break;
    case 9:
      sub_4F1B0();
      break;
    case 10:
      sub_4D8A0();
    default:
      break;
  }
  ++dword_12CBB0_12CBA0;
  sub_66310();
  if ( bool_96880 )
  {
    sub_61610_61B20((Pathstruct*)(char*)"data\\screens\\sptrs.dat");
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_411D7_41517((void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u, 0);
    else
      sub_411FD_4153D((void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u, 0);
    bool_12CA7C_12CA6C = true;
    sub_20E60_20E60();
  }
}
// 96880: using guessed type int bool_96880;
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12CA6C: using guessed type int bool_12CA7C_12CA6C;
// 12CADC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CAE0: using guessed type int test_12CAF0_2EAAF0_2EAAE0;
// 12CAE4: using guessed type int begSptrsDat_12CB64_2EAB64_2EAAE4;
// 12CBA0: using guessed type int dword_12CBB0_12CBA0;
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004AFB0) --------------------------------------------------------
void sub_4AC70_4AFB0()
{
  __int64 v2; // rax
  int v3; // esi
  int v4; // eax
  int v5; // eax
  int v6; // ebx
  int v7; // eax
  int v8; // eax
  int v9; // eax
  int v10; // ebx
  FILE* v11; // eax
  FILE* v12; // ebx
  char v13[40]; // [esp+0h] [ebp-3Ch] BYREF
  char v14; // [esp+28h] [ebp-14h]

  BYTE4(v2) = byte_12CBD5_12CBC5;
  v3 = 0;
  v14 = 0;
  if ( (byte_12CBD5_12CBC5 & 1) == 0 )
    sub_4BB20_4BE60();
  if ( pressedKeys_12EEF0_12EEE0[1] )
  {
    pressedKeys_12EEF0_12EEE0[1] = 0;
    v3 = 1;
    v14 = 1;
  }
  if ( (byte_12CAE4_12CAD4 & 1) != 0 || (byte_12CAE4_12CAD4 & 0x40) != 0 )
  {
    v4 = dword_12CACC >> 1;
    if ( v4 >= 280 && v4 <= 302 )
    {
      v5 = MEMORY[0x12CACE] >> 1;
      if ( v5 >= 121 && v5 <= 147 && byte_12CBC9_12CBB9 == 7 )
      {
        BYTE4(v2) = 1;
        pressedKeys_12EEF0_12EEE0[1] = 0;
        v14 = 1;
      }
    }
  }
  BYTE5(v2) = -1;
  LODWORD(v2) = dword_12CACC >> 1;
  byte_12CBBB = -1;
  if ( (int)v2 >= 56 && (int)v2 <= 146 )
  {
    HIDWORD(v2) = MEMORY[0x12CACE] >> 1;
    if ( SHIDWORD(v2) >= 64 && SHIDWORD(v2) <= 143 )
    {
      if ( byte_12CBC9_12CBB9 == 7 )
      {
        if ( (byte_12CAE4_12CAD4 & 1) != 0 )
        {
          byte_12CAE4_12CAD4 &= ~1u;
          byte_12CBC9_12CBB9 = 0;
        }
      }
      else
      {
        v6 = str_96884.var8_5 - 2;
        LODWORD(v2) = (HIDWORD(v2) - 64) / v6;
        HIDWORD(v2) = (HIDWORD(v2) - 64) % v6;
        byte_12CBBB = v2;
      }
    }
  }
  if ( (byte_12CAE4_12CAD4 & 1) != 0 )
  {
    WORD2(v2) = 0;
    LODWORD(v2) = dword_12CACC >> 1;
    mouseLeftButton_12EFDE_12EFCE = 0;
    if ( (int)v2 < 171 || (int)v2 > 264 || (v7 = MEMORY[0x12CACE] >> 1, v7 < 42) || v7 > 147 )
    {
      v8 = dword_12CACC >> 1;
      if ( v8 >= 56 && v8 <= 146 )
      {
        v9 = MEMORY[0x12CACE] >> 1;
        if ( v9 >= 64 && v9 <= 143 )
        {
          switch ( byte_12CBC9_12CBB9 )
          {
            case 0:
              if ( sub_4B860() )
              {
                sprintf((char*)word_12C9C0_12C9B0, "%s", off_4A9AC[2 * (unsigned __int8)byte_12CBBB]);
                sprintf((char*)byte_12C9A0_12C990, "%s", off_4A9B0[2 * (unsigned __int8)byte_12CBBB]);
                byte_12CBC9_12CBB9 = 1;
              }
              break;
            case 1:
              if ( sub_4B860() )
              {
                HIDWORD(v2) = (uint32)off_4AA0C[2 * (unsigned __int8)byte_12CBBB];
                sprintf((char*)word_12C9E0_12C9D0, "%s", (const char *)HIDWORD(v2));
                sprintf(byte_12CA00_12C9F0, "%s", off_4AA10[2 * (unsigned __int8)byte_12CBBB]);
                if ( !strcmp(byte_12C9A0_12C990, aNone) )
                {
                  if ( strcmp(byte_12CA00_12C9F0, aNone) )
                    goto LABEL_43;
                  byte_12CBC9_12CBB9 = 6;
                }
                else
                {
                  byte_12CBC9_12CBB9 = 2;
                }
              }
              break;
            case 2:
              if ( sub_4B860() )
              {
                sprintf((char*)word_12CA80_12CA70, "%s", off_4AA74[2 * (unsigned __int8)byte_12CBBB]);
                sprintf((char*)word_12CA9E_12CA8E, "%s", off_4AA78[2 * (unsigned __int8)byte_12CBBB]);
                byte_12CBC9_12CBB9 = 3;
              }
              break;
            case 3:
              if ( sub_4B860() )
              {
                sprintf((char*)word_12CA8A_12CA7A, "%s", off_4AA8C[2 * (unsigned __int8)byte_12CBBB]);
                sprintf((char*)word_12CAB2_12CAA2, "%s", (&off_4AA90)[2 * (unsigned __int8)byte_12CBBB]);
                byte_12CBC9_12CBB9 = 4;
              }
              break;
            case 4:
              if ( sub_4B860() )
              {
                sprintf((char*)mouseX_12CAE0_12CAD0_12CAC0, "%s", (const char *)off_4AABC[2 * (unsigned __int8)byte_12CBBB]);
                HIDWORD(v2) = (uint32)(&off_4AAC0)[2 * (unsigned __int8)byte_12CBBB];
                sprintf((char*)&word_12CAC6_12CAB6, "%s", (const char *)HIDWORD(v2));
                byte_12CBC9_12CBB9 = 5;
                if ( !strcmp(byte_12CA00_12C9F0, aWblast)
                  || !strcmp(byte_12CA00_12C9F0, aRoland)
                  || !strcmp(byte_12CA00_12C9F0, aGeneral)
                  || !strcmp(byte_12CA00_12C9F0, aSbawe32) )
                {
LABEL_43:
                  byte_12CBC9_12CBB9 = 5;
                }
                else
                {
                  byte_12CBC9_12CBB9 = 6;
                  sprintf((char*)word_12CA94_12CA84, "%s", &aE388[1]);
                  sprintf((char*)word_12CAA8_12CA98, "%s", &aE388[1]);
                }
              }
              break;
            case 5:
              if ( sub_4B860() )
              {
                sprintf((char*)word_12CA94_12CA84, "%s", (const char*)*(&off_4AADC + 2 * (unsigned __int8)byte_12CBBB));
                sprintf((char*)word_12CAA8_12CA98, "%s", (const char*)*(&off_4AAE0 + 2 * (unsigned __int8)byte_12CBBB));
                BYTE5(v2) = 6;
                byte_12CBC9_12CBB9 = 6;
              }
              break;
            case 6:
              if ( sub_4B860() )
              {
                HIDWORD(v2) = (uint32)off_4AAF4[2 * (unsigned __int8)byte_12CBBB];
                sprintf((char*)&word_12CA20_12CA10, "%s", (const char *)HIDWORD(v2));
                sprintf((char*)&dword_12CABC_12CAAC, "%s", (const char *)(&off_4AAF8)[2 * (unsigned __int8)byte_12CBBB]);
                if ( !strcmp((char*)&dword_12CABC_12CAAC, (char*)&dword_A99A0_A99B8) )
                {
                  sprintf(v13, "%s%s\\sndsetup.inf", "C:", "\\carpet.cd");
                  v2 = (long long)fopen(v13, &aNewt[2]);
                  v10 = v2;
                  if ( (_DWORD)v2 )
                  {
                    fprintf(
                        (FILE*)v2,
                      "SOUNDFX = %s %s %s %s\n",
                      byte_12C9A0_12C990,
                      (const char *)word_12CA9E_12CA8E,
                      (const char *)word_12CAB2_12CAA2,
                      (const char *)&word_12CAC6_12CAB6);
                    fprintf((FILE*)v10, "MUSIC = %s %s 0 0 \n", byte_12CA00_12C9F0, (const char *)word_12CAA8_12CA98);
                    fclose((FILE*)v10);
                  }
                  sprintf(v13, "%s%s\\sndsetup.dat", "C:", "\\carpet.cd");
                  v11 = DataFileIO::CreateOrOpenFile((char*)v13, 546);
                  v12 = v11;
                  if ( v11 != nullptr )
                  {
                    FileWrite_62ED0_633E0(v11, (uint8_t*)byte_12C9A0_12C990, 32);
                    FileWrite_62ED0_633E0(v12, (uint8_t*)word_12C9C0_12C9B0, 32);
                    FileWrite_62ED0_633E0(v12, (uint8_t*)byte_12CA00_12C9F0, 32);
                    FileWrite_62ED0_633E0(v12, (uint8_t*)word_12C9E0_12C9D0, 32);
                    FileWrite_62ED0_633E0(v12, (uint8_t*)word_12CA9E_12CA8E, 10);
                    FileWrite_62ED0_633E0(v12, (uint8_t*)word_12CA80_12CA70, 10);
                    FileWrite_62ED0_633E0(v12, (uint8_t*)word_12CAB2_12CAA2, 10);
                    FileWrite_62ED0_633E0(v12, (uint8_t*)word_12CA8A_12CA7A, 10);
                    FileWrite_62ED0_633E0(v12, (uint8_t*)&word_12CAC6_12CAB6, 10);
                    FileWrite_62ED0_633E0(v12, (uint8_t*)mouseX_12CAE0_12CAD0_12CAC0, 10);
                    FileWrite_62ED0_633E0(v12, (uint8_t*)word_12CAA8_12CA98, 10);
                    FileWrite_62ED0_633E0(v12, (uint8_t*)word_12CA94_12CA84, 10);
                    DataFileIO::Close(v12);
                  }
                  byte_12CBC9_12CBB9 = 7;
                }
                else
                {
                  byte_12CBC9_12CBB9 = 0;
                }
              }
              break;
            default:
              break;
          }
        }
      }
    }
    else
    {
      if ( ++byte_12CBD3_12CBC3 == 7 )
      {
        byte_12CBD3_12CBC3 = 0;
      }
      if ( byte_12CBD3_12CBC3 == 3 )
        byte_12CBD3_12CBC3 = 4;
      if ( byte_12CBD3_12CBC3 == 5 )
        byte_12CBD3_12CBC3 = 6;
    }
  }
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    WORD2(v2) = (int)begWscreen_2ECFF4_2ECFE4;
    CopyScreen_62FA8_634B8((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0xC8u);
  }
  else
  {
    CopyScreen_62FC4_634D4((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  }
  sub_4B560_4B8A0();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  if ( v14 )
  {
    sub_52130(word_4AC04[4 * (unsigned __int8)byte_12CBD3_12CBC3]);
    sub_4BC90_4BFD0();
    if ( byte_12CBD5_12CBC5 >= 0 )
    {
      sub_357C0_35B80();
      byte_12CBD5_12CBC5 |= 0x80u;
    }
    if ( (byte_12CBD5_12CBC5 & 2) != 0 && (byte_12CBD5_12CBC5 & 4) != 0 && (byte_12CAE4_12CAD4 & 0x40) == 0 || v3 )
      mainMenuSelector_12CBCE_12CBBE = 2;
    else
      mainMenuSelector_12CBCE_12CBBE = 7;
    byte_12CAE4_12CAD4 &= 0xBEu;
  }
}
// 4A9AC: using guessed type char *off_4A9AC[22];
// 4A9B0: using guessed type char *off_4A9B0[21];
// 4AA0C: using guessed type char *off_4AA0C[24];
// 4AA10: using guessed type char *off_4AA10[23];
// 4AA74: using guessed type char *off_4AA74[4];
// 4AA78: using guessed type char *off_4AA78[3];
// 4AA8C: using guessed type char *off_4AA8C[2];
// 4AA90: using guessed type char *off_4AA90;
// 4AABC: using guessed type __int16 *off_4AABC[2];
// 4AAC0: using guessed type __int16 *off_4AAC0;
// 4AADC: using guessed type void *off_4AADC;
// 4AAE0: using guessed type void *off_4AAE0;
// 4AAF4: using guessed type int *off_4AAF4[2];
// 4AAF8: using guessed type int *off_4AAF8;
// 4AC04: using guessed type __int16 word_4AC04[];
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 62BE2: using guessed type __int64 fopen(_DWORD, _DWORD);
// 62C91: using guessed type _DWORD fprintf(_DWORD, _DWORD, ...);
// 62CB6: using guessed type _DWORD fclose(_DWORD);
// 63EF0: using guessed type _DWORD strcmp(_DWORD, _DWORD);
// 96884: using guessed type int dword_96884;
// A99B8: using guessed type int dword_A99A0_A99B8;
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12C9B0: using guessed type __int16 word_12C9C0_12C9B0[16];
// 12C9D0: using guessed type __int16 word_12C9E0_12C9D0[16];
// 12CA10: using guessed type __int16 word_12CA20_12CA10;
// 12CA70: using guessed type __int16 word_12CA80_12CA70[5];
// 12CA7A: using guessed type __int16 word_12CA8A_12CA7A[5];
// 12CA84: using guessed type __int16 word_12CA94_12CA84[5];
// 12CA8E: using guessed type __int16 word_12CA9E_12CA8E[5];
// 12CA98: using guessed type __int16 word_12CAA8_12CA98[5];
// 12CAA2: using guessed type __int16 word_12CAB2_12CAA2[5];
// 12CAAC: using guessed type int dword_12CABC_12CAAC;
// 12CAB6: using guessed type __int16 word_12CAC6_12CAB6;
// 12CAC0: using guessed type __int16 mouseX_12CAE0_12CAD0_12CAC0[6];
// 12CACC: using guessed type __int16 word_12CACC;
// 12CACE: using guessed type __int16 word_12CACE;
// 12CAD4: using guessed type char byte_12CAE4_12CAD4;
// 12CBB9: using guessed type char byte_12CBC9_12CBB9;
// 12CBBB: using guessed type char byte_12CBBB;
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBC3: using guessed type char byte_12CBD3_12CBC3;
// 12CBC5: using guessed type char byte_12CBD5_12CBC5;
// 12EEE1: using guessed type char pressedKeys_12EEF0_12EEE0[1];
// 12EFCE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004B770) --------------------------------------------------------
int sub_4B770()
{
  int result; // eax

  result = 0;
  if ( (pressedKeys_12EEF0_12EEE0[42] || pressedKeys_12EEF0_12EEE0[54]) && lastPressedKey_12EF70_12EF60 == 16 )
  {
    bool_96880 = true;
    *(_BYTE *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13327) = 1;
    return 1;
  }
  return result;
}
// 96880: using guessed type int bool_96880;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// 12EF0A: using guessed type char pressedKeys_12EEF0_12EEE0[42];
// 12EF16: using guessed type char pressedKeys_12EEF0_12EEE0[54];
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;

//----- (0004B7C0) --------------------------------------------------------
int sub_4B7C0(int (*a1)(void), int a2)
{
  int v2; // ebx
  unsigned int v3; // esi
  int result; // eax

  v2 = 0;
  v3 = dword_AC5D4_AC5C4 + 120 * a2;
  do
  {
    result = sub_4B770();
    if ( result )
      v2 = 1;
    if ( mouseLeftButton_12EFDE_12EFCE || mouseRightButton_12EFDC_12EFCC || word_12EFDA_12EFCA || lastPressedKey_12EF70_12EF60 )
    {
      lastPressedKey_12EF70_12EF60 = 0;
      result = 0;
      word_12EFDA_12EFCA = 0;
      mouseRightButton_12EFDC_12EFCC = 0;
      mouseLeftButton_12EFDE_12EFCE = 0;
      v2 = 1;
    }
    if ( v3 < dword_AC5D4_AC5C4 )
      v2 = 1;
    if ( !v2 )
    {
      if ( a1 )
        result = a1();
    }
  }
  while ( !v2 );
  return result;
}
// AC5C4: using guessed type int dword_AC5D4_AC5C4;
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFCA: using guessed type __int16 word_12EFDA_12EFCA;
// 12EFCC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFCE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;

//----- (0004B860) --------------------------------------------------------
int sub_4B860()
{
  char **v0; // eax
  int v1; // esi
  char i; // dl

  v0 = sub_4B9E0();
  v1 = 1;
  for ( i = 0; **v0 != 33 && i != byte_12CBBB; ++i )
    v0 += 2;
  if ( **v0 == 33 )
    return 0;
  return v1;
}
// 12CBBB: using guessed type char byte_12CBBB;

//----- (0004B8A0) --------------------------------------------------------
void sub_4B560_4B8A0()
{
  unsigned __int8 **v0; // eax

  sub_51720();
  sub_516A0(56, 64, 90, 78);
  v0 = (unsigned __int8 **)sub_4B9E0();
  if ( v0 )
    sub_4BA30(v0);
  else
    sub_4B8D0_4BC10(0);
  if ( byte_12CBC9_12CBB9 == 7 )
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(554, 224, (TypeTab*)(begGcSprTab_12CAF8_2EAAF8_2EAAE8 + 66));
    else
      DrawBitmap_60D18_61228(554, 224, (TypeTab*)(begGcSprTab_12CAF8_2EAAF8_2EAAE8 + 66));
  }
  sub_51740();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    DrawBitmap_60CE0_611F0(
             2 * word_4ABFE[4 * (unsigned __int8)byte_12CBD3_12CBC3],
             2 * word_4AC00[4 * (unsigned __int8)byte_12CBD3_12CBC3],
        (TypeTab*)(begGcSprTab_12CAF8_2EAAF8_2EAAE8 + 6 * word_4AC02[4 * (unsigned __int8)byte_12CBD3_12CBC3]));
  else
    DrawBitmap_60D18_61228(
             2 * word_4ABFE[4 * (unsigned __int8)byte_12CBD3_12CBC3],
             2 * word_4AC00[4 * (unsigned __int8)byte_12CBD3_12CBC3],
        (TypeTab*)(begGcSprTab_12CAF8_2EAAF8_2EAAE8 + 6 * word_4AC02[4 * (unsigned __int8)byte_12CBD3_12CBC3]));
}
// 4ABFE: using guessed type __int16 word_4ABFE[];
// 4AC00: using guessed type __int16 word_4AC00[];
// 4AC02: using guessed type __int16 word_4AC02[];
// 12CAE8: using guessed type int begGcSprTab_12CAF8_2EAAF8_2EAAE8;
// 12CBB9: using guessed type char byte_12CBC9_12CBB9;
// 12CBC3: using guessed type char byte_12CBD3_12CBC3;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004B9E0) --------------------------------------------------------
char **sub_4B9E0()
{
  char **result; // eax

  //fix
  result = 0;
  //fix

  switch ( byte_12CBC9_12CBB9 )
  {
    case 0:
      result = off_4A9AC;
      break;
    case 1:
      result = off_4AA0C;
      break;
    case 2:
      result = off_4AA74;
      break;
    case 3:
      result = off_4AA8C;
      break;
    case 4:
      result = (char **)off_4AABC;
      break;
    case 5:
      result = (char **)&off_4AADC;
      break;
    case 6:
      result = (char **)off_4AAF4;
      break;
    case 7:
      result = 0;
      break;
    default:
      return result;
  }
  return result;
}
// 4A9AC: using guessed type char *off_4A9AC[22];
// 4AA0C: using guessed type char *off_4AA0C[24];
// 4AA74: using guessed type char *off_4AA74[4];
// 4AA8C: using guessed type char *off_4AA8C[2];
// 4AABC: using guessed type __int16 *off_4AABC[2];
// 4AADC: using guessed type void *off_4AADC;
// 4AAF4: using guessed type int *off_4AAF4[2];
// 12CBB9: using guessed type char byte_12CBC9_12CBB9;

//----- (0004BA30) --------------------------------------------------------
void sub_4BA30(unsigned __int8 **a1)
{
  unsigned __int8 **v1; // esi
  int v2; // ebp
  char v3; // bl
  char v4; // bh
  int v5; // edi
  int v6; // ebp
  char v7; // al
  __int16 v8; // [esp-8h] [ebp-24h]
  unsigned __int8 *v9; // [esp-4h] [ebp-20h]
  char v10; // [esp+4h] [ebp-18h]
  char v11; // [esp+8h] [ebp-14h]

  v1 = a1;
  if ( a1 )
  {
    v2 = str_96884.var8_5;
    str_96884.var8_4 &= ~2u;
    str_96884.var8_5 = 0;
    v10 = sub_5CC70_5D180(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x26u, 0x22u, 0x19u);
    v3 = 0;
    v4 = sub_5CC70_5D180(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x1Eu, 0x18u, 0x11u);
    v5 = 0;
    v6 = v2 - 2;
    v7 = sub_5CC70_5D180(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x20u, 0x1Eu, 0x17u);
    v11 = v7;
    if ( byte_12CBC9_12CBB9 == 6 )
    {
        str_96884.var8_6 = v10;
      if ( !byte_12CBBB )
          str_96884.var8_6 = v7;
      if ( !byte_12CBCA_12CBBA )
          str_96884.var8_6 = v4;
      sub_518A0((uint8*)&str_96884, 0, 0, (unsigned __int8 *)dword_AE238_AE228[73]);
      str_96884.var8_6 = v10;
      if ( byte_12CBBB == 1 )
          str_96884.var8_6 = v11;
      if ( byte_12CBCA_12CBBA == 1 )
          str_96884.var8_6 = v4;
      sub_518A0((uint8*)&str_96884, 0, v6, (unsigned __int8 *)dword_AE238_AE228[74]);
    }
    else
    {
      while ( **v1 != 33 )
      {
          str_96884.var8_6 = v10;
        if ( v3 == byte_12CBBB )
            str_96884.var8_6 = v11;
        if ( v3 == byte_12CBCA_12CBBA )
            str_96884.var8_6 = v4;
        v9 = *v1;
        v8 = v5;
        v1 += 2;
        ++v3;
        v5 += v6;
        sub_518A0((uint8*)&str_96884, 0, v8, v9);
      }
    }
    if ( byte_12CBC9_12CBB9 == 6 )
      sub_4B8D0_4BC10(16);
    if ( (unsigned __int8)byte_12CBC9_12CBB9 < 7u )
    {
      sub_51720();
      sub_516A0(66, 43, 84, 14);
      str_96884.var8_6 = v4;
      sub_518A0(
        (uint8*)&str_96884,
        1,
        1,
        (unsigned __int8 *)dword_AE238_AE228[(unsigned __int16)word_968B4[(unsigned __int8)byte_12CBC9_12CBB9]]);
      sub_51740();
    }
  }
}
// 96884: using guessed type int dword_96884;
// 96888: using guessed type char byte_96888;
// 9688A: using guessed type char byte_9688A;
// 968B4: using guessed type __int16 word_968B4[8];
// AE228: using guessed type int dword_AE238_AE228[17];
// AE34C: using guessed type int dword_AE34C;
// AE350: using guessed type int dword_AE350;
// 12CB8C: using guessed type int begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C;
// 12CBB9: using guessed type char byte_12CBC9_12CBB9;
// 12CBBA: using guessed type char byte_12CBCA_12CBBA;
// 12CBBB: using guessed type char byte_12CBBB;

//----- (0004BC10) --------------------------------------------------------
void sub_4B8D0_4BC10(__int16 a1)
{
  __int16 v1; // si
  __int16 v2; // si
  __int16 v3; // di
  __int16 v4; // ax
  __int16 v5; // bx
  __int16 v6; // bx
  __int16 v7; // di
  __int16 v8; // ax
  __int16 v9; // bx
  __int16 v10; // bx
  __int16 v11; // [esp-8h] [ebp-58h]
  unsigned __int8 v12[40]; // [esp+0h] [ebp-50h] BYREF
  int v13; // [esp+28h] [ebp-28h] BYREF
  int v14; // [esp+2Ch] [ebp-24h]

  //fix
  v14 = 0;
  //fix

  v1 = str_96884.var8_5;
  sub_516E0((uint32*)&v13);
  str_96884.var8_6 = sub_5CC70_5D180(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x1Eu, 0x18u, 0x11u);
  sprintf((char*)v12, "%s :", (const char *)dword_AE238_AE228[17]);
  sub_518A0((uint8*)&str_96884, 0, a1, v12);
  v2 = v1 - 2;
  sprintf((char*)v12, "%s", (const char *)word_12C9C0_12C9B0);
  v3 = v14 - v13;
  v4 = sub_51760((uint32*)&str_96884, (char *)v12);
  sub_518A0((uint8*)&str_96884, (__int16)(v3 - v4), v2 + a1, v12);
  sprintf((char*)v12, "%s :", (const char *)dword_AE238_AE228[18]);
  v5 = v2 + v2 + a1;
  sub_518A0((uint8*)&str_96884, 0, v5, v12);
  v6 = v2 + v5;
  sprintf((char*)v12, "%s", (const char *)word_12C9E0_12C9D0);
  v7 = v14 - v13;
  v8 = sub_51760((uint32*)&str_96884, (char *)v12);
  sub_518A0((uint8*)&str_96884, (__int16)(v7 - v8), v6, v12);
  v9 = v2 + v6;
  if ( strncmp((char*)&byte_12C9A0_12C990, aNone, 4) )
  {
    sprintf((char*)v12, "%s : %s\n", (const char *)dword_AE238_AE228[23], (const char *)word_12CA80_12CA70);
    sub_518A0((uint8*)&str_96884, 0, v9, v12);
    sprintf((char*)v12, "%s : %s\n", (const char *)dword_AE238_AE228[24], (const char *)word_12CA8A_12CA7A);
    v10 = v2 + v9;
    sub_518A0((uint8*)&str_96884, 0, v10, v12);
    sprintf((char*)v12, "%s : %s\n", (const char *)dword_AE238_AE228[25], (const char *)mouseX_12CAE0_12CAD0_12CAC0);
    v11 = v2 + v10;
    v9 = v2 + v2 + v10;
    sub_518A0((uint8*)&str_96884, 0, v11, v12);
  }
  if ( strncmp((char*)&byte_12CA00_12C9F0, aNone, 4) )
  {
    sprintf((char*)v12, "%s : %s\n", (const char *)dword_AE238_AE228[26], (const char *)word_12CA94_12CA84);
    sub_518A0((uint8*)&str_96884, 0, v9, v12);
  }
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 6637F: using guessed type _DWORD strncmp(_DWORD, _DWORD, _DWORD);
// 96884: using guessed type int dword_96884;
// 9688A: using guessed type char byte_9688A;
// AE26C: using guessed type int dword_AE26C;
// AE270: using guessed type int dword_AE270;
// AE284: using guessed type int dword_AE284;
// AE288: using guessed type int dword_AE288;
// AE28C: using guessed type int dword_AE28C;
// AE290: using guessed type int dword_AE290;
// 12C9B0: using guessed type __int16 word_12C9C0_12C9B0[16];
// 12C9D0: using guessed type __int16 word_12C9E0_12C9D0[16];
// 12CA70: using guessed type __int16 word_12CA80_12CA70[5];
// 12CA7A: using guessed type __int16 word_12CA8A_12CA7A[5];
// 12CA84: using guessed type __int16 word_12CA94_12CA84[5];
// 12CAC0: using guessed type __int16 mouseX_12CAE0_12CAD0_12CAC0[6];
// 12CB8C: using guessed type int begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C;

//----- (0004BE60) --------------------------------------------------------
void sub_4BB20_4BE60()
{
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  sub_40440_40780(&pathStrArray_21AB80_21AEC0[PSdatascreenssfont0dat]);
  sub_3EEA0_3F1E0(aDataScreensGco, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC);
  sub_3EEA0_3F1E0(aDataScreensGco_0, (uint8_t*)begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_65D70_66280(begGcSprTab_12CAF8_2EAAF8_2EAAE8, test_12CAFC_2EAAFC_2EAAEC, begGcSprDat_12CB00_2EAB00_2EAAF0);
  else
    sub_65DC0_662D0(begGcSprTab_12CAF8_2EAAF8_2EAAE8, test_12CAFC_2EAAFC_2EAAEC, begGcSprDat_12CB00_2EAB00_2EAAF0);
  sub_51480_517C0((int)&str_96884, (uint32*)&begSFont0Tab_12CB28_2EAB28_2EAB18, begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C);
  str_96884.var8_4 &= ~2u;
  str_96884.var8_5 = 0;
  if ( !byte_90B23 )
    sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  FadeInOut_61CC0_621D0(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x20u, 0);
  byte_12CBD5_12CBC5 |= 1u;
  byte_12CAE4_12CAD4 &= 0xBEu;
}
// 90B23: using guessed type char byte_90B23;
// 96884: using guessed type int dword_96884;
// 96888: using guessed type char byte_96888;
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12CAD4: using guessed type char byte_12CAE4_12CAD4;
// 12CADC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CAE8: using guessed type int begGcSprTab_12CAF8_2EAAF8_2EAAE8;
// 12CAEC: using guessed type int test_12CAFC_2EAAFC_2EAAEC;
// 12CAF0: using guessed type int begGcSprDat_12CB00_2EAB00_2EAAF0;
// 12CB18: using guessed type _DWORD begSFont0Tab_12CB28_2EAB28_2EAB18;
// 12CB8C: using guessed type int begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C;
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBC5: using guessed type char byte_12CBD5_12CBC5;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004BFD0) --------------------------------------------------------
void sub_4BC90_4BFD0()
{
  int v0; // eax
  int result; // eax

  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  if ( !byte_90B23 )
    sub_5C05C_5C56C(0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  sub_61610_61B20((Pathstruct*)(char*)"data\\screens\\sfont0.dat");
  byte_12CBD5_12CBC5 &= ~1u;
}
// 4C00A: variable 'v0' is possibly undefined
// 90B23: using guessed type char byte_90B23;
// 12CBC5: using guessed type char byte_12CBD5_12CBC5;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004C0A0) --------------------------------------------------------
void sub_4C0A0()
{
  int v0; // esi
  int v1; // edi
  int v2; // ebp
  int v3; // ebx
  int v4; // ebx
  int v5; // edx
  int v6; // eax
  __int16 v7; // cx
  int v8; // ebx
  int v9; // ebx
  int v10; // ebx
  __int16 v11; // cx
  int v12; // ebx
  int v13; // ebx
  int v14; // ebx
  int v15; // eax
  char v16; // dl

  v0 = 0;
  v1 = 0;
  v2 = 0;
  if ( (byte_12CBD5_12CBC5 & 1) == 0 )
    sub_4CB20();
  sub_4C6F0_4CA30();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begScreenBackup2_12CBA8_2EABA8_2EAB98, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begScreenBackup2_12CBA8_2EABA8_2EAB98, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
  v3 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = begWscreen_2ECFF4_2ECFE4;
  begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v3;
  sub_4CEB0();
  /*v4 = begBscreen_AE3FC_AE3EC_26C3FC_26C3EC ^ (int)begWscreen_2ECFF4_2ECFE4;
  begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = (int)begWscreen_2ECFF4_2ECFE4;
  begWscreen_2ECFF4_2ECFE4 ^= v4;*/
  //fix
  v4 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = begWscreen_2ECFF4_2ECFE4;
  begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v4;
  //fix
  if ( pressedKeys_12EEF0_12EEE0[15] )
  {
    pressedKeys_12EEF0_12EEE0[15] = 0;
    if ( pressedKeys_12EEF0_12EEE0[42] || pressedKeys_12EEF0_12EEE0[54] )
      sub_4C980();
    else
      sub_4C9B0();
  }
  if ( (__int16)dword_12CACC >> 1 != word_12CBCA || SHIWORD(dword_12CACC) >> 1 != word_12CBC8 )
  {
    v5 = (__int16)dword_12CACC >> 1;
    if ( v5 < 320 )
    {
      v6 = SHIWORD(dword_12CACC) >> 1;
      if ( v6 < 200 )
      {
        word_12CBCA = (__int16)dword_12CACC >> 1;
        word_12CBC8 = SHIWORD(dword_12CACC) >> 1;
        byte_12CBC6_12CBB6 = *(_BYTE *)((__int16)v5 + (__int16)v6 * scrWidth_12EFF0_12EFE0 + begMmMaskDat_12CBA0_2EABA0_2EAB90);
        if ( !sub_4C9E0() )
          byte_12CBC6_12CBB6 = 0;
      }
    }
  }
  if ( pressedKeys_12EEF0_12EEE0[28] )
  {
    pressedKeys_12EEF0_12EEE0[28] = 0;
    byte_12CAE4_12CAD4 |= 1u;
  }
  if ( (byte_12CAE4_12CAD4 & 0x40) != 0 || lastPressedKey_12EF70_12EF60 == 1 )
  {
    lastPressedKey_12EF70_12EF60 = 0;
    byte_12CAE4_12CAD4 &= ~0x40u;
    if ( byte_12CBCD_12CBBD )
      byte_12CBCD_12CBBD = 0;
    byte_12CBC6_12CBB6 = *(_BYTE *)(begMmMaskDat_12CBA0_2EABA0_2EAB90 + word_12CBC8 * scrWidth_12EFF0_12EFE0 + word_12CBCA);
    if ( !sub_4C9E0() )
      byte_12CBC6_12CBB6 = 0;
  }
  if ( (byte_12CAE4_12CAD4 & 1) != 0 )
  {
    byte_12CAE4_12CAD4 &= ~1u;
    if ( byte_12CBC6_12CBB6 != 11 || !byte_9687C )
    {
      if ( *(int *)((char *)&dword_4A46C + 6 * (unsigned __int8)byte_12CBC6_12CBB6) )
      {
        (*(void (**)(void))((char *)&dword_4A46C + 6 * (unsigned __int8)byte_12CBC6_12CBB6))();
        if ( (byte_12CBD5_12CBC5 & 8) != 0 )
        {
          v0 = 1;
          byte_12CBD5_12CBC5 &= ~8u;
        }
        goto LABEL_79;
      }
      v7 = word_4A470[3 * (unsigned __int8)byte_12CBC6_12CBB6];
      if ( !v7 )
        goto LABEL_79;
      v8 = (int)begWscreen_2ECFF4_2ECFE4;
      if ( !byte_12CBCD_12CBBD )
      {
        if ( word_4A470[3 * (unsigned __int8)byte_12CBC6_12CBB6] == 3 )
        {
          v0 = 1;
          mainMenuSelector_12CBCE_12CBBE = 1;
        }
        goto LABEL_70;
      }
      if ( (unsigned __int8)byte_12CBCD_12CBBD <= 1u )
      {
        switch ( v7 )
        {
          case 1:
            if ( sub_4F8D0_sub_4FC10(0, (void (*)(int))sub_4CF40) )
              sub_51E30(1);
            break;
          case 2:
            if ( sub_4F8D0_sub_4FC10(0, (void (*)(int))sub_4CF40) )
              sub_51E30(2);
            break;
          case 3:
            if ( sub_4F8D0_sub_4FC10(0, (void (*)(int))sub_4CF40) )
              sub_51E30(3);
            break;
          case 4:
            if ( sub_4F8D0_sub_4FC10(0, (void (*)(int))sub_4CF40) )
              sub_51E30(4);
            break;
          case 5:
            if ( sub_4F8D0_sub_4FC10(0, (void (*)(int))sub_4CF40) )
              sub_51E30(5);
            break;
          case 6:
            if ( sub_4F8D0_sub_4FC10(0, (void (*)(int))sub_4CF40) )
              sub_51E30(6);
            break;
          default:
            break;
        }
        v1 = 1;
        if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        {
LABEL_67:
          CopyScreen_62FA8_634B8((const void *)begScreenBackup2_12CBA8_2EABA8_2EAB98, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
LABEL_69:
          v9 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
          begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = begWscreen_2ECFF4_2ECFE4;
          begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v9;
          sub_4CEB0();
          /*
          v10 = begBscreen_AE3FC_AE3EC_26C3FC_26C3EC ^ (int)begWscreen_2ECFF4_2ECFE4;
          begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = begWscreen_2ECFF4_2ECFE4;
          v8 = (int)begWscreen_2ECFF4_2ECFE4 ^ v10;
          */
          //fix
          v10 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
          begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = (uint8_t*)begWscreen_2ECFF4_2ECFE4;
          v8 = v10;
          //fix
          goto LABEL_70;
        }
      }
      else
      {
        if ( byte_12CBCD_12CBBD != 2 )
        {
LABEL_70:
          if ( v1 )
          {
            begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v8;
            byte_12CBCD_12CBBD = 0;
          }
          else
          {
            begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v8;
            if ( !byte_12CBCD_12CBBD )
            {
              v11 = word_4A470[3 * (unsigned __int8)byte_12CBC6_12CBB6];
              if ( v11 == 1 || v11 == 2 )
              {
                byte_12CBCD_12CBBD = word_4A470[3 * (unsigned __int8)byte_12CBC6_12CBB6];
                if ( (typeResolution_12F02E_12F01E & 1) != 0 )
                  CopyScreen_62FA8_634B8((const void *)begScreenBackup2_12CBA8_2EABA8_2EAB98, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
                else
                  CopyScreen_62FC4_634D4((const void *)begScreenBackup2_12CBA8_2EABA8_2EAB98, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
                v12 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
                begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = begWscreen_2ECFF4_2ECFE4;
                begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v12;
                sub_4CEB0();
                v13 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
                begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = begWscreen_2ECFF4_2ECFE4;
                begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v13;
              }
            }
          }
          goto LABEL_79;
        }
        switch ( v7 )
        {
          case 1:
            if ( sub_4CCA0_4CFE0(0) )
              sub_51FD0(1);
            break;
          case 2:
            if ( sub_4CCA0_4CFE0(0) )
              sub_51FD0(2);
            break;
          case 3:
            if ( sub_4CCA0_4CFE0(0) )
              sub_51FD0(3);
            break;
          case 4:
            if ( sub_4CCA0_4CFE0(0) )
              sub_51FD0(4);
            break;
          case 5:
            if ( sub_4CCA0_4CFE0(0) )
              sub_51FD0(5);
            break;
          case 6:
            if ( sub_4CCA0_4CFE0(0) )
              sub_51FD0(6);
            break;
          default:
            break;
        }
        v1 = 1;
        if ( (typeResolution_12F02E_12F01E & 1) != 0 )
          goto LABEL_67;
      }
      CopyScreen_62FC4_634D4((const void *)begScreenBackup2_12CBA8_2EABA8_2EAB98, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
      goto LABEL_69;
    }
  }
LABEL_79:
  if ( byte_12CBC6_12CBB6 == 11 && byte_9687C || !byte_12CBC6_12CBB6 )
    sub_521C4((_BYTE *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (_BYTE *)begWscreen_2ECFF4_2ECFE4, (_BYTE *)begMmMaskDat_12CBA0_2EABA0_2EAB90, (int)begBrightTable_12CBAC_2EABAC_2EAB9C, 255);
  else
    sub_521C4((_BYTE *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (_BYTE *)begWscreen_2ECFF4_2ECFE4, (_BYTE *)begMmMaskDat_12CBA0_2EABA0_2EAB90, (int)begBrightTable_12CBAC_2EABAC_2EAB9C, byte_12CBC6_12CBB6);
  if ( (byte_90B23 & 0x23) != 0 )
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(mouse_9AD90.x, mouse_9AD90.y, (TypeTab*)(begSptrsTab_12CAEC_2EAAEC_2EAADC + 6 * (unsigned __int8)mainMenuSelector_12CBCE_12CBBE));
    else
      DrawBitmap_60D18_61228(mouse_9AD90.x, mouse_9AD90.y, (TypeTab*)(begSptrsTab_12CAEC_2EAAEC_2EAADC + 6 * (unsigned __int8)mainMenuSelector_12CBCE_12CBBE));
  }
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  if ( sub_4C8C0() )
  {
    v14 = (int)begWscreen_2ECFF4_2ECFE4;
    if ( dword_12CBA4 + 4800 <= (unsigned int)dword_AC5D4_AC5C4 )
    {
      dword_12CBA4 = dword_AC5D4_AC5C4;
      if ( byte_12CBD4_12CBC4 )
      {
        if ( (unsigned __int8)byte_12CBD4_12CBC4 <= 1u )
        {
          mainMenuSelector_12CBCE_12CBBE = 8;
          byte_12CBD6_12CBC6 |= 2u;
          sub_20E60_20E60();
        }
        else if ( byte_12CBD4_12CBC4 == 2 )
        {
          byte_12CBD6_12CBC6 |= 4u;
          v2 = 1;
          dword_12CBA8 = *(unsigned __int16 *)(dword_AE408_AE3F8() + 17);
          bool_96880 = true;
          qmemcpy(&unk_12CA50, (const void *)(dword_AE400_AE3F0() + 15318), 0x18u);
          v15 = dword_AE408_AE3F8();
          *(_WORD *)(dword_AE408_AE3F8() + 13) = 0;
          *(_BYTE *)(v15 + 161) = 3;
          v16 = *(_BYTE *)v15;
          *(_DWORD *)(v15 + 162) = 200;
          *(_BYTE *)v15 = v16 | 0x24;
        }
      }
      else
      {
        mainMenuSelector_12CBCE_12CBBE = 0;
        byte_12CBD6_12CBC6 |= 1u;
        sub_20E60_20E60();
      }
      v14 = (int)begWscreen_2ECFF4_2ECFE4;
      if ( ++byte_12CBD4_12CBC4 == 3 )
        byte_12CBD4_12CBC4 = 0;
      v0 = 1;
    }
  }
  else
  {
    v14 = (int)begWscreen_2ECFF4_2ECFE4;
    dword_12CBA4 = dword_AC5D4_AC5C4;
  }
  begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v14;
  if ( v0 )
  {
    sub_4CAC0_4CE00();
    if ( v2 )
      mainMenuSelector_12CBCE_12CBBE = 2;
  }
}
// 4A46C: using guessed type int dword_4A46C;
// 4A470: using guessed type __int16 word_4A470[];
// 4CF40: using guessed type int sub_4CF40();
// 90B23: using guessed type char byte_90B23;
// 9687C: using guessed type char byte_9687C;
// 96880: using guessed type int bool_96880;
// 9AD90: using guessed type int dword_9AD90;
// AC5C4: using guessed type int dword_AC5D4_AC5C4;
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 12CACC: using guessed type int dword_12CACC;
// 12CAD4: using guessed type char byte_12CAE4_12CAD4;
// 12CADC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CB90: using guessed type int begMmMaskDat_12CBA0_2EABA0_2EAB90;
// 12CB98: using guessed type int begScreenBackup2_12CBA8_2EABA8_2EAB98;
// 12CB9C: using guessed type int begBrightTable_12CBAC_2EABAC_2EAB9C;
// 12CBA4: using guessed type int dword_12CBA4;
// 12CBA8: using guessed type int dword_12CBA8;
// 12CBB6: using guessed type char byte_12CBC6_12CBB6;
// 12CBBD: using guessed type char byte_12CBCD_12CBBD;
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBC4: using guessed type char byte_12CBD4_12CBC4;
// 12CBC5: using guessed type char byte_12CBD5_12CBC5;
// 12CBC6: using guessed type char byte_12CBD6_12CBC6;
// 12CBC8: using guessed type __int16 word_12CBC8;
// 12CBCA: using guessed type __int16 word_12CBCA;
// 12EEEF: using guessed type char pressedKeys_12EEF0_12EEE0[15];
// 12EEFC: using guessed type char pressedKeys_12EEF0_12EEE0[28];
// 12EF0A: using guessed type char pressedKeys_12EEF0_12EEE0[42];
// 12EF16: using guessed type char pressedKeys_12EEF0_12EEE0[54];
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFE0: using guessed type int scrWidth_12EFF0_12EFE0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004C8C0) --------------------------------------------------------
int sub_4C8C0()
{
  int result; // eax

  result = 1;
  if (mouse_9AD90.x != dword_968C4
    || mouse_9AD90.y != dword_968C8
    || lastPressedKey_12EF70_12EF60 != byte_12CBCC
    || mouseLeftButton2_12EFE4_12EFD4 != dword_968CC
    || mouseRightButton2_12EFE2_12EFD2 != dword_968D0
    || word_12EFE0_12EFD0 != dword_968D4
    || lastPressedKey_12EF70_12EF60 != byte_12CBCC )
  {
    dword_968C4 = mouse_9AD90.x;
    dword_968C8 = mouse_9AD90.y;
    dword_968CC = mouseLeftButton2_12EFE4_12EFD4;
    dword_968D0 = mouseRightButton2_12EFE2_12EFD2;
    dword_968D4 = word_12EFE0_12EFD0;
    byte_12CBCC = lastPressedKey_12EF70_12EF60;
    return 0;
  }
  return result;
}
// 968C4: using guessed type int dword_968C4;
// 968C8: using guessed type int dword_968C8;
// 968CC: using guessed type int dword_968CC;
// 968D0: using guessed type int dword_968D0;
// 968D4: using guessed type int dword_968D4;
// 9AD90: using guessed type __int16 word_9AD90;
// 9AD92: using guessed type __int16 word_9AD92;
// 12CBCC: using guessed type char byte_12CBCC;
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFD0: using guessed type __int16 word_12EFE0_12EFD0;
// 12EFD2: using guessed type __int16 mouseRightButton2_12EFE2_12EFD2;
// 12EFD4: using guessed type __int16 mouseLeftButton2_12EFE4_12EFD4;

//----- (0004C980) --------------------------------------------------------
bool sub_4C980()
{
  bool result; // eax

  do
  {
    if ( !--byte_12CBC6_12CBB6 )
      byte_12CBC6_12CBB6 = 11;
    result = sub_4C9E0();
  }
  while ( !result );
  return result;
}
// 12CBB6: using guessed type char byte_12CBC6_12CBB6;

//----- (0004C9B0) --------------------------------------------------------
bool sub_4C9B0()
{
  bool result; // eax

  do
  {
    if ( (unsigned __int8)++byte_12CBC6_12CBB6 > 0xBu )
      byte_12CBC6_12CBB6 = 1;
    result = sub_4C9E0();
  }
  while ( !result );
  return result;
}
// 12CBB6: using guessed type char byte_12CBC6_12CBB6;

//----- (0004C9E0) --------------------------------------------------------
bool sub_4C9E0()
{
  if ( (unsigned __int8)byte_12CBC6_12CBB6 <= 7u )
  {
    if ( byte_12CBC6_12CBB6 == 3 )
    {
      if ( byte_93958 != 1 )
        return 0;
    }
    else if ( byte_12CBC6_12CBB6 == 7 && !byte_12CBCD_12CBBD )
    {
      return 0;
    }
  }
  else
  {
    if ( byte_12CBC6_12CBB6 == 11 )
      return !byte_9687C;
    if ( !byte_12CBCD_12CBBD )
      return 0;
  }
  return 1;
}
// 93958: using guessed type char byte_93958;
// 9687C: using guessed type char byte_9687C;
// 12CBB6: using guessed type char byte_12CBC6_12CBB6;
// 12CBBD: using guessed type char byte_12CBCD_12CBBD;

//SYNCHRONIZED WITH REMC1
void sub_4C6F0_4CA30()//21D6F0_
{
    int result; // eax
    __int16 v1; // dx
    __int16 v2; // di

    result = dword_12CBB0_12CBA0 & 1;
    if (result == 1 && mainMenuSelector_12CBCE_12CBBE == 2)
    {
        //result = sub_1002D(dword_12CB7A_12CB6A, begScreenBackup2_12CBA8_2EABA8_2EAB98);
        v1 = word_12CB7E_12CB6E + 1;
        dword_12CB7A_12CB6A = sub_1002D(dword_12CB7A_12CB6A, begScreenBackup2_12CBA8_2EABA8_2EAB98);
        word_12CB7E_12CB6E = v1;
        if (v1 == 31)
        {
            //result = dword_12CB76_12CB66;
            word_12CB7E_12CB6E = 1;
            dword_12CB7A_12CB6A = dword_12CB76_12CB66;
        }
        else if (v1 == 1 && !dword_12CB76_12CB66)
        {
            //dword_12CB76_12CB66 = result;
            dword_12CB76_12CB66 = dword_12CB7A_12CB6A; //fixed
        }
        if (!byte_9687C)
        {
            //result = sub_1002D(dword_12CB88_12CB78, begScreenBackup2_12CBA8_2EABA8_2EAB98);
            v2 = word_12CB8C_12CB7C + 1;
            dword_12CB88_12CB78 = sub_1002D(dword_12CB88_12CB78, begScreenBackup2_12CBA8_2EABA8_2EAB98);
            word_12CB8C_12CB7C = v2;
            if (v2 == 4)
            {
                //result = dword_12CB84_12CB74;
                word_12CB8C_12CB7C = 1;
                dword_12CB88_12CB78 = dword_12CB84_12CB74;
            }
            else if (v2 == 1 && !dword_12CB84_12CB74)
            {
                //dword_12CB84_12CB74 = result;
                dword_12CB84_12CB74 = dword_12CB88_12CB78;//fixed
            }
        }
    }
}

//----- (0004CB20) --------------------------------------------------------
void sub_4CB20()
{
  int v0; // ecx
  const void *v1; // edi
  void *v2; // ebp
  void *v3; // edi

  sub_10010(320, 0);
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  sub_5D070_5D580(0xDu);
  sub_5CEF0_5D400(0);
  sub_40440_40780((Pathstruct*)"data\\screens\\mmspr.dat");
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_65D70_66280(begMmSprTab_12CB04_2EAB04_2EAAF4, test_12CB08_2EAB08_2EAAF8, begMmSprDat_12CB0C_2EAB0C_2EAAFC);
  else
    sub_65DC0_662D0(begMmSprTab_12CB04_2EAB04_2EAAF4, test_12CB08_2EAB08_2EAAF8, begMmSprDat_12CB0C_2EAB0C_2EAAFC);
  sub_51480_517C0((int)&str_9688C, (uint32_t*)&begSFont1Tab_12CB34_2EAB34_2EAB24, begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C);
  str_9688C.var8_4 &= ~2u;
  str_9688C.var8_5 = 0;
  sub_3EEA0_3F1E0(aDataScreensMai, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begScreenBackup2_12CBA8_2EABA8_2EAB98, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begScreenBackup2_12CBA8_2EABA8_2EAB98, 0x1E0u);
  sub_3EEA0_3F1E0(aDataScreensMai_0, (uint8_t*)begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C);
  sub_507E0();
  sub_51D50();
  v0 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = begWscreen_2ECFF4_2ECFE4;
  begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v0;
  sub_4CEB0();
  v1 = (const void *)begWscreen_2ECFF4_2ECFE4;
  v2 = (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = begWscreen_2ECFF4_2ECFE4;
  begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v2;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(v1, v2, 0xC8u);
  else
    CopyScreen_62FC4_634D4(v1, v2, 0x1E0u);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  if ( !byte_90B23 )
    sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
  FadeInOut_61CC0_621D0(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x20u, 0);
  dword_12CB76_12CB66 = 0;
  dword_12CB84_12CB74 = 0;
  word_12CB8C_12CB7C = 0;
  byte_12CBD5_12CBC5 |= 1u;
  byte_12CBC6_12CBB6 = 0;
  dword_12CB7A_12CB6A = begGlobeDat_12CB72_2EAB72_2EAB62;
  word_12CB7E_12CB6E = 0;
  dword_12CB88_12CB78 = begTimerDat_12CB80_2EAB80_2EAB70;
  byte_967E4 = 1;
  byte_12CAE4_12CAD4 &= 0xBEu;
  dword_12CBA4 = dword_AC5D4_AC5C4;
  FlvInitSet_356E0_35AA0();
  sub_5D290_5D7A0(4);
  if ( (byte_12CBD6_12CBC6 & 4) != 0 )
  {
    v3 = (void *)(dword_AE400_AE3F0() + 15318);
    *(_WORD *)(dword_AE408_AE3F8() + 17) = dword_12CBA8;
    qmemcpy(v3, &unk_12CA50, 0x18u);
    byte_12CBD6_12CBC6 &= ~4u;
    *(_BYTE *)dword_AE408_AE3F8() &= 0xDBu;
  }
}
// 90B23: using guessed type char byte_90B23;
// 967E4: using guessed type char byte_967E4;
// 9688C: using guessed type int dword_9688C;
// 96890: using guessed type char byte_96890;
// AC5C4: using guessed type int dword_AC5D4_AC5C4;
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 12CAD4: using guessed type char byte_12CAE4_12CAD4;
// 12CADC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CAF4: using guessed type int begMmSprTab_12CB04_2EAB04_2EAAF4;
// 12CAF8: using guessed type int test_12CB08_2EAB08_2EAAF8;
// 12CAFC: using guessed type int begMmSprDat_12CB0C_2EAB0C_2EAAFC;
// 12CB24: using guessed type _DWORD begSFont1Tab_12CB34_2EAB34_2EAB24;
// 12CB62: using guessed type int begGlobeDat_12CB72_2EAB72_2EAB62;
// 12CB66: using guessed type int dword_12CB76_12CB66;
// 12CB6A: using guessed type int dword_12CB7A_12CB6A;
// 12CB6E: using guessed type __int16 word_12CB7E_12CB6E;
// 12CB70: using guessed type int begTimerDat_12CB80_2EAB80_2EAB70;
// 12CB74: using guessed type int dword_12CB84_12CB74;
// 12CB78: using guessed type int dword_12CB88_12CB78;
// 12CB7C: using guessed type __int16 word_12CB8C_12CB7C;
// 12CB8C: using guessed type int begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C;
// 12CB98: using guessed type int begScreenBackup2_12CBA8_2EABA8_2EAB98;
// 12CBA4: using guessed type int dword_12CBA4;
// 12CBA8: using guessed type int dword_12CBA8;
// 12CBB6: using guessed type char byte_12CBC6_12CBB6;
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBC5: using guessed type char byte_12CBD5_12CBC5;
// 12CBC6: using guessed type char byte_12CBD6_12CBC6;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004CE00) --------------------------------------------------------
void sub_4CAC0_4CE00()
{
  if ( mainMenuSelector_12CBCE_12CBBE != 5 )
  {
    FadeInOut_61CC0_621D0(0, 0x10u, 0);
    if ( !byte_90B23 )
      sub_5C05C_5C56C(0);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
    else
      sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
  }
  sub_61610_61B20((Pathstruct*)(char*)"data\\screens\\mmspr.dat");
  byte_967E4 = 0;
  byte_12CBD5_12CBC5 &= ~1u;
}
// 4CE47: variable 'v0' is possibly undefined
// 90B23: using guessed type char byte_90B23;
// 967E4: using guessed type char byte_967E4;
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBC5: using guessed type char byte_12CBD5_12CBC5;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004CEB0) --------------------------------------------------------
void sub_4CEB0()
{
  if ( byte_12CBCD_12CBBD )
  {
    if ( (unsigned __int8)byte_12CBCD_12CBBD <= 1u || byte_12CBCD_12CBBD == 2 )
      sub_4D640();
  }
  else
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(358, 10, (TypeTab*)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 6));
    else
      DrawBitmap_60D18_61228(358, 10, (TypeTab*)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 6));
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(336, 86, (TypeTab*)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 12));
    else
      DrawBitmap_60D18_61228(336, 86, (TypeTab*)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 12));
  }
}
// 12CAF4: using guessed type int begMmSprTab_12CB04_2EAB04_2EAAF4;
// 12CBBD: using guessed type char byte_12CBCD_12CBBD;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004CF40) --------------------------------------------------------
int sub_4CF40()
{
  sub_65EB0_663C0(65, 75, 189, 44);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    DrawBitmap_60CE0_611F0(24, 8, (TypeTab*)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 6));
  else
    DrawBitmap_60D18_61228(24, 8, (TypeTab*)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 6));
  sub_518A0(
      (uint8*)&str_9688C,
    30,
    12,
    (unsigned __int8 *)dword_96860[(unsigned __int16)word_4A470[3 * (unsigned __int8)byte_12CBC6_12CBB6]]);
  return sub_65EB0_663C0(0, 0, 320, 200);
}
// 4A470: using guessed type __int16 word_4A470[];
// 4CF40: using guessed type int sub_4CF40();
// 96860: using guessed type int dword_96860[];
// 9688C: using guessed type int dword_9688C;
// 12CAF4: using guessed type int begMmSprTab_12CB04_2EAB04_2EAAF4;
// 12CBB6: using guessed type char byte_12CBC6_12CBB6;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004CFE0) --------------------------------------------------------
int sub_4CCA0_4CFE0(int a1)
{
  int v1; // ebx
  __int16 v2; // di
  __int16 v3; // cx
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // eax
  int v9; // eax
  int v10; // eax

  v1 = 0;
  v2 = 0;
  byte_12CBD5_12CBC5 &= ~0x40u;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begScreenBackup_12CBA4_2EABA4_2EAB94, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begScreenBackup_12CBA4_2EABA4_2EAB94, 0x1E0u);
  if ( !byte_90B23 )
    sub_5C05C_5C56C(0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  sprintf(&unk_9ADC8, aIntroScrollDat);
  dword_AC5B4 = (int (*)(_DWORD))sub_507B0;
  word_90026 = 0;
  sub_107C0(0, 0, (int)dword_4A4BC);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begWscreen_2ECFF4_2ECFE4, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begWscreen_2ECFF4_2ECFE4, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
  HIBYTE(v3) = 0;
  dword_AC5B4 = 0;
  if ( !byte_90B23 )
    sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
  sub_51720();
  sub_516A0(80, 73, 159, 48);
  v4 = strcmp((char*)dword_96860[(unsigned __int16)word_4A470[3 * (unsigned __int8)byte_12CBC6_12CBB6]], asc_A9AE4);
  if ( !v4 )
    LOWORD(v4) = sub_4D430();
  while ( !v1 )
  {
    LOBYTE(v3) = byte_90B23;
    if ( !byte_90B23 || (byte_90B23 & 0x23) != 0 && (v2 & 3) == 0 )
      sub_50770_50AB0();
    if ( pressedKeys_12EEF0_12EEE0[28] )
    {
      v1 = 1;
      HIBYTE(v3) = 0;
      a1 = 1;
      mouseLeftButton_12EFDE_12EFCE = 0;
      pressedKeys_12EEF0_12EEE0[28] = 0;
      pressedKeys_12EEF0_12EEE0[1] = 0;
      byte_12CAE4_12CAD4 &= ~1u;
    }
    if ( pressedKeys_12EEF0_12EEE0[1] )
    {
      v1 = 1;
      a1 = 0;
      mouseLeftButton_12EFDE_12EFCE = 0;
      HIBYTE(v3) = byte_12CAE4_12CAD4 & 0xFE;
      pressedKeys_12EEF0_12EEE0[28] = 0;
      byte_12CAE4_12CAD4 &= ~1u;
      pressedKeys_12EEF0_12EEE0[1] = 0;
    }
    if ( (byte_12CAE4_12CAD4 & 1) != 0 )
    {
      v5 = mouseX_12CAE0_12CAD0 >> 1;
      if ( v5 >= 68 && v5 <= 81 )
      {
        v6 = mouseY_12CAE2_12CAD2 >> 1;
        if ( v6 >= 106 && v6 <= 116 )
        {
          v1 = 1;
          a1 = 1;
        }
      }
      v7 = mouseX_12CAE0_12CAD0 >> 1;
      if ( v7 >= 240 && v7 <= 250 )
      {
        v8 = mouseY_12CAE2_12CAD2 >> 1;
        if ( v8 >= 105 && v8 <= 115 )
        {
          v1 = 1;
          a1 = 0;
        }
      }
      v9 = mouseX_12CAE0_12CAD0 >> 1;
      if ( v9 >= 110 && v9 <= 230 )
      {
        v10 = mouseY_12CAE2_12CAD2 >> 1;
        if ( v10 >= 85 && v10 <= 95 )
        {
          sub_4D430();
          pressedKeys_12EEF0_12EEE0[28] = 0;
          pressedKeys_12EEF0_12EEE0[1] = 0;
        }
      }
      mouseLeftButton_12EFDE_12EFCE = 0;
      HIBYTE(v3) = byte_12CAE4_12CAD4 & 0xFE;
      pressedKeys_12EEF0_12EEE0[28] = 0;
      pressedKeys_12EEF0_12EEE0[1] = 0;
      byte_12CAE4_12CAD4 &= ~1u;
    }
    sub_4D4D0();
    if ( (byte_90B23 & 0x23) != 0 )
    {
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        DrawBitmap_60CE0_611F0(mouse_9AD90.x, mouse_9AD90.y, (TypeTab*)(begSptrsTab_12CAEC_2EAAEC_2EAADC + 6 * (unsigned __int8)mainMenuSelector_12CBCE_12CBBE));
      else
        DrawBitmap_60D18_61228(mouse_9AD90.x, mouse_9AD90.y, (TypeTab*)(6 * (unsigned __int8)mainMenuSelector_12CBCE_12CBBE + begSptrsTab_12CAEC_2EAAEC_2EAADC));
    }
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
    ++v2;
  }
  sub_51740();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begScreenBackup_12CBA4_2EABA4_2EAB94, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begScreenBackup_12CBA4_2EABA4_2EAB94, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  mouseRightButton_12EFDC_12EFCC = 0;
  mouseLeftButton_12EFDE_12EFCE = 0;
  pressedKeys_12EEF0_12EEE0[1] = 0;
  pressedKeys_12EEF0_12EEE0[28] = 0;
  byte_12CAE4_12CAD4 &= 0xBEu;
  return a1;
}
// 4D18A: variable 'v4' is possibly undefined
// 4A470: using guessed type __int16 word_4A470[];
// 4A4BC: using guessed type int dword_4A4BC[6];
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 63EF0: using guessed type _DWORD strcmp(_DWORD, _DWORD);
// 90026: using guessed type __int16 word_90026;
// 90B23: using guessed type char byte_90B23;
// 96860: using guessed type int dword_96860[];
// 9AD90: using guessed type int dword_9AD90;
// AC5B4: using guessed type int (*dword_AC5B4)(_DWORD);
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12CAD0: using guessed type __int16 mouseX_12CAE0_12CAD0;
// 12CAD2: using guessed type __int16 mouseY_12CAE2_12CAD2;
// 12CAD4: using guessed type char byte_12CAE4_12CAD4;
// 12CADC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CB94: using guessed type int begScreenBackup_12CBA4_2EABA4_2EAB94;
// 12CBB6: using guessed type char byte_12CBC6_12CBB6;
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBC5: using guessed type char byte_12CBD5_12CBC5;
// 12EEE1: using guessed type char pressedKeys_12EEF0_12EEE0[1];
// 12EEFC: using guessed type char pressedKeys_12EEF0_12EEE0[28];
// 12EFCC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFCE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004D430) --------------------------------------------------------
bool sub_4D430()
{
  bool result; // eax

  pressedKeys_12EEF0_12EEE0[28] = 0;
  mouseRightButton_12EFDC_12EFCC = 0;
  pressedKeys_12EEF0_12EEE0[1] = 0;
  word_12EFDA_12EFCA = 0;
  byte_12CBD5_12CBC5 |= 0x40u;
  mouseLeftButton_12EFDE_12EFCE = 0;
  result = sub_51080(
             30,
             12,
             20,
             0,
             (char *)dword_96860[(unsigned __int16)word_4A470[3 * (unsigned __int8)byte_12CBC6_12CBB6]],
             255,
             0,
             (void (*)(void))sub_4D4D0,
             0,
             (int)&str_9688C);
  byte_12CBD5_12CBC5 &= ~0x40u;
  return result;
}
// 4A470: using guessed type __int16 word_4A470[];
// 96860: using guessed type int dword_96860[];
// 9688C: using guessed type int dword_9688C;
// 12CBB6: using guessed type char byte_12CBC6_12CBB6;
// 12CBC5: using guessed type char byte_12CBD5_12CBC5;
// 12EEE1: using guessed type char pressedKeys_12EEF0_12EEE0[1];
// 12EEFC: using guessed type char pressedKeys_12EEF0_12EEE0[28];
// 12EFCA: using guessed type __int16 word_12EFDA_12EFCA;
// 12EFCC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFCE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;

//----- (0004D4D0) --------------------------------------------------------
int sub_4D4D0()
{
  int result; // eax

  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  sub_65EB0_663C0(65, 75, 189, 44);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    DrawBitmap_60CE0_611F0(24, 8, (TypeTab*)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 12));
  else
    DrawBitmap_60D18_61228(24, 8, (TypeTab*)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 12));
  result = sub_65EB0_663C0(0, 0, 320, 200);
  if ( (byte_12CBD5_12CBC5 & 0x40) == 0 )
  {
    sub_518A0(
        (uint8*)&str_9688C,
      30,
      12,
      (unsigned __int8 *)dword_96860[(unsigned __int16)word_4A470[3 * (unsigned __int8)byte_12CBC6_12CBB6]]);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(136, 210, (TypeTab*)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 30));
    else
      DrawBitmap_60D18_61228(136, 210, (TypeTab*)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 30));
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(480, 210, (TypeTab*)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 36));
    else
      DrawBitmap_60D18_61228(480, 210, (TypeTab*)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 36));
  }
  return result;
}
// 4A470: using guessed type __int16 word_4A470[];
// 96860: using guessed type int dword_96860[];
// 9688C: using guessed type int dword_9688C;
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12CAF4: using guessed type int begMmSprTab_12CB04_2EAB04_2EAAF4;
// 12CBB6: using guessed type char byte_12CBC6_12CBB6;
// 12CBC5: using guessed type char byte_12CBD5_12CBC5;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004D640) --------------------------------------------------------
void sub_4D640()
{
  int v0; // ebx
  __int64 v1; // rax
  unsigned __int8 i; // [esp+0h] [ebp-14h]

  str_9688C.var8_6 = sub_5CC70_5D180(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x3Fu, 0x3Fu, 0);
  sub_51720();
  for ( i = 0; i < 6u; ++i )
  {
    v0 = 4 * i;
    sub_516A0(dword_4AB2C[v0], dword_4AB30[v0], dword_4AB34[v0], dword_4AB38[v0]);
    v1 = dword_4AB38[v0] - str_9688C.var8_5;
    sub_518A0((uint8*)&str_9688C, 4, ((int)v1 - HIDWORD(v1)) >> 1, (unsigned __int8 *)off_96864[i]);
  }
  sub_51740();
}
// 4AB2C: using guessed type int dword_4AB2C[];
// 4AB30: using guessed type int dword_4AB30[];
// 4AB34: using guessed type int dword_4AB34[];
// 4AB38: using guessed type int dword_4AB38[];
// 96864: using guessed type char *off_96864[5];
// 9688C: using guessed type int dword_9688C;
// 96892: using guessed type char byte_96892;
// 12CB8C: using guessed type int begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C;

//----- (0004D6F0) --------------------------------------------------------
void sub_4D6F0()
{
  int v0; // eax
  int v1; // eax

  //fix
  v1 = 0;
  //fix

  if ( !byte_90B23 )
    sub_5C05C_5C56C(0);
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  sprintf(&unk_9ADC8, aIntroIntroDat);
  mouseRightButton_12EFDC_12EFCC = 0;
  mouseLeftButton_12EFDE_12EFCE = 0;
  pressedKeys_12EEF0_12EEE0[1] = 0;
  lastPressedKey_12EF70_12EF60 = 0;
  if ( (byte_12CBD5_12CBC5 & 2) != 0 )
  {
    if ( (byte_12CBD6_12CBC6 & 1) != 0 )
      word_90026 = 1;
    sub_107C0(1, 1, (int)dword_4A53C);
    word_90026 = 0;
  }
  else
  {
    sub_107C0(0, 1, (int)dword_4A53C);
  }
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  sub_24BB0();
  sub_5D010_5D520();
  sub_20E60_20E60();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  byte_12CBD5_12CBC5 |= 6u;
  if ( (byte_12CBD6_12CBC6 & 1) != 0 )
  {
    mainMenuSelector_12CBCE_12CBBE = 2;
    byte_12CBD6_12CBC6 &= ~1u;
  }
  else
  {
    mainMenuSelector_12CBCE_12CBBE = 8;
  }
  byte_12CBD5_12CBC5 &= ~1u;
}
// 4D72C: variable 'v0' is possibly undefined
// 4D81B: variable 'v1' is possibly undefined
// 4A53C: using guessed type int dword_4A53C[2];
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 90026: using guessed type __int16 word_90026;
// 90B23: using guessed type char byte_90B23;
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBC5: using guessed type char byte_12CBD5_12CBC5;
// 12CBC6: using guessed type char byte_12CBD6_12CBC6;
// 12EEE1: using guessed type char pressedKeys_12EEF0_12EEE0[1];
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFCC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFCE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004D8A0) --------------------------------------------------------
void sub_4D8A0()
{
  int v0; // eax
  int v1; // ebx

  if ( !byte_90B23 )
    sub_5C05C_5C56C(0);
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  sprintf(&unk_9ADC8, aIntroOutroDat);
  mouseRightButton_12EFDC_12EFCC = 0;
  mouseLeftButton_12EFDE_12EFCE = 0;
  pressedKeys_12EEF0_12EEE0[1] = 0;
  lastPressedKey_12EF70_12EF60 = 0;
  word_90026 = 0;
  sub_107C0(0, 1, (int)dword_4A978);
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  sub_5D010_5D520();
  sub_20E60_20E60();
  v1 = str_AE400_AE3F0->var_u16_8;
  bool_96880 = true;
  *(_BYTE *)(dword_AE400_AE3F0() + 2049 * v1 + 13327) = 1;
  while ( 1 )
    ;
}
// 4D8DB: variable 'v0' is possibly undefined
// 4A978: using guessed type int dword_4A978[2];
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 90026: using guessed type __int16 word_90026;
// 90B23: using guessed type char byte_90B23;
// 96880: using guessed type int bool_96880;
// AC5C4: using guessed type int dword_AC5D4_AC5C4;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// 12EEE1: using guessed type char pressedKeys_12EEF0_12EEE0[1];
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFCC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFCE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004D9C0) --------------------------------------------------------
void sub_4D9C0()
{
  int v0; // eax
  int v1; // edx
  int v2; // eax
  int v3; // eax
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // eax
  int v9; // eax
  int v10; // eax
  __int16 v11; // dx
  int v12; // eax
  int v13; // ebx
  int v14; // eax
  int v15; // eax
  int v16; // eax
  int v17; // eax
  unsigned __int8 i; // ah
  int v19; // edx
  int v20; // esi
  int v21; // ecx
  int v22; // ebx
  int v23; // edx
  unsigned __int8 v24; // al
  int v25; // edx
  int v26; // eax
  int v27; // edx
  int v28; // edi
  int v29; // esi
  int v30; // eax
  char v31; // cl
  unsigned __int8 *v32; // [esp-4h] [ebp-18h]
  unsigned __int8 *v33; // [esp-4h] [ebp-18h]
  char v34; // [esp+0h] [ebp-14h]
  char v35; // [esp+4h] [ebp-10h]

  v34 = 0;
  v35 = 0;
  if ( (byte_12CBD5_12CBC5 & 1) == 0 )
  {
    sub_4E420();
    sub_4E660();
  }
  if ( pressedKeys_12EEF0_12EEE0[1] )
  {
    pressedKeys_12EEF0_12EEE0[1] = 0;
    v34 = 1;
  }
  v0 = (__int16)dword_12CACC >> 1;
  if ( v0 >= 173 && v0 <= 263 )
  {
    v1 = SHIWORD(dword_12CACC) >> 1;
    if ( v1 >= 72 && v1 <= 133 )
    {
      word_12CBC0_12CBB0 = (v1 - 72) / (str_9688C.var8_5 - 2);
      if ( (byte_12CAE4_12CAD4 & 1) != 0 )
        word_12CBC2_12CBB2 = word_12CBC0_12CBB0 + word_12CBBE_12CBAE;
    }
  }
  if ( (byte_12CAE4_12CAD4 & 1) != 0 )
  {
    v2 = (__int16)dword_12CACC >> 1;
    if ( v2 < 173 || v2 > 262 || (v3 = SHIWORD(dword_12CACC) >> 1, v3 < 57) || v3 > 71 )
    {
      v4 = (__int16)dword_12CACC >> 1;
      if ( v4 >= 173 && v4 <= 262 )
      {
        v5 = SHIWORD(dword_12CACC) >> 1;
        if ( v5 >= 134 && v5 <= 148 && (unsigned __int16)word_12CBBE_12CBAE + 5 < 10 )
          ++word_12CBBE_12CBAE;
      }
    }
    else if ( word_12CBBE_12CBAE )
    {
      --word_12CBBE_12CBAE;
    }
  }
  if ( (byte_12CAE4_12CAD4 & 1) != 0 || (byte_12CAE4_12CAD4 & 0x40) != 0 )
  {
    v6 = mouseX_12CAE0_12CAD0 >> 1;
    if ( v6 < 284 || v6 > 303 || (v7 = mouseY_12CAE2_12CAD2 >> 1, v7 < 48) || v7 > 67 )
    {
      v8 = mouseX_12CAE0_12CAD0 >> 1;
      if ( v8 < 284 || v8 > 303 || (v9 = mouseY_12CAE2_12CAD2 >> 1, v9 < 126) || v9 > 145 )
      {
        v14 = mouseX_12CAE0_12CAD0 >> 1;
        if ( v14 < 236 || v14 > 256 || (v15 = mouseY_12CAE2_12CAD2 >> 1, v15 < 156) || v15 > 176 )
        {
          v16 = mouseX_12CAE0_12CAD0 >> 1;
          if ( v16 < 176 || v16 > 253 || (v17 = mouseY_12CAE2_12CAD2 >> 1, v17 < 46) || v17 > 58 )
          {
            for ( i = 0; i < 8u; ++i )
            {
              v19 = mouseX_12CAE0_12CAD0 >> 1;
              v20 = word_4AB0C[2 * i];
              if ( v19 >= v20 )
              {
                v21 = (int)begPMultSprTab_12CB10_2EAB10_2EAB00 + 6 * (i + 1);
                if ( v19 <= ((int)*(unsigned __int8 *)(v21 + 4) >> 1) + v20 )
                {
                  v22 = word_4AB0E[2 * i];
                  v23 = mouseY_12CAE2_12CAD2 >> 1;
                  if ( v23 >= v22 && v23 <= ((int)*(unsigned __int8 *)(v21 + 5) >> 1) + v22 && (byte_12CAE4_12CAD4 & 1) != 0 )
                  {
                    v24 = 0;
                    byte_12CBD1_12CBC1 = 0;
                    do
                    {
                      if ( v24 > i && v24 >= 2u )
                      {
                        byte_9689C[3 * v24] = 0;
                      }
                      else
                      {
                        ++byte_12CBD1_12CBC1;
                        byte_9689C[3 * v24] = 1;
                      }
                      v25 = 3 * v24++;
                      byte_9689D[v25] = 0;
                    }
                    while ( v24 < 8u );
                  }
                }
              }
            }
          }
          else
          {
            byte_12CAE4_12CAD4 &= ~1u;
            if ( ++byte_12CBD0_12CBC0 == 10 )
              byte_12CBD0_12CBC0 = 0;
            sprintf((char*)(dword_AE408_AE3F8() + 117), "CARPET%d", (unsigned __int8)byte_12CBD0_12CBC0);
          }
        }
        else
        {
          v34 = 1;
        }
      }
      else
      {
        word_12CBB4 = *(_WORD *)(dword_AE408_AE3F8() + 17);
        *(_WORD *)(dword_AE408_AE3F8() + 17) = word_12CBC2_12CBB2 + 50;
        byte_12CBD5_12CBC5 |= 0x10u;
        byte_12CBD2_12CBC2 = 6;
        sub_4E000();
        sub_51720();
        sub_516A0(173, 42, 90, 15);
        v32 = (unsigned __int8 *)(dword_AE408_AE3F8() + 117);
        v10 = sub_51760((uint32*)&str_9688C, (char *)(dword_AE408_AE3F8() + 117));
        sub_518A0((uint8*)&str_9688C, (__int16)((90 - v10) / 2), 1, v32);
        sub_51740();
        if ( (typeResolution_12F02E_12F01E & 1) != 0 )
          Blit_5CDA0_5D2B0();
        else
          Blit_599B0_59EC0(480);
        *(_WORD *)(dword_AE400_AE3F0() + 10) = (unsigned __int8)byte_12CBD1_12CBC1;
        byte_12CBD5_12CBC5 &= ~0x10u;
        if ( !byte_90B23 )
          sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
        v11 = sub_43430_43770((char *)(dword_AE408_AE3F8() + 117), (unsigned __int8)byte_12CBD1_12CBC1);
        v12 = dword_AE400_AE3F0();
        *(_WORD *)(dword_AE400_AE3F0() + 8) = v11;
        if ( v11 == -1 )
        {
          sub_4E660();
          FadeInOut_61CC0_621D0(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x20u, 0);
        }
        else
        {
          v13 = dword_AE408_AE3F8();
          *(_BYTE *)dword_AE408_AE3F8() |= 0x10u;
          *(_BYTE *)(v12 + 10 * *(__int16 *)(v12 + 8) + 29716) = *(_BYTE *)(v13 + 17);
          sub_43C70((char *)(v12 + 29715), 0xAu);
          bool_96880 = true;
          v35 = 1;
          v34 = 1;
          *(_WORD *)(dword_AE408_AE3F8() + 17) = *(char *)(dword_AE400_AE3F0() + 29716);
        }
      }
    }
    byte_12CAE4_12CAD4 &= 0xBEu;
  }
  sub_4E000();
  sub_51720();
  sub_516A0(173, 42, 90, 15);
  v33 = (unsigned __int8 *)(dword_AE408_AE3F8() + 117);
  v26 = 90 - sub_51760((uint32*)&str_9688C, (char *)(dword_AE408_AE3F8() + 117));
  sub_518A0((uint8*)&str_9688C, (__int16)(v26 / 2), 1, v33);
  sub_51740();
  if ( (byte_90B23 & 0x23) != 0 )
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(mouse_9AD90.x, mouse_9AD90.y, (TypeTab*)(6 * (unsigned __int8)mainMenuSelector_12CBCE_12CBBE + begSptrsTab_12CAEC_2EAAEC_2EAADC));
    else
      DrawBitmap_60D18_61228(mouse_9AD90.x, mouse_9AD90.y, (TypeTab*)(6 * (unsigned __int8)mainMenuSelector_12CBCE_12CBBE + begSptrsTab_12CAEC_2EAAEC_2EAADC));
  }
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  if ( v34 )
  {
    sub_4E5B0();
    if ( !v35 )
    {
      v27 = dword_AE400_AE3F0();
      v28 = dword_AE400_AE3F0() + 13323;
      v29 = dword_AE400_AE3F0() + 9225;
      v30 = dword_AE408_AE3F8();
      qmemcpy((void *)(dword_AE400_AE3F0() + 13323), (const void *)(dword_AE400_AE3F0() + 9225), 0x800u);
      *(_BYTE *)(v28 + 2048) = *(_BYTE *)(v29 + 2048);
      mainMenuSelector_12CBCE_12CBBE = 2;
      v31 = *(_BYTE *)v30 & 0xEF;
      *(_WORD *)(v30 + 17) = *(_WORD *)(v30 + 19);
      *(_BYTE *)v30 = v31;
      *(_WORD *)(v27 + 8) = 0;
    }
  }
}
// 4AB0C: using guessed type __int16 word_4AB0C[];
// 4AB0E: using guessed type __int16 word_4AB0E[];
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 90B23: using guessed type char byte_90B23;
// 96880: using guessed type int bool_96880;
// 9688C: using guessed type int dword_9688C;
// 9AD90: using guessed type int dword_9AD90;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 12CACC: using guessed type int dword_12CACC;
// 12CAD0: using guessed type __int16 mouseX_12CAE0_12CAD0;
// 12CAD2: using guessed type __int16 mouseY_12CAE2_12CAD2;
// 12CAD4: using guessed type char byte_12CAE4_12CAD4;
// 12CADC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CB00: using guessed type int begPMultSprTab_12CB10_2EAB10_2EAB00;
// 12CB8C: using guessed type int begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C;
// 12CBAE: using guessed type __int16 word_12CBBE_12CBAE;
// 12CBB0: using guessed type __int16 word_12CBC0_12CBB0;
// 12CBB2: using guessed type __int16 word_12CBC2_12CBB2;
// 12CBB4: using guessed type __int16 word_12CBB4;
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBC0: using guessed type char byte_12CBD0_12CBC0;
// 12CBC1: using guessed type char byte_12CBD1_12CBC1;
// 12CBC2: using guessed type char byte_12CBD2_12CBC2;
// 12CBC5: using guessed type char byte_12CBD5_12CBC5;
// 12EEE1: using guessed type char pressedKeys_12EEF0_12EEE0[1];
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004E000) --------------------------------------------------------
char sub_4E000()
{
  //int v0; // edx
  //int v1; // eax
  unsigned __int8 v2; // bl
  int v3; // eax
  int v4; // ecx
  int v5; // edx
  int v6; // esi
  char v7; // al
  unsigned __int8 v8; // bl
  char v9; // al
  int v10; // eax
  char result; // al
  char *v12; // [esp-4h] [ebp-1Ch]
  char v13; // [esp+0h] [ebp-18h]
  char v14; // [esp+4h] [ebp-14h]

  if ( (dword_12CBB0_12CBA0 & 7) == 7 && ++byte_12CBD2_12CBC2 == 21 )
    byte_12CBD2_12CBC2 = 6;
  if ( (byte_12CBD5_12CBC5 & 0x10) != 0 )
  {
    if ( !byte_90B23 )
    {
      //v0 = 6 * (unsigned __int8)byte_12CBD2_12CBC2;
      //v1 = (int)begSptrsTab_12CAEC_2EAAEC_2EAADC;
//LABEL_9:
      sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[byte_12CBD2_12CBC2]);
    }
  }
  else if ( !byte_90B23 )
  {
    //v0 = (int)begSptrsTab_12CAEC_2EAAEC_2EAADC;
    //v1 = 6 * (unsigned __int8)mainMenuSelector_12CBCE_12CBBE;
    //goto LABEL_9;
    sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
  }
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  sub_51720();
  v2 = 0;
  sub_516A0(0, 0, 320, 200);
  do
  {
    if ( byte_9689C[3 * v2] || byte_9689D[3 * v2] )
    {
      v3 = 2 * v2;
      if ( byte_9689D[3 * v2] )
      {
        if ( (typeResolution_12F02E_12F01E & 1) != 0 )
          DrawBitmap_60CE0_611F0(2 * (word_4AB0C[2 * v2] + 10), 2 * (word_4AB0E[2 * v2] - 10), (TypeTab*)(begPMultSprTab_12CB10_2EAB10_2EAB00 + 102));
        else
          DrawBitmap_60D18_61228(2 * (word_4AB0C[2 * v2] + 10), 2 * (word_4AB0E[2 * v2] - 10), (TypeTab*)(begPMultSprTab_12CB10_2EAB10_2EAB00 + 102));
      }
      else if ( byte_9689C[3 * v2] )
      {
        v4 = 6 * (v2 + 9);
        v5 = 6 * (v2 + 17);
        switch ( byte_9689E[3 * v2] )
        {
          case 0:
            if ( (typeResolution_12F02E_12F01E & 1) == 0 )
              goto LABEL_23;
            goto LABEL_30;
          case 1:
            if ( (dword_12CBB0_12CBA0 & 0x10) == 0 )
              break;
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              goto LABEL_32;
            goto LABEL_33;
          case 2:
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              goto LABEL_32;
            goto LABEL_33;
          case 3:
            if ( (typeResolution_12F02E_12F01E & 1) == 0 )
            {
LABEL_23:
              v5 = (int)begPMultSprTab_12CB10_2EAB10_2EAB00;
              goto LABEL_34;
            }
LABEL_30:
            DrawBitmap_60CE0_611F0(2 * word_4AB0C[2 * v2], 2 * word_4AB0E[2 * v2], (TypeTab*)(v4 + begPMultSprTab_12CB10_2EAB10_2EAB00));
            break;
          default:
            break;
        }
      }
    }
    else
    {
      v5 = 6 * (v2 + 1);
      v3 = 2 * v2;
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      {
LABEL_32:
        DrawBitmap_60CE0_611F0(2 * word_4AB0C[2 * v2], 2 * word_4AB0E[2 * v2], (TypeTab*)(begPMultSprTab_12CB10_2EAB10_2EAB00 + v5));
      }
      else
      {
LABEL_33:
        v4 = (int)begPMultSprTab_12CB10_2EAB10_2EAB00;
LABEL_34:
        DrawBitmap_60D18_61228(2 * word_4AB0C[v3], 2 * word_4AB0E[v3], (TypeTab*)(v4 + v5));
      }
    }
    ++v2;
  }
  while ( v2 < 8u );
  sub_516A0(173, 72, 90, 61);
  v6 = 0;
  v13 = sub_5CC70_5D180(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x3Fu, 0x3Fu, 0x3Fu);
  v7 = sub_5CC70_5D180(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x1Au, 0x12u, 0xDu);
  v8 = word_12CBBE_12CBAE;
  v14 = v7;
  while ( v8 < (unsigned __int16)word_12CBBE_12CBAE + 5 )
  {
    if ( v8 == word_12CBC2_12CBB2 )
      v9 = v13;
    else
      v9 = v14;
    str_9688C.var8_6 = v9;
    v12 = off_99A84[v8];
    v10 = sub_51760((uint32*)&str_9688C, v12);
    sub_518A0((uint8*)&str_9688C, (__int16)((90 - v10) / 2), v6, (unsigned __int8 *)v12);
    ++v8;
    v6 += str_9688C.var8_5 - 2;
  }
  sub_51740();
  result = v14;
  str_9688C.var8_6 = v14;
  return result;
}
// 4AB0C: using guessed type __int16 word_4AB0C[];
// 4AB0E: using guessed type __int16 word_4AB0E[];
// 90B23: using guessed type char byte_90B23;
// 9688C: using guessed type int dword_9688C;
// 96892: using guessed type char byte_96892;
// 99A84: using guessed type char *off_99A84[15];
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12CADC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CB00: using guessed type int begPMultSprTab_12CB10_2EAB10_2EAB00;
// 12CB8C: using guessed type int begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C;
// 12CBA0: using guessed type int dword_12CBB0_12CBA0;
// 12CBAE: using guessed type __int16 word_12CBBE_12CBAE;
// 12CBB2: using guessed type __int16 word_12CBC2_12CBB2;
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBC2: using guessed type char byte_12CBD2_12CBC2;
// 12CBC5: using guessed type char byte_12CBD5_12CBC5;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004E420) --------------------------------------------------------
char sub_4E420()
{
  char result; // al

  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  sub_20E60_20E60();
  sub_40440_40780((Pathstruct*)"data\\screens\\pmultspr.dat");
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_65D70_66280(begPMultSprTab_12CB10_2EAB10_2EAB00, test_12CB14_2EAB14_2EAB04, begPMultSprDat_12CB18_2EAB18_2EAB08);
  else
    sub_65DC0_662D0(begPMultSprTab_12CB10_2EAB10_2EAB00, test_12CB14_2EAB14_2EAB04, begPMultSprDat_12CB18_2EAB18_2EAB08);
  sub_51480_517C0((int)&str_9688C, (uint32*)&begSFont1Tab_12CB34_2EAB34_2EAB24, begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C);
  str_9688C.var8_4 &= ~2u;
  str_9688C.var8_5 = 0;
  sub_3EEA0_3F1E0(aDataScreensPmu_0, (uint8_t*)begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C);
  sub_3EEA0_3F1E0(aDataScreensPmu_1, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  if ( !byte_90B23 )
    sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
  FadeInOut_61CC0_621D0(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x20u, 0);
  byte_12CBD5_12CBC5 |= 1u;
  result = sub_5CC70_5D180(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x1Au, 0x12u, 0xDu);
  str_9688C.var8_6 = result;
  return result;
}
// 90B23: using guessed type char byte_90B23;
// 9688C: using guessed type int dword_9688C;
// 96890: using guessed type char byte_96890;
// 96892: using guessed type char byte_96892;
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12CADC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CB00: using guessed type int begPMultSprTab_12CB10_2EAB10_2EAB00;
// 12CB04: using guessed type int test_12CB14_2EAB14_2EAB04;
// 12CB08: using guessed type int begPMultSprDat_12CB18_2EAB18_2EAB08;
// 12CB24: using guessed type _DWORD begSFont1Tab_12CB34_2EAB34_2EAB24;
// 12CB8C: using guessed type int begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C;
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBC5: using guessed type char byte_12CBD5_12CBC5;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004E5B0) --------------------------------------------------------
void sub_4E5B0()
{
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  if ( !byte_90B23 )
    sub_5C05C_5C56C(0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  sub_61610_61B20((Pathstruct*)(char*)"data\\screens\\pmultspr.dat");
  byte_12CBD5_12CBC5 &= ~1u;
  if ( mainMenuSelector_12CBCE_12CBBE == 2 )
    sub_5D290_5D7A0(4);
}
// 4E5EA: variable 'v0' is possibly undefined
// 90B23: using guessed type char byte_90B23;
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBC5: using guessed type char byte_12CBD5_12CBC5;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004E660) --------------------------------------------------------
void sub_4E660()
{
  unsigned __int8 v0; // al
  int v1; // eax
  unsigned __int8 *v2; // [esp-4h] [ebp-4h]

  v0 = 0;
  ++dword_12CBB0_12CBA0;
  do
  {
    if ( byte_9689C[3 * v0] )
      byte_9689E[3 * v0] = 0;
    ++v0;
  }
  while ( v0 < 8u );
  sub_4E000();
  sub_51720();
  sub_516A0(173, 42, 90, 15);
  v2 = (unsigned __int8 *)(dword_AE408_AE3F8() + 117);
  v1 = 90 - sub_51760((uint32*)&str_9688C, (char *)(dword_AE408_AE3F8() + 117));
  sub_518A0((uint8*)&str_9688C, (__int16)(v1 / 2), 1, v2);
  sub_51740();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
}
// 9688C: using guessed type int dword_9688C;
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 12CBA0: using guessed type int dword_12CBB0_12CBA0;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004E710) --------------------------------------------------------
void sub_4E3D0_4E710(unsigned __int8 a1)
{
  int v1; // eax
  unsigned __int8 *v2; // [esp-4h] [ebp-4h]

  byte_9689E[3 * a1] = 1;
  ++dword_12CBB0_12CBA0;
  sub_4E000();
  sub_51720();
  sub_516A0(173, 42, 90, 15);
  v2 = (unsigned __int8 *)(dword_AE408_AE3F8() + 117);
  v1 = 90 - sub_51760((uint32*)&str_9688C, (char *)(dword_AE408_AE3F8() + 117));
  sub_518A0((uint8*)&str_9688C, (__int16)(v1 / 2), 1, v2);
  sub_51740();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
}
// 9688C: using guessed type int dword_9688C;
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 12CBA0: using guessed type int dword_12CBB0_12CBA0;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004E7B0) --------------------------------------------------------
void sub_4E470_4E7B0(unsigned __int8 a1)
{
  int v1; // eax
  unsigned __int8 *v2; // [esp-4h] [ebp-4h]

  byte_9689E[3 * a1] = 2;
  ++dword_12CBB0_12CBA0;
  sub_4E000();
  sub_51720();
  sub_516A0(173, 42, 90, 15);
  v2 = (unsigned __int8 *)(dword_AE408_AE3F8() + 117);
  v1 = 90 - sub_51760((uint32*)&str_9688C, (char *)(dword_AE408_AE3F8() + 117));
  sub_518A0((uint8*)&str_9688C, (__int16)(v1 / 2), 1, v2);
  sub_51740();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
}
// 9688C: using guessed type int dword_9688C;
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 12CBA0: using guessed type int dword_12CBB0_12CBA0;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004E850) --------------------------------------------------------
void sub_4E850(unsigned __int8 a1)
{
  int v1; // eax
  unsigned __int8 *v2; // [esp-4h] [ebp-4h]

  byte_9689E[3 * a1] = 0;
  ++dword_12CBB0_12CBA0;
  sub_4E000();
  sub_51720();
  sub_516A0(173, 42, 90, 15);
  v2 = (unsigned __int8 *)(dword_AE408_AE3F8() + 117);
  v1 = 90 - sub_51760((uint32*)&str_9688C, (char *)(dword_AE408_AE3F8() + 117));
  sub_518A0((uint8*)&str_9688C, (__int16)(v1 / 2), 1, v2);
  sub_51740();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
}
// 9688C: using guessed type int dword_9688C;
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 12CBA0: using guessed type int dword_12CBB0_12CBA0;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004E8F0) --------------------------------------------------------
int sub_4E8F0()
{
  int v0; // edi
  int v1; // ebx
  int v2; // ebp
  int v3; // eax
  int v4; // eax
  char v5; // dl
  int v6; // eax
  int v7; // esi
  __int16 v8; // ax
  __int16 v9; // ax
  __int16 v10; // ax
  __int16 v11; // ax
  __int16 v12; // ax
  __int16 v13; // ax
  int result; // eax
  unsigned __int8 v15[64]; // [esp+0h] [ebp-80h] BYREF
  int v16; // [esp+40h] [ebp-40h]
  unsigned int v17; // [esp+44h] [ebp-3Ch]
  unsigned int v18; // [esp+48h] [ebp-38h]
  unsigned int v19; // [esp+4Ch] [ebp-34h]
  unsigned int v20; // [esp+50h] [ebp-30h]
  unsigned int v21; // [esp+54h] [ebp-2Ch]
  unsigned int v22; // [esp+58h] [ebp-28h]
  unsigned int v23; // [esp+5Ch] [ebp-24h]
  int v24; // [esp+60h] [ebp-20h]
  int v25; // [esp+64h] [ebp-1Ch]
  int v26; // [esp+68h] [ebp-18h]
  int v27; // [esp+6Ch] [ebp-14h]

  //fix
  v6 = 0;
  //fix

  v0 = 0;
  v1 = str_AE400_AE3F0->var_u16_8;
  v2 = 0;
  v26 = 0;
  v25 = 0;
  v24 = 0;
  v27 = 0;
  LOBYTE(v1) = *(_BYTE *)(dword_AE400_AE3F0() + 2049 * v1 + 13325);
  v16 = 0;
  if ( (v1 & 8) == 0 )
  {
    if ( !byte_90B23 )
      sub_5C05C_5C56C(0);
    FadeInOut_61CC0_621D0(0, 0x10u, 0);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
    else
      sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
    v4 = dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8;
    if ( *(_WORD *)(v4 + 13325) & 2 | 4 )
    {
      v5 = *(_BYTE *)(v4 + 13325);
      if ( (v5 & 2) != 0 )
      {
        if ( (dword_AC5D4_AC5C4 & 1) != 0 )
          sprintf(&unk_9ADC8, aIntroLevelw2Da);
        else
          sprintf(&unk_9ADC8, aIntroLevelw1Da);
        word_12EFDA_12EFCA = 0;
        mouseRightButton_12EFDC_12EFCC = 0;
        mouseLeftButton_12EFDE_12EFCE = 0;
        lastPressedKey_12EF70_12EF60 = 0;
        word_90026 = 0;
        sub_107C0(1, 1, (int)dword_4A918);
      }
      else if ( (v5 & 4) != 0 )
      {
        sprintf(&unk_9ADC8, aIntroLeveloseD);
        word_12EFDA_12EFCA = 0;
        mouseRightButton_12EFDC_12EFCC = 0;
        mouseLeftButton_12EFDE_12EFCE = 0;
        lastPressedKey_12EF70_12EF60 = 0;
        word_90026 = 0;
        sub_107C0(1, 1, (int)dword_4A500);
      }
      FadeInOut_61CC0_621D0(0, 0x10u, 0);
      sub_5D010_5D520();
      sub_20E60_20E60();
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
      else
        sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        Blit_5CDA0_5D2B0();
      else
        Blit_599B0_59EC0(480);
    }
    sub_5D070_5D580(0xDu);
    sub_5CEF0_5D400(0);
    sub_5D290_5D7A0(1);
    word_12EFDA_12EFCA = 0;
    mouseRightButton_12EFDC_12EFCC = 0;
    mouseLeftButton_12EFDE_12EFCE = 0;
    lastPressedKey_12EF70_12EF60 = 0;
    mainMenuSelector_12CBCE_12CBBE = 2;
    sub_40440_40780((Pathstruct*)"data\\screens\\sfont2.dat");
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_65D70_66280(begSFont2Tab_12CB40_2EAB40_2EAB30, test_12CB44_2EAB44_2EAB34, begSFont2Dat_12CB48_2EAB48_2EAB38);
    else
      sub_65DC0_662D0(begSFont2Tab_12CB40_2EAB40_2EAB30, test_12CB44_2EAB44_2EAB34, begSFont2Dat_12CB48_2EAB48_2EAB38);
    word_96898 = 16;
    dword_96894 = (int)begSFont2Tab_12CB40_2EAB40_2EAB30 + 6;
    sub_3EEA0_3F1E0(aDataScreensPpe, (uint8_t*)begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C);
    sub_3EEA0_3F1E0(aDataScreensPpe_0, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      CopyScreen_62FA8_634B8((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0xC8u);
    else
      CopyScreen_62FC4_634D4((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
    FadeInOut_61CC0_621D0(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x20u, 0);
    pressedKeys_12EEF0_12EEE0[1] = 0;
    byte_12CAE4_12CAD4 &= ~1u;
    sub_516A0(0, 0, 320, 200);
    v7 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333);
    v19 = dword_AC5D4_AC5C4 + 360;
    v22 = dword_AC5D4_AC5C4 + 300;
    v17 = dword_AC5D4_AC5C4 + 240;
    v21 = dword_AC5D4_AC5C4 + 180;
    v23 = dword_AC5D4_AC5C4 + 120;
    v18 = dword_AC5D4_AC5C4 + 60;
    v20 = dword_AC5D4_AC5C4 + 1320;
    do
    {
      if ( lastPressedKey_12EF70_12EF60 || mouseLeftButton_12EFDE_12EFCE || dword_AC5D4_AC5C4 > v20 )
      {
        byte_12CAE4_12CAD4 &= 0xB6u;
        lastPressedKey_12EF70_12EF60 = 0;
        v0 = 1;
        mouseLeftButton_12EFDE_12EFCE = 0;
        pressedKeys_12EEF0_12EEE0[57] = 0;
        pressedKeys_12EEF0_12EEE0[28] = 0;
        pressedKeys_12EEF0_12EEE0[1] = 0;
        sub_61610_61B20((Pathstruct*)(char*)"data\\screens\\sfont2.dat");
      }
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        CopyScreen_62FA8_634B8((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0xC8u);
      else
        CopyScreen_62FC4_634D4((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u);
      if ( dword_AC5D4_AC5C4 > v18 )
      {
        sub_518A0((uint8*)&dword_96894, 40, 8, (unsigned __int8 *)dword_999B8[*(unsigned __int16 *)(dword_AE408_AE3F8() + 17)]);
        if ( !v26 )
        {
          sub_66420(0, 3);
          v26 = 1;
        }
        sub_518A0((uint8*)&dword_96894, 40, 80, (unsigned __int8 *)dword_AE238_AE228[66]);
        sprintf((char*)v15, "% 3d %%", *(_DWORD *)(*(_DWORD *)(v7 + 160) + 359));
        v8 = sub_51760((uint32*)&dword_96894, (char *)v15);
        sub_518A0((uint8*)&dword_96894, (__int16)(600 - v8), 80, v15);
      }
      if ( dword_AC5D4_AC5C4 > v23 )
      {
        if ( !v25 )
        {
          sub_66420(0, 3);
          v25 = 1;
        }
        sub_518A0((uint8*)&dword_96894, 40, 120, (unsigned __int8 *)dword_AE238_AE228[67]);
        sprintf((char*)v15, "% 3d %%", *(_DWORD *)(*(_DWORD *)(v7 + 160) + 367));
        v9 = sub_51760((uint32*)&dword_96894, (char *)v15);
        sub_518A0((uint8*)&dword_96894, (__int16)(600 - v9), 120, v15);
      }
      if ( dword_AC5D4_AC5C4 > v21 )
      {
        if ( !v24 )
        {
          sub_66420(0, 3);
          v24 = 1;
        }
        sub_518A0((uint8*)&dword_96894, 40, 160, (unsigned __int8 *)dword_AE238_AE228[68]);
        sprintf((char*)v15, "% 3d %%", *(_DWORD *)(*(_DWORD *)(v7 + 160) + 363));
        v10 = sub_51760((uint32*)&dword_96894, (char *)v15);
        sub_518A0((uint8*)&dword_96894, (__int16)(600 - v10), 160, v15);
      }
      if ( dword_AC5D4_AC5C4 > v17 )
      {
        if ( !v27 )
        {
          sub_66420(0, 3);
          v27 = 1;
        }
        sub_518A0((uint8*)&dword_96894, 40, 200, (unsigned __int8 *)dword_AE238_AE228[59]);
        sprintf((char*)v15, "% 3d %%", *(_DWORD *)(*(_DWORD *)(v7 + 160) + 371));
        v11 = sub_51760((uint32*)&dword_96894, (char *)v15);
        sub_518A0((uint8*)&dword_96894, (__int16)(600 - v11), 200, v15);
      }
      if ( dword_AC5D4_AC5C4 > v22 )
      {
        if ( !v2 )
        {
          sub_66420(0, 3);
          v2 = 1;
        }
        sub_518A0((uint8*)&dword_96894, 40, 240, (unsigned __int8 *)dword_AE238_AE228[69]);
        sprintf((char*)v15, "% 3d %%", *(_DWORD *)(*(_DWORD *)(v7 + 160) + 375));
        v12 = sub_51760((uint32*)&dword_96894, (char *)v15);
        sub_518A0((uint8*)&dword_96894, (__int16)(600 - v12), 240, v15);
      }
      if ( dword_AC5D4_AC5C4 > v19 )
      {
        if ( !v16 )
        {
          sub_66420(0, 3);
          v16 = 1;
        }
        sub_518A0((uint8*)&dword_96894, 40, 280, (unsigned __int8 *)dword_AE238_AE228[79]);
        sprintf(
            (char*)v15,
          "%dh% 02dm %02ds",
          *(_DWORD *)(*(_DWORD *)(v7 + 160) + 379) / 120 / 3600,
          *(_DWORD *)(*(_DWORD *)(v7 + 160) + 379) / 120 / 60 % 60,
          *(_DWORD *)(*(_DWORD *)(v7 + 160) + 379) / 120 % 60);
        v13 = sub_51760((uint32*)&dword_96894, (char *)v15);
        sub_518A0((uint8*)&dword_96894, (__int16)(600 - v13), 280, v15);
      }
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        Blit_5CDA0_5D2B0();
      else
        Blit_599B0_59EC0(480);
    }
    while ( !v0 );
    FadeInOut_61CC0_621D0(0, 0x10u, 0);
    sub_20E60_20E60();
    sub_5D010_5D520();
  }
  result = dword_AE408_AE3F8();
  if ( *(_WORD *)(dword_AE408_AE3F8() + 17) == 25 )
    mainMenuSelector_12CBCE_12CBBE = 10;
  else
    mainMenuSelector_12CBCE_12CBBE = 2;
  return result;
}
// 4E969: variable 'v3' is possibly undefined
// 4EAC4: variable 'v6' is possibly undefined
// 4A500: using guessed type int dword_4A500[2];
// 4A918: using guessed type int dword_4A918[2];
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 90026: using guessed type __int16 word_90026;
// 90B23: using guessed type char byte_90B23;
// 96894: using guessed type int dword_96894;
// 96898: using guessed type __int16 word_96898;
// 999B8: using guessed type int dword_999B8[];
// AC5C4: using guessed type int dword_AC5D4_AC5C4;
// AE314: using guessed type int dword_AE314;
// AE330: using guessed type int dword_AE330;
// AE334: using guessed type int dword_AE334;
// AE338: using guessed type int dword_AE338;
// AE33C: using guessed type int dword_AE33C;
// AE364: using guessed type int dword_AE364;
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 12CAD4: using guessed type char byte_12CAE4_12CAD4;
// 12CB30: using guessed type int begSFont2Tab_12CB40_2EAB40_2EAB30;
// 12CB34: using guessed type int test_12CB44_2EAB44_2EAB34;
// 12CB38: using guessed type int begSFont2Dat_12CB48_2EAB48_2EAB38;
// 12CB8C: using guessed type int begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C;
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12EEE1: using guessed type char pressedKeys_12EEF0_12EEE0[1];
// 12EEFC: using guessed type char pressedKeys_12EEF0_12EEE0[28];
// 12EF19: using guessed type char pressedKeys_12EEF0_12EEE0[57];
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFCA: using guessed type __int16 word_12EFDA_12EFCA;
// 12EFCC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFCE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004F1B0) --------------------------------------------------------
void sub_4F1B0()
{
  int v0; // eax
  int v1; // eax

  //fix
  v1 = 0;
  //fix

  if ( !byte_90B23 )
    sub_5C05C_5C56C(0);
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  sprintf(&unk_9ADC8, aIntroLogoDat);
  word_12EFDA_12EFCA = 0;
  mouseRightButton_12EFDC_12EFCC = 0;
  mouseLeftButton_12EFDE_12EFCE = 0;
  lastPressedKey_12EF70_12EF60 = 0;
  word_90026 = 0;
  sub_107C0(1, 1, (int)dword_4A960);
  sub_4B7C0(0, 8);
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  sub_5D010_5D520();
  sub_20E60_20E60();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  mainMenuSelector_12CBCE_12CBBE = 0;
}
// 4F1EC: variable 'v0' is possibly undefined
// 4F2B1: variable 'v1' is possibly undefined
// 4A960: using guessed type int dword_4A960[2];
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 90026: using guessed type __int16 word_90026;
// 90B23: using guessed type char byte_90B23;
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFCA: using guessed type __int16 word_12EFDA_12EFCA;
// 12EFCC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFCE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004F300) --------------------------------------------------------
void sub_4EFC0_4F300()
{
  int v1; // eax
  int v2; // eax

  //fix
  v2 = 0;
  //fix

  sub_19470();
  if ( *(_BYTE *)(dword_AE408_AE3F8() + 8) )
  {
    if ( !byte_90B23 )
      sub_5C05C_5C56C(0);
    FadeInOut_61CC0_621D0(0, 0x10u, 0);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
    else
      sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
    sprintf(&unk_9ADC8, aIntroIntelDat);
    word_12EFDA_12EFCA = 0;
    mouseRightButton_12EFDC_12EFCC = 0;
    mouseLeftButton_12EFDE_12EFCE = 0;
    lastPressedKey_12EF70_12EF60 = 0;
    word_90026 = 0;
    sub_107C0(1, 1, (int)dword_4A524);
    sub_4B7C0(0, 1);
    FadeInOut_61CC0_621D0(0, 0x10u, 0);
    sub_5D010_5D520();
    sub_20E60_20E60();
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
    else
      sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
  }
  mainMenuSelector_12CBCE_12CBBE = 9;
}
// 4F350: variable 'v1' is possibly undefined
// 4F415: variable 'v2' is possibly undefined
// 4A524: using guessed type int dword_4A524[2];
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 90026: using guessed type __int16 word_90026;
// 90B23: using guessed type char byte_90B23;
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFCA: using guessed type __int16 word_12EFDA_12EFCA;
// 12EFCC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFCE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//SYNCHRONIZED WITH REMC1
void sub_4F120_4F460()
{
    int v0; // ebx
    uint8_t* v1; // eax
    __int16 v2; // dx

    v0 = dword_AC5D4_AC5C4;
    v1 = sub_1002D(dword_12CB6C_12CB5C, begWscreen_2ECFF4_2ECFE4);
    v2 = word_12CB70_12CB60 + 1;
    dword_12CB6C_12CB5C = v1;
    word_12CB70_12CB60 = v2;
    if (v2 == 5)
    {
        word_12CB70_12CB60 = 1;
        dword_12CB6C_12CB5C = dword_12CB68_12CB58;
    }
    else if (v2 == 1 && !dword_12CB68_12CB58)
    {
        dword_12CB68_12CB58 = v1;
    }
    if ((typeResolution_12F02E_12F01E & 1) != 0)
        Blit_5CDA0_5D2B0();
    else
        Blit_599B0_59EC0(480);
    if (!mouseLeftButton_12EFDE_12EFCE && !mouseRightButton_12EFDC_12EFCC && !word_12EFDA_12EFCA && !lastPressedKey_12EF70_12EF60)
    {
        while (v0 + 16 >= (unsigned int)dword_AC5D4_AC5C4)
            ;
    }
}

//----- (0004F520) --------------------------------------------------------
int sub_4F520()
{
  int v0; // eax
  int v1; // eax
  int result; // eax

  //fix
  v1 = 0;
  //fix

  if ( !byte_90B23 )
    sub_5C05C_5C56C(0);
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  if ( *(_BYTE *)(dword_AE400_AE3F0() + 8608) == 32 )
  {
    sub_40440_40780((Pathstruct*)"intro\\title-04.dat");
    dword_12CB6C_12CB5C = begTitle02Dat_12CB64_2EAB64_2EAB54;
    dword_12CB68_12CB58 = 0;
    word_12CB70_12CB60 = 0;
  }
  sprintf(&unk_9ADC8, aIntroTitle03Da);
  word_12EFDA_12EFCA = 0;
  mouseRightButton_12EFDC_12EFCC = 0;
  mouseLeftButton_12EFDE_12EFCE = 0;
  lastPressedKey_12EF70_12EF60 = 0;
  if ( (byte_12CBD6_12CBC6 & 2) != 0 )
    word_90026 = 1;
  sub_107C0(1, 1, (int)dword_4A8A8);
  word_90026 = 0;
  if ( *(_BYTE *)(dword_AE400_AE3F0() + 8608) == 32 )
  {
    if ( !word_AC5CC )
      sub_4B7C0((int (*)(void))sub_4F120_4F460, 6);
  }
  else if ( !word_AC5CC )
  {
    sub_4B7C0(0, 6);
  }
  dword_12CBB0_12CBA0 = 0;
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  sub_5D010_5D520();
  sub_20E60_20E60();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  result = dword_AE400_AE3F0();
  if ( *(_BYTE *)(dword_AE400_AE3F0() + 8608) == 32 )
    sub_61610_61B20((Pathstruct*)(char*)"intro\\title-04.dat");
  mainMenuSelector_12CBCE_12CBBE = 2;
  byte_12CBD6_12CBC6 &= ~2u;
  return result;
}
// 4F55E: variable 'v0' is possibly undefined
// 4F69C: variable 'v1' is possibly undefined
// 4A8A8: using guessed type int dword_4A8A8[2];
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 90026: using guessed type __int16 word_90026;
// 90B23: using guessed type char byte_90B23;
// AC5CC: using guessed type __int16 word_AC5CC;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// 12CB54: using guessed type int begTitle02Dat_12CB64_2EAB64_2EAB54;
// 12CB58: using guessed type int dword_12CB68_12CB58;
// 12CB5C: using guessed type int dword_12CB6C_12CB5C;
// 12CB60: using guessed type __int16 word_12CB70_12CB60;
// 12CBA0: using guessed type int dword_12CBB0_12CBA0;
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBC6: using guessed type char byte_12CBD6_12CBC6;
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFCA: using guessed type __int16 word_12EFDA_12EFCA;
// 12EFCC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFCE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

void sub_4F3F0_4F730()//2203F0_
{
	char filename[56];
	sprintf(filename, "%s%s\\language.inf", "C:", "\\carpet.cd");
	bool endCycle = false;
	FILE* file = DataFileIO::CreateOrOpenFile(FixPath(filename), 514);
	if (file != nullptr)
	{
		DataFileIO::Close(file);
		file = DataFileIO::CreateOrOpenFile(FixPath(filename), 512);
		if (file != nullptr)
		{
			DataFileIO::Read(file, &str_AE408_AE3F8->var_u8_151, 1);
			DataFileIO::Close(file);
		}
	}
	else
	{
		dword_12CBB0_12CBA0 = 0;
		sub_3EEA0_3F1E0((char*)"data\\screens\\language.pal", (uint8_t*)begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C);
		sub_3EEA0_3F1E0((char*)"data\\screens\\language.dat", begBscreen_AE3FC_AE3EC_26C3FC_26C3EC);
		sub_40440_40780(&pathStrArray_21AB80_21AEC0[PSdatascreenslangsprdat]);
		if ((typeResolution_12F02E_12F01E & 1) != 0)
		{
			sub_65D70_66280(begLangSprTab_12CB58_2EAB58_2EAB48, test_12CB5C_2EAB5C_2EAB4C, begLangSprDat_12CB60_2EAB60_2EAB50);
		}
		else
		{
			sub_65DC0_662D0(begLangSprTab_12CB58_2EAB58_2EAB48, test_12CB5C_2EAB5C_2EAB4C, begLangSprDat_12CB60_2EAB60_2EAB50);
		}
		if ((typeResolution_12F02E_12F01E & 1) != 0)
		{
			CopyScreen_62FA8_634B8((const void*)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void*)begWscreen_2ECFF4_2ECFE4, 0xC8u);
		}
		else
		{
			CopyScreen_62FC4_634D4((const void*)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void*)begWscreen_2ECFF4_2ECFE4, 0x1E0u);
		}
		if ((typeResolution_12F02E_12F01E & 1) != 0)
			Blit_5CDA0_5D2B0();
		else
			Blit_599B0_59EC0(480);
		if (!byte_90B23)
			sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
		FadeInOut_61CC0_621D0(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x20u, 0);
		byte_12CAE4_12CAD4 &= ~1u;
		pressedKeys_12EEF0_12EEE0[1] = 0;
		byte_12CBD5_12CBC5 |= 1u;
		do
		{
			sub_50770_50AB0();
			if ((byte_12CAE4_12CAD4 & 1) != 0)
			{
				if (mouseX_12CAE0_12CAD0 >> 1 < 64 || mouseX_12CAE0_12CAD0 >> 1 > 139 || mouseY_12CAE2_12CAD2 >> 1 < 43 || mouseY_12CAE2_12CAD2 >> 1 > 82)
				{
					if (mouseX_12CAE0_12CAD0 >> 1 < 64 || mouseX_12CAE0_12CAD0 >> 1 > 139 || mouseY_12CAE2_12CAD2 >> 1 < 95 || mouseY_12CAE2_12CAD2 >> 1 > 134)
					{
						if (mouseX_12CAE0_12CAD0 >> 1 < 179 || mouseX_12CAE0_12CAD0 >> 1 > 254 || mouseY_12CAE2_12CAD2 >> 1 < 43 || mouseY_12CAE2_12CAD2 >> 1 > 82)
						{
							if (mouseX_12CAE0_12CAD0 >> 1 < 179 || mouseX_12CAE0_12CAD0 >> 1 > 254 || mouseY_12CAE2_12CAD2 >> 1 < 95 || mouseY_12CAE2_12CAD2 >> 1 > 134)
							{
								if (mouseX_12CAE0_12CAD0 >> 1 >= 281 && mouseX_12CAE0_12CAD0 >> 1 <= 304)
								{
									if (mouseY_12CAE2_12CAD2 >> 1 >= 115 && mouseY_12CAE2_12CAD2 >> 1 <= 142)
										endCycle = true;
								}
							}
							else
							{
								str_AE408_AE3F8->var_u8_151 = 3;
							}
						}
						else
						{
							str_AE408_AE3F8->var_u8_151 = 2;
						}
					}
					else
					{
						str_AE408_AE3F8->var_u8_151 = 1;
					}
				}
				else
				{
					str_AE408_AE3F8->var_u8_151 = 0;
				}
				byte_12CAE4_12CAD4 &= ~1u;
			}
			if ((typeResolution_12F02E_12F01E & 1) != 0)
			{
				CopyScreen_62FA8_634B8((const void*)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void*)begWscreen_2ECFF4_2ECFE4, 0xC8u);
			}
			else
			{
				CopyScreen_62FC4_634D4((const void*)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void*)begWscreen_2ECFF4_2ECFE4, 0x1E0u);
			}
			if ((typeResolution_12F02E_12F01E & 1) != 0)
				DrawBitmap_60CE0_611F0(
					2 * asc_4A8F4_4AC34[2 * str_AE408_AE3F8->var_u8_151 + 1],
					2 * asc_4A8F4_4AC34[2 * str_AE408_AE3F8->var_u8_151 + 2],
					(TypeTab*)(&begLangSprTab_12CB58_2EAB58_2EAB48[6 * (str_AE408_AE3F8->var_u8_151 + 1)]));
			else
				DrawBitmap_60D18_61228(
					2 * asc_4A8F4_4AC34[2 * str_AE408_AE3F8->var_u8_151 + 1],
					2 * asc_4A8F4_4AC34[2 * str_AE408_AE3F8->var_u8_151 + 2],
					(TypeTab*)(&begLangSprTab_12CB58_2EAB58_2EAB48[6 * (str_AE408_AE3F8->var_u8_151 + 1)]));
			if ((typeResolution_12F02E_12F01E & 1) != 0)
				Blit_5CDA0_5D2B0();
			else
				Blit_599B0_59EC0(480);
			dword_12CBB0_12CBA0++;
		} while (!endCycle);
		FadeInOut_61CC0_621D0(0, 0x10u, 0);
		if (!byte_90B23)
			sub_5C05C_5C56C(0);
		pressedKeys_12EEF0_12EEE0[1] = 0;
		byte_12CAE4_12CAD4 &= ~1u;
		file = DataFileIO::CreateOrOpenFile(FixPath(filename), 546);
		if (file != nullptr)
		{
			FileWrite_62ED0_633E0(file, &str_AE408_AE3F8->var_u8_151, 1);
			DataFileIO::Close(file);
		}
	}
	switch (str_AE408_AE3F8->var_u8_151)
	{
	case 0:
		sub_40440_40780(&pathStrArray[PSdataetextdat]);
		break;
	case 1:
		sub_40440_40780(&pathStrArray[PSdataftextdat]);
		break;
	case 2:
		sub_40440_40780(&pathStrArray[PSdatagtextdat]);
		break;
	case 3:
		sub_40440_40780(&pathStrArray[PSdataitextdat]);
		break;
	default:
		break;
	}
	sub_61610_61B20(&pathStrArray_21AB80_21AEC0[PSdatascreenslangsprdat]);
	sub_44700_44A40((char*)begTextDat_AE41C_AE40C_26C41C_26C40C, dword_AE238_AE228, 80);
	mainMenuSelector_12CBCE_12CBBE = 1;
	byte_12CBD5_12CBC5 &= ~1u;
}

//----- (0004FC10) --------------------------------------------------------
int sub_4F8D0_sub_4FC10(int a1, void (*a2)(int))
{
  int v2; // ebx
  __int16 v3; // si
  __int16 v4; // cx
  __int16 v5; // ax
  int v6; // eax
  int v7; // eax
  int v8; // eax
  int v9; // eax
  int v10; // eax

  //fix
  v5 = 0;
  v6 = 0;
  //fix

  v2 = 0;
  v3 = 0;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begScreenBackup_12CBA4_2EABA4_2EAB94, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begScreenBackup_12CBA4_2EABA4_2EAB94, 0x1E0u);
  if ( !byte_90B23 )
    sub_5C05C_5C56C(0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  sprintf(&unk_9ADC8, aIntroScrollDat);
  dword_AC5B4 = (int (*)(_DWORD))sub_507B0;
  word_90026 = 0;
  sub_107C0(0, 0, (int)dword_4A4BC);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begWscreen_2ECFF4_2ECFE4, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begWscreen_2ECFF4_2ECFE4, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
  HIBYTE(v4) = 0;
  dword_AC5B4 = 0;
  if ( !byte_90B23 )
    sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
  sub_51720();
  sub_516A0(80, 73, 159, 48);
  do
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    {
      HIBYTE(v4) = BYTE1(begWscreen_2ECFF4_2ECFE4);
      CopyScreen_62FA8_634B8((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0xC8u);
    }
    else
    {
      CopyScreen_62FC4_634D4((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u);
    }
    LOBYTE(v4) = byte_90B23;
    if ( !byte_90B23 || (byte_90B23 & 0x23) != 0 && (v3 & 3) == 0 )
      sub_50770_50AB0();
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(136, 210, (TypeTab*)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 30));
    else
      DrawBitmap_60D18_61228(136, 210, (TypeTab*)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 30));
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(480, 210, (TypeTab*)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 36));
    else
      DrawBitmap_60D18_61228(480, 210, (TypeTab*)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 36));
    if ( a2 )
      a2(v6);
    if ( (byte_12CAE4_12CAD4 & 1) != 0 || pressedKeys_12EEF0_12EEE0[1] || pressedKeys_12EEF0_12EEE0[28] )
    {
      v7 = mouseX_12CAE0_12CAD0 >> 1;
      if ( v7 >= 68 && v7 <= 81 && (v8 = mouseY_12CAE2_12CAD2 >> 1, v8 >= 106) && v8 <= 116 || pressedKeys_12EEF0_12EEE0[28] )
      {
        v2 = 1;
        a1 = 1;
      }
      else
      {
        v9 = mouseX_12CAE0_12CAD0 >> 1;
        if ( v9 >= 240 && v9 <= 250 && (v10 = mouseY_12CAE2_12CAD2 >> 1, v10 >= 105) && v10 <= 115 || pressedKeys_12EEF0_12EEE0[1] )
        {
          v2 = 1;
          a1 = 0;
        }
      }
      HIBYTE(v4) = 0;
      mouseLeftButton_12EFDE_12EFCE = 0;
      byte_12CAE4_12CAD4 &= ~1u;
    }
    if ( (byte_90B23 & 0x23) != 0 )
    {
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        DrawBitmap_60CE0_611F0(mouse_9AD90.x, mouse_9AD90.y, (TypeTab*)(begSptrsTab_12CAEC_2EAAEC_2EAADC + 6 * (unsigned __int8)mainMenuSelector_12CBCE_12CBBE));
      else
        DrawBitmap_60D18_61228(mouse_9AD90.x, mouse_9AD90.y, (TypeTab*)(6 * (unsigned __int8)mainMenuSelector_12CBCE_12CBBE + begSptrsTab_12CAEC_2EAAEC_2EAADC));
    }
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
    ++v3;
  }
  while ( !v2 );
  sub_51740();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begScreenBackup_12CBA4_2EABA4_2EAB94, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begScreenBackup_12CBA4_2EABA4_2EAB94, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  mouseRightButton_12EFDC_12EFCC = 0;
  mouseLeftButton_12EFDE_12EFCE = 0;
  pressedKeys_12EEF0_12EEE0[1] = 0;
  byte_12CAE4_12CAD4 &= 0xBEu;
  pressedKeys_12EEF0_12EEE0[28] = 0;
  return a1;
}
// 4FDAD: variable 'v5' is possibly undefined
// 4A4BC: using guessed type int dword_4A4BC[6];
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 90026: using guessed type __int16 word_90026;
// 90B23: using guessed type char byte_90B23;
// 9AD90: using guessed type int dword_9AD90;
// AC5B4: using guessed type int (*dword_AC5B4)(_DWORD);
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12CAD0: using guessed type __int16 mouseX_12CAE0_12CAD0;
// 12CAD2: using guessed type __int16 mouseY_12CAE2_12CAD2;
// 12CAD4: using guessed type char byte_12CAE4_12CAD4;
// 12CADC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CAF4: using guessed type int begMmSprTab_12CB04_2EAB04_2EAAF4;
// 12CB94: using guessed type int begScreenBackup_12CBA4_2EABA4_2EAB94;
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12EEE1: using guessed type char pressedKeys_12EEF0_12EEE0[1];
// 12EEFC: using guessed type char pressedKeys_12EEF0_12EEE0[28];
// 12EFCC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFCE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00050060) --------------------------------------------------------
int sub_50060(int a1)
{
  int result; // eax
  int v2; // esi
  int v3; // esi

  if ( sub_4F8D0_sub_4FC10(a1, (void (*)(int))sub_50140) )
  {
    sub_4CAC0_4CE00();
    result = 2049 * str_AE400_AE3F0->var_u16_8;
    *(_BYTE *)(dword_AE400_AE3F0() + result + 13327) = 1;
    bool_96880 = true;
  }
  else
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      CopyScreen_62FA8_634B8((const void *)begScreenBackup2_12CBA8_2EABA8_2EAB98, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
    else
      CopyScreen_62FC4_634D4((const void *)begScreenBackup2_12CBA8_2EABA8_2EAB98, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
    byte_12CBCD_12CBBD = 0;
    v2 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
    begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = begWscreen_2ECFF4_2ECFE4;
    begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v2;
    sub_4CEB0();
    result = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
    v3 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
    begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = begWscreen_2ECFF4_2ECFE4;
    begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v3;
  }
  return result;
}
// 96880: using guessed type int bool_96880;
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// 12CB98: using guessed type int begScreenBackup2_12CBA8_2EABA8_2EAB98;
// 12CBBD: using guessed type char byte_12CBCD_12CBBD;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00050140) --------------------------------------------------------
int sub_50140()
{
  int v0; // eax

  sub_65EB0_663C0(65, 75, 189, 44);
  v0 = (int)*(unsigned __int8 *)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 46) >> 1;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    DrawBitmap_60CE0_611F0(189 - v0, 44 - ((int)*(unsigned __int8 *)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 47) >> 1), (TypeTab*)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 42));
  else
    DrawBitmap_60D18_61228(189 - v0, 44 - ((int)*(unsigned __int8 *)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 47) >> 1), (TypeTab*)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 42));
  return sub_65EB0_663C0(0, 0, 320, 200);
}
// 12CAF4: using guessed type int begMmSprTab_12CB04_2EAB04_2EAAF4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00050270) --------------------------------------------------------
void sub_50270(int a1)
{
  int v1; // edx

  if ( byte_9687C )
  {
    byte_9687C = 0;
    byte_12CBD5_12CBC5 |= 8u;
    mainMenuSelector_12CBCE_12CBBE = 5;
    bool_96880 = true;
  }
  else if ( sub_4F8D0_sub_4FC10(a1, (void (*)(int))sub_50320) )
  {
    v1 = dword_AE400_AE3F0();
    *(_WORD *)(dword_AE408_AE3F8() + 17) = 0;
    mainMenuSelector_12CBCE_12CBBE = 5;
    memset((void*)(2049 * *(__int16 *)(v1 + 8) + v1 + 13323 + 1995), 0, 24);
    bool_96880 = true;
    byte_12CBD5_12CBC5 |= 8u;
  }
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 9687C: using guessed type char byte_9687C;
// 96880: using guessed type int bool_96880;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBC5: using guessed type char byte_12CBD5_12CBC5;

//----- (00050320) --------------------------------------------------------
void sub_50320()
{
  int v0; // eax
  unsigned __int8 *v1; // [esp-4h] [ebp-1Ch]
  _DWORD v2[6]; // [esp+0h] [ebp-18h] BYREF

  sub_516E0(v2);
  v1 = (unsigned __int8 *)dword_AE238_AE228[36];
  v0 = sub_51760((uint32*)&str_9688C, (char *)dword_AE238_AE228[36]);
  sub_518A0((uint8*)&str_9688C, (__int16)((v2[4] - v0) / 2), 12, v1);
}
// 9688C: using guessed type int dword_9688C;
// AE2B8: using guessed type int dword_AE2B8;

//----- (00050370) --------------------------------------------------------
void sub_50370()
{
  int v0; // ecx
  void *v1; // edi
  int v2; // ebp

  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begScreenBackup_12CBA4_2EABA4_2EAB94, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begScreenBackup_12CBA4_2EABA4_2EAB94, 0x1E0u);
  sprintf(&unk_9ADC8, aIntroScrollDat);
  dword_AC5B4 = (int (*)(_DWORD))sub_507B0;
  if ( !byte_90B23 )
    sub_5C05C_5C56C(0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  word_90026 = 0;
  sub_107C0(0, 0, (int)dword_4A4BC);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begWscreen_2ECFF4_2ECFE4, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begWscreen_2ECFF4_2ECFE4, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
  if ( !byte_90B23 )
    sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
  dword_AC5B4 = 0;
  sub_51720();
  sub_516A0(70, 73, 179, 48);
  sub_51080(8, 25, 30, 0, (char *)(dword_AE408_AE3F8() + 29), 255, 0, sub_50690, 1, (int)&str_9688C);
  byte_12CBD5_12CBC5 |= 0x20u;
  pressedKeys_12EEF0_12EEE0[28] = 0;
  byte_12CAE4_12CAD4 &= ~1u;
  sub_51080(8, 25, 8, 0, (char *)(dword_AE408_AE3F8() + 61), 255, 0, sub_50720, 1, (int)&str_9688C);
  pressedKeys_12EEF0_12EEE0[28] = 0;
  byte_12CBD5_12CBC5 &= ~0x20u;
  byte_12CAE4_12CAD4 &= ~1u;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begScreenBackup_12CBA4_2EABA4_2EAB94, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begScreenBackup_12CBA4_2EABA4_2EAB94, (void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
  mainMenuSelector_12CBCE_12CBBE = 2;
  v0 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = begWscreen_2ECFF4_2ECFE4;
  begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v0;
  sub_4CEB0();
  v1 = (void *)begWscreen_2ECFF4_2ECFE4;
  v2 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = begWscreen_2ECFF4_2ECFE4;
  begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v2;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begScreenBackup_12CBA4_2EABA4_2EAB94, v1, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begScreenBackup_12CBA4_2EABA4_2EAB94, v1, 0x1E0u);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  sub_51740();
}
// 4A4BC: using guessed type int dword_4A4BC[6];
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 90026: using guessed type __int16 word_90026;
// 90B23: using guessed type char byte_90B23;
// 9688C: using guessed type int dword_9688C;
// AC5B4: using guessed type int (*dword_AC5B4)(_DWORD);
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 12CAD4: using guessed type char byte_12CAE4_12CAD4;
// 12CADC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CB94: using guessed type int begScreenBackup_12CBA4_2EABA4_2EAB94;
// 12CBBE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBC5: using guessed type char byte_12CBD5_12CBC5;
// 12EEFC: using guessed type char pressedKeys_12EEF0_12EEE0[28];
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00050690) --------------------------------------------------------
void sub_50690()
{
  int v0; // eax
  unsigned __int8 *v1; // [esp-4h] [ebp-28h]
  _DWORD v2[9]; // [esp+0h] [ebp-24h] BYREF

  sub_516E0(v2);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  v1 = (unsigned __int8 *)dword_AE238_AE228[34];
  v0 = sub_51760((uint32*)&str_9688C, (char *)dword_AE238_AE228[34]);
  sub_518A0((uint8*)&str_9688C, (__int16)((v2[4] - v0) / 2), 10, v1);
}
// 9688C: using guessed type int dword_9688C;
// AE2B0: using guessed type int dword_AE2B0;
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00050720) --------------------------------------------------------
void sub_50720()
{
  int v0; // eax
  unsigned __int8 *v1; // [esp-4h] [ebp-28h]
  _DWORD v2[9]; // [esp+0h] [ebp-24h] BYREF

  sub_516E0(v2);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4((const void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  v1 = (unsigned __int8 *)dword_AE238_AE228[35];
  v0 = sub_51760((uint32*)&str_9688C, (char *)dword_AE238_AE228[35]);
  sub_518A0((uint8*)&str_9688C, (__int16)((v2[4] - v0) / 2), 10, v1);
}
// 9688C: using guessed type int dword_9688C;
// AE2B4: using guessed type int dword_AE2B4;
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (000507B0) --------------------------------------------------------
_BYTE *sub_507B0()
{
  _BYTE *v0; // ebx
  _BYTE *result; // eax
  int v2; // edx

  v0 = (_BYTE *)begScreenBackup_12CBA4_2EABA4_2EAB94;
  result = (_BYTE *)begWscreen_2ECFF4_2ECFE4;
  v2 = 0;
  do
  {
    if ( !*result )
      *result = *v0;
    ++v0;
    ++v2;
    ++result;
  }
  while ( (unsigned __int16)v2 < 0xFA00u );
  return result;
}
// 12CB94: using guessed type int begScreenBackup_12CBA4_2EABA4_2EAB94;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//----- (000507E0) --------------------------------------------------------
int sub_507E0()
{
  unsigned __int16 i; // bx
  int v1; // ecx
  int v2; // ecx
  int v3; // ecx
  int v4; // esi
  int result; // eax
  unsigned __int16 v6; // dx
  unsigned __int16 v7; // [esp+0h] [ebp-18h]
  unsigned __int16 v8; // [esp+4h] [ebp-14h]

  for ( i = 0; i < 0x100u; ++i )
  {
    v1 = *(unsigned __int8 *)(3 * i + begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C);
    v7 = v1 + 30 * v1 / 100;
    if ( v7 > 0x3Fu )
      LOBYTE(v7) = 63;
    v2 = *(unsigned __int8 *)(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C + 3 * i + 1);
    v3 = 30 * v2 / 100 + v2;
    if ( (unsigned __int16)v3 > 0x3Fu )
      LOBYTE(v3) = 63;
    v4 = *(unsigned __int8 *)(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C + 3 * i + 2);
    v8 = v4 + 30 * v4 / 100;
    if ( v8 > 0x3Fu )
      LOBYTE(v8) = 63;
    LOBYTE(result) = sub_5CC70_5D180(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, v7, v3, v8);
    v6 = i;
    *(_BYTE *)(begBrightTable_12CBAC_2EABAC_2EAB9C + v6) = result;
  }
  return result;
}
// 12CB8C: using guessed type int begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C;
// 12CB9C: using guessed type int begBrightTable_12CBAC_2EABAC_2EAB9C;

int sub_505A0_508E0()
{
  int v0; // ebp
  FILE* v1; // eax
  FILE* v2; // eax
  FILE* v3; // ebx
  char v5[48]; // [esp+0h] [ebp-30h] BYREF

  sprintf(v5, "%s%s\\sndsetup.inf", "C:", "\\carpet.cd");
  v0 = 0;
  v1 = DataFileIO::CreateOrOpenFile((char*)v5, 514);
  if ( v1 == nullptr )
  {
    word_12C9C0_12C9B0[0] = word_A9990_A99A8;
    word_12C9E0_12C9D0[0] = word_A9990_A99A8;
    word_12CA9E_12CA8E[0] = word_A9990_A99A8;
    word_12CA80_12CA70[0] = word_A9990_A99A8;
    word_12CAB2_12CAA2[0] = word_A9990_A99A8;
    word_12CA8A_12CA7A[0] = word_A9990_A99A8;
    word_12CAC6_12CAB6 = word_A9990_A99A8;
    strcpy(byte_12C9A0_12C990, "NONE");
    mouseX_12CAE0_12CAD0_12CAC0[0] = word_A9990_A99A8;
    word_12CAA8_12CA98[0] = word_A9990_A99A8;
    word_12CA94_12CA84[0] = word_A9990_A99A8;
    strcpy(byte_12CA00_12C9F0, "NONE");
  }
  else
  {
    DataFileIO::Close(v1);
    sprintf(v5, "%s%s\\sndsetup.dat", "C:", "\\carpet.cd");
    v2 = DataFileIO::CreateOrOpenFile((char*)v5, 514);
    v3 = v2;
    if ( v2 != nullptr )
    {
      DataFileIO::Read(v2, (uint8_t*)byte_12C9A0_12C990, 32);
      DataFileIO::Read(v3, (uint8_t*)word_12C9C0_12C9B0, 32);
      DataFileIO::Read(v3, (uint8_t*)byte_12CA00_12C9F0, 32);
      DataFileIO::Read(v3, (uint8_t*)word_12C9E0_12C9D0, 32);
      DataFileIO::Read(v3, (uint8_t*)&word_12CA9E_12CA8E, 10);
      DataFileIO::Read(v3, (uint8_t*)word_12CA80_12CA70, 10);
      DataFileIO::Read(v3, (uint8_t*)&word_12CAB2_12CAA2, 10);
      DataFileIO::Read(v3, (uint8_t*)word_12CA8A_12CA7A, 10);
      DataFileIO::Read(v3, (uint8_t*)&word_12CAC6_12CAB6, 10);
      DataFileIO::Read(v3, (uint8_t*)mouseX_12CAE0_12CAD0_12CAC0, 10);
      DataFileIO::Read(v3, (uint8_t*)&word_12CAA8_12CA98, 10);
      DataFileIO::Read(v3, (uint8_t*)word_12CA94_12CA84, 10);
      v0 = 1;
      DataFileIO::Close(v3);
    }
  }
  dword_12CABC_12CAAC = dword_A99A0_A99B8;
  word_12CA20_12CA10 = word_A9990_A99A8;
  return v0;
}

void sub_50770_50AB0()
{
  if ( byte_12CBCF_12CBBF )
  {
    if ( byte_12CBCF_12CBBF <= 1u )
    {
      if ( pressedKeys_12EEF0_12EEE0[72] )
      {
        byte_12CAE7_12CAD7 &= ~0x80u;
        if ( (byte_12CAE8_12CAD8 & 1) != 0 )
          byte_12CAE7_12CAD7 &= 0xBF;
        else
          byte_12CAE7_12CAD7 |= 0x40;
        byte_12CAE8_12CAD8 |= 1u;
      }
      else
      {
        byte_12CAE7_12CAD7 &= ~0x40u;
        if ( (byte_12CAE8_12CAD8 & 1) != 0 )
          byte_12CAE7_12CAD7 |= 0x80;
        else
          byte_12CAE7_12CAD7 &= 0x7F;
        byte_12CAE8_12CAD8 &= ~1u;
      }
      if ( pressedKeys_12EEF0_12EEE0[80] )
      {
        byte_12CAE8_12CAD8 &= 0xFB;
        if ( (byte_12CAE8_12CAD8 & 8) != 0 )
          byte_12CAE8_12CAD8 &= 0xFD;
        else
          byte_12CAE8_12CAD8 |= 2;
        byte_12CAE8_12CAD8 |= 8u;
      }
      else
      {
        byte_12CAE8_12CAD8 &= 0xFD;
        if ( (byte_12CAE8_12CAD8 & 8) != 0 )
          byte_12CAE8_12CAD8 |= 4;
        else
          byte_12CAE8_12CAD8 &= 0xFB;
        byte_12CAE8_12CAD8 &= ~8u;
      }
      if ( pressedKeys_12EEF0_12EEE0[75] )
      {
        byte_12CAE7_12CAD7 &= 0xFD;
        if ( (byte_12CAE7_12CAD7 & 4) != 0 )
          byte_12CAE7_12CAD7 &= 0xFE;
        else
          byte_12CAE7_12CAD7 |= 1;
        byte_12CAE7_12CAD7 |= 4u;
      }
      else
      {
       byte_12CAE7_12CAD7 &= 0xFE;
        if ( (byte_12CAE7_12CAD7 & 4) != 0 )
          byte_12CAE7_12CAD7 |= 2;
        else
          byte_12CAE7_12CAD7 &= 0xFD;
        byte_12CAE7_12CAD7 &= ~4u;
      }
      if ( pressedKeys_12EEF0_12EEE0[77] )
      {
        byte_12CAE7_12CAD7 &= 0xEF;
        if ( (byte_12CAE7_12CAD7 & 0x20) != 0 )
          byte_12CAE7_12CAD7 &= 0xF7;
        else
          byte_12CAE7_12CAD7 |= 8;
        byte_12CAE7_12CAD7 |= 0x20u;
      }
      else
      {
        byte_12CAE7_12CAD7 &= 0xF7;
        if ( (byte_12CAE7_12CAD7 & 0x20) != 0 )
          byte_12CAE7_12CAD7 |= 0x10;
        else
          byte_12CAE7_12CAD7 &= 0xEF;
        byte_12CAE7_12CAD7 &= ~0x20u;
      }
      if ( pressedKeys_12EEF0_12EEE0[71] )
      {
        byte_12CAE5_12CAD5 &= 0xDF;
        if ( (byte_12CAE5_12CAD5 & 0x40) != 0 )
          byte_12CAE5_12CAD5 &= 0xEF;
        else
          byte_12CAE5_12CAD5 |= 0x10;
        byte_12CAE5_12CAD5 |= 0x40u;
      }
      else
      {
        byte_12CAE5_12CAD5 &= 0xEF;
        if ( (byte_12CAE5_12CAD5 & 0x40) != 0 )
          byte_12CAE5_12CAD5 |= 0x20;
        else
          byte_12CAE5_12CAD5 &= 0xDF;
        byte_12CAE5_12CAD5 &= ~0x40u;
      }
      if ( pressedKeys_12EEF0_12EEE0[73] )
      {
        byte_12CAE6_12CAD6 &= ~1u;
        if ( (byte_12CAE6_12CAD6 & 2) != 0 )
          byte_12CAE5_12CAD5 &= ~0x80u;
        else
          byte_12CAE5_12CAD5 |= 0x80u;
        byte_12CAE6_12CAD6 |= 2u;
      }
      else
      {
        byte_12CAE5_12CAD5 &= ~0x80u;
        if ( (byte_12CAE6_12CAD6 & 2) != 0 )
          byte_12CAE6_12CAD6 |= 1u;
        else
          byte_12CAE6_12CAD6 &= ~1u;
        byte_12CAE6_12CAD6 &= ~2u;
      }
      if ( pressedKeys_12EEF0_12EEE0[79] )
      {
        byte_12CAE6_12CAD6 &= 0xF7;
        if ( (byte_12CAE6_12CAD6 & 0x10) != 0 )
          byte_12CAE6_12CAD6 &= 0xFB;
        else
          byte_12CAE6_12CAD6 |= 4;
        byte_12CAE6_12CAD6 |= 0x10u;
      }
      else
      {
        byte_12CAE6_12CAD6 &= 0xFB;
        if ( (byte_12CAE6_12CAD6 & 0x10) != 0 )
          byte_12CAE6_12CAD6 |= 8;
        else
          byte_12CAE6_12CAD6 &= 0xF7;
        byte_12CAE6_12CAD6 &= ~0x10u;
      }
      if ( !pressedKeys_12EEF0_12EEE0[81] )
      {
        byte_12CAE6_12CAD6 &= 0xDF;
        if (byte_12CAE6_12CAD6 >= 0 )
          byte_12CAE6_12CAD6 &= 0xBF;
        else
          byte_12CAE6_12CAD6 |= 0x40;
        byte_12CAE6_12CAD6 &= ~0x80u;
        mouseRightButton_12EFDC_12EFCC = 0;
        mouseLeftButton_12EFDE_12EFCE = 0;
        return;
      }
      byte_12CAE6_12CAD6 &= 0xBF;
      if (byte_12CAE6_12CAD6 >= 0 )
        byte_12CAE6_12CAD6 |= 0x20;
      else
        byte_12CAE6_12CAD6 &= 0xDF;
      byte_12CAE6_12CAD6 |= 0x80u;
      mouseRightButton_12EFDC_12EFCC = 0;
      mouseLeftButton_12EFDE_12EFCE = 0;
    }
    else
    {
      if ( byte_12CBCF_12CBBF != 2 )
      {
        mouseRightButton_12EFDC_12EFCC = 0;
        mouseLeftButton_12EFDE_12EFCE = 0;
        return;
      }
      if ( (byte_90B23 & 0x23) != 0 )
        sub_3FCA0_3FFE0(2, 0, 0, 640, 400, 4, 4);
      dword_12CACC = *(uint32*)&mouse_9AD90;
      mouseX_12CAE0_12CAD0 = mouseX_9AD8C;
      mouseY_12CAE2_12CAD2 = mouseY_9AD8E;
      if ( mouseLeftButton2_12EFE4_12EFD4 )
      {
        byte_12CAE4_12CAD4 &= 0xFD;
        if ( (byte_12CAE4_12CAD4 & 4) != 0 )
          byte_12CAE4_12CAD4 &= 0xFE;
        else
          byte_12CAE4_12CAD4 |= 1;
        byte_12CAE4_12CAD4 |= 4u;
      }
      else
      {
        byte_12CAE4_12CAD4 &= 0xFE;
        if ( (byte_12CAE4_12CAD4 & 4) != 0 )
          byte_12CAE4_12CAD4 |= 2;
        else
          byte_12CAE4_12CAD4 &= 0xFD;
        byte_12CAE4_12CAD4 &= ~4u;
      }
      if ( mouseRightButton2_12EFE2_12EFD2 )
      {
        byte_12CAE4_12CAD4 &= ~0x80u;
        if ( (byte_12CAE5_12CAD5 & 1) != 0 )
          byte_12CAE4_12CAD4 &= 0xBF;
        else
          byte_12CAE4_12CAD4 |= 0x40;
        byte_12CAE5_12CAD5 |= 1u;
      }
      else
      {
        byte_12CAE4_12CAD4 &= ~0x40u;
        if ( (byte_12CAE5_12CAD5 & 1) != 0 )
          byte_12CAE4_12CAD4 |= 0x80;
        else
          byte_12CAE4_12CAD4 &= 0x7F;
        byte_12CAE5_12CAD5 &= ~1u;
      }
      if ( word_12EFE0_12EFD0 )
      {
        byte_12CAE4_12CAD4 &= 0xEF;
        if ( (byte_12CAE4_12CAD4 & 0x20) != 0 )
          byte_12CAE4_12CAD4 &= 0xF7;
        else
          byte_12CAE4_12CAD4 |= 8;
        byte_12CAE4_12CAD4 |= 0x20u;
        mouseRightButton_12EFDC_12EFCC = 0;
        mouseLeftButton_12EFDE_12EFCE = 0;
      }
      else
      {
        byte_12CAE4_12CAD4 &= 0xF7;
        if ( (byte_12CAE4_12CAD4 & 0x20) != 0 )
        {
          byte_12CAE4_12CAD4 |= 0x10;
        }
        else
        {
          byte_12CAE4_12CAD4 &= 0xEF;
        }
        byte_12CAE4_12CAD4 &= ~0x20u;
        mouseRightButton_12EFDC_12EFCC = 0;
        mouseLeftButton_12EFDE_12EFCE = 0;
      }
    }
  }
  else
  {
    byte_12CAE7_12CAD7 &= 0x24u;
    byte_12CAE8_12CAD8 &= 0xF9u;
    mouseRightButton_12EFDC_12EFCC = 0;
    mouseLeftButton_12EFDE_12EFCE = 0;
  }
}

//----- (00051080) --------------------------------------------------------
bool sub_51080(
        int a1,
        __int16 a2,
        __int16 a3,
        char *a4,
        char *a5,
        char a6,
        int a7,
        void (*a8)(void),
        char a9,
        int a10)
{
  char *v10; // ebx
  unsigned int v11; // ebp
  char v12; // al
  char v13; // al
  unsigned int v14; // esi
  int v15; // esi
  int v16; // eax
  char *v17; // esi
  char *v18; // edi
  __int16 v19; // dx
  char v20; // al
  char v21; // al
  char v22; // al
  int v23; // eax
  int v24; // eax
  int v25; // eax
  int v26; // eax
  int v27; // esi
  int v28; // eax
  int v30; // [esp-14h] [ebp-B4h]
  int v31; // [esp-10h] [ebp-B0h]
  char v32[100]; // [esp+0h] [ebp-A0h] BYREF
  int v33[4]; // [esp+64h] [ebp-3Ch] BYREF
  int v34; // [esp+74h] [ebp-2Ch]
  unsigned int v35; // [esp+7Ch] [ebp-24h]
  char v36[4]; // [esp+80h] [ebp-20h] BYREF
  int v37; // [esp+84h] [ebp-1Ch]
  int v38; // [esp+88h] [ebp-18h]
  char v39; // [esp+8Ch] [ebp-14h]

  //fix
  v34 = 0;
  //fix

  v10 = a5;
  v11 = (unsigned int)&a5[strlen(a5)];
  v35 = (unsigned int)&a5[a3];
  v39 = 1;
  v37 = 0;
  v38 = 0;
  mouseRightButton_12EFDC_12EFCC = 0;
  mouseLeftButton_12EFDE_12EFCE = 0;
  sub_516E0((uint32*)v33);
  if ( a4 )
    v37 = sub_51760((_DWORD *)a10, a4);
  v37 += a1;
  do
  {
    if ( mouseLeftButton_12EFDE_12EFCE )
      v38 = 1;
    if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 < 0x36u )
    {
      if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 < 0xFu )
      {
        if ( lastPressedKey_12EF70_12EF60 )
        {
          if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 1u )
          {
            v38 = 2;
            goto LABEL_73;
          }
          if ( lastPressedKey_12EF70_12EF60 == 14 )
          {
            if ( v10 <= a5 )
              goto LABEL_73;
LABEL_71:
            --v10;
LABEL_72:
            --v11;
            sub_51670((int)v10, 1);
            goto LABEL_73;
          }
        }
      }
      else
      {
        if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0xFu )
          goto LABEL_73;
        if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 >= 0x1Cu )
        {
          if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x1Cu )
          {
            v38 = 1;
            goto LABEL_73;
          }
          if ( lastPressedKey_12EF70_12EF60 == 42 )
            goto LABEL_73;
        }
      }
    }
    else
    {
      if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x36u )
        goto LABEL_73;
      if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 < 0x4Du )
      {
        if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 >= 0x47u )
        {
          if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x47u )
          {
            v10 = a5;
            goto LABEL_73;
          }
          if ( lastPressedKey_12EF70_12EF60 == 75 )
          {
            if ( v10 > a5 )
              --v10;
            goto LABEL_73;
          }
        }
      }
      else
      {
        if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x4Du )
        {
          if ( (unsigned int)v10 < v11 )
            ++v10;
          goto LABEL_73;
        }
        if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 < 0x52u )
        {
          if ( lastPressedKey_12EF70_12EF60 == 79 )
          {
            v10 = (char *)v11;
            goto LABEL_73;
          }
        }
        else
        {
          if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x52u )
            goto LABEL_73;
          if ( lastPressedKey_12EF70_12EF60 == 83 )
          {
            if ( (unsigned int)v10 >= v11 )
              goto LABEL_73;
            goto LABEL_72;
          }
        }
      }
    }
    if ( (byte_12CBD5_12CBC5 & 0x20) == 0
      || (!pressedKeys_12EEF0_12EEE0[42] && !pressedKeys_12EEF0_12EEE0[54]
        ? (v12 = byte_4AB8B[(unsigned __int8)lastPressedKey_12EF70_12EF60])
        : (v12 = byte_4ABC4[(unsigned __int8)lastPressedKey_12EF70_12EF60]),
          v12) )
    {
      if ( lastPressedKey_12EF70_12EF60 && (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x39u && (v39 && v11 < v35 || !v39 && (unsigned int)v10 < v35) )
      {
        v13 = pressedKeys_12EEF0_12EEE0[42] || pressedKeys_12EEF0_12EEE0[54]
            ? byte_4AC7E[(unsigned __int8)lastPressedKey_12EF70_12EF60]
            : byte_4AC45[(unsigned __int8)lastPressedKey_12EF70_12EF60];
        v36[0] = v13;
        v36[1] = 0;
        if ( v39 )
        {
          sub_51610(v10, v36);
          if ( (unsigned int)v10 < v35 )
          {
            ++v10;
            ++v11;
          }
        }
        else
        {
          v14 = v35;
          *v10 = v13;
          if ( (unsigned int)v10 < v14 )
            ++v10;
          if ( (unsigned int)v10 > v11 )
          {
            v11 = (unsigned int)v10;
            *v10 = 0;
          }
        }
        v15 = a9 == 1 ? v34 - 2 * (__int16)a1 : v34 - (__int16)a1;
        if ( sub_51760((_DWORD *)a10, a5) >= v15 && v39 && v10 > a5 )
          goto LABEL_71;
      }
    }
LABEL_73:
    lastPressedKey_12EF70_12EF60 = 0;
    a8();
    *(_BYTE *)(a10 + 6) = a6;
    sub_518A0((_BYTE *)a10, (__int16)a1, a2, (unsigned __int8 *)a4);
    if ( a9 )
    {
      if ( a9 == 1 )
      {
        v16 = sub_51760((_DWORD *)a10, a5);
        sub_518A0((_BYTE *)a10, (__int16)((v34 - v16) / 2), a2, (unsigned __int8 *)a5);
      }
    }
    else
    {
      sub_518A0((_BYTE *)a10, (__int16)v37, a2, (unsigned __int8 *)a5);
    }
    v17 = a5;
    v18 = v32;
    v19 = (_WORD)v10 - (_WORD)a5;
    do
    {
      v20 = *v17;
      *v18 = *v17;
      if ( !v20 )
        break;
      v21 = v17[1];
      v17 += 2;
      v18[1] = v21;
      v18 += 2;
    }
    while ( v21 );
    v22 = v32[v19];
    if ( !v22 )
      v22 = 32;
    v32[v19] = 0;
    v23 = *(_DWORD *)a10 + 6 * (v22 - 32);
    v31 = *(unsigned __int8 *)(v23 + 4);
    v30 = v33[2] + *(unsigned __int8 *)(v23 + 5) + a2 - 2;
    if ( a9 )
    {
      v26 = sub_51760((_DWORD *)a10, a5);
      v27 = (v34 - v26) / 2;
      v28 = sub_51760((_DWORD *)a10, v32);
      v25 = v33[0] + v27 + v28;
    }
    else
    {
      v24 = sub_51760((_DWORD *)a10, v32);
      v25 = v33[0] + (__int16)v37 + v24;
    }
    sub_5220C(v25, v30, v31, 2, 255, 0);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
  }
  while ( !(_WORD)v38 );
  mouseRightButton_12EFDC_12EFCC = 0;
  mouseLeftButton_12EFDE_12EFCE = 0;
  lastPressedKey_12EF70_12EF60 = 0;
  pressedKeys_12EEF0_12EEE0[1] = 0;
  pressedKeys_12EEF0_12EEE0[28] = 0;
  return (_WORD)v38 == 1;
}
// 12CBC5: using guessed type char byte_12CBD5_12CBC5;
// 12EEE1: using guessed type char pressedKeys_12EEF0_12EEE0[1];
// 12EEFC: using guessed type char pressedKeys_12EEF0_12EEE0[28];
// 12EF0A: using guessed type char pressedKeys_12EEF0_12EEE0[42];
// 12EF16: using guessed type char pressedKeys_12EEF0_12EEE0[54];
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFCC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFCE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;
// 51080: using guessed type char var_A0[100];

//----- (00051610) --------------------------------------------------------
char *sub_51610(char *a1, const char *a2)
{
  __int16 v2; // si

  v2 = strlen(a2);
  memmove(&a1[v2], a1, strlen(a1) + 1);
  qmemcpy((int)a1, (int)a2, v2);
  return a1;
}
// 665C5: using guessed type _DWORD memmove(_DWORD, _DWORD, _DWORD);

//----- (00051670) --------------------------------------------------------
int sub_51670(int a1, __int16 a2)
{
  return (int)memmove((void*)a1, (void*)(a1 + a2), strlen((const char *)(a1 + a2)) + 1);
}
// 665C5: using guessed type _DWORD memmove(_DWORD, _DWORD, _DWORD);

//----- (000516A0) --------------------------------------------------------
int sub_516A0(int a1, int a2, int a3, int a4)
{
  int result; // eax

  dword_12C960 = a1;
  dword_12C96C = a2 + a4;
  dword_12C968 = a2;
  dword_12C970 = a3;
  result = a4;
  dword_12C964 = a1 + a3;
  dword_12C974 = a4;
  return result;
}
// 12C960: using guessed type int dword_12C960;
// 12C964: using guessed type int dword_12C964;
// 12C968: using guessed type int dword_12C968;
// 12C96C: using guessed type int dword_12C96C;
// 12C970: using guessed type int dword_12C970;
// 12C974: using guessed type int dword_12C974;

//----- (000516E0) --------------------------------------------------------
_DWORD *sub_516E0(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = dword_12C960;
  a1[1] = dword_12C964;
  a1[2] = dword_12C968;
  a1[3] = dword_12C96C;
  a1[4] = dword_12C970;
  a1[5] = dword_12C974;
  return result;
}
// 12C960: using guessed type int dword_12C960;
// 12C964: using guessed type int dword_12C964;
// 12C968: using guessed type int dword_12C968;
// 12C96C: using guessed type int dword_12C96C;
// 12C970: using guessed type int dword_12C970;
// 12C974: using guessed type int dword_12C974;

//----- (00051720) --------------------------------------------------------
void sub_51720()
{
  dword_12CA68 = 0;
  qmemcpy(&unk_12C978, &dword_12C960, 0x18u);
}
// 12C960: using guessed type int dword_12C960;
// 12CA68: using guessed type int dword_12CA68;

//----- (00051740) --------------------------------------------------------
void sub_51740()
{
  dword_12CA68 = 0;
  qmemcpy(&dword_12C960, &unk_12C978, 0x18u);
}
// 12C960: using guessed type int dword_12C960;
// 12CA68: using guessed type int dword_12CA68;

//----- (00051760) --------------------------------------------------------
int sub_51760(_DWORD *a1, char *a2)
{
  char *v2; // eax
  __int16 v3; // bx
  __int16 v4; // dx
  char v5; // cl

  v2 = a2;
  v3 = 0;
  v4 = 0;
  if ( *a2 )
  {
    do
    {
      v5 = *v2;
      if ( *v2 <= 31 )
      {
        if ( v5 == 10 )
        {
          if ( v4 > v3 )
            v3 = v4;
          v4 = 0;
        }
      }
      else
      {
        v4 += *(unsigned __int8 *)(6 * (v5 - 32) + *a1 + 4) - 1;
      }
    }
    while ( *++v2 );
  }
  if ( v4 > v3 )
    return v4;
  return v3;
}

//----- (000517C0) --------------------------------------------------------
void sub_51480_517C0(int a1, _DWORD *a2, TColor* colorBuffer)
{
  sub_519E0_51D20((int)a2);
  *(_DWORD *)a1 = *a2 + 6;
  *(_BYTE *)(a1 + 6) = sub_5CC70_5D180(colorBuffer, 0xFFu, 0xFFu, 0xFFu);
  *(_WORD *)(a1 + 4) = 3;
  *(_BYTE *)(a1 + 7) = sub_5CC70_5D180(colorBuffer, 0, 0, 0);
}

//----- (000518A0) --------------------------------------------------------
void sub_518A0(_BYTE *a1, int a2, __int16 a3, unsigned __int8 *a4)
{
  int v4; // edi
  unsigned __int8 *v5; // ebx
  unsigned __int8 v6; // ah
  char v7; // al
  char v8; // al
  int v9; // eax
  int v10; // ebp

  v4 = a2;
  v5 = a4;
  if ( a4 )
  {
    while ( 1 )
    {
      v6 = *v5;
      if ( !*v5 )
        break;
      if ( v6 >= 0x20u )
      {
        v9 = 6 * (unsigned __int8)(v6 - 32);
        ++v5;
        v10 = v9 + *(_DWORD *)a1;
        if ( (a1[4] & 0x10) != 0 )
        {
          if ( *(v5 - 1) != 32 )
            DrawBitmap_60D18_61228(v4, a3, (TypeTab*)(v9 + *(_DWORD *)a1));
          v4 += *(unsigned __int8 *)(v10 + 4) - 2;
        }
        else
        {
          sub_51990((int)a1, (__int16)v4, a3, v9 + *(_DWORD *)a1);
          v4 += *(unsigned __int8 *)(v10 + 4) - 1;
        }
      }
      else
      {
        switch ( v6 )
        {
          case 1u:
            v7 = *++v5;
            a1[6] = v7;
            break;
          case 2u:
            v8 = *++v5;
            a1[7] = v8;
            break;
          case 3u:
            a1[4] |= 3u;
            break;
          case 4u:
            a1[4] &= 0xFCu;
            break;
          case 5u:
            a1[4] |= 5u;
            break;
          case 6u:
            a1[4] &= 0xFAu;
            break;
          case 0xAu:
            v4 = a2;
            a3 += *(unsigned __int8 *)(*(_DWORD *)a1 + 5);
            break;
          default:
            break;
        }
        ++v5;
      }
    }
  }
  JUMPOUT(0x4D6DE);
}
// 518B8: control flows out of bounds to 4D6DE

//----- (00051990) --------------------------------------------------------
__int16 sub_51990(int a1, int a2, __int16 a3, int a4)
{
  int v4; // edi
  __int16 v5; // cx
  unsigned __int8 v6; // dh
  int v7; // eax
  unsigned __int8 v8; // dl
  __int16 v9; // bx
  int v10; // edi
  _BYTE *v11; // edx
  char *v12; // ecx
  int v13; // ecx
  int v14; // ebx
  _BYTE *v15; // ebp
  _BYTE *v16; // eax
  char v17; // ch
  int v18; // ecx
  _BOOL1 v19; // zf
  int v20; // edx
  unsigned __int8 v22; // ch
  char v23; // cl
  unsigned __int8 v24; // cl
  int v25; // edi
  char *v26; // eax
  char *v27; // eax
  char v28; // ch
  int v30; // [esp+8h] [ebp-40h]
  _BYTE *v31; // [esp+Ch] [ebp-3Ch]
  _BYTE *v32; // [esp+10h] [ebp-38h]
  char *v33; // [esp+14h] [ebp-34h]
  __int16 v34; // [esp+1Ch] [ebp-2Ch]
  int v35; // [esp+24h] [ebp-24h]
  unsigned __int8 v36; // [esp+28h] [ebp-20h]
  unsigned __int8 v37; // [esp+2Ch] [ebp-1Ch]
  unsigned __int8 v38; // [esp+30h] [ebp-18h]
  unsigned __int8 v39; // [esp+34h] [ebp-14h]

  LOWORD(v4) = dword_12C960 + a2;
  v5 = dword_12C968 + a3;
  v6 = *(_BYTE *)(a4 + 4);
  v7 = -a2;
  v8 = *(_BYTE *)(a4 + 5);
  if ( (-(__int16)a2 & 0x8000u) != 0 || (_WORD)a2 == 0 )
  {
    v37 = 0;
  }
  else
  {
    if ( (__int16)v7 >= v6 )
      return v7;
    v37 = -(char)a2;
  }
  LOWORD(v7) = v6 + (_WORD)v4 - dword_12C964;
  if ( (__int16)v7 > 0 )
  {
    if ( (__int16)v7 >= v6 )
      return v7;
    v6 = dword_12C964 - v4;
  }
  v39 = v6;
  LOWORD(v7) = -a3;
  if ( a3 >= 0 )
  {
    LOBYTE(v9) = 0;
  }
  else
  {
    if ( (__int16)v7 >= v8 )
      return v7;
    LOBYTE(v9) = -(char)a3;
  }
  LOWORD(v7) = v5 + v8 - dword_12C96C;
  if ( (__int16)v7 > 0 )
  {
    if ( (__int16)v7 >= v8 )
      return v7;
    v8 = dword_12C96C - v5;
  }
  v4 = (__int16)v4;
  v36 = v8 - v9;
  v38 = v6 - v37;
  v11 = (_BYTE *)(v37 + (__int16)v4 + begWscreen_2ECFF4_2ECFE4 + scrWidth_12EFF0_12EFE0 * (v5 + (unsigned __int8)v9));
  v7 = *(_DWORD *)a4;
  v34 = scrWidth_12EFF0_12EFE0;
  if ( (_BYTE)v9 )
  {
    HIBYTE(v9) = 0;
    do
    {
      while ( *(char *)v7 > 0 )
        v7 += *(char *)v7 + 1;
      v12 = (char *)v7++;
    }
    while ( *v12 || --v9 );
  }
  v13 = v36;
  v14 = v38;
  v35 = v36;
  v15 = &v11[(__int16)scrWidth_12EFF0_12EFE0];
  if ( v37 )
  {
LABEL_57:
    if ( !v37 )
      goto LABEL_22;
    v22 = v37;
    while ( 1 )
    {
      while ( 1 )
      {
        v23 = *(_BYTE *)v7;
        if ( *(char *)v7 > 0 )
          break;
        if ( !*(_BYTE *)v7 )
        {
          v14 = 0;
          goto LABEL_22;
        }
        v10 = v23;
        if ( v23 < -v22 )
        {
          BYTE1(v13) = -v23 - v22;
          if ( BYTE1(v13) > v38 )
            BYTE1(v13) = v39 - v37;
          v10 = BYTE1(v13);
          ++v7;
          LOBYTE(v13) = BYTE1(v13);
          v11 += BYTE1(v13);
          BYTE1(v13) = 0;
          v14 -= v13;
          goto LABEL_22;
        }
        ++v7;
        v22 += v23;
        if ( !v22 )
          goto LABEL_22;
      }
      if ( v23 > (int)v22 )
        break;
      v10 = v23 + 1;
      v22 -= v23;
      v7 += v10;
      if ( !v22 )
        goto LABEL_22;
    }
    v24 = v23 - v22;
    if ( v24 > v38 )
      v24 = v39 - v37;
    v31 = &v11[v24];
    v25 = *(char *)v7;
    v26 = (char *)(v7 + 1);
    v33 = &v26[v25];
    v27 = &v26[v22];
    v14 -= v24;
    v10 = *(_WORD *)(a1 + 4) & 0xC000;
    if ( (unsigned __int16)v10 >= 0x4000u )
    {
      if ( (unsigned __int16)v10 <= 0x4000u )
      {
        do
        {
          ++v27;
          ++v11;
          --v24;
        }
        while ( v24 );
      }
      else if ( (_WORD)v10 == 0x8000 )
      {
        do
        {
          ++v27;
          ++v11;
          --v24;
        }
        while ( v24 );
      }
      goto LABEL_82;
    }
    if ( (_WORD)v10 )
    {
LABEL_82:
      v7 = (int)v33;
      v11 = v31;
      goto LABEL_22;
    }
    while ( 1 )
    {
      if ( *v27 )
      {
        if ( (unsigned __int8)*v27 > 1u )
        {
          if ( *v27 != 2 || (*(_BYTE *)(a1 + 4) & 2) == 0 )
            goto LABEL_77;
          v28 = *(_BYTE *)(a1 + 7);
          goto LABEL_76;
        }
        if ( (*(_BYTE *)(a1 + 4) & 1) != 0 )
        {
          v28 = *(_BYTE *)(a1 + 6);
LABEL_76:
          *v11 = v28;
        }
      }
LABEL_77:
      ++v27;
      ++v11;
      if ( !--v24 )
        goto LABEL_82;
    }
  }
LABEL_22:
  while ( 2 )
  {
    if ( (__int16)v14 <= 0 )
    {
      HIWORD(v20) = HIWORD(v35);
      LOWORD(v20) = v35 - 1;
      v19 = (_WORD)v35 == 1;
      v35 = v20;
      if ( !v19 )
      {
        do
        {
          while ( *(char *)v7 > 0 )
            v7 += *(char *)v7 + 1;
        }
        while ( *(_BYTE *)v7++ );
        BYTE1(v14) = 0;
        v13 = v34;
        v11 = v15;
        goto LABEL_56;
      }
    }
    else
    {
      LOBYTE(v13) = *(_BYTE *)v7;
      if ( *(char *)v7 > 0 )
      {
        if ( (char)v13 >= (__int16)v14 )
          v13 = (__int16)v14;
        else
          v13 = *(char *)v7;
        LOWORD(v10) = *(char *)v7;
        v14 -= v10;
        v32 = &v11[(unsigned __int8)v13];
        v30 = *(char *)v7 + v7 + 1;
        v10 = *(_WORD *)(a1 + 4) & 0xC000;
        v16 = (_BYTE *)(v7 + 1);
        if ( (unsigned __int16)v10 >= 0x4000u )
        {
          if ( (unsigned __int16)v10 <= 0x4000u )
          {
            do
            {
              ++v16;
              ++v11;
              LOBYTE(v13) = v13 - 1;
            }
            while ( (_BYTE)v13 );
          }
          else if ( (_WORD)v10 == 0x8000 )
          {
            do
            {
              ++v16;
              ++v11;
              LOBYTE(v13) = v13 - 1;
            }
            while ( (_BYTE)v13 );
          }
          goto LABEL_46;
        }
        if ( (_WORD)v10 )
        {
LABEL_46:
          v11 = v32;
          v7 = v30;
          continue;
        }
        while ( 1 )
        {
          if ( *v16 )
          {
            if ( *v16 > 1u )
            {
              if ( *v16 != 2 || (*(_BYTE *)(a1 + 4) & 2) == 0 )
                goto LABEL_41;
              v17 = *(_BYTE *)(a1 + 7);
              goto LABEL_40;
            }
            if ( (*(_BYTE *)(a1 + 4) & 1) != 0 )
            {
              v17 = *(_BYTE *)(a1 + 6);
LABEL_40:
              *v11 = v17;
            }
          }
LABEL_41:
          ++v16;
          ++v11;
          LOBYTE(v13) = v13 - 1;
          if ( !(_BYTE)v13 )
            goto LABEL_46;
        }
      }
      if ( *(char *)v7 < 0 )
      {
        LOWORD(v13) = (char)v13;
        v14 += v13;
        v13 = *(char *)v7++;
        v11 -= v13;
        continue;
      }
      HIWORD(v18) = HIWORD(v35);
      LOWORD(v18) = v35 - 1;
      v19 = (_WORD)v35 == 1;
      v35 = v18;
      if ( !v19 )
      {
        v13 = v34;
        v11 = v15;
        v14 = 0;
        ++v7;
LABEL_56:
        LOBYTE(v14) = v39 - v37;
        v15 += v13;
        goto LABEL_57;
      }
    }
    return v7;
  }
}
// 12C960: using guessed type int dword_12C960;
// 12C964: using guessed type int dword_12C964;
// 12C968: using guessed type int dword_12C968;
// 12C96C: using guessed type int dword_12C96C;
// 12EFE0: using guessed type int scrWidth_12EFF0_12EFE0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//----- (00051D20) --------------------------------------------------------
unsigned int *sub_519E0_51D20(int a1)
{
  unsigned int *result; // eax
  unsigned int v2; // esi

  result = *(unsigned int **)a1;
  if ( *(_DWORD *)a1 < *(_DWORD *)(a1 + 4) )
  {
    do
    {
      v2 = *(_DWORD *)(a1 + 8);
      if ( *result < v2 )
        *result += v2;
      result = (unsigned int *)((char *)result + 6);
    }
    while ( (unsigned int)result < *(_DWORD *)(a1 + 4) );
  }
  return result;
}

//----- (00051D50) --------------------------------------------------------
int sub_51D50()
{
  int v0; // esi
  int v1; // esi
  FILE* v2; // ebx
  int result; // eax
  char v4[40]; // [esp+0h] [ebp-40h] BYREF
  int v5; // [esp+28h] [ebp-18h] BYREF
  unsigned __int8 i; // [esp+2Ch] [ebp-14h]

  v5 = 4;
  for ( i = 0; i < 6u; ++i )
  {
    v0 = i;
    sprintf(v4, "%s%s\\save\\carpdd%02X.gam", "C:", "\\carpet.cd", i);
    v1 = v0;
    v2 = DataFileIO::CreateOrOpenFile((char*)v4, 512);
    if ( v2 == nullptr )
    {
      result = sprintf(off_96864[v1], asc_A9AE4);
    }
    else
    {
      DataFileIO::Read(v2, (uint8_t*)&v5, 4);
      if ( v5 == 4 )
        DataFileIO::Read(v2, (uint8_t*)off_96864[v1], 20);
      else
        sprintf(off_96864[v1], asc_A9AE4);
      result = DataFileIO::Close(v2);
    }
  }
  return result;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 96864: using guessed type char *off_96864[5];

//----- (00051E30) --------------------------------------------------------
int sub_51E30(char a1)
{
  int v1; // esi
  FILE* v2; // ebx
  char v4[40]; // [esp+0h] [ebp-40h] BYREF
  int v5; // [esp+28h] [ebp-18h] BYREF
  int v6[5]; // [esp+2Ch] [ebp-14h] BYREF

  v6[0] = 4;
  v5 = 4 * ((unsigned __int8)byte_12CBD1_12CBC1 + (unsigned __int8)byte_12CBD0_12CBC0 + *(unsigned __int16 *)(dword_AE408_AE3F8() + 17));
  sprintf(v4, "%s%s\\save\\carpdd%02X.gam", "C:", "\\carpet.cd", (unsigned __int8)(a1 - 1));
  v1 = 0;
  v2 = DataFileIO::CreateOrOpenFile((char*)v4, 512);
  if ( v2 != nullptr )
  {
    DataFileIO::Read(v2, (uint8_t*)v6, 4);
    if ( v6[0] == 4 )
    {
      DataFileIO::Read(v2, (uint8_t*)off_96864[(unsigned __int8)(a1 - 1)], 20);
      DataFileIO::Read(v2, (uint8_t*)dword_AE408_AE3F8() + 29, 32);
      DataFileIO::Read(v2, (uint8_t*)dword_AE408_AE3F8() + 61, 32);
      DataFileIO::Read(v2, (uint8_t*)dword_AE400_AE3F0() + 8597, 12);
      DataFileIO::Read(v2, (uint8_t*)&v5, 4);
      DataFileIO::Read(v2, (uint8_t*)dword_AE400_AE3F0() + 15318, 24);
      DataFileIO::Read(v2, (uint8_t*)&byte_12CBD0_12CBC0, 1);
      DataFileIO::Read(v2, (uint8_t*)&byte_12CBD1_12CBC1, 1);
      DataFileIO::Read(v2, (uint8_t*)dword_AE400_AE3F0() + 8597, 12);
      byte_9687C = 0;
      v1 = 1;
      *(_WORD *)(dword_AE408_AE3F8() + 17) = v5 / v6[0] - (unsigned __int8)byte_12CBD0_12CBC0 - (unsigned __int8)byte_12CBD1_12CBC1;
    }
    DataFileIO::Close(v2);
  }
  return v1;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 96864: using guessed type char *off_96864[5];
// 9687C: using guessed type char byte_9687C;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 12CBC0: using guessed type char byte_12CBD0_12CBC0;
// 12CBC1: using guessed type char byte_12CBD1_12CBC1;
// 51E30: using guessed type int var_14[5];

//----- (00051FD0) --------------------------------------------------------
int sub_51FD0(char a1)
{
  int v1; // esi
  FILE* v2; // eax
  FILE* v3; // ebx
  char v5[40]; // [esp+0h] [ebp-3Ch] BYREF
  int v6; // [esp+28h] [ebp-14h] BYREF
  int v7[4]; // [esp+2Ch] [ebp-10h] BYREF

  v7[0] = 4;
  v1 = 0;
  v6 = 4 * (*(unsigned __int16 *)(dword_AE408_AE3F8() + 17) + (unsigned __int8)byte_12CBD0_12CBC0 + (unsigned __int8)byte_12CBD1_12CBC1);
  sprintf(v5, "%s%s\\save\\carpdd%02X.gam", "C:", "\\carpet.cd", (unsigned __int8)(a1 - 1));
  v2 = DataFileIO::CreateOrOpenFile((char*)v5, 546);
  v3 = v2;
  if ( v2 != nullptr )
  {
    FileWrite_62ED0_633E0(v2, (uint8_t*)v7, 4);
    FileWrite_62ED0_633E0(v3, (uint8_t*)off_96864[(unsigned __int8)(a1 - 1)], 20);
    FileWrite_62ED0_633E0(v3, (uint8_t*)dword_AE408_AE3F8() + 29, 32);
    FileWrite_62ED0_633E0(v3, (uint8_t*)dword_AE408_AE3F8() + 61, 32);
    FileWrite_62ED0_633E0(v3, (uint8_t*)dword_AE400_AE3F0() + 8597, 12);
    FileWrite_62ED0_633E0(v3, (uint8_t*)&v6, 4);
    FileWrite_62ED0_633E0(v3, (uint8_t*)dword_AE400_AE3F0() + 15318, 24);
    FileWrite_62ED0_633E0(v3, (uint8_t*)&byte_12CBD0_12CBC0, 1);
    FileWrite_62ED0_633E0(v3, (uint8_t*)&byte_12CBD1_12CBC1, 1);
    FileWrite_62ED0_633E0(v3, (uint8_t*)dword_AE400_AE3F0() + 8597, 12);
    v1 = 1;
    DataFileIO::Close(v3);
  }
  return v1;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 96864: using guessed type char *off_96864[5];
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 12CBC0: using guessed type char byte_12CBD0_12CBC0;
// 12CBC1: using guessed type char byte_12CBD1_12CBC1;
// 51FD0: using guessed type int var_10[4];

//----- (00052130) --------------------------------------------------------
void sub_52130(char a1)
{
  __int16 v1; // cx
  char v2; // dl

  //fix
  v1 = 0;
  //fix

  byte_90B23 = 0;
  if ( (a1 & 2) != 0 )
  {
    InitDigijoy_3F7D0_3FB10((char*)(begGcSprTab_12CAF8_2EAAF8_2EAAE8 + 36));
    if ( !dword_9AD98 )
      goto LABEL_8;
  }
  else
  {
    if ( (a1 & 1) == 0 && (a1 & 0x20) == 0 )
      goto LABEL_8;
    InitAnojoy_3F820_sub_3FB60(v1, (int)begGcSprTab_12CAF8_2EAAF8_2EAAE8 + 60, (int)begGcSprTab_12CAF8_2EAAF8_2EAAE8 + 30, (int)begGcSprTab_12CAF8_2EAAF8_2EAAE8 + 36, a1);
    if ( !dword_9AD98 )
      goto LABEL_8;
  }
  sub_3F370_3F6B0();
LABEL_8:
  if ( (a1 & 8) != 0 )
  {
    if ( InitVfx_5AF50_5B460() )
    {
      v2 = byte_90B23 | 8;
      str_AE400_AE3F0->set.var_u8_8606 = 1;
      byte_90B23 = v2;
    }
  }
}
// 5217F: variable 'v1' is possibly undefined
// 90B23: using guessed type char byte_90B23;
// 9AD98: using guessed type int dword_9AD98;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// 12CAE8: using guessed type int begGcSprTab_12CAF8_2EAAF8_2EAAE8;

//----- (000521C4) --------------------------------------------------------
void sub_521C4(_BYTE *a1, _BYTE *a2, _BYTE *a3, int a4, char a5)
{
  _BYTE *v5; // esi
  _BYTE *v6; // edi
  int v8; // ecx
  int v9; // eax

  v5 = a1;
  if ( a1 )
  {
    v6 = a2;
    if ( a2 )
    {
      v8 = scrWidth_12EFF0_12EFE0 * scrHeight_12EFF8_12EFE8;
      v9 = 0;
      if ( a4 )
      {
        do
        {
          LOBYTE(v9) = *v5++;
          if ( *a3 == a5 )
            LOBYTE(v9) = *(_BYTE *)(v9 + a4);
          *v6++ = v9;
          ++a3;
          --v8;
        }
        while ( v8 );
      }
    }
  }
}
// 12EFE0: using guessed type int scrWidth_12EFF0_12EFE0;
// 12EFE8: using guessed type int scrHeight_12EFF8_12EFE8;

//----- (0005220C) --------------------------------------------------------
int sub_5220C(int a1, int a2, int a3, int a4, char a5, char a6)
{
  int v6; // edi
  int v7; // edi
  int v8; // eax
  _BYTE *v9; // edi
  int v10; // edx
  int v11; // ebx
  int result; // eax
  int v13; // ecx
  int v14; // [esp+4h] [ebp-4h]

  //fix
  v14 = 0;
  //fix

  v6 = a2;
  if ( a2 >= dword_12F000 )
    return v14;
  if ( a2 < 0 )
  {
    a4 += a2;
    v6 = 0;
  }
  if ( a4 + v6 > dword_12F028_12F018 )
    a4 = dword_12F028_12F018 - v6;
  if ( a4 <= 0 )
    return v14;
  v7 = scrWidth_12EFF0_12EFE0 * (dword_12F018_12F008 + v6);
  v8 = a1;
  if ( a1 >= dword_12F024_12F014 )
    return v14;
  if ( a1 < 0 )
  {
    a3 += a1;
    v8 = 0;
  }
  if ( a3 + v8 > dword_12F000_12EFF0 )
    a3 = dword_12F000_12EFF0 - v8;
  if ( a3 <= 0 )
    return v14;
  v9 = (_BYTE *)(begWscreen_2ECFF4_2ECFE4 + dword_12F008_12EFF8 + v8 + v7);
  v10 = a4;
  v11 = scrWidth_12EFF0_12EFE0 - a3;
  switch ( a6 & 3 )
  {
    case 0:
      do
      {
        v13 = a3;
        do
        {
          *v9++ = a5;
          --v13;
        }
        while ( v13 );
        v9 += v11;
        --v10;
      }
      while ( v10 );
      result = v14;
      break;
    case 1:
      result = v14;
      break;
    case 2:
      result = v14;
      break;
    case 3:
      result = v14;
      break;
  }
  return result;
}
// 522B4: variable 'v14' is possibly undefined
// 12EFE0: using guessed type int scrWidth_12EFF0_12EFE0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12EFF0: using guessed type int dword_12F000_12EFF0;
// 12EFF8: using guessed type int dword_12F008_12EFF8;
// 12F000: using guessed type int dword_12F000;
// 12F008: using guessed type int dword_12F018_12F008;
// 12F014: using guessed type int dword_12F024_12F014;
// 12F018: using guessed type int dword_12F028_12F018;

//----- (00052300) --------------------------------------------------------
void sub_52300()
{
  __int16 i; // bx
  __int16 v1; // si
  __int16 j; // bx

  if ( byte_939E4 && byte_939E5 )
  {
    for ( i = 0; i < 32; ++i )
    {
      v1 = 0;
      if ( byte_12CC10[i] )
      {
        if ( sub_65708(dword_CC130, i) )
        {
          v1 = 1;
        }
        else
        {
          HIBYTE(word_CC060[i]) += 8;
          if ( (unsigned __int16)word_CC060[i] >= 0x7FFFu )
          {
            v1 = 1;
            word_CC060[i] = 0x7FFF;
          }
          if ( (unsigned __int16)word_CC060[i] >= ((unsigned __int16)word_12CC30[i] << 8) - 1 )
          {
            word_CC060[i] = (word_12CC30[i] << 8) - 1;
            v1 = 1;
          }
          sub_66628(dword_CC130, i, word_CC060[i]);
        }
      }
      if ( v1 )
        byte_12CC10[i] = 0;
    }
  }
  else
  {
    for ( j = 0; j < 32; ++j )
    {
      if ( byte_12CC10[j] )
        byte_12CC10[j] = 0;
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// CC060: using guessed type __int16 word_CC060[];
// CC130: using guessed type int dword_CC130;
// 12CC30: using guessed type __int16 word_12CC30[32];

//----- (00052430) --------------------------------------------------------
void sub_52430(__int16 a1, __int16 a2, char a3, __int16 a4)
{
  word_968D8 = a4;
  if ( a3 == 3 )
    sub_52460(a1, a2);
}
// 968D8: using guessed type __int16 word_968D8;

//----- (00052460) --------------------------------------------------------
void sub_52460(__int16 a1, __int16 a2)
{
  char v2; // bh
  __int16 *v3; // esi
  unsigned __int8 v4; // bl
  unsigned __int8 v5; // bl
  int v6; // edx
  int v7; // edx
  int v8; // eax
  int v9; // edx
  int v10; // eax

  if ( byte_939E4 && byte_939E5 && a2 <= (int)(unsigned __int16)word_CC1B6 )
  {
    v2 = 0;
    v3 = word_CBFE0;
    v4 = 0;
    while ( __PAIR32__(a2, a1) != *(_DWORD *)v3 || sub_65708(dword_CC130, v4) )
    {
      ++v4;
      v3 += 2;
      if ( v4 >= 0x20u )
        goto LABEL_12;
    }
    v2 = 1;
    if ( byte_12CC10[v4] )
      return;
    if ( byte_12CCB0[v4] )
      byte_12CCB0[v4] = 0;
    byte_12CC10[v4] = 1;
    word_12CC30[v4] = word_968D8;
LABEL_12:
    if ( !v2 )
    {
      v5 = 0;
      while ( !sub_65708(dword_CC130, v5) )
      {
        if ( ++v5 >= 0x20u )
          goto LABEL_17;
      }
      v2 = 1;
LABEL_17:
      if ( v2 )
      {
        word_939F4 = __DS__;
        word_93A0C = 17152;
        word_93A00 = 0;
        word_CBFE0[2 * v5] = a1;
        word_93A22 = 0x7FFF;
        word_939FC = -1;
        word_93A02 = v5;
        v6 = dword_CC144;
        word_CBFE2[2 * v5] = a2;
        v7 = 32 * a2 + v6;
        word_CC060[v5] = 0;
        v8 = *(_DWORD *)(v7 + 26) - 16;
        v9 = *(_DWORD *)(v7 + 18);
        dword_939F8 = v8;
        dword_939F0 = v9;
        v10 = sub_6586C(dword_CC130, (unsigned int)&dword_939F0);
        BYTE1(v9) = byte_12CC10[v5];
        dword_CC134 = v10;
        if ( BYTE1(v9) )
        {
          if ( byte_12CCB0[v5] )
            byte_12CCB0[v5] = 0;
        }
        byte_12CC10[v5] = 1;
        word_12CC30[v5] = word_968D8;
      }
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// 939F0: using guessed type int dword_939F0;
// 939F4: using guessed type __int16 word_939F4;
// 939F8: using guessed type int dword_939F8;
// 939FC: using guessed type __int16 word_939FC;
// 93A00: using guessed type __int16 word_93A00;
// 93A02: using guessed type __int16 word_93A02;
// 93A0C: using guessed type __int16 word_93A0C;
// 93A22: using guessed type __int16 word_93A22;
// 968D8: using guessed type __int16 word_968D8;
// CBFE0: using guessed type __int16 word_CBFE0[];
// CBFE2: using guessed type __int16 word_CBFE2[63];
// CC060: using guessed type __int16 word_CC060[];
// CC130: using guessed type int dword_CC130;
// CC134: using guessed type int dword_CC134;
// CC144: using guessed type int dword_CC144;
// CC1B6: using guessed type __int16 word_CC1B6;
// 12CC30: using guessed type __int16 word_12CC30[32];

//----- (00052620) --------------------------------------------------------
void sub_52620()
{
  __int16 v0; // si
  int v1; // ebx
  signed __int16 v2; // cx
  __int16 i; // si
  __int16 v4; // [esp+0h] [ebp-10h]

  if ( byte_939E4 && byte_939E5 )
  {
    v0 = 0;
    while ( 1 )
    {
      v4 = 0;
      if ( byte_12CCB0[v0] )
        break;
LABEL_12:
      if ( ++v0 >= 32 )
        return;
    }
    if ( !sub_65708(dword_CC130, v0) )
    {
      v1 = v0;
      v2 = word_12CCD0[v1] - 2048;
      word_12CCD0[v1] = v2;
      if ( v2 > 4096 )
      {
        word_CC060[v0] = v2;
        sub_66628(dword_CC130, v0, v2);
        goto LABEL_10;
      }
      sub_65E75(dword_CC130, v0);
      word_12CCD0[v0] = 0;
      word_CC060[v0] = 0;
    }
    v4 = 1;
LABEL_10:
    if ( v4 )
      byte_12CCB0[v0] = 0;
    goto LABEL_12;
  }
  for ( i = 0; i < 32; ++i )
  {
    if ( byte_12CCB0[i] )
      byte_12CCB0[i] = 0;
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// CC060: using guessed type __int16 word_CC060[];
// CC130: using guessed type int dword_CC130;
// 12CCD0: using guessed type __int16 word_12CCD0[32];

//----- (00052740) --------------------------------------------------------
void sub_52740(__int16 a1, __int16 a2, __int16 a3)
{
  __int16 *v3; // esi
  __int16 v4; // bx
  int v5; // eax
  __int16 v6; // bx

  if ( byte_939E4 && byte_939E5 )
  {
    v3 = word_CBFE0;
    v4 = 0;
    while ( a1 != *v3 || a2 != v3[1] || sub_65708(dword_CC130, v4) )
    {
      ++v4;
      v3 += 2;
      if ( v4 >= 32 )
        return;
    }
    if ( !byte_12CCB0[v4] )
    {
      if ( byte_12CC10[v4] )
        byte_12CC10[v4] = 0;
      v5 = v4;
      word_12CC70[v4] = a3;
      v6 = word_CC060[v4];
      byte_12CCB0[v5] = 1;
      word_12CCD0[v5] = v6;
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// CBFE0: using guessed type __int16 word_CBFE0[];
// CC060: using guessed type __int16 word_CC060[];
// CC130: using guessed type int dword_CC130;
// 12CC70: using guessed type __int16 word_12CC70[32];
// 12CCD0: using guessed type __int16 word_12CCD0[32];

//----- (00052800) --------------------------------------------------------
int sub_52800(int a1)
{
  int result; // eax

  result = a1;
  if ( *(_BYTE *)(a1 + 65) != 2 )
    *(_WORD *)(a1 + 76) += *(_WORD *)(a1 + 78);
  return result;
}

//----- (00052820) --------------------------------------------------------
int sub_52820(int a1)
{
  int result; // eax

  result = a1;
  if ( *(_BYTE *)(a1 + 65) != 2 )
    *(_WORD *)(a1 + 76) -= *(_WORD *)(a1 + 78);
  return result;
}

//----- (00052840) --------------------------------------------------------
int sub_52840(_WORD *a1, int a2)
{
  sub_52800(a2);
  a1[17] = sub_42150_42490((axis_3d*)(a1 + 36), (axis_3d*)(_WORD *)(a2 + 72));
  a1[18] = sub_42180_424C0(a1 + 36, (_WORD *)(a2 + 72));
  return sub_52820(a2);
}

//----- (00052890) --------------------------------------------------------
int sub_52890(int a1, int a2)
{
  __int16 v3; // ax
  int v4; // esi
  __int16 v5; // ax
  int v6; // esi
  __int16 v7; // ax

  sub_52800(a2);
  *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(a2 + 72));
  v3 = sub_42180_424C0((_WORD *)(a1 + 72), (_WORD *)(a2 + 72));
  v4 = *(_DWORD *)(a1 + 156);
  *(_WORD *)(a1 + 36) = v3;
  v5 = *(_WORD *)(a1 + 30)
     + sub_422A0_425E0(*(_WORD *)(a1 + 30), *(_WORD *)(a1 + 34), *(unsigned __int16 *)(v4 + 4), *(_WORD *)(v4 + 2));
  HIBYTE(v5) &= 7u;
  v6 = *(_DWORD *)(a1 + 156);
  *(_WORD *)(a1 + 30) = v5;
  v7 = *(_WORD *)(a1 + 32)
     + sub_422A0_425E0(*(_WORD *)(a1 + 32), *(_WORD *)(a1 + 36), *(unsigned __int16 *)(v6 + 8), *(_WORD *)(v6 + 6));
  HIBYTE(v7) &= 7u;
  *(_WORD *)(a1 + 32) = v7;
  return sub_52820(a2);
}

//----- (00052950) --------------------------------------------------------
__int16 sub_52950(int a1, int a2)
{
  __int16 v3; // ax
  int v4; // esi
  __int16 v5; // ax
  int v6; // esi
  __int16 result; // ax

  *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(a2 + 72));
  v3 = sub_42180_424C0((_WORD *)(a1 + 72), (_WORD *)(a2 + 72));
  v4 = *(_DWORD *)(a1 + 156);
  *(_WORD *)(a1 + 36) = v3;
  v5 = *(_WORD *)(a1 + 30)
     + sub_422A0_425E0(*(_WORD *)(a1 + 30), *(_WORD *)(a1 + 34), *(unsigned __int16 *)(v4 + 4), *(_WORD *)(v4 + 2));
  HIBYTE(v5) &= 7u;
  v6 = *(_DWORD *)(a1 + 156);
  *(_WORD *)(a1 + 30) = v5;
  result = *(_WORD *)(a1 + 32)
         + sub_422A0_425E0(*(_WORD *)(a1 + 32), *(_WORD *)(a1 + 36), *(unsigned __int16 *)(v6 + 8), *(_WORD *)(v6 + 6));
  HIBYTE(result) &= 7u;
  *(_WORD *)(a1 + 32) = result;
  return result;
}

//----- (00052A00) --------------------------------------------------------
char sub_52A00(int a1, unsigned int a2, unsigned int a3)
{
  int v3; // eax
  unsigned int v4; // edx
  int v5; // ebp

  LOBYTE(v3) = *(_BYTE *)(a1 + 65);
  if ( (unsigned __int8)v3 < 7u )
  {
    if ( (unsigned __int8)v3 > 1u && (_BYTE)v3 != 3 )
      return v3;
  }
  else if ( (unsigned __int8)v3 > 9u && ((unsigned __int8)v3 < 0x10u || (unsigned __int8)v3 > 0x10u && (_BYTE)v3 != 19) )
  {
    return v3;
  }
  v4 = dword_AE400_AE3F0() + 29795;
  v3 = dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(a1 + 24);
  if ( *(_BYTE *)(v3 + 64) == 3 && !*(_BYTE *)(v3 + 65) )
  {
    ++*(_DWORD *)(*(_DWORD *)(v3 + 160) + 343);
    if ( v4 < a2 && a3 > v4 && *(_WORD *)(a2 + 24) == *(_WORD *)(a3 + 24) )
    {
      v5 = *(_DWORD *)(v3 + 160);
      if ( v5 )
        ++*(_DWORD *)(v5 + 347);
    }
  }
  return v3;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00052AB0) --------------------------------------------------------
int sub_52AB0(int a1)
{
  int v1; // edx
  char v2; // dl
  int v3; // eax
  __int16 v4; // ax
  int v5; // eax
  unsigned int v6; // ebp
  char v7; // cl
  int v8; // edi
  __int16 v9; // ax
  int v10; // esi
  int v11; // eax
  int v12; // edx
  unsigned int v13; // eax
  int v14; // edi
  int result; // eax
  __int16 v16; // dx
  int v17; // eax
  int v18; // esi
  int v19; // edi
  _WORD *v20; // esi
  unsigned int v21; // [esp+0h] [ebp-18h]
  char v22; // [esp+4h] [ebp-14h]

  //fix
  v4 = 0;
  //fix

  v22 = 0;
  v1 = 164 * *(unsigned __int16 *)(a1 + 146);
  v21 = dword_AE400_AE3F0() + 29795 + v1;
  if ( dword_AE400_AE3F0() + 29795 >= v21 )
  {
    v2 = *(_BYTE *)(a1 + 16);
    if ( (v2 & 2) == 0 )
    {
      *(_BYTE *)(a1 + 16) = v2 | 2;
      if ( sub_548B0(a1) )
      {
        *(_WORD *)(a1 + 30) = *(_WORD *)(a1 + 34);
        *(_WORD *)(a1 + 32) = *(_WORD *)(a1 + 36);
      }
      else
      {
        *(_WORD *)(a1 + 34) = *(_WORD *)(a1 + 30);
        *(_WORD *)(a1 + 36) = *(_WORD *)(a1 + 32);
      }
    }
  }
  else
  {
    sub_52890(a1, dword_AE400_AE3F0() + 29795 + v1);
  }
  v3 = *(__int16 *)(a1 + 128) - *(__int16 *)(a1 + 126);
  if ( v3 )
    v3 /= (int)abs32(v3);
  *(_WORD *)(a1 + 126) += 2 * v3;
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
  sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  v5 = sub_11980(a1);
  v6 = v5;
  if ( !v5 )
  {
    result = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
    v16 = *(_WORD *)(a1 + 76);
    word_AE454_AE444.z = result;
    if ( (__int16)result <= v16 )
    {
      v18 = *(_DWORD *)(a1 + 12) - 1;
      *(_DWORD *)(a1 + 12) = v18;
      if ( v18 >= 0 )
        goto LABEL_26;
    }
    else if ( *(_BYTE *)(a1 + 65) != 4 )
    {
      result = sub_11810((__int16 *)(a1 + 72));
      if ( result == 1 )
      {
        v17 = sub_373F0_377B0(a1 + 72, 10, 5);
        if ( v17 )
          *(_WORD *)(v17 + 24) = *(_WORD *)(a1 + 24);
        result = sub_41E80_421C0(a1);
        goto LABEL_26;
      }
    }
    v22 = 1;
    goto LABEL_26;
  }
  if ( *(char *)(v5 + 17) < 0
    && (*(_DWORD *)(a1 + 140) - (__CFSHL__(*(int *)(a1 + 140) >> 31, 2) + 4 * (*(int *)(a1 + 140) >> 31))) >> 2 <= *(_DWORD *)(v5 + 140)
    && *(_BYTE *)(a1 + 68) == 10 )
  {
    v7 = *(_BYTE *)(a1 + 69);
    if ( v7 == 1 || v7 == 17 || v7 == 53 )
    {
      sub_55370_558A0((v5 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 28);
      v8 = dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(a1 + 24);
      *(_DWORD *)(v6 + 140) -= (*(_DWORD *)(a1 + 140)
                              - (__CFSHL__(*(int *)(a1 + 140) >> 31, 2)
                               + 4 * (*(int *)(a1 + 140) >> 31))) >> 2;
      v9 = *(_WORD *)(a1 + 30);
      HIBYTE(v9) = (HIBYTE(v9) + 4) & 7;
      *(_WORD *)(a1 + 34) = v9;
      v10 = sub_42240_42580(0, *(_WORD *)(a1 + 32));
      v11 = -(v10 * sub_42210_42550(0, *(_WORD *)(a1 + 32)));
      BYTE1(v11) &= 7u;
      *(_WORD *)(a1 + 36) = v11;
      v12 = *(_DWORD *)(a1 + 4);
      *(_WORD *)(a1 + 32) = v11;
      v13 = 9377 * v12 + 9439;
      *(_DWORD *)(a1 + 4) = v13;
      v14 = v8 - (dword_AE400_AE3F0() + 29795);
      *(_WORD *)(a1 + 30) = v13 % 0x2D + *(_WORD *)(a1 + 34) - 22;
      *(_WORD *)(a1 + 146) = v14 / 164;
      *(_WORD *)(a1 + 24) = *(_WORD *)(v6 + 24);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 8);
      *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(v6 + 72);
      word_AE454_AE444.z = *(_WORD *)(v6 + 76);
      LOWORD(v13) = *(_WORD *)(v6 + 84);
      word_AE454_AE444.z += v13;
      return sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
    }
  }
  sub_52800(v5);
  sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v6 + 72));
  result = sub_52820(v6);
  BYTE1(result) = 1;
  v22 = 1;
LABEL_26:
  if ( v22 )
  {
    result = sub_373F0_377B0(a1 + 72, *(char *)(a1 + 68), *(char *)(a1 + 69));
    v19 = result;
    v20 = (_WORD *)result;
    if ( result )
    {
      sub_52A00(a1, v6, v21);
      if ( *(_BYTE *)(a1 + 69) == 34 )
        *(_DWORD *)(v19 + 12) = *(unsigned __int16 *)(a1 + 44);
      v20[12] = *(_WORD *)(a1 + 24);
      v20[15] = *(_WORD *)(a1 + 30);
      v20[16] = *(_WORD *)(a1 + 32);
      v20[73] = (int)(v6 - (dword_AE400_AE3F0() + 29795)) / 164;
      v20[22] = *(_WORD *)(a1 + 44);
      return sub_41E80_421C0(a1);
    }
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (00052E70) --------------------------------------------------------
int sub_52E70(int a1)
{
  int v1; // ebp
  char v2; // dl
  __int16 v3; // si
  __int16 v4; // dx
  __int16 v5; // ax
  __int16 v6; // ax
  int v7; // eax
  int v8; // ebp
  unsigned int v9; // edi
  int result; // eax
  int v11; // edi
  __int16 v12; // ax
  int v13; // esi
  int v14; // eax
  int v15; // edx
  unsigned int v16; // eax
  __int16 v17; // cx
  int v18; // eax
  int v19; // esi
  _WORD *v20; // ebp
  int v21; // [esp+0h] [ebp-20h] BYREF
  __int16 v22; // [esp+4h] [ebp-1Ch]
  unsigned int v23; // [esp+8h] [ebp-18h]
  char v24; // [esp+Ch] [ebp-14h]

  //fix
  v6 = 0;
  //fix

  v24 = 0;
  v1 = 164 * *(unsigned __int16 *)(a1 + 146);
  v23 = dword_AE400_AE3F0() + 29795 + v1;
  if ( dword_AE400_AE3F0() + 29795 >= v23 )
  {
    v2 = *(_BYTE *)(a1 + 16);
    if ( (v2 & 2) == 0 )
    {
      *(_BYTE *)(a1 + 16) = v2 | 2;
      if ( sub_548B0(a1) )
      {
        v3 = sub_42210_42550(*(_WORD *)(a1 + 30), *(_WORD *)(a1 + 34));
        if ( v3 < 0 )
          v3 = 0;
        if ( v3 > 34 )
          v3 = 34;
        v4 = v3 * sub_42240_42580(*(unsigned __int16 *)(a1 + 30), *(_WORD *)(a1 + 34)) + *(_WORD *)(a1 + 30);
        v5 = *(_WORD *)(a1 + 36);
        *(_WORD *)(a1 + 30) = v4;
        *(_WORD *)(a1 + 32) = v5;
      }
      else
      {
        *(_WORD *)(a1 + 34) = *(_WORD *)(a1 + 30);
        *(_WORD *)(a1 + 36) = *(_WORD *)(a1 + 32);
      }
    }
  }
  else
  {
    sub_52890(a1, dword_AE400_AE3F0() + 29795 + v1);
  }
  v21 = *(_DWORD *)(a1 + 72);
  v22 = *(_WORD *)(a1 + 76);
  *(_DWORD *)&word_AE454_AE444 = v21;
  word_AE454_AE444.z = v22;
  sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
  sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  v7 = sub_11980(a1);
  v8 = v7;
  v9 = v7;
  if ( v7 )
  {
    if ( *(char *)(v7 + 17) >= 0 )
    {
      sub_52800(v7);
      sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v8 + 72));
      result = sub_52820(v8);
      v24 = 1;
    }
    else
    {
      result = (*(_DWORD *)(a1 + 140) - (__CFSHL__(*(int *)(a1 + 140) >> 31, 2) + 4 * (*(int *)(a1 + 140) >> 31))) >> 2;
      if ( result <= *(_DWORD *)(v8 + 140) )
      {
        sub_55370_558A0((v8 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 28);
        v11 = dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(a1 + 24);
        *(_DWORD *)(v8 + 140) -= (*(_DWORD *)(a1 + 140)
                                - (__CFSHL__(*(int *)(a1 + 140) >> 31, 2)
                                 + 4 * (*(int *)(a1 + 140) >> 31))) >> 2;
        v12 = *(_WORD *)(a1 + 30);
        HIBYTE(v12) = (HIBYTE(v12) + 4) & 7;
        *(_WORD *)(a1 + 34) = v12;
        v13 = sub_42240_42580(0, *(_WORD *)(a1 + 32));
        v14 = -(v13 * sub_42210_42550(0, *(_WORD *)(a1 + 32)));
        BYTE1(v14) &= 7u;
        *(_WORD *)(a1 + 36) = v14;
        v15 = *(_DWORD *)(a1 + 4);
        *(_WORD *)(a1 + 32) = v14;
        v16 = 9377 * v15 + 9439;
        *(_DWORD *)(a1 + 4) = v16;
        *(_WORD *)(a1 + 30) = v16 % 0x5B + *(_WORD *)(a1 + 34) - 45;
        *(_WORD *)(a1 + 146) = (v11 - (dword_AE400_AE3F0() + 29795)) / 164;
        *(_WORD *)(a1 + 24) = *(_WORD *)(v8 + 24);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(v8 + 72);
        word_AE454_AE444.z = *(_WORD *)(v8 + 76);
        LOWORD(v16) = *(_WORD *)(v8 + 84);
        word_AE454_AE444.z += v16;
        return sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
      }
    }
  }
  else
  {
    result = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
    v17 = *(_WORD *)(a1 + 76);
    word_AE454_AE444.z = result;
    if ( (__int16)result <= v17 )
    {
      v19 = *(_DWORD *)(a1 + 12) - 1;
      *(_DWORD *)(a1 + 12) = v19;
      if ( v19 >= 0 )
        goto LABEL_24;
    }
    else
    {
      result = sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)&v21);
      if ( *(_BYTE *)(a1 + 65) != 4 )
      {
        result = sub_11810((__int16 *)(a1 + 72));
        if ( result == 1 )
        {
          v18 = sub_373F0_377B0(a1 + 72, 10, 5);
          if ( v18 )
            *(_WORD *)(v18 + 24) = *(_WORD *)(a1 + 24);
          result = sub_41E80_421C0(a1);
          goto LABEL_24;
        }
      }
    }
    v24 = 1;
  }
LABEL_24:
  if ( v24 )
  {
    result = sub_373F0_377B0(a1 + 72, *(char *)(a1 + 68), *(char *)(a1 + 69));
    v20 = (_WORD *)result;
    if ( result )
    {
      sub_52A00(a1, v9, v23);
      v20[12] = *(_WORD *)(a1 + 24);
      v20[15] = *(_WORD *)(a1 + 30);
      v20[16] = *(_WORD *)(a1 + 32);
      return sub_41E80_421C0(a1);
    }
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (00053210) --------------------------------------------------------
char sub_53210(int a1)
{
  unsigned __int16 v1; // si
  unsigned int v2; // ebp
  char v3; // dl
  __int16 v4; // ax
  int v5; // eax
  int v6; // esi
  unsigned int v7; // edi
  int v8; // eax
  __int16 v9; // cx
  int v10; // edx
  _WORD *v11; // esi
  char v13; // [esp+0h] [ebp-14h]

  v1 = *(_WORD *)(a1 + 146);
  v13 = 0;
  v2 = dword_AE400_AE3F0() + 29795 + 164 * v1;
  if ( v2 <= dword_AE400_AE3F0() + 29795 )
  {
    v3 = *(_BYTE *)(a1 + 16);
    if ( (v3 & 2) == 0 )
    {
      *(_BYTE *)(a1 + 16) = v3 | 2;
      if ( sub_548B0(a1) )
      {
        *(_WORD *)(a1 + 30) = *(_WORD *)(a1 + 34);
        *(_WORD *)(a1 + 32) = *(_WORD *)(a1 + 36);
      }
    }
  }
  else
  {
    sub_52890(a1, dword_AE400_AE3F0() + 29795 + 164 * v1);
  }
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
  v4 = sub_11F50((axis_3d*)(__int16*)&word_AE454_AE444);
  if ( v4 > word_AE454_AE444.z )
    word_AE454_AE444.z = v4;
  sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  v5 = sub_11AC0((_WORD *)a1);
  v6 = v5;
  v7 = v5;
  if ( v5 )
  {
    sub_52800(v5);
    sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v6 + 72));
    sub_52820(v6);
    LOBYTE(v8) = 1;
    v13 = 1;
  }
  else
  {
    LOWORD(v8) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
    v9 = *(_WORD *)(a1 + 76);
    word_AE454_AE444.z = v8;
    if ( (__int16)v8 > v9 || (v10 = *(_DWORD *)(a1 + 12) - 1, *(_DWORD *)(a1 + 12) = v10, v10 < 0) )
      v13 = 1;
  }
  if ( v13 )
  {
    v8 = sub_373F0_377B0(a1 + 72, *(char *)(a1 + 68), *(char *)(a1 + 69));
    v11 = (_WORD *)v8;
    if ( v8 )
    {
      sub_52A00(a1, v7, v2);
      v11[12] = *(_WORD *)(a1 + 24);
      v11[15] = *(_WORD *)(a1 + 30);
      v11[16] = *(_WORD *)(a1 + 32);
      LOBYTE(v8) = sub_41E80_421C0(a1);
    }
  }
  return v8;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (000533A0) --------------------------------------------------------
int sub_533A0(int a1)
{
  return sub_52AB0(a1);
}

//----- (000533B0) --------------------------------------------------------
int sub_533B0(int a1)
{
  int result; // eax
  char v2; // dh

  result = sub_52AB0(a1);
  BYTE1(result) = *(_BYTE *)(a1 + 64);
  if ( BYTE1(result) )
  {
    result = sub_373F0_377B0(a1 + 72, 10, 1);
    if ( result )
    {
      *(_BYTE *)(result + 16) |= 0x80u;
      v2 = *(_BYTE *)(result + 18) | 1;
      *(_WORD *)(result + 24) = *(_WORD *)(a1 + 24);
      *(_BYTE *)(result + 18) = v2;
    }
  }
  return result;
}

//----- (000533F0) --------------------------------------------------------
int sub_533F0(int a1)
{
  return sub_53400(a1);
}

//----- (00053400) --------------------------------------------------------
int sub_53400(int a1)
{
  int v1; // edx
  char v2; // dl
  int v3; // eax
  __int16 v4; // ax
  int v5; // eax
  unsigned int v6; // ebp
  char v7; // cl
  int v8; // edi
  __int16 v9; // ax
  int v10; // esi
  int v11; // eax
  int v12; // ecx
  int v13; // edi
  int result; // eax
  __int16 v15; // dx
  int v16; // eax
  int v17; // esi
  int v18; // edi
  _WORD *v19; // esi
  unsigned int v20; // [esp+0h] [ebp-18h]
  char v21; // [esp+4h] [ebp-14h]

  //fix
  v4 = 0;
  //fix

  v21 = 0;
  v1 = 164 * *(unsigned __int16 *)(a1 + 146);
  v20 = dword_AE400_AE3F0() + 29795 + v1;
  if ( dword_AE400_AE3F0() + 29795 >= v20 )
  {
    v2 = *(_BYTE *)(a1 + 16);
    if ( (v2 & 2) == 0 )
    {
      *(_BYTE *)(a1 + 16) = v2 | 2;
      if ( sub_548B0(a1) )
      {
        *(_WORD *)(a1 + 30) = *(_WORD *)(a1 + 34);
        *(_WORD *)(a1 + 32) = *(_WORD *)(a1 + 36);
      }
      else
      {
        *(_WORD *)(a1 + 34) = *(_WORD *)(a1 + 30);
        *(_WORD *)(a1 + 36) = *(_WORD *)(a1 + 32);
      }
    }
  }
  else
  {
    sub_52890(a1, dword_AE400_AE3F0() + 29795 + v1);
  }
  v3 = *(__int16 *)(a1 + 128) - *(__int16 *)(a1 + 126);
  if ( v3 )
    v3 /= (int)abs32(v3);
  *(_WORD *)(a1 + 126) += 2 * v3;
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
  sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  v5 = sub_11980(a1);
  v6 = v5;
  if ( v5 )
  {
    if ( *(char *)(v5 + 17) < 0
      && (*(_DWORD *)(a1 + 140) - (__CFSHL__(*(int *)(a1 + 140) >> 31, 2) + 4 * (*(int *)(a1 + 140) >> 31))) >> 2 <= *(_DWORD *)(v5 + 140)
      && *(_BYTE *)(a1 + 68) == 10 )
    {
      v7 = *(_BYTE *)(a1 + 69);
      if ( v7 == 1 || v7 == 17 || v7 == 53 )
      {
        sub_55370_558A0((v5 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 28);
        v8 = dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(a1 + 24);
        *(_DWORD *)(v6 + 140) -= (*(_DWORD *)(a1 + 140)
                                - (__CFSHL__(*(int *)(a1 + 140) >> 31, 2)
                                 + 4 * (*(int *)(a1 + 140) >> 31))) >> 2;
        v9 = *(_WORD *)(a1 + 30);
        HIBYTE(v9) = (HIBYTE(v9) + 4) & 7;
        *(_WORD *)(a1 + 34) = v9;
        v10 = sub_42240_42580(0, *(_WORD *)(a1 + 32));
        v11 = -(v10 * sub_42210_42550(0, *(_WORD *)(a1 + 32)));
        BYTE1(v11) &= 7u;
        *(_WORD *)(a1 + 36) = v11;
        v12 = *(_DWORD *)(a1 + 4);
        *(_WORD *)(a1 + 32) = v11;
        *(_DWORD *)(a1 + 4) = 9377 * v12 + 9439;
        v13 = v8 - (dword_AE400_AE3F0() + 29795);
        *(_WORD *)(a1 + 30) = (9377 * v12 + 9439) % 0x2Du + *(_WORD *)(a1 + 34) - 22;
        *(_WORD *)(a1 + 146) = v13 / 164;
        *(_WORD *)(a1 + 24) = *(_WORD *)(v6 + 24);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(v6 + 72);
        word_AE454_AE444.z = *(_WORD *)(v6 + 76);
        LOWORD(v11) = *(_WORD *)(v6 + 84);
        word_AE454_AE444.z += v11;
        return sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
      }
    }
    sub_52800(v5);
    sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v6 + 72));
    result = sub_52820(v6);
    BYTE1(result) = 1;
    v21 = 1;
  }
  else
  {
    result = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
    v15 = *(_WORD *)(a1 + 76);
    word_AE454_AE444.z = result;
    if ( (__int16)result <= v15 )
    {
      v17 = *(_DWORD *)(a1 + 12) - 1;
      *(_DWORD *)(a1 + 12) = v17;
      if ( v17 >= 0 )
        goto LABEL_26;
    }
    else if ( *(_BYTE *)(a1 + 65) != 4 )
    {
      result = sub_11810((__int16 *)(a1 + 72));
      if ( result == 1 )
      {
        v16 = sub_373F0_377B0(a1 + 72, 10, 5);
        if ( v16 )
          *(_WORD *)(v16 + 24) = *(_WORD *)(a1 + 24);
        result = sub_41E80_421C0(a1);
        goto LABEL_26;
      }
    }
    v21 = 1;
  }
LABEL_26:
  if ( v21 )
  {
    if ( v6 && *(_BYTE *)(v6 + 64) == 3 && *(_BYTE *)(v6 + 65) <= 1u )
    {
      result = sub_373F0_377B0(a1 + 72, *(char *)(a1 + 68), *(char *)(a1 + 69));
      v18 = result;
      v19 = (_WORD *)result;
      if ( result )
      {
        sub_52A00(a1, v6, v20);
        if ( *(_BYTE *)(a1 + 69) == 34 )
          *(_DWORD *)(v18 + 12) = *(unsigned __int16 *)(a1 + 44);
        v19[12] = *(_WORD *)(a1 + 24);
        v19[15] = *(_WORD *)(a1 + 30);
        v19[16] = *(_WORD *)(a1 + 32);
        v19[73] = (int)(v6 - (dword_AE400_AE3F0() + 29795)) / 164;
        v19[22] = *(_WORD *)(a1 + 44);
        return sub_41E80_421C0(a1);
      }
    }
    else
    {
      sub_52A00(a1, 0, v20);
      return sub_41E80_421C0(a1);
    }
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (00053800) --------------------------------------------------------
char sub_53800(int a1)
{
  char v1; // dl
  int v2; // eax
  int v3; // esi
  __int16 v4; // dx
  int v5; // edx
  char v7; // [esp+0h] [ebp-10h]

  v7 = 0;
  if ( dword_AE400_AE3F0() + 29795 + 164 * (unsigned int)*(unsigned __int16 *)(a1 + 146) <= dword_AE400_AE3F0() + 29795 )
  {
    v1 = *(_BYTE *)(a1 + 16);
    if ( (v1 & 2) == 0 )
    {
      *(_BYTE *)(a1 + 16) = v1 | 2;
      if ( sub_548B0(a1) )
      {
        *(_WORD *)(a1 + 30) = *(_WORD *)(a1 + 34);
        *(_WORD *)(a1 + 32) = *(_WORD *)(a1 + 36);
      }
      else
      {
        *(_WORD *)(a1 + 34) = *(_WORD *)(a1 + 30);
        *(_WORD *)(a1 + 36) = *(_WORD *)(a1 + 32);
      }
    }
  }
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
  *(_DWORD *)(a1 + 72) = *(_DWORD *)&word_AE454_AE444;
  *(_WORD *)(a1 + 76) = word_AE454_AE444.z;
  v2 = sub_11980(a1);
  if ( v2 )
  {
    v3 = v2 + 72;
    LOBYTE(v2) = 1;
    *(_DWORD *)(a1 + 72) = *(_DWORD *)v3;
    *(_WORD *)(a1 + 76) = *(_WORD *)(v3 + 4);
    v7 = 1;
  }
  else
  {
    LOWORD(v2) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
    v4 = *(_WORD *)(a1 + 76);
    word_AE454_AE444.z = v2;
    if ( (__int16)v2 > v4 || (v5 = *(_DWORD *)(a1 + 12) - 1, *(_DWORD *)(a1 + 12) = v5, v5 < 0) )
      v7 = 1;
  }
  if ( v7 )
    LOBYTE(v2) = sub_41E80_421C0(a1);
  return v2;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (00053920) --------------------------------------------------------
__int16 sub_53920(unsigned int a1)
{
  __int16 v1; // ax
  __int16 v2; // di
  __int16 v3; // si
  char v4; // ah
  char v5; // dl
  int v6; // edx
  unsigned int v7; // eax
  int v8; // esi
  __int16 v9; // si
  __int16 v10; // cx
  unsigned int v11; // eax
  int v12; // esi
  int v13; // eax
  int v14; // esi
  unsigned int v15; // eax
  unsigned __int16 v16; // ax
  int v17; // edi
  int v18; // eax
  _WORD *v19; // esi
  int v20; // ebp
  int v21; // edx
  int v23; // [esp+0h] [ebp-3Ch]
  __int16 v24; // [esp+4h] [ebp-38h]
  int v25; // [esp+8h] [ebp-34h] BYREF
  __int16 v26; // [esp+Ch] [ebp-30h]
  int v27; // [esp+10h] [ebp-2Ch] BYREF
  int v28; // [esp+14h] [ebp-28h]
  unsigned int v29; // [esp+18h] [ebp-24h]
  int v30; // [esp+1Ch] [ebp-20h]
  int v31; // [esp+20h] [ebp-1Ch]
  int v32; // [esp+24h] [ebp-18h]
  int v33; // [esp+28h] [ebp-14h]

  v1 = *(_WORD *)(a1 + 128);
  *(_WORD *)(a1 + 126) = v1;
  v23 = *(_DWORD *)(a1 + 72);
  v24 = *(_WORD *)(a1 + 76);
  sub_41DD0_42110((Type_AE400_29795*)a1);
  sub_53800(a1);
  v2 = *(_WORD *)(a1 + 30);
  v3 = *(_WORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 17);
  v30 = 1;
  if ( (v4 & 4) == 0 )
  {
    do
    {
      sub_53800(a1);
      v5 = *(_BYTE *)(a1 + 17);
      ++v30;
    }
    while ( (v5 & 4) == 0 );
  }
  *(_WORD *)(a1 + 30) = v2;
  *(_WORD *)(a1 + 32) = v3;
  v27 = 0;
  LOWORD(v28) = 0;
  v6 = *(__int16 *)(a1 + 126);
  v30 *= 8;
  v33 = (v6 - (__CFSHL__(v6 >> 31, 3) + 8 * (v6 >> 31))) >> 3;
  sub_41EC0_42200((axis_3d*)(uint16*)&v27, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), v33);
  v31 = 0;
  v32 = 0;
  *(_DWORD *)&word_AE454_AE444 = v23;
  word_AE454_AE444.z = v24;
  v25 = v23;
  v26 = v24;
  if ( (v30 & 0x8000u) == 0 )
  {
    while ( 1 )
    {
      v7 = sub_37680();
      v8 = v7;
      if ( v7 )
      {
        *(_BYTE *)(v7 + 70) = 14;
        *(_BYTE *)(v7 + 64) = 9;
        *(_BYTE *)(v7 + 65) = 9;
        *(_WORD *)(v7 + 24) = *(_WORD *)(a1 + 24);
        *(_DWORD *)(v7 + 8) = (v7 >= a1) - 1;
        sub_36FA0_37360(v7, 216);
        sub_41CF0_42030((Type_AE400_29795*)v8, (axis_3d*)&v25);
        sub_371A0(v8);
      }
      v9 = (__int16)v30 / 2;
      if ( (__int16)v30 / 2 < 0 )
        v9 = 0;
      if ( v9 > 8 )
        v9 = 8;
      if ( v9 >= (__int16)v32 )
      {
        v10 = v32;
        if ( (__int16)v32 >= -v9 )
        {
          v11 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
          *(_DWORD *)(a1 + 4) = v11;
          v32 = 2 * (v11 % 0x9D / 79i64) - 1 + v10;
        }
        else
        {
          ++v32;
        }
      }
      else
      {
        --v32;
      }
      if ( v9 < (__int16)v31 )
        break;
      v13 = -v9;
      v14 = (__int16)v31;
      if ( (__int16)v31 >= v13 )
      {
        v15 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = v15;
        v12 = 2 * (v15 % 0x9D / 79i64) - 1 + v14;
        goto LABEL_20;
      }
      ++v31;
LABEL_21:
      word_AE454_AE444.x += v27;
      word_AE454_AE444.y += HIWORD(v27);
      word_AE454_AE444.z += v28;
      v25 = *(_DWORD *)&word_AE454_AE444;
      v26 = v32
          * ((int)((__int16)v33
                 - (__CFSHL__((unsigned __int64)(__int16)v33 >> 32, 2)
                  + 4 * ((unsigned __int64)(__int16)v33 >> 32))) >> 2)
          + word_AE454_AE444.z;
      v16 = *(_WORD *)(a1 + 30);
      HIBYTE(v16) = (HIBYTE(v16) + 2) & 7;
      sub_41EC0_42200(
          (axis_3d*)(uint16*)&v25,
        v16,
        0,
        v32
      * ((int)((__int16)v33
             - (__CFSHL__((unsigned __int64)(__int16)v33 >> 32, 2)
              + 4 * ((unsigned __int64)(__int16)v33 >> 32))) >> 2));
      if ( (--v30 & 0x8000u) != 0 )
        goto LABEL_22;
    }
    v12 = v31 - 1;
LABEL_20:
    v31 = v12;
    goto LABEL_21;
  }
LABEL_22:
  v17 = sub_11980(a1);
  v29 = 164 * *(unsigned __int16 *)(a1 + 146) + dword_AE400_AE3F0() + 29795;
  v18 = sub_373F0_377B0((int)&v25, *(char *)(a1 + 68), *(char *)(a1 + 69));
  v19 = (_WORD *)v18;
  v20 = v18;
  if ( v18 )
  {
    sub_52A00(a1, v17, v29);
    v19[12] = *(_WORD *)(a1 + 24);
    v19[15] = *(_WORD *)(a1 + 30);
    v21 = dword_AE400_AE3F0() + 29795;
    v19[16] = *(_WORD *)(a1 + 32);
    v19[73] = (v17 - v21) / 164;
    if ( v17
      && *(char *)(v17 + 17) < 0
      && *(_BYTE *)(v17 + 64) == 3
      && (*(_DWORD *)(a1 + 140) - (__CFSHL__(*(int *)(a1 + 140) >> 31, 2) + 4 * (*(int *)(a1 + 140) >> 31))) >> 2 <= *(_DWORD *)(v17 + 140) )
    {
      v18 = (int)*(unsigned __int16 *)(a1 + 44) >> 2;
      v19[22] = v18;
    }
    else
    {
      LOWORD(v18) = *(_WORD *)(a1 + 44);
      *(_WORD *)(v20 + 44) = v18;
    }
  }
  return v18;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE446: using guessed type __int16 word_AE454_AE444.y;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (00053CC0) --------------------------------------------------------
char sub_53CC0(int a1)
{
  unsigned __int16 v1; // cx
  unsigned int v2; // ebp
  __int16 v3; // ax
  int v4; // ecx
  int v5; // eax
  __int16 v6; // ax
  bool v7; // eax
  __int16 v8; // dx
  int v9; // edx
  int v10; // eax
  char v12; // [esp+0h] [ebp-14h]

  //fix
  v6 = 0;
  //fix

  v1 = *(_WORD *)(a1 + 146);
  v12 = 0;
  v2 = dword_AE400_AE3F0() + 29795 + 164 * v1;
  if ( v2 > dword_AE400_AE3F0() + 29795 )
  {
    sub_52950(a1, dword_AE400_AE3F0() + 29795 + 164 * v1);
    v4 = *(__int16 *)(a1 + 128) - *(__int16 *)(a1 + 126);
    if ( v4 )
      v5 = v4 / (int)abs32(v4);
    else
      LOWORD(v5) = 0;
    *(_WORD *)(a1 + 126) += 2 * v5;
    *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
    word_AE454_AE444.z = *(_WORD *)(a1 + 76);
    sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
    sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
    v7 = sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)v2);
    if ( v7 )
    {
      LOBYTE(v3) = sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v2 + 72));
      v12 = 1;
    }
    else
    {
      v3 = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
      v8 = *(_WORD *)(a1 + 76);
      word_AE454_AE444.z = v3;
      if ( v3 > v8 || (v9 = *(_DWORD *)(a1 + 12) - 1, *(_DWORD *)(a1 + 12) = v9, v9 < 0) )
        v12 = 1;
    }
    if ( v12 )
    {
      if ( *(_BYTE *)(a1 + 68) == 3 && *(_WORD *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * *(__int16 *)(a1 + 24) + 29955) + 50) )
      {
        LOBYTE(v3) = sub_41E80_421C0(a1);
      }
      else
      {
        v10 = sub_373F0_377B0(a1 + 72, *(char *)(a1 + 68), *(char *)(a1 + 69));
        if ( v10 )
        {
          *(_WORD *)(v10 + 24) = *(_WORD *)(a1 + 24);
          LOBYTE(v3) = sub_41E80_421C0(a1);
        }
        else
        {
          LOBYTE(v3) = sub_47060(dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(a1 + 24), 0);
        }
      }
    }
  }
  else
  {
    LOBYTE(v3) = sub_53E90(a1);
  }
  return v3;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (00053E90) --------------------------------------------------------
char sub_53E90(int a1)
{
  char v1; // dh
  int v2; // eax
  __int16 v3; // ax
  __int16 v4; // ax
  int v5; // ecx
  int v6; // eax
  __int16 v7; // ax
  int v8; // esi
  __int16 v9; // ax
  __int16 v10; // di
  int v11; // edx
  unsigned __int16 v12; // ax
  __int16 v13; // ax
  char v15; // [esp+0h] [ebp-14h]
  char v16; // [esp+4h] [ebp-10h]

  //fix
  v7 = 0;
  v13 = 0;
  //fix

  v1 = *(_BYTE *)(a1 + 16);
  v15 = 0;
  v16 = 0;
  if ( (v1 & 2) != 0 )
  {
    *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(a1 + 150));
    *(_WORD *)(a1 + 36) = sub_42180_424C0((_WORD *)(a1 + 72), (_WORD *)(a1 + 150));
    v3 = *(_WORD *)(a1 + 30)
       + sub_422A0_425E0(
           *(_WORD *)(a1 + 30),
           *(_WORD *)(a1 + 34),
           *(unsigned __int16 *)(*(_DWORD *)(a1 + 156) + 4),
           *(_WORD *)(*(_DWORD *)(a1 + 156) + 2));
    HIBYTE(v3) &= 7u;
    *(_WORD *)(a1 + 30) = v3;
    v4 = *(_WORD *)(a1 + 32)
       + sub_422A0_425E0(
           *(_WORD *)(a1 + 32),
           *(_WORD *)(a1 + 36),
           *(unsigned __int16 *)(*(_DWORD *)(a1 + 156) + 8),
           *(_WORD *)(*(_DWORD *)(a1 + 156) + 6));
    HIBYTE(v4) &= 7u;
    *(_WORD *)(a1 + 32) = v4;
    v5 = *(__int16 *)(a1 + 128) - *(__int16 *)(a1 + 126);
    if ( v5 )
      v6 = v5 / (int)abs32(v5);
    else
      LOWORD(v6) = 0;
    *(_WORD *)(a1 + 126) += 2 * v6;
    *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
    word_AE454_AE444.z = *(_WORD *)(a1 + 76);
    sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
    sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
    v8 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 146);
    if ( sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)v8) )
    {
      v9 = sub_52800(v8);
      LOBYTE(v2) = sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v8 + 72));
      v15 = 1;
    }
    else
    {
      LOWORD(v2) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
      v10 = *(_WORD *)(a1 + 76);
      word_AE454_AE444.z = v2;
      if ( (__int16)v2 > v10
        || (v11 = *(_DWORD *)(a1 + 12) - 1, *(_DWORD *)(a1 + 12) = v11, v11 < 0)
        || (LOBYTE(v2) = !sub_12F70((_WORD *)(a1 + 72)), (v16 = v2) != 0) )
      {
        v15 = 1;
      }
    }
    if ( v15 )
    {
      if ( v16 )
      {
        *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
        word_AE454_AE444.z = *(_WORD *)(a1 + 76);
        v12 = *(_WORD *)(a1 + 30);
        HIBYTE(v12) = (HIBYTE(v12) + 4) & 7;
        sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, v12, *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
        sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
      }
      v2 = sub_373F0_377B0(a1 + 72, *(char *)(a1 + 68), *(char *)(a1 + 69));
      if ( v2 )
      {
        *(_WORD *)(v2 + 24) = *(_WORD *)(a1 + 24);
        LOBYTE(v2) = sub_41E80_421C0(a1);
      }
    }
  }
  else
  {
    *(_BYTE *)(a1 + 16) = v1 | 2;
    LOBYTE(v2) = sub_12F70((_WORD *)(a1 + 72));
    if ( !(_BYTE)v2 )
    {
      sub_47060(a1, 0);
      LOBYTE(v2) = sub_41E80_421C0(a1);
    }
  }
  return v2;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (00054100) --------------------------------------------------------
int sub_54100(int a1)
{
  int v1; // edx
  char v2; // dl
  int v3; // eax
  __int16 v4; // ax
  int v5; // eax
  unsigned int v6; // ebp
  char v7; // cl
  int v8; // edi
  __int16 v9; // ax
  int v10; // esi
  int v11; // eax
  int v12; // edx
  unsigned int v13; // eax
  int result; // eax
  __int16 v15; // dx
  int v16; // eax
  int v17; // esi
  int v18; // edi
  int v19; // esi
  unsigned int v20; // [esp+0h] [ebp-18h]
  char v21; // [esp+4h] [ebp-14h]

  //fix
  v4 = 0;
  //fix

  v21 = 0;
  v1 = 164 * *(unsigned __int16 *)(a1 + 146);
  v20 = dword_AE400_AE3F0() + 29795 + v1;
  if ( dword_AE400_AE3F0() + 29795 >= v20 )
  {
    v2 = *(_BYTE *)(a1 + 16);
    if ( (v2 & 2) == 0 )
    {
      *(_BYTE *)(a1 + 16) = v2 | 2;
      if ( sub_548B0(a1) )
      {
        *(_WORD *)(a1 + 30) = *(_WORD *)(a1 + 34);
        *(_WORD *)(a1 + 32) = *(_WORD *)(a1 + 36);
      }
      else
      {
        *(_WORD *)(a1 + 34) = *(_WORD *)(a1 + 30);
        *(_WORD *)(a1 + 36) = *(_WORD *)(a1 + 32);
      }
    }
  }
  else
  {
    sub_52890(a1, dword_AE400_AE3F0() + 29795 + v1);
  }
  v3 = *(__int16 *)(a1 + 128) - *(__int16 *)(a1 + 126);
  if ( v3 )
    v3 /= (int)abs32(v3);
  *(_WORD *)(a1 + 126) += 2 * v3;
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
  sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  v5 = sub_11980(a1);
  v6 = v5;
  if ( !v5 )
  {
    result = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
    v15 = *(_WORD *)(a1 + 76);
    word_AE454_AE444.z = result;
    if ( (__int16)result <= v15 )
    {
      v17 = *(_DWORD *)(a1 + 12) - 1;
      *(_DWORD *)(a1 + 12) = v17;
      if ( v17 >= 0 )
        goto LABEL_26;
    }
    else if ( *(_BYTE *)(a1 + 65) != 4 )
    {
      result = sub_11810((__int16 *)(a1 + 72));
      if ( result == 1 )
      {
        v16 = sub_373F0_377B0(a1 + 72, 10, 5);
        if ( v16 )
          *(_WORD *)(v16 + 24) = *(_WORD *)(a1 + 24);
        result = sub_41E80_421C0(a1);
        goto LABEL_26;
      }
    }
    v21 = 1;
    goto LABEL_26;
  }
  if ( *(char *)(v5 + 17) < 0
    && (*(_DWORD *)(a1 + 140) - (__CFSHL__(*(int *)(a1 + 140) >> 31, 2) + 4 * (*(int *)(a1 + 140) >> 31))) >> 2 <= *(_DWORD *)(v5 + 140)
    && *(_BYTE *)(a1 + 68) == 10 )
  {
    v7 = *(_BYTE *)(a1 + 69);
    if ( v7 == 1 || v7 == 17 || v7 == 53 )
    {
      sub_55370_558A0((v5 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 28);
      v8 = dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(a1 + 24);
      *(_DWORD *)(v6 + 140) -= (*(_DWORD *)(a1 + 140)
                              - (__CFSHL__(*(int *)(a1 + 140) >> 31, 2)
                               + 4 * (*(int *)(a1 + 140) >> 31))) >> 2;
      v9 = *(_WORD *)(a1 + 30);
      HIBYTE(v9) = (HIBYTE(v9) + 4) & 7;
      *(_WORD *)(a1 + 34) = v9;
      v10 = sub_42240_42580(0, *(_WORD *)(a1 + 32));
      v11 = -(v10 * sub_42210_42550(0, *(_WORD *)(a1 + 32)));
      BYTE1(v11) &= 7u;
      *(_WORD *)(a1 + 36) = v11;
      v12 = *(_DWORD *)(a1 + 4);
      *(_WORD *)(a1 + 32) = v11;
      v13 = 9377 * v12 + 9439;
      *(_DWORD *)(a1 + 4) = v13;
      *(_WORD *)(a1 + 30) = v13 % 0x2D + *(_WORD *)(a1 + 34) - 22;
      *(_WORD *)(a1 + 146) = (v8 - (dword_AE400_AE3F0() + 29795)) / 164;
      *(_WORD *)(a1 + 24) = *(_WORD *)(v6 + 24);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 8);
      *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(v6 + 72);
      word_AE454_AE444.z = *(_WORD *)(v6 + 76);
      LOWORD(v13) = *(_WORD *)(v6 + 84);
      word_AE454_AE444.z += v13;
      return sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
    }
  }
  sub_52800(v5);
  sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v6 + 72));
  result = sub_52820(v6);
  BYTE1(result) = 1;
  v21 = 1;
LABEL_26:
  if ( v21 )
  {
    result = sub_373F0_377B0(a1 + 72, 10, 38);
    v18 = result;
    v19 = result;
    if ( result )
    {
      sub_52A00(a1, v6, v20);
      if ( *(_BYTE *)(a1 + 69) == 34 )
        *(_DWORD *)(v18 + 12) = *(unsigned __int16 *)(a1 + 44);
      *(_WORD *)(v19 + 24) = *(_WORD *)(a1 + 24);
      *(_WORD *)(v19 + 30) = *(_WORD *)(a1 + 30);
      *(_WORD *)(v19 + 32) = *(_WORD *)(a1 + 32);
      *(_WORD *)(v19 + 146) = (int)(v6 - (dword_AE400_AE3F0() + 29795)) / 164;
      *(_WORD *)(v19 + 44) = *(_WORD *)(a1 + 44);
      *(_BYTE *)(v19 + 68) = *(_BYTE *)(a1 + 68);
      *(_BYTE *)(v19 + 69) = *(_BYTE *)(a1 + 69);
      return sub_41E80_421C0(a1);
    }
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (000544D0) --------------------------------------------------------
int sub_544D0(int a1)
{
  int v1; // eax
  int v2; // edi
  int v3; // eax

  if ( (*(_BYTE *)(a1 + 16) & 2) == 0 )
  {
    v1 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
    *(_DWORD *)(a1 + 4) = v1;
    sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, (v1 & 3) + 33);
    *(_BYTE *)(a1 + 16) |= 2u;
  }
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  sub_41EC0_42200((axis_3d*)(axis_3d*)(uint16*)&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
  v2 = sub_11980(a1);
  if ( (__int16)sub_11F50((axis_3d*)(__int16*)&word_AE454_AE444) <= word_AE454_AE444.z )
  {
    v3 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3 - 1;
    if ( v3 )
    {
      if ( !v2 )
        return sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
    }
  }
  if ( v2 )
  {
    sub_52800(v2);
    sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v2 + 72));
    sub_52820(v2);
  }
  sub_120B0(a1, 0, *(_WORD *)(a1 + 44));
  return sub_41E80_421C0(a1);
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (000545E0) --------------------------------------------------------
int sub_545E0(int a1)
{
  int result; // eax

  result = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = result - 1;
  if ( result < 0 )
    return sub_41E80_421C0(a1);
  return result;
}

//----- (00054600) --------------------------------------------------------
int sub_54600(int a1)
{
  int result; // eax
  char v2; // dh

  result = sub_52AB0(a1);
  BYTE1(result) = *(_BYTE *)(a1 + 64);
  if ( BYTE1(result) )
  {
    result = sub_373F0_377B0(a1 + 72, 10, 0);
    if ( result )
    {
      *(_BYTE *)(result + 16) |= 0x80u;
      v2 = *(_BYTE *)(result + 18) | 1;
      *(_WORD *)(result + 24) = *(_WORD *)(a1 + 24);
      *(_BYTE *)(result + 18) = v2;
    }
  }
  return result;
}

//----- (00054640) --------------------------------------------------------
char sub_54640(int a1)
{
  unsigned __int16 v1; // si
  unsigned int v2; // ebp
  char v3; // dl
  __int16 v4; // ax
  int v5; // eax
  int v6; // esi
  unsigned int v7; // edi
  int v8; // eax
  __int16 v9; // cx
  int v10; // edx
  _WORD *v11; // esi
  _WORD *v12; // esi
  char v14; // [esp+0h] [ebp-14h]

  v1 = *(_WORD *)(a1 + 146);
  v14 = 0;
  v2 = dword_AE400_AE3F0() + 29795 + 164 * v1;
  if ( v2 <= dword_AE400_AE3F0() + 29795 )
  {
    v3 = *(_BYTE *)(a1 + 16);
    if ( (v3 & 2) == 0 )
    {
      *(_BYTE *)(a1 + 16) = v3 | 2;
      if ( sub_548B0(a1) )
      {
        *(_WORD *)(a1 + 30) = *(_WORD *)(a1 + 34);
        *(_WORD *)(a1 + 32) = *(_WORD *)(a1 + 36);
      }
    }
  }
  else
  {
    sub_52890(a1, dword_AE400_AE3F0() + 29795 + 164 * v1);
  }
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  sub_41EC0_42200((axis_3d*)(uint16*)&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
  v4 = sub_11F50((axis_3d*)(__int16*)&word_AE454_AE444);
  if ( v4 > word_AE454_AE444.z )
    word_AE454_AE444.z = v4;
  sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  v5 = sub_11C00((__int16 *)a1);
  v6 = v5;
  v7 = v5;
  if ( v5 )
  {
    sub_52800(v5);
    sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v6 + 72));
    sub_52820(v6);
    LOBYTE(v8) = 1;
    v14 = 1;
  }
  else
  {
    LOWORD(v8) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
    v9 = *(_WORD *)(a1 + 76);
    word_AE454_AE444.z = v8;
    if ( (__int16)v8 > v9 || (v10 = *(_DWORD *)(a1 + 12) - 1, *(_DWORD *)(a1 + 12) = v10, v10 < 0) )
      v14 = 1;
  }
  if ( v14 )
  {
    v11 = (_WORD *)sub_373F0_377B0(a1 + 72, 10, 12);
    if ( v11 )
    {
      sub_52A00(a1, v7, v2);
      v11[12] = *(_WORD *)(a1 + 24);
      v11[15] = *(_WORD *)(a1 + 30);
      v11[16] = *(_WORD *)(a1 + 32);
    }
    v8 = sub_373F0_377B0(a1 + 72, *(char *)(a1 + 68), *(char *)(a1 + 69));
    v12 = (_WORD *)v8;
    if ( v8 )
    {
      sub_52A00(a1, v7, v2);
      v12[12] = *(_WORD *)(a1 + 24);
      v12[15] = *(_WORD *)(a1 + 30);
      v12[16] = *(_WORD *)(a1 + 32);
      LOBYTE(v8) = sub_41E80_421C0(a1);
    }
  }
  return v8;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE444: using guessed type __int16 word_AE454_AE44X;
// AE448: using guessed type __int16 word_AE454_AE444.z;

//----- (00054810) --------------------------------------------------------
_WORD *sub_54810(int a1)
{
  _WORD *result; // eax

  result = (_WORD *)sub_373F0_377B0(a1 + 72, *(char *)(a1 + 68), *(char *)(a1 + 69));
  if ( result )
  {
    result[12] = *(_WORD *)(a1 + 24);
    result[15] = *(_WORD *)(a1 + 30);
    result[16] = *(_WORD *)(a1 + 32);
    result[22] = *(_WORD *)(a1 + 44);
    return (_WORD *)sub_41E80_421C0(a1);
  }
  return result;
}

//----- (000548B0) --------------------------------------------------------
int sub_548B0(int a1)
{
  unsigned int v1; // ebp
  int v2; // edi
  unsigned int v3; // ebx
  unsigned int v4; // eax
  unsigned int ii; // ebx
  unsigned int v6; // eax
  int v7; // eax
  unsigned int v9; // ebp
  unsigned int v10; // ebx
  unsigned int v11; // eax
  unsigned int j; // ebx
  unsigned int v13; // eax
  unsigned int v14; // ebp
  unsigned int v15; // ebx
  unsigned int v16; // eax
  unsigned int kk; // ebx
  unsigned int v18; // eax
  unsigned int v19; // ebp
  unsigned int k; // ebx
  unsigned int v21; // eax
  unsigned int m; // ebx
  unsigned int v23; // eax
  unsigned int v24; // edi
  int v25; // ebp
  unsigned int mm; // ebx
  unsigned int v27; // eax
  unsigned int v28; // ebp
  int v29; // edi
  unsigned int v30; // ebx
  unsigned int v31; // eax
  int jj; // [esp+4h] [ebp-40h]
  unsigned int v33; // [esp+8h] [ebp-3Ch]
  unsigned int v34; // [esp+8h] [ebp-3Ch]
  unsigned int v35; // [esp+8h] [ebp-3Ch]
  unsigned int v36; // [esp+8h] [ebp-3Ch]
  int v37; // [esp+18h] [ebp-2Ch]
  int v38; // [esp+1Ch] [ebp-28h]
  int v39; // [esp+20h] [ebp-24h]
  int v40; // [esp+24h] [ebp-20h]
  int n; // [esp+28h] [ebp-1Ch]
  int i; // [esp+2Ch] [ebp-18h]
  int v43; // [esp+30h] [ebp-14h]

  if ( *(__int16 *)(a1 + 26) > 16 )
    *(_WORD *)(a1 + 26) = 16;
  switch ( *(_BYTE *)(a1 + 65) )
  {
    case 0:
    case 3:
    case 4:
    case 0x12:
    case 0x13:
      v9 = -1;
      v43 = 0;
      v39 = 164 * *(__int16 *)(a1 + 24) + dword_AE400_AE3F0() + 29795;
      v10 = *(_DWORD *)(dword_AE408_AE3F8() + 36462);
      while ( 2 )
      {
        if ( v10 > dword_AE400_AE3F0() + 29795 )
        {
          if ( *(_WORD *)(v10 + 24) == *(_WORD *)(a1 + 24) )
            goto LABEL_35;
          if ( (*(_BYTE *)(v10 + 16) & 0x20) != 0 )
            goto LABEL_35;
          v34 = *(__int16 *)(*(_DWORD *)(v39 + 156) + 28);
          if ( sub_42340_42680((_WORD *)(v10 + 72), (_WORD *)(a1 + 72)) > v34 )
            goto LABEL_35;
          if ( *(_BYTE *)(v10 + 65) == 2 )
          {
            v11 = sub_55100((__int16 *)a1, v10, 0x71u, 0x71u);
            if ( v11 < v9 )
              goto LABEL_34;
          }
          else
          {
            v11 = sub_54FC0((__int16 *)a1, v10, 0x71u, 0x71u);
            if ( v11 < v9 )
            {
LABEL_34:
              v43 = v10;
              v9 = v11;
            }
          }
LABEL_35:
          v10 = *(_DWORD *)v10;
          continue;
        }
        break;
      }
      for ( i = 0; i != 80; i += 4 )
      {
        for ( j = *(_DWORD *)(i + dword_AE408_AE3F8() + 36382); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
        {
          if ( *(_WORD *)(j + 24) != *(_WORD *)(a1 + 24) )
          {
            if ( *(_BYTE *)(j + 58) )
            {
              v13 = sub_54FC0((__int16 *)a1, j, 0x71u, 0x71u);
              if ( v13 < v9 )
              {
                v43 = j;
                v9 = v13;
              }
            }
          }
        }
      }
      if ( !v43 )
        return 0;
      *(_WORD *)(a1 + 146) = (v43 - (dword_AE400_AE3F0() + 29795)) / 164;
      sub_52840((_WORD *)a1, v43);
      if ( *(_BYTE *)(v43 + 64) == 3 && !*(_BYTE *)(v43 + 65) )
        sub_46520_46860(v43);
      return 1;
    case 1:
      v19 = -1;
      v2 = 0;
      for ( k = *(_DWORD *)(dword_AE408_AE3F8() + 36466); k > dword_AE400_AE3F0() + 29795; k = *(_DWORD *)k )
      {
        if ( *(unsigned __int16 *)(k + 144) != *(__int16 *)(a1 + 24) )
        {
          if ( *(_BYTE *)(k + 58) )
          {
            v21 = sub_54FC0((__int16 *)a1, k, 0x71u, 0x71u);
            if ( v21 < v19 )
            {
              v2 = k;
              v19 = v21;
            }
          }
        }
      }
      for ( m = *(_DWORD *)(dword_AE408_AE3F8() + 36470); ; m = *(_DWORD *)m )
      {
        v7 = dword_AE400_AE3F0() + 29795;
        if ( m <= dword_AE400_AE3F0() + 29795 )
          break;
        if ( *(unsigned __int16 *)(m + 144) != *(__int16 *)(a1 + 24) )
        {
          if ( *(_BYTE *)(m + 58) )
          {
            v23 = sub_54FC0((__int16 *)a1, m, 0x71u, 0x71u);
            if ( v23 < v19 )
            {
              v2 = m;
              v19 = v23;
            }
          }
        }
      }
      if ( !v2 )
        return 0;
      goto LABEL_25;
    case 7:
    case 8:
    case 0xB:
    case 0xC:
      v28 = -1;
      v29 = 0;
      v30 = *(_DWORD *)(dword_AE408_AE3F8() + 36462);
      v37 = 164 * *(__int16 *)(a1 + 24) + dword_AE400_AE3F0() + 29795;
      while ( 2 )
      {
        if ( v30 <= dword_AE400_AE3F0() + 29795 )
        {
          if ( v29 )
          {
            *(_WORD *)(a1 + 146) = (v29 - (dword_AE400_AE3F0() + 29795)) / 164;
            sub_52840((_WORD *)a1, v29);
            if ( *(_BYTE *)(v29 + 64) == 3 && !*(_BYTE *)(v29 + 65) )
              sub_46520_46860(v29);
            return 1;
          }
          return 0;
        }
        if ( *(_WORD *)(v30 + 24) == *(_WORD *)(a1 + 24) )
          goto LABEL_109;
        if ( (*(_BYTE *)(v30 + 16) & 0x20) != 0 )
          goto LABEL_109;
        v36 = *(__int16 *)(*(_DWORD *)(v37 + 156) + 28);
        if ( sub_42340_42680((_WORD *)(v30 + 72), (_WORD *)(a1 + 72)) > v36 )
          goto LABEL_109;
        if ( *(_BYTE *)(v30 + 65) == 2 )
        {
          v31 = sub_54FC0((__int16 *)a1, v30, 0x71u, 0x71u);
          if ( v31 < v28 )
            goto LABEL_108;
        }
        else
        {
          v31 = sub_54FC0((__int16 *)a1, v30, 0x71u, 0x71u);
          if ( v31 < v28 )
          {
LABEL_108:
            v29 = v30;
            v28 = v31;
          }
        }
LABEL_109:
        v30 = *(_DWORD *)v30;
        continue;
      }
    case 9:
      v1 = -1;
      v2 = 0;
      v3 = *(_DWORD *)(dword_AE408_AE3F8() + 36462);
      while ( 2 )
      {
        if ( v3 <= dword_AE400_AE3F0() + 29795 )
        {
          for ( n = 0; n != 80; n += 4 )
          {
            for ( ii = *(_DWORD *)(n + dword_AE408_AE3F8() + 36382); ; ii = *(_DWORD *)ii )
            {
              v7 = dword_AE400_AE3F0() + 29795;
              if ( ii <= dword_AE400_AE3F0() + 29795 )
                break;
              if ( *(_WORD *)(ii + 24) != *(_WORD *)(a1 + 24) )
              {
                if ( *(_BYTE *)(ii + 58) )
                {
                  v6 = sub_54FC0((__int16 *)a1, ii, 0x71u, 0x200u);
                  if ( v6 < v1 )
                  {
                    v2 = ii;
                    v1 = v6;
                  }
                }
              }
            }
          }
          if ( v2 )
          {
LABEL_25:
            *(_WORD *)(a1 + 146) = (v2 - v7) / 164;
            sub_52840((_WORD *)a1, v2);
            return 1;
          }
          return 0;
        }
        if ( *(_WORD *)(v3 + 24) == *(_WORD *)(a1 + 24) )
          goto LABEL_13;
        if ( (*(_BYTE *)(v3 + 16) & 0x20) != 0 )
          goto LABEL_13;
        v33 = *(__int16 *)(a1 + 128) * *(_DWORD *)(a1 + 8);
        if ( sub_42340_42680((_WORD *)(v3 + 72), (_WORD *)(a1 + 72)) > v33 )
          goto LABEL_13;
        if ( *(_BYTE *)(v3 + 65) == 2 )
        {
          v4 = sub_55100((__int16 *)a1, v3, 0x71u, 0x71u);
          if ( v4 < v1 )
            goto LABEL_12;
        }
        else
        {
          v4 = sub_54FC0((__int16 *)a1, v3, 0x71u, 0x71u);
          if ( v4 < v1 )
          {
LABEL_12:
            v2 = v3;
            v1 = v4;
          }
        }
LABEL_13:
        v3 = *(_DWORD *)v3;
        continue;
      }
    case 0x10:
      v40 = 0;
      v14 = -1;
      v15 = *(_DWORD *)(dword_AE408_AE3F8() + 36462);
      v38 = 164 * *(__int16 *)(a1 + 24) + dword_AE400_AE3F0() + 29795;
      while ( 2 )
      {
        if ( v15 <= dword_AE400_AE3F0() + 29795 )
        {
          for ( jj = 0; jj != 80; jj += 4 )
          {
            for ( kk = *(_DWORD *)(jj + dword_AE408_AE3F8() + 36382); kk > dword_AE400_AE3F0() + 29795; kk = *(_DWORD *)kk )
            {
              if ( *(_WORD *)(kk + 24) != *(_WORD *)(a1 + 24) )
              {
                if ( *(_BYTE *)(kk + 58) )
                {
                  v18 = sub_54FC0((__int16 *)a1, kk, 0x100u, 0x71u);
                  if ( v18 < v14 )
                  {
                    v40 = kk;
                    v14 = v18;
                  }
                }
              }
            }
          }
          if ( v40 )
          {
            *(_WORD *)(a1 + 146) = (v40 - (dword_AE400_AE3F0() + 29795)) / 164;
            sub_52840((_WORD *)a1, v40);
            if ( *(_BYTE *)(v40 + 64) == 3 && !*(_BYTE *)(v40 + 65) )
              sub_46520_46860(v40);
            return 1;
          }
          return 0;
        }
        if ( *(_WORD *)(v15 + 24) == *(_WORD *)(a1 + 24) )
          goto LABEL_60;
        if ( (*(_BYTE *)(v15 + 16) & 0x20) != 0 )
          goto LABEL_60;
        v35 = *(__int16 *)(*(_DWORD *)(v38 + 156) + 28);
        if ( sub_42340_42680((_WORD *)(v15 + 72), (_WORD *)(a1 + 72)) > v35 )
          goto LABEL_60;
        if ( *(_BYTE *)(v15 + 65) == 2 )
        {
          v16 = sub_55100((__int16 *)a1, v15, 0x100u, 0x71u);
          if ( v16 < v14 )
            goto LABEL_59;
        }
        else
        {
          v16 = sub_54FC0((__int16 *)a1, v15, 0x100u, 0x71u);
          if ( v16 < v14 )
          {
LABEL_59:
            v40 = v15;
            v14 = v16;
          }
        }
LABEL_60:
        v15 = *(_DWORD *)v15;
        continue;
      }
    case 0x11:
      v24 = -1;
      v25 = 0;
      for ( mm = *(_DWORD *)(dword_AE408_AE3F8() + 36466); mm > dword_AE400_AE3F0() + 29795; mm = *(_DWORD *)mm )
      {
        if ( *(_BYTE *)(mm + 58) )
        {
          v27 = sub_54FC0((__int16 *)a1, mm, 0x71u, 0x71u);
          if ( v27 < v24 )
          {
            v25 = mm;
            v24 = v27;
          }
        }
      }
      if ( !v25 )
        return 0;
      *(_WORD *)(a1 + 146) = (v25 - (dword_AE400_AE3F0() + 29795)) / 164;
      sub_52840((_WORD *)a1, v25);
      return 1;
    default:
      return 0;
  }
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00054FC0) --------------------------------------------------------
int sub_54FC0(__int16 *a1, int a2, unsigned __int16 a3, unsigned __int16 a4)
{
  __int16 v4; // ax
  __int16 v5; // ax
  signed int v7; // ebx
  int v8; // esi
  int v9; // edi
  int v10; // eax
  int v11; // edx
  unsigned __int16 v12; // [esp+0h] [ebp-18h]
  unsigned __int16 v13; // [esp+4h] [ebp-14h]

  sub_52800(a2);
  v4 = sub_42150_42490((axis_3d*)(uint16*)(a1 + 36), (axis_3d*)(_WORD *)(a2 + 72));
  v12 = sub_42210_42550(a1[15], v4);
  if ( v12 <= a3 && (v5 = sub_42180_424C0((uint16*)(a1 + 36), (_WORD *)(a2 + 72)), v13 = sub_42210_42550(a1[16], v5), v13 <= a4) )
  {
    v7 = sub_423D0_42710((axis_3d*)(uint16*)(a1 + 36), (axis_3d*)(_WORD *)(a2 + 72));
    sub_52820(a2);
    if ( v7 <= 5120 )
    {
      v8 = v7 * (_DWORD)sin_9134C[v12];
      v9 = v7 * cos_90B4C[v12];
      v10 = v7 * (_DWORD)sin_9134C[v13];
      v11 = (__int16)((cos_90B4C[v13] * v7) >> 14);
      return (v10 >> 16) * (v10 >> 16) + (v8 >> 16) * (v8 >> 16) + (__int16)(v9 >> 14) * (__int16)(v9 >> 14) + v11 * v11;
    }
    else
    {
      return -1;
    }
  }
  else
  {
    sub_52820(a2);
    return -1;
  }
}
// 90B4C: using guessed type int dword_90B4C[256];
// 9134C: using guessed type void (*dword_9134C[2])();

//----- (00055100) --------------------------------------------------------
int sub_55100(__int16 *a1, int a2, unsigned __int16 a3, unsigned __int16 a4)
{
  _WORD *v4; // ebx
  _WORD *v5; // esi
  __int16 v6; // ax
  __int16 v8; // ax
  unsigned __int16 v9; // di
  signed int v10; // eax
  int v11; // ebx
  int v12; // ecx
  int v13; // esi
  int v14; // eax
  unsigned __int16 v15; // [esp+0h] [ebp-10h]

  v4 = (_WORD *)(a2 + 72);
  v5 = (uint16*)(a1 + 36);
  v6 = sub_42150_42490((axis_3d*)(uint16*)(a1 + 36), (axis_3d*)(_WORD *)(a2 + 72));
  v15 = sub_42210_42550(a1[15], v6);
  if ( v15 > a3 )
    return -1;
  v8 = sub_42180_424C0(v5, v4);
  v9 = sub_42210_42550(a1[16], v8);
  if ( v9 > a4 )
    return -1;
  v10 = sub_423D0_42710((axis_3d*)v5, (axis_3d*)v4);
  if ( v10 > 5120 )
    return -1;
  v11 = v10 * (_DWORD)sin_9134C[v15];
  v12 = v10 * cos_90B4C[v15];
  v13 = v10 * (_DWORD)sin_9134C[v9];
  v14 = (__int16)((cos_90B4C[v9] * v10) >> 14);
  return (__int16)(v12 >> 14) * (__int16)(v12 >> 14) + (v11 >> 16) * (v11 >> 16) + (v13 >> 16) * (v13 >> 16) + v14 * v14;
}
// 90B4C: using guessed type int dword_90B4C[256];
// 9134C: using guessed type void (*dword_9134C[2])();

//----- (00055430) --------------------------------------------------------
int sub_55430()
{
  __int16 i; // si
  unsigned int j; // ebx
  _DWORD *k; // ebx
  int result; // eax

  for ( i = 0; i < 20; ++i )
  {
    for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 4 * i + 36382); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
    {
      if ( *(int *)(j + 12) >= 0 )
      {
        sub_554B0(j);
      }
      else
      {
        *(_BYTE *)(j + 58) = -6;
        *(_BYTE *)(j + 59) = 0;
      }
    }
  }
  for ( k = *(_DWORD **)(dword_AE408_AE3F8() + 36466); ; k = (_DWORD *)*k )
  {
    result = dword_AE400_AE3F0() + 29795;
    if ( (unsigned int)k <= dword_AE400_AE3F0() + 29795 )
      break;
    sub_554B0((int)k);
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (000554B0) --------------------------------------------------------
int sub_554B0(int a1)
{
  int v1; // edi
  char v2; // ah
  char v3; // dh
  unsigned int v4; // edx
  int v5; // eax
  int v6; // edi
  __int16 v7; // ax
  unsigned __int16 v8; // dx
  unsigned int v9; // ebx
  unsigned int i; // eax
  int result; // eax
  unsigned int v12; // eax
  unsigned int v13; // edx

  v1 = dword_AE400_AE3F0();
  v2 = *(_BYTE *)(a1 + 58);
  if ( v2 )
  {
    *(_BYTE *)(a1 + 58) = v2 - 1;
    v12 = 164 * *(unsigned __int16 *)(a1 + 54) + v1 + 29795;
    v13 = v1 + 29795;
    if ( v12 > v1 + 29795 )
    {
      do
      {
        *(_BYTE *)(v12 + 58) = *(_BYTE *)(a1 + 58);
        v12 = v13 + 164 * *(unsigned __int16 *)(v12 + 54);
      }
      while ( v12 > v13 );
      result = 0;
      dword_AE400_AE3F0(v1);
    }
    else
    {
      result = 0;
      dword_AE400_AE3F0(v1);
    }
  }
  else
  {
    v3 = *(_BYTE *)(a1 + 59);
    if ( v3 )
    {
      *(_BYTE *)(a1 + 59) = v3 - 1;
      result = 0;
      dword_AE400_AE3F0(v1);
    }
    else
    {
      v4 = *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333);
      v5 = sub_42750((_WORD *)(a1 + 72), (_WORD *)(164 * (unsigned __int16)v4 + dword_AE400_AE3F0() + 29795 + 72));
      v6 = dword_AE400_AE3F0();
      if ( v5 < 37748736 )
      {
        v7 = Distance_410CE_4140E(v4);
        v8 = *(_WORD *)(a1 + 54);
        *(_WORD *)(a1 + 48) = v7;
        v6 = dword_AE400_AE3F0();
        *(_BYTE *)(a1 + 58) = 16;
        v9 = v6 + 29795;
        for ( i = 164 * v8 + v6 + 29795; i > v9; i = v9 + 164 * *(unsigned __int16 *)(i + 54) )
          *(_BYTE *)(i + 58) = *(_BYTE *)(a1 + 58) + 2;
      }
      *(_BYTE *)(a1 + 59) = 0;
      result = 0;
      dword_AE400_AE3F0(v6);
    }
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00055630) --------------------------------------------------------
int sub_55100_55630()
{
  int result; // eax
  __int16 i; // di
  int v2; // ebx

  if ( byte_939E5 )
  {
    if ( byte_939E4 )
    {
      result = dword_AE408_AE3F8();
      if ( (*(_BYTE *)(dword_AE408_AE3F8() + 2) & 1) == 0 )
      {
        sub_52620();
        sub_52300();
        for ( i = 0; i < 47; ++i )
        {
          v2 = 5 * i;
          switch ( word_12CD10[v2] )
          {
            case 1:
              sub_48700(word_12CD16[5 * i], i, word_12CD14[5 * i], word_12CD12[5 * i]);
              word_12CD10[5 * i] = 0;
              word_12CD18[5 * i] = 2;
              break;
            case 2:
              sub_48860(word_12CD16[5 * i], i, word_12CD14[5 * i], word_12CD12[5 * i]);
              word_12CD10[5 * i] = 0;
              goto LABEL_13;
            case 3:
              sub_487B0(word_12CD16[5 * i], i, word_12CD14[5 * i], word_12CD12[5 * i]);
              word_12CD10[5 * i] = 0;
              word_12CD18[5 * i] = 2;
              break;
            case 4:
              if ( word_12CD14[5 * i] == 512 )
              {
                sub_5DC60(0, i);
              }
              else
              {
                sub_5D970(0, i, -1);
                sub_66760(0, i, (int)(unsigned __int16)word_12CD14[5 * i] >> 8);
              }
              v2 = 5 * i;
              word_12CD10[v2] = 0;
LABEL_13:
              word_12CD18[v2] = 2;
              break;
            default:
              break;
          }
          result = 10 * i;
          *(__int16 *)((char *)word_12CD14 + result) = 0;
        }
      }
    }
  }
  return result;
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 12CD10: using guessed type __int16 word_12CD10[];
// 12CD12: using guessed type __int16 word_12CD12[];
// 12CD14: using guessed type __int16 word_12CD14[];
// 12CD16: using guessed type __int16 word_12CD16[];
// 12CD18: using guessed type __int16 word_12CD18[236];

//----- (000558A0) --------------------------------------------------------
void sub_55370_558A0(__int16 a1, __int16 a2, __int16 a3)
{
  unsigned int v3; // esi
  unsigned __int16 v4; // si
  int v5; // ebp
  int v6; // ebx
  __int16 v7; // ax
  int v8; // esi
  int v9; // edi
  __int16 v10; // ax
  __int16 v11; // si
  int v12; // [esp+0h] [ebp-24h]
  __int16 v13; // [esp+8h] [ebp-1Ch]
  signed int v14; // [esp+Ch] [ebp-18h]
  __int16 v15; // [esp+10h] [ebp-14h]

  v15 = 0;
  if ( byte_939E5 && byte_939E4 )
  {
    v3 = dword_AE400_AE3F0() + 29795 + 164 * a1;
    if ( v3 <= dword_AE400_AE3F0() + 29795 )
    {
      v6 = 0x7FFF;
      LOWORD(v8) = 0x7FFF;
    }
    else
    {
      if ( *(char *)(v3 + 16) < 0 )
        return;
      if ( sub_42750(
             (_WORD *)(164 * *(unsigned __int16 *)(2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 13333)
                     + dword_AE400_AE3F0()
                     + 29795
                     + 72),
             (_WORD *)(v3 + 72)) > 150994944 )
        return;
      v12 = 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333)
          + dword_AE400_AE3F0()
          + 29795;
      v15 = *(_WORD *)(v3 + 24);
      v14 = sub_423D0_42710((axis_3d*)(_WORD *)(v12 + 72), (axis_3d*)(_WORD *)(v3 + 72));
      v13 = sub_42150_42490((axis_3d*)(_WORD *)(v12 + 72), (axis_3d*)(_WORD *)(v3 + 72));
      v4 = sub_42210_42550(*(_WORD *)(v12 + 30), v13);
      v5 = (12288 * (512 - v4 / 2 + 512)
          - (__CFSHL__((12288 * (512 - v4 / 2 + 512)) >> 31, 10)
           + ((12288 * (512 - v4 / 2 + 512)) >> 31 << 10))) >> 10;
      v6 = 0x7FFF * (v5 - v14) / v5;
      v7 = sub_42240_42580(*(unsigned __int16 *)(v12 + 30), v13);
      if ( v6 < 512 )
        return;
      if ( v6 > 0x7FFF )
        v6 = 0x7FFF;
      if ( v14 > 320 )
      {
        if ( v4 > 0x200u )
          v4 = 1024 - v4;
        v8 = ((v7 * (v4 << 15) - (__CFSHL__((v7 * (v4 << 15)) >> 31, 9) + ((v7 * (v4 << 15)) >> 31 << 9))) >> 9)
           + 0x7FFF;
        if ( v8 < 0 )
          v8 = 0;
        if ( v8 > 0xFFFF )
          LOWORD(v8) = -1;
      }
      else
      {
        LOWORD(v8) = 0x7FFF;
      }
    }
    switch ( a3 )
    {
      case 1:
      case 2:
        if ( a2 == *(_WORD *)(dword_AE400_AE3F0() + 8) && byte_939EC != 3 )
          sub_52430(0, a3, 3, 70);
        break;
      case 3:
      case 9:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 30:
      case 40:
      case 43:
      case 44:
      case 45:
        if ( sub_55DA0(v6, (unsigned __int16)word_12CD14[5 * a3]) )
        {
          word_12CD14[5 * a3] = v6;
          word_12CD12[5 * a3] = v8;
          word_12CD16[5 * a3] = v15;
          word_12CD10[5 * a3] = 1;
        }
        break;
      case 4:
      case 14:
      case 29:
        v9 = 5 * a3;
        if ( sub_55DA0(v6, (unsigned __int16)word_12CD14[v9]) )
        {
          if ( a2 == *(_WORD *)(dword_AE400_AE3F0() + 8) )
          {
            word_12CD14[5 * a3] = v6;
            word_12CD12[5 * a3] = v8;
            word_12CD16[5 * a3] = 0;
            word_12CD10[5 * a3] = 1;
          }
          else if ( a2 == -1 )
          {
            word_12CD14[5 * a3] = v6;
            v10 = v15;
            word_12CD12[5 * a3] = v8;
            v11 = 1;
            goto LABEL_43;
          }
        }
        break;
      case 5:
        if ( a2 == *(_WORD *)(dword_AE400_AE3F0() + 8) )
          sub_52430(0, a3, 3, 120);
        break;
      case 7:
      case 8:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 41:
        if ( sub_55DA0(v6, (unsigned __int16)word_12CD14[5 * a3]) )
        {
          word_12CD14[5 * a3] = v6;
          word_12CD12[5 * a3] = v8;
          word_12CD16[5 * a3] = v15;
          word_12CD10[5 * a3] = 3;
        }
        break;
      case 17:
        v9 = 5 * a3;
        if ( sub_55DA0(v6, (unsigned __int16)word_12CD14[v9]) )
        {
          if ( a2 == *(_WORD *)(dword_AE400_AE3F0() + 8) )
          {
            word_12CD14[5 * a3] = v6;
            word_12CD12[5 * a3] = v8;
            word_12CD16[5 * a3] = 0;
            word_12CD10[5 * a3] = 3;
          }
          else if ( a2 == -1 )
          {
            word_12CD14[5 * a3] = v6;
            v10 = v15;
            word_12CD12[5 * a3] = v8;
            v11 = 3;
LABEL_43:
            word_12CD16[v9] = v10;
            word_12CD10[v9] = v11;
          }
        }
        break;
      case 31:
        if ( a2 == *(_WORD *)(dword_AE400_AE3F0() + 8) && byte_939EC != 3 )
          sub_52430(0, a3, 3, 85);
        break;
      case 42:
        if ( sub_55DA0(v6, (unsigned __int16)word_12CD14[5 * a3]) )
        {
          word_12CD14[5 * a3] = v6;
          word_12CD12[5 * a3] = v8;
          word_12CD16[5 * a3] = v15;
          word_12CD10[5 * a3] = 1;
        }
        break;
      default:
        return;
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// 939EC: using guessed type char byte_939EC;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// 12CD10: using guessed type __int16 word_12CD10[];
// 12CD12: using guessed type __int16 word_12CD12[];
// 12CD14: using guessed type __int16 word_12CD14[];
// 12CD16: using guessed type __int16 word_12CD16[];

//----- (00055DA0) --------------------------------------------------------
bool sub_55DA0(int a1, int a2)
{
  return a1 - a2 >= -8;
}

//----- (00055DC0) --------------------------------------------------------
void sub_55890_55DC0(int a1, __int16 a2, __int16 a3)
{
  if ( byte_939E5 && byte_939E4 )
  {
    if ( (unsigned __int16)a3 >= 5u )
    {
      if ( (unsigned __int16)a3 <= 5u )
      {
LABEL_10:
        if ( a2 == *(_WORD *)(dword_AE400_AE3F0() + 8) )
          sub_52740(0, a3, 0);
        return;
      }
      if ( a3 != 31 )
        return;
LABEL_9:
      if ( byte_939EC == 3 )
        return;
      goto LABEL_10;
    }
    if ( a3 && (unsigned __int16)a3 <= 2u )
      goto LABEL_9;
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// 939EC: using guessed type char byte_939EC;
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00055E20) --------------------------------------------------------
int sub_55E20()
{
  int v0; // eax
  void *retaddr[2]; // [esp+0h] [ebp+0h]

  v0 = sub_5FD4E(--byte_968E0);
  if ( !byte_968E0 )
    v0 = sub_55E90();
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(v0);
}
// 968E0: using guessed type char byte_968E0;

//----- (00055E90) --------------------------------------------------------
int sub_55E90()
{
  int result; // eax

  if ( byte_968E1 )
  {
    sub_5E1A1(dword_80120);
    sub_20E60_20E60();
    result = sub_5FD4E(127);
    byte_968E0 = 127;
    byte_968E1 = 0;
  }
  return result;
}
// 80120: using guessed type int dword_80120;
// 968E0: using guessed type char byte_968E0;
// 968E1: using guessed type char byte_968E1;

//----- (00055ED0) --------------------------------------------------------
int sub_55ED0()
{
  if ( byte_939E4 && byte_939E5 )
    return sub_66834(dword_CC130);
  else
    return 0;
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// CC130: using guessed type int dword_CC130;

//----- (00055F70) --------------------------------------------------------
int sub_55F70(int a1, char a2, char a3)
{
  int v3; // edx
  __int16 v4; // ax
  int result; // eax
  int v6; // esi
  unsigned int v7; // eax
  char v8; // bl
  int v9; // edx
  char v10; // bh
  int v11; // esi
  unsigned int i; // eax
  int v13; // ecx
  int v14; // edx
  int v15; // ebx
  int v16; // ebx
  unsigned int v17; // edx
  unsigned int v18; // eax
  int v19; // esi
  int v20; // ebx
  int v21; // ebx
  unsigned int v22; // eax
  unsigned int *v23; // [esp+0h] [ebp-1Ch]
  char v24; // [esp+4h] [ebp-18h]
  char v25; // [esp+8h] [ebp-14h]

  v3 = *(_DWORD *)(a1 + 12);
  if ( v3 )
  {
    *(_DWORD *)(a1 + 12) = v3 - 1;
    if ( v3 == 1 )
    {
      sub_41E80_421C0(a1);
      return 0;
    }
  }
  v4 = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  if ( sub_423D0(a1 + 72, v4, 0, 0, -128) == -1 )
  {
    sub_41E80_421C0(a1);
    return 0;
  }
  v6 = dword_AE400_AE3F0();
  if ( (*(_BYTE *)(a1 + 63) & 3) != 0 )
  {
LABEL_42:
    dword_AE400_AE3F0(v6);
    return 0;
  }
  v7 = *(_DWORD *)(dword_AE408_AE3F8() + 36462);
  while ( 1 )
  {
    v23 = (unsigned int *)v7;
    if ( v6 + 29795 >= v7 )
      goto LABEL_42;
    v8 = *(_BYTE *)(v7 + 65);
    dword_AE400_AE3F0(v6);
    if ( !v8 && *(int *)(v7 + 12) >= 0 )
    {
      v9 = *(_DWORD *)(v7 + 160);
      if ( *(_WORD *)(v6 + 8) == *(_WORD *)(v9 + 48) )
      {
        v10 = *(_BYTE *)(a1 + 16);
        if ( (v10 & 1) == 0 )
        {
          if ( *(_WORD *)(v9 + 2 * *(char *)(a1 + 65) + 676) )
            *(_BYTE *)(a1 + 16) = v10 | 1;
        }
      }
      if ( sub_11950((Type_AE400_29795*)v7, (Type_AE400_29795*)a1) )
        break;
    }
LABEL_40:
    v7 = *v23;
    v6 = dword_AE400_AE3F0();
  }
  v11 = dword_AE400_AE3F0();
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > v11 + 29795; i = *(_DWORD *)i )
  {
    if ( *(_BYTE *)(i + 65) == 1 )
    {
      v13 = *(char *)(a1 + 65);
      v14 = *(_DWORD *)(i + 160);
      v15 = v14 + 2 * v13;
      if ( !*(_WORD *)(v15 + 676) && !*(_WORD *)(v15 + 628) && *(_BYTE *)(v13 + v14 + 796) == 1 )
        *(_WORD *)(v15 + 628) = 200;
    }
  }
  v16 = 0;
  v24 = -1;
  v25 = 0;
  v17 = v23[40];
  while ( 1 )
  {
    v18 = v11 + 29795 + 164 * *(_DWORD *)(v17 + 532);
    if ( v18 <= v11 + 29795 )
    {
      if ( v24 == -1 )
        v24 = v16;
      goto LABEL_30;
    }
    if ( *(_BYTE *)(v18 + 64) == 12 && a2 == *(_BYTE *)(v18 + 65) )
      break;
LABEL_30:
    ++v16;
    v17 += 4;
    if ( v16 >= 24 )
      goto LABEL_31;
  }
  v25 = 1;
LABEL_31:
  dword_AE400_AE3F0(v11);
  if ( v25 || v24 == -1 )
    goto LABEL_40;
  if ( (*(_BYTE *)(a1 + 18) & 4) != 0 )
    *(_DWORD *)(a1 + 132) = 0;
  dword_AE400_AE3F0(v11);
  sub_55370_558A0(((int)v23 - v11 - 29795) / 164, -1, 18);
  v19 = dword_AE400_AE3F0();
  v20 = dword_AE400_AE3F0() + 29795;
  *(_BYTE *)(a1 + 16) |= 1u;
  *(_WORD *)(a1 + 42) = ((int)v23 - v20) / 164;
  *(_BYTE *)(a1 + 70) = a3;
  *(_DWORD *)(v23[40] + 4 * v24 + 532) = (a1 - v20) / 164;
  *(_WORD *)(v23[40] + 940) = v24;
  v21 = 0;
  v22 = v23[40];
  while ( *(char *)(v22 + 772) != -1 )
  {
    ++v21;
    ++v22;
    if ( v21 >= 10 )
      goto LABEL_39;
  }
  *(_BYTE *)(v22 + 772) = v24;
LABEL_39:
  result = 1;
  dword_AE400_AE3F0(v19);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (00056260) --------------------------------------------------------
int sub_56260(int a1)
{
  int result; // eax
  unsigned int v2; // ebx

  byte_968E4 = 0;
  result = sub_55F70(a1, *(_BYTE *)(a1 + 65), *(_BYTE *)(a1 + 70) - 2);
  if ( result )
  {
    result = (*(int (**)(int))((char *)&off_987DE + 14 * *(char *)(a1 + 65)))(a1 + 72);
    if ( result )
    {
      *(_BYTE *)(result + 70) += 2;
      if ( byte_968E4 )
      {
        v2 = (unsigned int)&loc_40000 & *(_DWORD *)(a1 + 16);
        LOBYTE(v2) = v2 | 1;
        *(_DWORD *)(result + 16) |= v2;
      }
      if ( (*(_BYTE *)(result + 18) & 4) != 0 )
        *(_WORD *)(result + 86) = 280;
    }
  }
  return result;
}
// 968E4: using guessed type char byte_968E4;
// 987DE: using guessed type int (*off_987DE)(int);

//----- (000562E0) --------------------------------------------------------
int sub_562E0(int a1)
{
  return sub_55F70(a1, *(_BYTE *)(a1 + 65), *(_BYTE *)(a1 + 70) - 1);
}

//----- (00056300) --------------------------------------------------------
int sub_56300(int a1, int *a2)
{
  int v2; // edi
  int v3; // eax

  if ( a2[35] < 0 )
    goto LABEL_11;
  if ( a2[3] < 0 )
    goto LABEL_11;
  v2 = *(_DWORD *)(a1 + 132);
  if ( v2 )
  {
    v3 = a2[40];
    if ( !*(_WORD *)(v3 + 50) || v2 > *(_DWORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(v3 + 50) + 29935) )
      goto LABEL_11;
  }
  if ( a2[35] >= *(_DWORD *)(a1 + 136) && *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
    return 1;
  if ( *(_WORD *)(a1 + 48) != *(_WORD *)(a1 + 50) )
    return 1;
LABEL_11:
  sub_55370_558A0(0, *(_WORD *)(a2[40] + 48), 29);
  return 0;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000563B0) --------------------------------------------------------
int sub_563B0(int a1, int a2)
{
  __int16 v2; // bx
  int v3; // ebx

  v2 = *(_WORD *)(a1 + 48);
  if ( v2 == *(_WORD *)(a1 + 50) )
  {
    v3 = *(_DWORD *)(a2 + 132);
    //fix 
    /*
    if ( v3 >= 0 )
      *(_DWORD *)(a2 + 132) = -*(_DWORD *)(a1 + 136);
    else
      *(_DWORD *)(a2 + 132) = v3 - *(_DWORD *)(a1 + 136);
    */
    return 1;
  }
  else
  {
    if ( v2 && *(int *)(a2 + 132) > 0 )
      *(_DWORD *)(a2 + 132) = 0;
    return 0;
  }
}

//----- (00056420) --------------------------------------------------------
int sub_56420(__int16 a1, int a2, int a3)
{
  unsigned __int16 v3; // ax
  int v4; // ebx
  int v5; // esi
  int v6; // ebx
  unsigned __int16 v7; // ax
  int v8; // esi
  int v9; // ebx
  int v10; // esi
  int v12; // [esp+0h] [ebp-18h] BYREF
  __int16 v13; // [esp+4h] [ebp-14h]

  v12 = *(_DWORD *)(a3 + 72);
  v13 = *(_WORD *)(a3 + 76);
  HIBYTE(a1) = *(_BYTE *)(a2 + 17);
  if ( (a1 & 0x100) != 0 )
  {
    v3 = *(_WORD *)(a2 + 30) - 512;
    HIBYTE(v3) &= 7u;
    sub_41EC0_42200((axis_3d*)(uint16*)&v12, v3, 0, 256);
    a1 = sub_11F50((axis_3d*)(__int16 *)&v12);
    if ( a1 > v13 )
    {
      v12 = *(_DWORD *)(a3 + 72);
      v13 = *(_WORD *)(a3 + 76);
    }
    v4 = dword_AE400_AE3F0();
    v5 = 164 * *(unsigned __int16 *)(a3 + 54);
    while ( 1 )
    {
      v6 = v5 + v4 + 29795;
      if ( v6 == dword_AE400_AE3F0() + 29795 )
        break;
      a1 = sub_41C70_41FB0((Type_AE400_29795*)v6, (axis_3d*)&v12);
      v5 = 164 * *(unsigned __int16 *)(v6 + 54);
      v4 = dword_AE400_AE3F0();
    }
  }
  else if ( (a1 & 0x200) != 0 )
  {
    v7 = *(_WORD *)(a2 + 30);
    HIBYTE(v7) = (HIBYTE(v7) + 2) & 7;
    sub_41EC0_42200((axis_3d*)(uint16*)&v12, v7, 0, 256);
    a1 = sub_11F50((axis_3d*)(__int16 *)&v12);
    if ( a1 > v13 )
    {
      v12 = *(_DWORD *)(a3 + 72);
      v13 = *(_WORD *)(a3 + 76);
    }
    v8 = 164 * *(unsigned __int16 *)(a3 + 54);
    v9 = dword_AE400_AE3F0() + 29795;
    while ( 1 )
    {
      v10 = v9 + v8;
      if ( v10 == dword_AE400_AE3F0() + 29795 )
        break;
      a1 = sub_41C70_41FB0((Type_AE400_29795*)v10, (axis_3d*)&v12);
      v9 = 164 * *(unsigned __int16 *)(v10 + 54);
      v8 = dword_AE400_AE3F0() + 29795;
    }
  }
  return sub_41C70_41FB0((Type_AE400_29795*)a3, (axis_3d*)&v12);
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000565C0) --------------------------------------------------------
int sub_565C0(int a1)
{
  int result; // eax
  unsigned __int16 v2; // dx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax

  result = a1;
  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v2 = *(_WORD *)(a1 + 42);
    v3 = dword_AE400_AE3F0() + 29795 + 164 * v2;
    if ( v3 <= dword_AE400_AE3F0() + 29795 )
    {
LABEL_5:
      result = a1;
      --*(_WORD *)(a1 + 48);
      return result;
    }
    if ( !sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * v2)) )
    {
      *(_WORD *)(a1 + 48) = 1;
      goto LABEL_5;
    }
    while ( *(char *)(a1 + 61) >= 0 )
    {
      if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
      {
        v4 = sub_373F0_377B0(v3 + 72, 9, 0);
        if ( v4 )
        {
          v5 = *(_WORD *)(v3 + 126);
          *(_WORD *)(v4 + 126) += v5;
          sub_56420(v5, v3, v4);
          *(_BYTE *)(v4 + 68) = 10;
          *(_BYTE *)(v4 + 69) = 0;
          *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
          *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
          *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
          *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
          *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
          *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
          *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
          *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
          *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
          *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
          sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 0x4000);
          sub_55370_558A0((v4 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 9);
        }
      }
      sub_563B0(a1, v3);
      --*(_BYTE *)(a1 + 61);
    }
    *(_BYTE *)(a1 + 61) = 0;
    result = a1;
    --*(_WORD *)(a1 + 48);
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000567A0) --------------------------------------------------------
void sub_567A0(int a1)
{
  _DWORD *v1; // ebx
  int v2; // edi
  int v3; // ebp

  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v1 = (_DWORD *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42));
    if ( (unsigned int)v1 > dword_AE400_AE3F0() + 29795 )
    {
      if ( sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42)))
        && v1[3] < v1[2]
        && v1[35] >= *(_DWORD *)(a1 + 136) )
      {
        if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
          sub_55370_558A0(((int)v1 - dword_AE400_AE3F0() - 29795) / 164, -1, 25);
        v2 = 5 * v1[2] / 100 + v1[3];
        v3 = v1[2];
        v1[3] = v2;
        if ( v2 > v3 )
          v1[3] = v3;
        if ( (int)v1[33] >= 0 )
        {
          //fix v1[33] = -*(_DWORD *)(a1 + 136);
          --*(_WORD *)(a1 + 48);
          return;
        }
        v1[33] -= *(_DWORD *)(a1 + 136);
      }
      else
      {
        *(_WORD *)(a1 + 48) = 1;
      }
    }
    --*(_WORD *)(a1 + 48);
  }
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000568B0) --------------------------------------------------------
void sub_568B0(int a1)
{
  unsigned int v1; // esi
  int v2; // eax
  char v3; // dh
  __int16 v4; // ax
  int v5; // edx
  int v6; // eax
  __int16 v7; // ax

  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42);
    if ( v1 > dword_AE400_AE3F0() + 29795 )
    {
      if ( !sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42)))
        || *(_WORD *)(*(_DWORD *)(v1 + 160) + 14) )
      {
        if ( *(_WORD *)(*(_DWORD *)(v1 + 160) + 14) )
          *(_WORD *)(a1 + 48) = 1;
      }
      else
      {
        if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) && *(char *)(a1 + 16) >= 0 )
        {
          v2 = dword_AE400_AE3F0() + 29795;
          *(_BYTE *)(a1 + 16) |= 0x80u;
          sub_55370_558A0((int)(v1 - v2) / 164, -1, 19);
        }
        if ( *(__int16 *)(a1 + 48) == *(__int16 *)(a1 + 50) - 2 )
        {
          v3 = *(_BYTE *)(a1 + 16);
          if ( v3 < 0 )
            *(_BYTE *)(a1 + 16) = v3 & 0x7F;
        }
        ((void (*)(unsigned int))locret_45900)(v1);
        if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
        {
          v4 = 3 * *(_WORD *)(v1 + 128);
          v5 = *(_DWORD *)(v1 + 160);
        }
        else
        {
          v5 = *(_DWORD *)(v1 + 160);
          v4 = 2 * *(_WORD *)(v1 + 128);
        }
        *(_WORD *)(v5 + 12) = v4;
        *(_WORD *)(v1 + 126) = *(_WORD *)(*(_DWORD *)(v1 + 160) + 12);
        if ( (*(_BYTE *)(a1 + 63) & 3) == 0 )
        {
          v6 = sub_373F0_377B0(v1 + 72, 10, 2);
          if ( v6 )
          {
            *(_WORD *)(v6 + 24) = *(_WORD *)(v1 + 24);
            *(_DWORD *)(v6 + 12) *= 4;
          }
        }
        sub_563B0(a1, v1);
      }
      v7 = *(_WORD *)(a1 + 48) - 1;
      *(_WORD *)(a1 + 48) = v7;
      if ( !v7 )
      {
        *(_WORD *)(*(_DWORD *)(v1 + 160) + 12) = *(_WORD *)(v1 + 128);
        *(_WORD *)(v1 + 126) = *(_WORD *)(*(_DWORD *)(v1 + 160) + 12);
        *(_BYTE *)(a1 + 16) &= ~0x80u;
      }
    }
  }
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00056A40) --------------------------------------------------------
int sub_56A40(int a1)
{
  int result; // eax
  unsigned __int16 v2; // dx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax
  int v6; // eax

  result = a1;
  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v2 = *(_WORD *)(a1 + 42);
    v3 = dword_AE400_AE3F0() + 29795 + 164 * v2;
    if ( v3 <= dword_AE400_AE3F0() + 29795 )
    {
LABEL_5:
      result = a1;
      --*(_WORD *)(a1 + 48);
      return result;
    }
    if ( !sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * v2)) )
    {
      *(_WORD *)(a1 + 48) = 1;
      goto LABEL_5;
    }
    while ( *(char *)(a1 + 61) >= 0 )
    {
      if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
      {
        v4 = sub_373F0_377B0(v3 + 72, 9, 1);
        if ( v4 )
        {
          v5 = *(_WORD *)(v3 + 126);
          *(_WORD *)(v4 + 126) += v5;
          sub_56420(v5, v3, v4);
          *(_BYTE *)(v4 + 68) = 10;
          *(_BYTE *)(v4 + 69) = 12;
          *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
          *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
          v6 = *(_DWORD *)(a1 + 140);
          *(_WORD *)(v4 + 26) = 200;
          *(_DWORD *)(v4 + 140) = v6;
          *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
          *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
          *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
          sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 10240);
          *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
          *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
          sub_55370_558A0((v4 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 40);
        }
      }
      sub_563B0(a1, v3);
      --*(_BYTE *)(a1 + 61);
    }
    *(_BYTE *)(a1 + 61) = 0;
    result = a1;
    --*(_WORD *)(a1 + 48);
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00056BF0) --------------------------------------------------------
int sub_56BF0(int a1)
{
  int result; // eax
  unsigned int v2; // esi

  result = dword_AE400_AE3F0() + 29795;
  v2 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42);
  if ( v2 > dword_AE400_AE3F0() + 29795 && *(__int16 *)(a1 + 48) > 0 )
  {
    result = sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42)));
    if ( result )
    {
      *(_BYTE *)(v2 + 17) |= 0x40u;
      result = sub_563B0(a1, v2);
    }
    else
    {
      *(_WORD *)(a1 + 48) = 1;
    }
    --*(_WORD *)(a1 + 48);
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00056C60) --------------------------------------------------------
void sub_56C60(int a1)
{
  unsigned __int16 v1; // dx
  unsigned int v2; // esi

  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v1 = *(_WORD *)(a1 + 42);
    v2 = dword_AE400_AE3F0() + 29795 + 164 * v1;
    if ( v2 > dword_AE400_AE3F0() + 29795 )
    {
      if ( sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * v1)) )
        sub_563B0(a1, v2);
      else
        *(_WORD *)(a1 + 48) = 1;
    }
    --*(_WORD *)(a1 + 48);
  }
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00056CD0) --------------------------------------------------------
int sub_56CD0(int a1)
{
  int result; // eax
  int v2; // ebx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax
  __int16 v6; // ax
  int v7; // edx

  result = a1;
  if ( *(__int16 *)(a1 + 48) <= 0 )
    return result;
  v2 = 164 * *(unsigned __int16 *)(a1 + 42);
  v3 = dword_AE400_AE3F0() + 29795 + v2;
  if ( v3 <= dword_AE400_AE3F0() + 29795 )
    goto LABEL_9;
  if ( !sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + v2)) )
  {
    *(_WORD *)(a1 + 48) = 1;
    goto LABEL_9;
  }
  if ( *(_WORD *)(a1 + 48) != *(_WORD *)(a1 + 50) )
  {
LABEL_9:
    result = a1;
    --*(_WORD *)(a1 + 48);
    return result;
  }
  v4 = sub_373F0_377B0(v3 + 72, 9, 2);
  if ( v4 )
  {
    v5 = *(_WORD *)(v3 + 126);
    *(_WORD *)(v4 + 126) += v5;
    sub_56420(v5, v3, v4);
    *(_BYTE *)(v4 + 68) = 10;
    *(_BYTE *)(v4 + 69) = 15;
    *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
    *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
    *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
    *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
    *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
    *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
    *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
    *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
    *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
    *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
    sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), 0, 4096);
    v6 = sub_11F50((axis_3d*)(__int16 *)(v4 + 150));
    v7 = dword_AE400_AE3F0() + 29795;
    *(_WORD *)(v4 + 154) = v6;
    sub_55370_558A0((v4 - v7) / 164, -1, 9);
  }
  sub_563B0(a1, v3);
  result = a1;
  --*(_WORD *)(a1 + 48);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00056E80) --------------------------------------------------------
int sub_56E80(int a1)
{
  int result; // eax
  int v2; // ebx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax
  int v6; // edx

  result = a1;
  if ( *(__int16 *)(a1 + 48) <= 0 )
    return result;
  v2 = 164 * *(unsigned __int16 *)(a1 + 42);
  v3 = dword_AE400_AE3F0() + 29795 + v2;
  if ( v3 <= dword_AE400_AE3F0() + 29795 )
  {
LABEL_9:
    result = a1;
    --*(_WORD *)(a1 + 48);
    return result;
  }
  if ( !sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + v2)) )
  {
    *(_WORD *)(a1 + 48) = 1;
    goto LABEL_9;
  }
  if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
  {
    v4 = sub_373F0_377B0(v3 + 72, 9, 3);
    if ( v4 )
    {
      v5 = *(_WORD *)(v3 + 126);
      *(_WORD *)(v4 + 126) += v5;
      sub_56420(v5, v3, v4);
      *(_BYTE *)(v4 + 68) = 10;
      *(_BYTE *)(v4 + 69) = 17;
      *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
      *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
      *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
      *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
      *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
      *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
      *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
      *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
      sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 10240);
      *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
      v6 = dword_AE400_AE3F0() + 29795;
      *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
      sub_55370_558A0((v4 - v6) / 164, -1, 15);
    }
  }
  sub_563B0(a1, v3);
  result = a1;
  --*(_WORD *)(a1 + 48);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00057020) --------------------------------------------------------
int sub_57020(int a1)
{
  int result; // eax
  int v2; // ebx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax
  int v6; // edx

  result = a1;
  if ( *(__int16 *)(a1 + 48) <= 0 )
    return result;
  v2 = 164 * *(unsigned __int16 *)(a1 + 42);
  v3 = dword_AE400_AE3F0() + 29795 + v2;
  if ( v3 <= dword_AE400_AE3F0() + 29795 )
  {
LABEL_9:
    result = a1;
    --*(_WORD *)(a1 + 48);
    return result;
  }
  if ( !sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + v2)) )
  {
    *(_WORD *)(a1 + 48) = 1;
    goto LABEL_9;
  }
  if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
  {
    v4 = sub_373F0_377B0(v3 + 72, 9, 4);
    if ( v4 )
    {
      v5 = *(_WORD *)(v3 + 126);
      *(_WORD *)(v4 + 126) += v5;
      sub_56420(v5, v3, v4);
      *(_BYTE *)(v4 + 68) = 10;
      *(_BYTE *)(v4 + 69) = 9;
      *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
      *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
      *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
      *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
      *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
      *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
      *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
      *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
      sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), 0, 4096);
      *(_WORD *)(v4 + 154) = sub_11F50((axis_3d*)(__int16 *)(v4 + 150));
      *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
      v6 = dword_AE400_AE3F0() + 29795;
      *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
      sub_55370_558A0((v4 - v6) / 164, -1, 15);
    }
  }
  sub_563B0(a1, v3);
  result = a1;
  --*(_WORD *)(a1 + 48);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000571D0) --------------------------------------------------------
int sub_571D0(int a1)
{
  int result; // eax
  int v2; // ebx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax
  __int16 v6; // ax
  __int16 v7; // ax
  int v8; // edx

  result = a1;
  if ( *(__int16 *)(a1 + 48) <= 0 )
    return result;
  v2 = 164 * *(unsigned __int16 *)(a1 + 42);
  v3 = dword_AE400_AE3F0() + 29795 + v2;
  if ( v3 <= dword_AE400_AE3F0() + 29795 )
  {
LABEL_9:
    result = a1;
    --*(_WORD *)(a1 + 48);
    return result;
  }
  if ( !sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + v2)) )
  {
    *(_WORD *)(a1 + 48) = 1;
    goto LABEL_9;
  }
  if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
  {
    v4 = sub_373F0_377B0(v3 + 72, 9, 5);
    if ( v4 )
    {
      v5 = *(_WORD *)(v3 + 126);
      *(_WORD *)(v4 + 126) += v5;
      sub_56420(v5, v3, v4);
      v6 = *(_WORD *)(a1 + 44);
      *(_BYTE *)(v4 + 68) = 10;
      *(_BYTE *)(v4 + 69) = 11;
      *(_WORD *)(v4 + 44) = v6;
      *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
      *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
      *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
      *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
      *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
      *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
      *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
      *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
      *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
      sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), 0, 4096);
      v7 = sub_11F50((axis_3d*)(__int16 *)(v4 + 150));
      v8 = dword_AE400_AE3F0() + 29795;
      *(_WORD *)(v4 + 154) = v7;
      sub_55370_558A0((v4 - v8) / 164, -1, 15);
    }
  }
  sub_563B0(a1, v3);
  result = a1;
  --*(_WORD *)(a1 + 48);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00057380) --------------------------------------------------------
void sub_57380(int a1)
{
  unsigned int v1; // ebp
  __int16 v2; // ax
  unsigned int v3; // edx
  int v4; // eax
  __int16 v5; // ax
  __int16 v6; // di
  __int16 v7; // [esp-Ch] [ebp-20h]

  //fix
  v5 = 0;
  //fix

  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42);
    if ( v1 > dword_AE400_AE3F0() + 29795 )
    {
      if ( sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42))) )
      {
        if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
        {
          v2 = dword_AE400_AE3F0() + 29795;
          v3 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(*(_DWORD *)(v1 + 160) + 50);
          if ( v3 <= dword_AE400_AE3F0() + 29795 )
          {
            *(_DWORD *)(a1 + 150) = *(_DWORD *)(v1 + 72);
            *(_WORD *)(a1 + 154) = *(_WORD *)(v1 + 76);
            v4 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
            *(_DWORD *)(a1 + 4) = v4;
            sub_41EC0_42200((axis_3d*)(_WORD *)(a1 + 150), v4 & 0x7FF, 0, 0x4000);
            sub_41C70_41FB0((Type_AE400_29795*)v1, (axis_3d*)(a1 + 150));
            *(_WORD *)(*(_DWORD *)(v1 + 160) + 12) = 0;
            v7 = (int)(v1 - (dword_AE400_AE3F0() + 29795)) / 164;
            *(_WORD *)(a1 + 154) = 0;
            sub_55370_558A0(v7, -1, 22);
          }
          else
          {
            if ( *(_WORD *)(a1 + 154) )
            {
              sub_41C70_41FB0((Type_AE400_29795*)v1, (axis_3d*)(a1 + 150));
              *(_WORD *)(a1 + 154) = 0;
            }
            else
            {
              *(_DWORD *)(a1 + 150) = *(_DWORD *)(v1 + 72);
              *(_WORD *)(a1 + 154) = *(_WORD *)(v1 + 76);
              sub_41C70_41FB0((Type_AE400_29795*)v1, (axis_3d*)(v3 + 72));
            }
            *(_WORD *)(*(_DWORD *)(v1 + 160) + 12) = 0;
            sub_55370_558A0((int)(v1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 22);
          }
        }
        sub_563B0(a1, v1);
      }
      else
      {
        *(_WORD *)(a1 + 48) = 1;
      }
      v6 = *(_WORD *)(a1 + 48) - 1;
      *(_WORD *)(a1 + 48) = v6;
      if ( !v6 )
        *(_WORD *)(*(_DWORD *)(v1 + 160) + 12) = 0;
    }
  }
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00057570) --------------------------------------------------------
int sub_57570(int a1)
{
  int result; // eax
  unsigned __int16 v2; // dx
  unsigned int v3; // ebp
  int v4; // eax
  int v5; // ebx
  __int16 v6; // ax

  result = a1;
  if ( *(__int16 *)(a1 + 48) <= 0 )
    return result;
  v2 = *(_WORD *)(a1 + 42);
  v3 = dword_AE400_AE3F0() + 29795 + 164 * v2;
  if ( v3 <= dword_AE400_AE3F0() + 29795 )
  {
LABEL_9:
    result = a1;
    --*(_WORD *)(a1 + 48);
    return result;
  }
  if ( !sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * v2)) )
  {
    *(_WORD *)(a1 + 48) = 1;
    goto LABEL_9;
  }
  if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
  {
    v4 = sub_373F0_377B0(v3 + 72, 9, 7);
    v5 = v4;
    if ( v4 )
    {
      sub_56420(v4, v3, v4);
      v6 = *(_WORD *)(a1 + 44);
      *(_BYTE *)(v5 + 68) = 10;
      *(_BYTE *)(v5 + 69) = 26;
      *(_WORD *)(v5 + 44) = v6;
      *(_WORD *)(v5 + 24) = *(_WORD *)(v3 + 24);
      *(_WORD *)(v5 + 76) += *(_WORD *)(v3 + 84);
      *(_DWORD *)(v5 + 140) = *(_DWORD *)(a1 + 140);
      *(_DWORD *)(v5 + 150) = *(_DWORD *)(v3 + 72);
      *(_WORD *)(v5 + 154) = *(_WORD *)(v3 + 76);
      sub_41EC0_42200((axis_3d*)(_WORD *)(v5 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 10240);
      *(_WORD *)(v5 + 30) = *(_WORD *)(v3 + 30);
      *(_WORD *)(v5 + 32) = *(_WORD *)(v3 + 32);
      sub_55370_558A0((v5 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 9);
    }
  }
  sub_563B0(a1, v3);
  result = a1;
  --*(_WORD *)(a1 + 48);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000576E0) --------------------------------------------------------
void sub_576E0(int a1)
{
  unsigned int v1; // esi
  __int16 v2; // di

  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42);
    if ( v1 > dword_AE400_AE3F0() + 29795 )
    {
      if ( sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42))) )
      {
        if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
        {
          *(_WORD *)(*(_DWORD *)(a1 + 160) + 331) = 0;
          *(_BYTE *)(v1 + 16) |= 0x20u;
        }
        else if ( (*(_BYTE *)(v1 + 16) & 0x20) == 0 )
        {
          *(_WORD *)(a1 + 48) = 1;
        }
        sub_563B0(a1, v1);
      }
      else
      {
        *(_WORD *)(a1 + 48) = 1;
      }
    }
    v2 = *(_WORD *)(a1 + 48) - 1;
    *(_WORD *)(a1 + 48) = v2;
    if ( !v2 )
      *(_BYTE *)(v1 + 16) &= ~0x20u;
  }
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00057780) --------------------------------------------------------
int sub_57780(int a1)
{
  int result; // eax
  int v2; // ebx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax
  __int16 v6; // ax
  int v7; // eax
  int v8; // edx

  result = a1;
  if ( *(__int16 *)(a1 + 48) <= 0 )
    return result;
  v2 = 164 * *(unsigned __int16 *)(a1 + 42);
  v3 = dword_AE400_AE3F0() + 29795 + v2;
  if ( v3 <= dword_AE400_AE3F0() + 29795 )
  {
LABEL_9:
    result = a1;
    --*(_WORD *)(a1 + 48);
    return result;
  }
  if ( !sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + v2)) )
  {
    *(_WORD *)(a1 + 48) = 1;
    goto LABEL_9;
  }
  if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
  {
    v4 = sub_373F0_377B0(v3 + 72, 9, 8);
    if ( v4 )
    {
      v5 = *(_WORD *)(v3 + 126);
      *(_WORD *)(v4 + 126) += v5;
      sub_56420(v5, v3, v4);
      v6 = *(_WORD *)(a1 + 44);
      *(_BYTE *)(v4 + 68) = 10;
      *(_BYTE *)(v4 + 69) = 25;
      *(_WORD *)(v4 + 44) = v6;
      *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
      *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
      v7 = *(_DWORD *)(a1 + 140);
      *(_WORD *)(v4 + 44) = 2000;
      *(_DWORD *)(v4 + 140) = v7;
      *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
      *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
      *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
      *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
      sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 0x4000);
      *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
      v8 = dword_AE400_AE3F0() + 29795;
      *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
      sub_55370_558A0((v4 - v8) / 164, -1, 9);
    }
  }
  sub_563B0(a1, v3);
  result = a1;
  --*(_WORD *)(a1 + 48);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00057920) --------------------------------------------------------
int sub_57920(int a1)
{
  int result; // eax
  unsigned int v2; // ebx

  result = dword_AE400_AE3F0() + 29795;
  v2 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42);
  if ( v2 > dword_AE400_AE3F0() + 29795 )
  {
    if ( *(__int16 *)(a1 + 48) <= 0 )
    {
      *(_BYTE *)(v2 + 17) &= ~0x80u;
    }
    else
    {
      result = sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42)));
      if ( result )
      {
        *(_BYTE *)(v2 + 17) |= 0x80u;
        result = sub_563B0(a1, v2);
      }
      else
      {
        *(_WORD *)(a1 + 48) = 1;
      }
      --*(_WORD *)(a1 + 48);
    }
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000579A0) --------------------------------------------------------
int sub_579A0(int a1)
{
  int result; // eax
  int v2; // ebx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax

  result = a1;
  if ( *(__int16 *)(a1 + 48) <= 0 )
    return result;
  v2 = 164 * *(unsigned __int16 *)(a1 + 42);
  v3 = dword_AE400_AE3F0() + 29795 + v2;
  if ( v3 <= dword_AE400_AE3F0() + 29795 )
  {
LABEL_9:
    result = a1;
    --*(_WORD *)(a1 + 48);
    return result;
  }
  if ( !sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + v2)) )
  {
    *(_WORD *)(a1 + 48) = 1;
    goto LABEL_9;
  }
  if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
  {
    v4 = sub_373F0_377B0(v3 + 72, 9, 9);
    if ( v4 )
    {
      v5 = *(_WORD *)(v3 + 126);
      *(_WORD *)(v4 + 126) += v5;
      sub_56420(v5, v3, v4);
      *(_BYTE *)(v4 + 68) = 10;
      *(_BYTE *)(v4 + 69) = 23;
      *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
      *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
      *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
      *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
      *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
      *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
      *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
      *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
      *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
      *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
      sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 0x4000);
      sub_55370_558A0((v4 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 23);
    }
  }
  sub_563B0(a1, v3);
  result = a1;
  --*(_WORD *)(a1 + 48);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00057B40) --------------------------------------------------------
void sub_57B40(int a1)
{
  unsigned __int16 v1; // dx
  unsigned int v2; // ebp
  int v3; // ebx
  __int16 v4; // ax
  unsigned __int16 v5; // dx
  __int16 v6; // ax

  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v1 = *(_WORD *)(a1 + 42);
    v2 = dword_AE400_AE3F0() + 29795 + 164 * v1;
    if ( v2 > dword_AE400_AE3F0() + 29795 )
    {
      if ( sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * v1)) )
      {
        if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
        {
          sub_563B0(a1, v2);
          v3 = sub_373F0_377B0(v2 + 72, 9, 10);
          if ( v3 )
          {
            *(_WORD *)(a1 + 48) = *(_WORD *)(a1 + 50) - 1;
            v4 = *(_WORD *)(v2 + 126);
            *(_WORD *)(v3 + 126) += v4;
            sub_56420(v4, v2, v3);
            *(_WORD *)(v3 + 44) = *(_WORD *)(a1 + 44);
            *(_WORD *)(v3 + 24) = *(_WORD *)(v2 + 24);
            *(_WORD *)(v3 + 76) += *(_WORD *)(v2 + 84);
            *(_DWORD *)(v3 + 140) = *(_DWORD *)(a1 + 140);
            v5 = *(_WORD *)(*(_DWORD *)(v2 + 160) + 50);
            if ( dword_AE400_AE3F0() + 29795 + 164 * (unsigned int)v5 <= dword_AE400_AE3F0() + 29795 )
            {
              *(_DWORD *)(v3 + 150) = *(_DWORD *)(v2 + 72);
              *(_WORD *)(v3 + 154) = *(_WORD *)(v2 + 76);
              sub_41EC0_42200((axis_3d*)(_WORD *)(v3 + 150), *(_WORD *)(v2 + 30), 0, 4096);
              v6 = sub_11F50((axis_3d*)(__int16 *)(v3 + 150));
              *(_BYTE *)(v3 + 68) = 3;
              *(_BYTE *)(v3 + 69) = 2;
              *(_WORD *)(v3 + 154) = v6;
            }
            else
            {
              *(_BYTE *)(v3 + 68) = 10;
              *(_BYTE *)(v3 + 69) = 43;
              *(_WORD *)(v3 + 146) = 164 * v5 / 164;
            }
            *(_WORD *)(v3 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v2 + 160) + 326);
            *(_BYTE *)(*(_DWORD *)(v2 + 160) + 326) = 0;
            *(_WORD *)(v3 + 30) = *(_WORD *)(v2 + 30);
            *(_WORD *)(v3 + 32) = *(_WORD *)(v2 + 32);
            sub_55370_558A0((v3 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 15);
          }
        }
      }
      else
      {
        *(_WORD *)(a1 + 48) = 0;
      }
    }
  }
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00057D30) --------------------------------------------------------
void sub_57D30(int a1)
{
  unsigned int v1; // ebx
  int v2; // esi
  __int16 v3; // ax
  __int16 v4; // ax
  int v5; // eax
  unsigned __int16 v6; // cx

  if ( *(__int16 *)(a1 + 48) <= 0 )
    return;
  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42);
  if ( v1 <= dword_AE400_AE3F0() + 29795 )
  {
LABEL_12:
    --*(_WORD *)(a1 + 48);
    return;
  }
  if ( !sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42))) )
  {
    *(_WORD *)(a1 + 48) = 1;
    goto LABEL_12;
  }
  if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
  {
    v2 = sub_373F0_377B0(v1 + 72, 9, 11);
    if ( v2 )
    {
      v3 = *(_WORD *)(v1 + 126);
      *(_WORD *)(v2 + 126) += v3;
      sub_56420(v3, v1, v2);
      v4 = *(_WORD *)(a1 + 44);
      *(_BYTE *)(v2 + 68) = 10;
      *(_BYTE *)(v2 + 69) = 36;
      *(_WORD *)(v2 + 44) = v4;
      *(_WORD *)(v2 + 24) = *(_WORD *)(v1 + 24);
      *(_WORD *)(v2 + 76) += *(_WORD *)(v1 + 84);
      v5 = *(_DWORD *)(a1 + 140);
      *(_WORD *)(v2 + 44) = 1;
      *(_DWORD *)(v2 + 140) = v5;
      v6 = *(_WORD *)(*(_DWORD *)(v1 + 160) + 50);
      if ( v6 )
      {
        if ( *(_DWORD *)(dword_AE400_AE3F0() + 164 * v6 + 29931) >= *(_DWORD *)(a1 + 136) )
          *(_WORD *)(v2 + 44) = *(_WORD *)(a1 + 136);
      }
      *(_WORD *)(v2 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v1 + 160) + 326);
      *(_BYTE *)(*(_DWORD *)(v1 + 160) + 326) = 0;
      *(_DWORD *)(v2 + 150) = *(_DWORD *)(v1 + 72);
      *(_WORD *)(v2 + 154) = *(_WORD *)(v1 + 76);
      sub_41EC0_42200((axis_3d*)(_WORD *)(v2 + 150), *(_WORD *)(v1 + 30), *(_WORD *)(v1 + 32), 0x4000);
      *(_WORD *)(v2 + 30) = *(_WORD *)(v1 + 30);
      *(_WORD *)(v2 + 32) = *(_WORD *)(v1 + 32);
      sub_55370_558A0((v2 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 9);
    }
  }
  sub_563B0(a1, v1);
  --*(_WORD *)(a1 + 48);
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00057F00) --------------------------------------------------------
int sub_57F00(int a1)
{
  int result; // eax
  unsigned __int16 v2; // dx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax
  __int16 v6; // ax
  int v7; // edx

  result = a1;
  if ( *(__int16 *)(a1 + 48) <= 0 )
    return result;
  v2 = *(_WORD *)(a1 + 42);
  v3 = dword_AE400_AE3F0() + 29795 + 164 * v2;
  if ( v3 <= dword_AE400_AE3F0() + 29795 )
  {
LABEL_9:
    result = a1;
    --*(_WORD *)(a1 + 48);
    return result;
  }
  if ( !sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * v2)) )
  {
    *(_WORD *)(a1 + 48) = 1;
    goto LABEL_9;
  }
  if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
  {
    v4 = sub_373F0_377B0(v3 + 72, 9, 12);
    if ( v4 )
    {
      v5 = *(_WORD *)(v3 + 126);
      *(_WORD *)(v4 + 126) += v5;
      sub_56420(v5, v3, v4);
      v6 = *(_WORD *)(a1 + 44);
      *(_BYTE *)(v4 + 68) = 9;
      *(_BYTE *)(v4 + 69) = 9;
      *(_WORD *)(v4 + 44) = v6;
      *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
      *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
      *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
      *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
      *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
      *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
      *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
      *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
      sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 0x4000);
      *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
      v7 = dword_AE400_AE3F0() + 29795;
      *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
      sub_55370_558A0((v4 - v7) / 164, -1, 9);
    }
  }
  sub_563B0(a1, v3);
  result = a1;
  --*(_WORD *)(a1 + 48);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000580B0) --------------------------------------------------------
int sub_580B0(int a1)
{
  int result; // eax
  unsigned __int16 v2; // dx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax

  result = a1;
  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v2 = *(_WORD *)(a1 + 42);
    v3 = dword_AE400_AE3F0() + 29795 + 164 * v2;
    if ( v3 <= dword_AE400_AE3F0() + 29795 )
    {
LABEL_5:
      result = a1;
      --*(_WORD *)(a1 + 48);
      return result;
    }
    if ( !sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * v2)) )
    {
      *(_WORD *)(a1 + 48) = 1;
      goto LABEL_5;
    }
    while ( *(char *)(a1 + 61) >= 0 )
    {
      if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
      {
        v4 = sub_373F0_377B0(v3 + 72, 9, 17);
        if ( v4 )
        {
          v5 = *(_WORD *)(v3 + 126);
          *(_WORD *)(v4 + 126) += v5;
          sub_56420(v5, v3, v4);
          *(_BYTE *)(v4 + 68) = 10;
          *(_BYTE *)(v4 + 69) = 54;
          *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
          *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
          *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
          *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
          *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
          *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
          *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
          *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
          *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
          *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
          sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 0x4000);
          sub_55370_558A0((v4 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 40);
        }
      }
      sub_563B0(a1, v3);
      --*(_BYTE *)(a1 + 61);
    }
    *(_BYTE *)(a1 + 61) = 0;
    result = a1;
    --*(_WORD *)(a1 + 48);
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00058270) --------------------------------------------------------
int sub_58270(int a1)
{
  int result; // eax
  int v2; // ebx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax
  int v6; // edx

  result = a1;
  if ( *(__int16 *)(a1 + 48) <= 0 )
    return result;
  v2 = 164 * *(unsigned __int16 *)(a1 + 42);
  v3 = dword_AE400_AE3F0() + 29795 + v2;
  if ( v3 <= dword_AE400_AE3F0() + 29795 )
  {
LABEL_9:
    result = a1;
    --*(_WORD *)(a1 + 48);
    return result;
  }
  if ( !sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + v2)) )
  {
    *(_WORD *)(a1 + 48) = 1;
    goto LABEL_9;
  }
  if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
  {
    v4 = sub_373F0_377B0(v3 + 72, 9, 16);
    if ( v4 )
    {
      v5 = *(_WORD *)(v3 + 126);
      *(_WORD *)(v4 + 126) += v5;
      sub_56420(v5, v3, v4);
      *(_BYTE *)(v4 + 68) = 10;
      *(_BYTE *)(v4 + 69) = 53;
      *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
      *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
      *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
      *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
      *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
      *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
      *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
      *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
      sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 10240);
      *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
      v6 = dword_AE400_AE3F0() + 29795;
      *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
      sub_55370_558A0((v4 - v6) / 164, -1, 15);
    }
  }
  sub_563B0(a1, v3);
  result = a1;
  --*(_WORD *)(a1 + 48);
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00058410) --------------------------------------------------------
void sub_58410(int a1)
{
  unsigned int v1; // esi
  int v2; // eax
  char v3; // dh
  int v4; // eax
  __int16 v5; // di

  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42);
    if ( v1 > dword_AE400_AE3F0() + 29795 )
    {
      if ( !sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42)))
        || *(_WORD *)(*(_DWORD *)(v1 + 160) + 14) )
      {
        if ( *(_WORD *)(*(_DWORD *)(v1 + 160) + 14) )
          *(_WORD *)(a1 + 48) = 1;
      }
      else
      {
        if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) && *(char *)(a1 + 16) >= 0 )
        {
          v2 = dword_AE400_AE3F0() + 29795;
          *(_BYTE *)(a1 + 16) |= 0x80u;
          sub_55370_558A0((int)(v1 - v2) / 164, -1, 19);
        }
        if ( *(__int16 *)(a1 + 48) == *(__int16 *)(a1 + 50) - 2 )
        {
          v3 = *(_BYTE *)(a1 + 16);
          if ( v3 < 0 )
            *(_BYTE *)(a1 + 16) = v3 & 0x7F;
        }
        ((void (*)(unsigned int))locret_45900)(v1);
        if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
          *(_WORD *)(*(_DWORD *)(v1 + 160) + 12) = -3 * *(_WORD *)(v1 + 128);
        else
          *(_WORD *)(*(_DWORD *)(v1 + 160) + 12) = -2 * *(_WORD *)(v1 + 128);
        *(_WORD *)(v1 + 126) = *(_WORD *)(*(_DWORD *)(v1 + 160) + 12);
        if ( (*(_BYTE *)(a1 + 63) & 3) == 0 )
        {
          v4 = sub_373F0_377B0(v1 + 72, 10, 2);
          if ( v4 )
          {
            *(_WORD *)(v4 + 24) = *(_WORD *)(v1 + 24);
            *(_DWORD *)(v4 + 12) *= 4;
          }
        }
        sub_563B0(a1, v1);
      }
      v5 = *(_WORD *)(a1 + 48) - 1;
      *(_WORD *)(a1 + 48) = v5;
      if ( !v5 )
      {
        *(_WORD *)(*(_DWORD *)(v1 + 160) + 12) = -*(_WORD *)(v1 + 128);
        *(_WORD *)(v1 + 126) = *(_WORD *)(*(_DWORD *)(v1 + 160) + 12);
        *(_BYTE *)(a1 + 16) &= ~0x80u;
      }
    }
  }
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (000585B0) --------------------------------------------------------
int sub_585B0(int a1)
{
  int result; // eax
  unsigned __int16 v2; // bx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax

  result = a1;
  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v2 = *(_WORD *)(a1 + 42);
    v3 = dword_AE400_AE3F0() + 29795 + 164 * v2;
    if ( v3 <= dword_AE400_AE3F0() + 29795 )
    {
LABEL_5:
      result = a1;
      --*(_WORD *)(a1 + 48);
      return result;
    }
    if ( !sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * v2)) )
    {
      *(_WORD *)(a1 + 48) = 1;
      goto LABEL_5;
    }
    while ( *(char *)(a1 + 61) >= 0 )
    {
      if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
      {
        v4 = sub_373F0_377B0(v3 + 72, 9, 18);
        if ( v4 )
        {
          v5 = *(_WORD *)(v3 + 126);
          *(_WORD *)(v4 + 126) += v5;
          sub_56420(v5, v3, v4);
          *(_BYTE *)(v4 + 68) = 10;
          *(_BYTE *)(v4 + 69) = 55;
          *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
          *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
          *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
          *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
          *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
          *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
          *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
          *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
          *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
          *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
          sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 0x4000);
        }
      }
      sub_563B0(a1, v3);
      --*(_BYTE *)(a1 + 61);
    }
    *(_BYTE *)(a1 + 61) = 0;
    result = a1;
    --*(_WORD *)(a1 + 48);
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (00058750) --------------------------------------------------------
int sub_58750(int a1)
{
  int result; // eax
  unsigned __int16 v2; // dx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax

  result = a1;
  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v2 = *(_WORD *)(a1 + 42);
    v3 = dword_AE400_AE3F0() + 29795 + 164 * v2;
    if ( v3 <= dword_AE400_AE3F0() + 29795 )
    {
LABEL_5:
      result = a1;
      --*(_WORD *)(a1 + 48);
      return result;
    }
    if ( !sub_56300(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * v2)) )
    {
      *(_WORD *)(a1 + 48) = 1;
      goto LABEL_5;
    }
    while ( *(char *)(a1 + 61) >= 0 )
    {
      if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
      {
        v4 = sub_373F0_377B0(v3 + 72, 9, 0);
        if ( v4 )
        {
          v5 = *(_WORD *)(v3 + 126);
          *(_WORD *)(v4 + 126) += v5;
          sub_56420(v5, v3, v4);
          *(_BYTE *)(v4 + 68) = 10;
          *(_BYTE *)(v4 + 69) = 0;
          *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
          *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
          *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
          *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
          *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
          *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
          *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
          *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
          *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
          *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
          sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 0x4000);
          sub_55370_558A0((v4 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 9);
        }
      }
      sub_563B0(a1, v3);
      --*(_BYTE *)(a1 + 61);
    }
    *(_BYTE *)(a1 + 61) = 0;
    result = a1;
    --*(_WORD *)(a1 + 48);
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//SYNCHRONIZED WITH REMC1
void DrawLetter_58768_58C78(__int16 a1, __int16 a2, TypeTab* a3, unsigned __int8 a4)//229768
{
  __int16 v4; // dx
  uint8_t* sprite; // esi
  int v7; // [esp+4h] [ebp-4h]

  //fix
  v7 = 0;
  //fix

  v4 = a3->dim.x;
  sprite = a3->Tab_0;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    sub_60D50_61260(v4, a2, a1, sprite, a4, 0);
    return;
  }
  else
  {
    if ( (typeResolution_12F02E_12F01E & 8) != 0 )
      sub_60D65_61275(v4, a2, a1, sprite, a4, 0);
    return;
  }
}

//----- (00058CF0) --------------------------------------------------------
char sub_587E0_58CF0()
{
  char v1[64]; // [esp+0h] [ebp-40h] BYREF

  sprintf(v1, "%s%s/%s/%s.dat", "C:", aCarpetCd_4, aData_1, aTmaps10_0);
  dword_968EC = DataFileIO::CreateOrOpenFile((char*)v1, 512);
  if ( dword_968EC == nullptr )
  {
    sprintf(v1, "data/%s.dat", aTmaps10_0);
    dword_968EC = DataFileIO::CreateOrOpenFile((char*)v1, 512);
  }
  return 1;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 968EC: using guessed type int dword_968EC;

int sub_58860_58D70(unsigned __int16 a1, uint8_t* a2)//229860_
{
  //int v2; // esi
  //int v3; // esi
  int result; // eax

  if ( dword_968EC == nullptr )
    return (int)dword_968EC;
  //v2 = 10 * a1;
  sub_62B30_63040((int)dword_968EC, begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_4, 0);
  int dataSize = begTmapsTab_12D744_12D734_2EB744_2EB734x[a1 + 1].var_4 - begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_4;
  DataFileIO::Read(dword_968EC, (uint8_t*)a2, dataSize);
  result = sub_62B60_63070((uint8_t*)a2, (uint8_t*)a2);
  if ( result >= 0 )
  {
    if ( !result )
      return dataSize;
  }
  else
  {
    printf("ERROR decompressing tmap%03d\n", a1);
    return -2;
  }
  return result;
}

//SYNCHRONIZED WITH REMC1
char sub_58910_58E20(unsigned __int16 a1)
{
    unsigned __int16 v1; // ax
    __int16 v2; // di
    unsigned __int16 v3; // bx
    _BYTE** v4; // ecx
    Type_sub_AE3E0* v5; // eax

    v1 = begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_8;
    if (byte_12E7D0_12E7C0[v1])
        return 0;
    v2 = begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_8;
    if (!dword_12DF8C_12DF7C[v1])
        return 0;
    v3 = begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_8;
    if (v1 < 529)
    {
        do
        {
            if (v2 != begTmapsTab_12D744_12D734_2EB744_2EB734x[v3].var_8)
                break;
            v4 = (_BYTE**)dword_12DF8C_12DF7C[v3];
            if (v4)
            {
                if ((**v4 & 1) != 0)
                {
                    v5 = sub_10FD0(dword_AE3E0_AE3D0, v3);
                    sub_10F10(v5);
                }
                sub_36A90_36E50(dword_AE3EC_AE3DC, dword_12D748_12D738[v3]);
                dword_12DF8C_12DF7C[v3] = 0;
                dword_12D748_12D738[v3] = 0;
                dword_12CF00_12CEF0[v3] = 0;
            }
            ++v3;
        } while (v3 < 529);
    }
    return 1;
}

//SYNCHRONIZED WITH REMC1
char sub_58A00_58F10(unsigned __int16 a1)
{
    unsigned __int16 v1; // di
    unsigned __int16 v2; // bx
    _BYTE** v3; // ecx
    Type_sub_AE3E0* v4; // eax

    v1 = begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_8;
    if (!dword_12DF8C_12DF7C[v1])
        return 0;
    v2 = begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_8;
    if (v1 < 0x211u)
    {
        do
        {
            if (v1 != begTmapsTab_12D744_12D734_2EB744_2EB734x[v2].var_8)
                break;
            v3 = (_BYTE**)dword_12DF8C_12DF7C[v2];
            if (v3)
            {
                if ((**v3 & 1) != 0)
                {
                    v4 = sub_10FD0(dword_AE3E0_AE3D0, v2);
                    sub_10F10(v4);
                }
                sub_36A90_36E50(dword_AE3EC_AE3DC, dword_12D748_12D738[v2]);
                dword_12DF8C_12DF7C[v2] = 0;
                dword_12D748_12D738[v2] = 0;
                dword_12CF00_12CEF0[v2] = 0;
            }
            ++v2;
        } while (v2 < 0x211u);
    }
    return 1;
}

//SYNCHRONIZED WITH REMC1
int GetSumaSpriteSizes_58AD0_58FE0(unsigned __int16 a1)
{
  unsigned __int16 v1; // ax
  int v2; // ebx
  unsigned __int16 i; // si

  v1 = begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_8;
  v2 = 0;
  for ( i = v1; v1 < 0x211u; v1++ )
  {
    if ( i != begTmapsTab_12D744_12D734_2EB744_2EB734x[v1].var_8)
      break;
    v2 += begTmapsTab_12D744_12D734_2EB744_2EB734x[v1].var_0;
  }
  return v2;
}

int counter_sub_58B30_59040 = 0;
int counter_sub_58B30_59040_2 = 0;

//SYNCHRONIZED WITH REMC1
void sub_58B30_59040(unsigned __int16 a1)//229B30_
{
    //int v1; // eax
    int v2; // ebp
    Type_sub168_2* v3x; // esi
    unsigned __int16 i; // [esp+0h] [ebp-18h]
    __int16 v6; // [esp+4h] [ebp-14h]

    //allert_error();//test it

    //debug
    if (counter_sub_58B30_59040 == 0xfb)
    {
        counter_sub_58B30_59040++;
        counter_sub_58B30_59040--;
    }
    counter_sub_58B30_59040++;
    //debug

    //LOWORD(v1) = begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_8;
    v2 = str_AE408_AE3F8->var_u32_4.dword;
    v6 = begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_8;
    for (i = begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_8; i < 529; i++)
    {
        //debug
        if (i == 0xfd)
        {
            counter_sub_58B30_59040_2++;
            counter_sub_58B30_59040_2--;
        }
        if (counter_sub_58B30_59040_2 == 0xb5)
        {
            counter_sub_58B30_59040_2++;
            counter_sub_58B30_59040_2--;
        }
        counter_sub_58B30_59040_2++;
        //debug
      //v1 = (int)begTmapsTab_12D744_2EB744_2EB734 + 10 * i;
        if (v6 != begTmapsTab_12D744_12D734_2EB744_2EB734x[i].var_8)
            break;
        if (!dword_12DF8C_12DF7C[i])
        {
            //v1 = sub_369E0_36DA0(dword_AE3EC_AE3DC, (unsigned __int16)(4 * ((unsigned int)(begTmapsTab_12D744_12D734_2EB744_2EB734x[i].var_0 + 13) >> 2)), i);
            v3x = sub_369E0_36DA0(dword_AE3EC_AE3DC, (unsigned __int16)(4 * ((unsigned int)(begTmapsTab_12D744_12D734_2EB744_2EB734x[i].var_0 + 13) >> 2)), i);
            if (v3x)
            {
                //v1 = sub_58860_58D70(i, *(uint8_t**)v3);
                if (sub_58860_58D70(i, (uint8_t*)v3x->var_u32_0) != -1)
                {
                    dword_12D748_12D738[i] = v3x;
                    dword_12DF8C_12DF7C[i] = v3x;
                    dword_12CF00_12CEF0[i] = v2;
                    //v1 = *v3;
                    if ((v3x->var_u32_0->var_0 & 1) != 0)
                        sub_10D40(dword_AE3E0_AE3D0, v3x, i);
                }
            }
        }
    }
}

//SYNCHRONIZED WITH REMC1
int sub_58C30_59140(unsigned int a1)
{
  //int v1; // esi
  int v2; // eax
  unsigned __int16 v3; // dx
  int v4; // eax
  int v5; // ecx
  int v6; // eax
  int v7; // ecx
  unsigned int v8; // edx
  int v9; // ebx
  int v10; // ebx
  unsigned int v11; // edi
  int v12; // ebx
  int result; // eax
  unsigned int v14; // [esp+0h] [ebp-40h]
  unsigned int v15; // [esp+4h] [ebp-3Ch]
  unsigned int v16; // [esp+8h] [ebp-38h]
  unsigned int v17; // [esp+Ch] [ebp-34h]
  unsigned int v18; // [esp+10h] [ebp-30h]
  int v19; // [esp+14h] [ebp-2Ch]
  int v20; // [esp+18h] [ebp-28h]
  int v21; // [esp+1Ch] [ebp-24h]
  int v22; // [esp+20h] [ebp-20h]
  int v23; // [esp+24h] [ebp-1Ch]
  int v24; // [esp+28h] [ebp-18h]
  char v25; // [esp+2Ch] [ebp-14h]

  //fix
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  //fix

  //v1 = (int)begTmapsTab_12D744_12D734_2EB744_2EB734x;
  v25 = 1;
  v2 = 0;
  do
  {
    v3 = v2++;
    *(&v14 + v3) = -1;
    *(&v19 + v3) = -1;
  }
  while ( (unsigned __int16)v2 < 5u );
  v4 = 0;
  do
  {
    v5 = begTmapsTab_12D744_12D734_2EB744_2EB734x[v4].var_8;
    if ( dword_12DF8C_12DF7C[(unsigned __int16)v5] && !byte_12E7D0_12E7C0[v5] )
      v25 = 0;
    while ( (unsigned __int16)v4 < 0x211u && begTmapsTab_12D744_12D734_2EB744_2EB734x[v4 + 1].var_8 == v5 )
      ++v4;
    ++v4;
  }
  while ( (unsigned __int16)v4 < 0x211u );
  v6 = 0;
  do
  {
    v7 = begTmapsTab_12D744_12D734_2EB744_2EB734x[v6].var_8;
    if ( (!byte_12E7D0_12E7C0[(unsigned __int16)v7] || v25) && dword_12DF8C_12DF7C[v7] )
    {
      v8 = dword_12CF00_12CEF0[v7];
      v9 = begTmapsTab_12D744_12D734_2EB744_2EB734x[v6].var_8;
      if ( v8 < v14 )
      {
        v10 = v8 ^ v14;
        v8 = v14;
        v14 ^= v10;
        v19 ^= v7;
        v9 = v7 ^ v19;
        v19 = v7;
      }
      if ( v8 < v15 )
      {
        v15 ^= v8;
        v20 ^= v9;
        v8 ^= v15;
        v9 ^= v20;
        v15 ^= v8;
        v20 ^= v9;
      }
      if ( v8 < v16 )
      {
        v16 ^= v8;
        v21 ^= v9;
        v8 ^= v16;
        v9 ^= v21;
        v16 ^= v8;
        v21 ^= v9;
      }
      if ( v8 < v17 )
      {
        v17 ^= v8;
        v22 ^= v9;
        v8 ^= v17;
        v9 ^= v22;
        v17 ^= v8;
        v22 ^= v9;
      }
      if ( v8 < v18 )
      {
        v18 = v8;
        v23 = v9;
      }
    }
    while ( (unsigned __int16)v6 < 0x211u && begTmapsTab_12D744_12D734_2EB744_2EB734x[v6 + 1].var_8 == v7 )
      ++v6;
    ++v6;
  }
  while ( (unsigned __int16)v6 < 0x211u );
  v11 = 0;
  v24 = 0;
  do
  {
    if ( v11 >= a1 || (v12 = 4 * (unsigned __int16)v24, *(int *)((char *)&v19 + v12) <= -1) )
    {
      result = v11;
      //begTmapsTab_12D744_12D734_2EB744_2EB734x = (uint8_t*)begTmapsTab_12D744_12D734_2EB744_2EB734x;
      return result;
    }
    //begTmapsTab_12D744_12D734_2EB744_2EB734x = (uint8_t*)begTmapsTab_12D744_12D734_2EB744_2EB734x;
    if ( v25 )
    {
      if ( !sub_58A00_58F10(*((_WORD *)&v19 + 2 * (unsigned __int16)v24)) )
        goto LABEL_38;
    }
    else if ( !sub_58910_58E20(*((_WORD *)&v19 + 2 * (unsigned __int16)v24)) )
    {
      goto LABEL_38;
    }
    v11 += GetSumaSpriteSizes_58AD0_58FE0(*(_WORD *)((char *)&v19 + v12));
LABEL_38:
    //v1 = (int)begTmapsTab_12D744_12D734_2EB744_2EB734x;
    ++v24;
  }
  while ( (unsigned __int16)v24 < 5u );
  return v11;
}

//SYNCHRONIZED WITH REMC1
void sub_58E70_59380()
{
    dword_AE3EC_AE3DC = sub_36700_36AC0(str_AE408_AE3F8->var_u32_172, 529, str_AE408_AE3F8->var_u32_168);
    if (dword_AE3EC_AE3DC)
        dword_AE3E0_AE3D0 = sub_10CB0(529);
    sub_587E0_58CF0();
    memset(dword_12DF8C_12DF7C, 0, sizeof(dword_12DF8C_12DF7C));
    memset(dword_12D748_12D738, 0, sizeof(dword_12D748_12D738));
    memset(dword_12CF00_12CEF0, 0, sizeof(dword_12CF00_12CEF0));
    sub_59320_59830();
    sub_59370_59880();
}

//SYNCHRONIZED WITH REMC1
void sub_58F00_59410()//229F00
{
    sub_36850_36C10_36FD0(dword_AE3EC_AE3DC);
    sub_11010(dword_AE3E0_AE3D0);
    sub_59140_59650();
    memset(dword_12DF8C_12DF7C, 0, sizeof(dword_12DF8C_12DF7C));
    memset(dword_12D748_12D738, 0, sizeof(dword_12D748_12D738));
    memset(dword_12CF00_12CEF0, 0, sizeof(dword_12CF00_12CEF0));
    byte_968E8 = 0;
    sub_58F70_59480();//fix
}

//----- (00059480) --------------------------------------------------------
void sub_58F70_59480()
{
  int result; // eax

  if ( dword_968EC != nullptr )
  {
    result = DataFileIO::Close(dword_968EC);
    dword_968EC = nullptr;
  }
}
// 968EC: using guessed type int dword_968EC;

//----- (000594A0) --------------------------------------------------------
void sub_58F90_594A0()//_22A4A0
{
  unsigned __int16 *v0; // ebx
  int v1; // esi

  sub_587E0_58CF0();
  v0 = (unsigned __int16 *)unk_99BA0x;
  v1 = (int)begWscreen_2ECFF4_2ECFE4;
  while ( v0[3] || v0[4] )
  {
    if ( sub_58860_58D70(*v0, (uint8*)v1) == -1 )
    {
      *(_WORD *)(v1 + 2) = 255;
      *(_WORD *)(v1 + 4) = 255;
      *(_BYTE *)(v1 + 1) = 1;
    }
    if ( v0[3] )
    {
      if ( !v0[4] )
        v0[4] = v0[3] * *(unsigned __int16 *)(v1 + 4) / *(unsigned __int16 *)(v1 + 2);
    }
    else
    {
      v0[3] = v0[4] * *(unsigned __int16 *)(v1 + 2) / *(unsigned __int16 *)(v1 + 4);
    }
    v0 += 7;
    *((_BYTE *)v0 - 2) = *(_BYTE *)(v1 + 1);
  }
  sub_58F70_59480();
}
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//SYNCHRONIZED WITH REMC1
bool sub_59050_59560(unsigned __int16 a1)//22A050_
{
  int v1; // eax
  int v2; // esi
  signed int i; // ebx
  unsigned __int16 v4; // ax

  //fix
  i = 0;
  //fix

  v1 = GetSumaSpriteSizes_58AD0_58FE0(a1);
  v2 = 0;
  for ( i = v1 - sub_369D0_36D90(dword_AE3EC_AE3DC) + 20; i > 0; i -= sub_58C30_59140(i) )
  {
    v4 = v2++;
    if ( v4 >= 4u )
      break;
  }
  if ( i <= 0 )
  {
    sub_58B30_59040(a1);
    *(_BYTE *)(dword_AE408_AE3F8() + 149) = 5;
  }
  return dword_12DF8C_12DF7C[a1] != 0;
}

//SYNCHRONIZED WITH REMC1
void sub_590D0_595E0()//22A0D0_
{
    //unsigned __int16 i; // bx
    //char *result; // eax
    //Type_sub168_2* v2x; // ecx
    //char v3; // cl
    //Type_sub_AE3E0* v4; // eax

    //fix
    //result = 0;
    //fix

    //allert_error();//test it

    for (int i = 0; i < 529; i++)
    {
        //result = (char *)(4 * i);
        //v2x = dword_12DF8C_12DF7C[i];
        if (dword_12DF8C_12DF7C[i])
        {
            //result = *v2;
            //v3 = dword_12DF8C_12DF7C[i]->var_u32_0->x;
            if ((dword_12DF8C_12DF7C[i]->var_u32_0->var_0 & 8) != 0)
            {
                //*result = v3 & 0xF7;
                if ((dword_12DF8C_12DF7C[i]->var_u32_0->var_0 & 1) != 0)
                {
                    //v4 = sub_10FD0(dword_AE3E0_AE3D0, i);
                    sub_10EB0(sub_10FD0(dword_AE3E0_AE3D0, i));
                }
            }
        }
    }
}

//----- (00059650) --------------------------------------------------------
void sub_59140_59650()
{
    memset(byte_12E9E1_12E9D1, 0, 529);
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 12E9D1: using guessed type char byte_12E9E1_12E9D1;

//----- (00059670) --------------------------------------------------------
__int16 *sub_59670(unsigned __int16 a1, unsigned __int16 a2, signed __int16 a3)
{
  __int16 *result; // eax
  unsigned __int16 *v4; // ebx
  __int16 *v5; // edx
  __int16 v6; // cx
  unsigned __int16 v7; // di

  result = &word_989C6;
  v4 = 0;
  if ( word_989C6 >= 0 )
  {
    v5 = &word_989C6 + 2;
    do
    {
      if ( *result == a1 && result[1] == a2 )
        v4 = (unsigned __int16 *)v5;
      v5 += 17;
      v6 = result[17];
      result += 17;
    }
    while ( v6 >= 0 );
  }
  if ( v4 )
  {
    while ( 1 )
    {
      v7 = *v4;
      if ( (*v4 & 0x8000u) != 0 )
        break;
      ++v4;
      result = (__int16 *)sub_596F0(v7);
    }
  }
  else if ( a3 >= 0 )
  {
    return (__int16 *)sub_596F0(a3);
  }
  return result;
}
// 989C6: using guessed type __int16 word_989C6;

//----- (000596F0) --------------------------------------------------------
int sub_596F0(unsigned __int16 a1)
{
    byte_12E9E1_12E9D1[begTmapsTab_12D744_12D734_2EB744_2EB734x[unk_99BA0x[a1].var_0].var_8] = unk_99BA0x[a1].var_11;
    /*unsigned __int16* v1; // eax
  char v2; // bl
  int result; // eax

  v1 = (unsigned __int16 *)((char *)&unk_99BA0 + 14 * a1);
  v2 = *((_BYTE *)v1 + 11);
  result = *(unsigned __int16 *)(begTmapsTab_12D744_12D734_2EB744_2EB734x + 10 * *v1 + 8);
  byte_12E9E1_12E9D1[result] = v2;
  return result;*/
    return 0;
}
// 12D734: using guessed type int begTmapsTab_12D744_12D734_2EB744_2EB734x;

//ios::failure::cause
//SYNCHRONIZED WITH REMC1
int sub_369D0_36D90(Type_sub168* a1x)
{
    //allert_error();//test it

    return a1x->var_4x;
}

//----- (00059740) --------------------------------------------------------
char sub_59740()
{
  unsigned __int16 v0; // bx
  char result; // al
  unsigned int v2; // edi
  unsigned __int16 i; // si
  char v4; // [esp+0h] [ebp-18h]
  char v5; // [esp+4h] [ebp-14h]

  v5 = 0;
  if ( !dword_AE3EC_AE3DC )
    sub_58E70_59380();
  v0 = 0;
  memset(dword_12CF00_12CEF0, 0, sizeof(dword_12CF00_12CEF0));
  do
  {
    result = v0;
    if ( !byte_12E9E1_12E9D1[v0] )
      result = sub_58910_58E20(v0);
    ++v0;
  }
  while ( v0 < 0x211u );
  v4 = -1;
  do
  {
    if ( v5 )
      break;
    for ( i = 0; i < 0x211u; ++i )
    {
      if ( v5 )
        break;
      if ( v4 == byte_12E9E1_12E9D1[i] && !dword_12DF8C_12DF7C[i] )
      {
        v2 = GetSumaSpriteSizes_58AD0_58FE0(i);
        //fix
        /*
        if ( v2 >= ios::failure::cause(dword_AE3EC_AE3DC) )
        {
          if ( (unsigned int)ios::failure::cause < 0x400 )
            v5 = 1;
        }
        else
        {
          sub_58B30_59040(i);
        }*/
      }
    }
    result = --v4;
  }
  while ( v4 );
  return result;
}
// 36D90: using guessed type _DWORD ios::failure::cause(_DWORD);
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AE3DC: using guessed type int dword_AE3EC_AE3DC;
// 12CEF0: using guessed type int dword_12CF00_12CEF0[529];
// 12DF7C: using guessed type int dword_12DF8C_12DF7C[529];

//SYNCHRONIZED WITH REMC1
void sub_59320_59830()
{
  Type_99BA0* v0x; // ebx

  v0x = unk_99BA0x;
  memset(byte_12E7D0_12E7C0, 0, sizeof(byte_12E7D0_12E7C0));
  if ( byte_968F0 )
  {
    while ( v0x->var_6 || v0x->var_8 )
    {
      if ( v0x->var_11 == -1 )
        byte_12E7D0_12E7C0[v0x->var_0] = -1;
      v0x++;
    }
  }
  //JUMPOUT(0x59319_59829);//fixed?
}

//----- (00059880) --------------------------------------------------------
void sub_59370_59880()
{
  for ( int i = 0; i < 0x211u; ++i )
  {
    if ( byte_12E7D0_12E7C0[i] )
      sub_58B30_59040(i);
  }
}

//----- (000598C0) --------------------------------------------------------
int sub_593B0_598C0()
{
  int v0; // esi
  int result; // eax

  memset((void*)(dword_AE400_AE3F0() + 44), 0, 532);
  v0 = dword_AE400_AE3F0();
  result = 0;
  do
  {
    if ( dword_12DF8C_12DF7C[(unsigned __int16)result] )
    {
      *(_BYTE *)(v0 + (unsigned __int16)result + 44) = 1;
      if ( byte_12E7D0_12E7C0[(unsigned __int16)result] )
        ++*(_BYTE *)(v0 + (unsigned __int16)result + 44);
    }
    ++result;
  }
  while ( (unsigned __int16)result < 0x211u );
  dword_AE400_AE3F0(v0);
  return result;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AE3F0: using guessed type int dword_AE400_AE3F0();
// 12DF7C: using guessed type int dword_12DF8C_12DF7C[529];

//----- (00059930) --------------------------------------------------------
char sub_59420_59930()
{
  unsigned __int16 i; // bx
  char result; // al
  unsigned int v2; // edi
  unsigned __int16 j; // si
  char v4; // [esp+0h] [ebp-14h]
  char v5; // [esp+4h] [ebp-10h]

  v5 = 0;
  if ( !dword_AE3EC_AE3DC )
    sub_58E70_59380();
  for ( i = 0; i < 0x211u; ++i )
  {
    result = i;
    if ( !*(_BYTE *)(dword_AE400_AE3F0() + i + 44) )
      result = sub_58910_58E20(i);
  }
  v4 = 2;
  do
  {
    if ( v5 )
      break;
    for ( j = 0; j < 0x211u; ++j )
    {
      if ( v5 )
        break;
      if ( v4 == *(_BYTE *)(j + dword_AE400_AE3F0() + 44) && !dword_12DF8C_12DF7C[j] )
      {
        v2 = GetSumaSpriteSizes_58AD0_58FE0(j);
        //fix
        /*
        if ( v2 >= ios::failure::cause(dword_AE3EC_AE3DC) )
        {
          if ( ios::failure::cause(dword_AE3EC_AE3DC) < 0x400u )
            v5 = 1;
        }
        else
        {
          sub_58B30_59040(j);
        }*/
      }
    }
    result = --v4;
  }
  while ( v4 );
  return result;
}
// 36D90: using guessed type _DWORD ios::failure::cause(_DWORD);
// AE3DC: using guessed type int dword_AE3EC_AE3DC;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// 12DF7C: using guessed type int dword_12DF8C_12DF7C[529];

//----- (00059A10) --------------------------------------------------------
void sub_59500_59A10(uint8_t** a1)
{
    uint8_t** v1; // ebx
    uint8_t* v3; // ecx

  v1 = a1;
  if ( *a1 )
  {
    do
    {
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        sub_65D70_66280((uint8_t*)*v1[0], (uint8_t*)*v1[1], (uint8_t*)*v1[2]);
      else
        sub_65DC0_662D0((uint8_t*)*v1[0], (uint8_t*)*v1[1], (uint8_t*)*v1[2]);
      v3 = v1[3];
      v1 += 3;
    }
    while ( v3 );
  }
}
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00059A70) --------------------------------------------------------
unsigned int sub_59560_59A70(unsigned int **a1)
{
  unsigned int **v1; // ebx
  unsigned int result; // eax
  unsigned int *v3; // ecx

  v1 = a1;
  if ( *a1 )
  {
    do
    {
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        result = sub_668A0(**v1, *v1[1], *v1[2]);
      else
        result = (unsigned int)sub_66920((unsigned int *)**v1, *v1[1], *v1[2]);
      v3 = v1[3];
      v1 += 3;
    }
    while ( v3 );
  }
  return result;
}
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00059C30) --------------------------------------------------------
int sub_59720_59C30()
{
  if ( typeResolution_12F02E_12F01E == 1 )
    return sub_59C60(320, 200);
  else
    return sub_59C60(320, 240);
}
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00059C60) --------------------------------------------------------
int sub_59C60(__int16 a1, __int16 a2)
{
  __int16 v2; // si
  __int16 v3; // bx
  int result; // eax
  __int16 v5; // ax
  __int16 v6[14]; // [esp+0h] [ebp-40h] BYREF
  char v7[36]; // [esp+1Ch] [ebp-24h] BYREF

  v2 = a1;
  v3 = a2;
  memset(v6, 0, sizeof(v6));
  result = (int)memset(v7, 0, 28);
  if ( dword_9AD98 > 0 )
  {
    if ( a1 != -1 || (result = a2, a2 != -1) )
    {
      result = a1;
      if ( a1 != -1 )
      {
        v6[0] = 4;
        if ( a1 <= 0 )
        {
          if ( (typeResolution_12F02E_12F01E & 1) != 0 )
            goto LABEL_12;
        }
        else
        {
          if ( a1 > 638 )
            v2 = 638;
          mouse_9AD90.x = v2;
          if ( (typeResolution_12F02E_12F01E & 1) != 0 )
          {
LABEL_12:
            v6[4] = v2;
            if ( a2 <= 0 )
            {
              if ( (typeResolution_12F02E_12F01E & 1) != 0 )
                v5 = mouse_9AD90.y;
              else
                v5 = 8 * mouse_9AD90.y;
              v6[6] = v5;
              return int386(51, (uint32)v6, (uint32)v7);
            }
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
            {
              if ( a2 > 398 )
                v3 = 398;
              mouse_9AD90.y = v3;
              if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              {
                v6[6] = v3;
                return int386(51, (uint32)v6, (uint32)v7);
              }
            }
            else
            {
              if ( a2 > 478 )
                v3 = 478;
              mouse_9AD90.y = v3;
              if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              {
                v6[6] = v3;
                return int386(51, (uint32)v6, (uint32)v7);
              }
            }
            v6[6] = 8 * v3;
            return int386(51, (uint32)v6, (uint32)v7);
          }
        }
        v2 *= 8;
        goto LABEL_12;
      }
    }
  }
  return result;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 63488: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 9AD90: using guessed type __int16 word_9AD90;
// 9AD92: using guessed type __int16 word_9AD92;
// 9AD98: using guessed type int dword_9AD98;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00059EC0) --------------------------------------------------------
void Blit_599B0_59EC0(__int16 a1)
{
  char *v1; // esi
  char *v2; // esi

  if ( !byte_9AD96 )
    sub_5BDF8_5C308();
  sub_61A1C_61F2C(0);
  qmemcpy(&tempScreenBuffer_A0000, (const void *)begWscreen_2ECFF4_2ECFE4, 0x10000u);
  v1 = (char *)(begWscreen_2ECFF4_2ECFE4 + 0x10000);
  sub_61A1C_61F2C(1);
  qmemcpy(&tempScreenBuffer_A0000, v1, 0x10000u);
  v1 += 0x10000;
  sub_61A1C_61F2C(2);
  qmemcpy(&tempScreenBuffer_A0000, v1, 0x10000u);
  v2 = v1 + 0x10000;
  sub_61A1C_61F2C(3);
  if ( a1 == 400 )
  {
    qmemcpy(&tempScreenBuffer_A0000, v2, 0xE800u);
    sub_5BE50_5C360();
  }
  else
  {
    qmemcpy(&tempScreenBuffer_A0000, v2, 0x10000u);
    sub_61A1C_61F2C(4);
    qmemcpy(&tempScreenBuffer_A0000, v2 + 0x10000, 0xB000u);
    if ( !byte_9AD96 )
      sub_5BE50_5C360();
  }
}
// 9AD96: using guessed type char byte_9AD96;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//----- (00059F90) --------------------------------------------------------
int sub_59F90(int a1)
{
  int result; // eax

  result = sub_5A5A0(a1, 1);
  if ( result )
  {
    sub_37800(*(__int16 *)(a1 + 24), 1);
    return sub_41E80_421C0(a1);
  }
  return result;
}

//----- (00059FC0) --------------------------------------------------------
int sub_59FC0(int a1)
{
  int result; // eax

  result = sub_5A5A0(a1, 0);
  if ( result )
  {
    sub_37800(*(__int16 *)(a1 + 24), 1);
    return sub_41E80_421C0(a1);
  }
  return result;
}

//----- (00059FF0) --------------------------------------------------------
int sub_59FF0(int a1)
{
  int result; // eax

  if ( *(_WORD *)(a1 + 26) )
  {
    result = sub_5A630(a1, 1);
    if ( !result )
      --*(_WORD *)(a1 + 26);
  }
  else
  {
    result = sub_5A5A0(a1, 1);
    if ( result )
    {
      result = sub_37800(*(__int16 *)(a1 + 24), 0);
      *(_WORD *)(a1 + 26) = 10;
    }
  }
  return result;
}

//----- (0005A040) --------------------------------------------------------
int sub_5A040(int a1)
{
  int result; // eax

  if ( *(_WORD *)(a1 + 26) )
  {
    result = sub_5A630(a1, 0);
    if ( !result )
      --*(_WORD *)(a1 + 26);
  }
  else
  {
    result = sub_5A5A0(a1, 0);
    if ( result )
    {
      result = sub_37800(*(__int16 *)(a1 + 24), 0);
      *(_WORD *)(a1 + 26) = 10;
    }
  }
  return result;
}

//----- (0005A090) --------------------------------------------------------
void sub_5A090(int a1)
{
  int v1; // esi
  int v2; // eax
  int v3; // edx
  int v4; // eax

  v1 = 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 13333) + dword_AE400_AE3F0() + 29795;
  v2 = *(_DWORD *)(v1 + 160);
  if ( *(_WORD *)(v2 + 50) )
  {
    if ( (*(_BYTE *)(dword_AE400_AE3F0() + 2049 * *(__int16 *)(v2 + 48) + 13325) & 2) != 0 )
    {
      sub_37800(*(__int16 *)(a1 + 24), 0);
      sub_41E80_421C0(a1);
      v3 = 2049 * *(__int16 *)(*(_DWORD *)(v1 + 160) + 48);
      v4 = dword_AE400_AE3F0() + 29795;
      *(_BYTE *)(v3 + v4 - 16470) = *(_BYTE *)(v3 + dword_AE400_AE3F0() + 13325) & 0xFD;
      sub_55370_558A0((a1 - v4) / 164, -1, 41);
    }
  }
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//----- (0005A150) --------------------------------------------------------
int sub_5A150(int a1)
{
  int result; // eax

  result = sub_5A5A0(a1, 1);
  if ( result )
  {
    sub_37800(*(__int16 *)(a1 + 24), 1);
    return sub_41E80_421C0(a1);
  }
  return result;
}

//----- (0005A180) --------------------------------------------------------
int sub_5A180(int a1)
{
  int result; // eax

  result = sub_5A5A0(a1, 0);
  if ( result )
  {
    sub_37800(*(__int16 *)(a1 + 24), 1);
    return sub_41E80_421C0(a1);
  }
  return result;
}

//----- (0005A1B0) --------------------------------------------------------
int sub_5A1B0(int a1)
{
  int result; // eax

  if ( *(_WORD *)(a1 + 26) )
  {
    result = sub_5A630(a1, 1);
    if ( !result )
      --*(_WORD *)(a1 + 26);
  }
  else
  {
    result = sub_5A5A0(a1, 1);
    if ( result )
    {
      result = sub_37800(*(__int16 *)(a1 + 24), 0);
      *(_WORD *)(a1 + 26) = 10;
    }
  }
  return result;
}

//----- (0005A200) --------------------------------------------------------
int sub_5A200(int a1)
{
  int result; // eax

  if ( *(_WORD *)(a1 + 26) )
  {
    result = sub_5A630(a1, 0);
    if ( !result )
      --*(_WORD *)(a1 + 26);
  }
  else
  {
    result = sub_5A5A0(a1, 0);
    if ( result )
    {
      result = sub_37800(*(__int16 *)(a1 + 24), 0);
      *(_WORD *)(a1 + 26) = 10;
    }
  }
  return result;
}

//----- (0005A250) --------------------------------------------------------
int sub_5A250(int a1)
{
  int result; // eax

  result = sub_5A5A0(a1, 1);
  if ( result )
  {
    sub_37800(*(__int16 *)(a1 + 24), 1);
    return sub_41E80_421C0(a1);
  }
  return result;
}

//----- (0005A280) --------------------------------------------------------
int sub_5A280(int a1)
{
  int result; // eax

  result = sub_5A5A0(a1, 0);
  if ( result )
  {
    sub_37800(*(__int16 *)(a1 + 24), 1);
    return sub_41E80_421C0(a1);
  }
  return result;
}

//----- (0005A2B0) --------------------------------------------------------
int sub_5A2B0(int a1)
{
  int result; // eax

  if ( *(_WORD *)(a1 + 26) )
  {
    result = sub_5A630(a1, 1);
    if ( !result )
      --*(_WORD *)(a1 + 26);
  }
  else
  {
    result = sub_5A5A0(a1, 1);
    if ( result )
    {
      result = sub_37800(*(__int16 *)(a1 + 24), 0);
      *(_WORD *)(a1 + 26) = 10;
    }
  }
  return result;
}

//----- (0005A300) --------------------------------------------------------
int sub_5A300(int a1)
{
  int result; // eax

  if ( *(_WORD *)(a1 + 26) )
  {
    result = sub_5A630(a1, 0);
    if ( !result )
      --*(_WORD *)(a1 + 26);
  }
  else
  {
    result = sub_5A5A0(a1, 0);
    if ( result )
    {
      result = sub_37800(*(__int16 *)(a1 + 24), 0);
      *(_WORD *)(a1 + 26) = 10;
    }
  }
  return result;
}

//----- (0005A350) --------------------------------------------------------
int sub_5A350(int a1, int a2)
{
  int result; // eax
  __int16 v3; // dx
  int v4; // edx
  __int16 v5; // di

  result = a2;
  if ( a2 == -1 )
  {
    result = 0;
    v4 = 0;
    while ( (unsigned int)result > 0xB && result != 16 || !*(_DWORD *)(v4 + dword_AE408_AE3F8() + 36382) )
    {
      ++result;
      v4 += 4;
      if ( result > 16 )
      {
        v5 = *(_WORD *)(a1 + 26);
        if ( !v5 )
        {
          *(_WORD *)(a1 + 26) = 16;
          return result;
        }
        if ( v5 != 1 )
        {
          *(_WORD *)(a1 + 26) = v5 - 1;
          return result;
        }
        goto LABEL_6;
      }
    }
  }
  else if ( !*(_DWORD *)(dword_AE408_AE3F8() + 4 * a2 + 36382) )
  {
    v3 = *(_WORD *)(a1 + 26);
    if ( v3 )
    {
      if ( v3 == 1 )
      {
LABEL_6:
        sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 41);
        sub_37800(*(__int16 *)(a1 + 24), 1);
        return sub_41E80_421C0(a1);
      }
      else
      {
        *(_WORD *)(a1 + 26) = v3 - 1;
      }
    }
    else
    {
      *(_WORD *)(a1 + 26) = 16;
    }
  }
  return result;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (0005A470) --------------------------------------------------------
int sub_5A470(int a1)
{
  return sub_5A350(a1, 0);
}

//----- (0005A480) --------------------------------------------------------
int sub_5A480(int a1)
{
  return sub_5A350(a1, 1);
}

//----- (0005A490) --------------------------------------------------------
int sub_5A490(int a1)
{
  return sub_5A350(a1, 2);
}

//----- (0005A4A0) --------------------------------------------------------
int sub_5A4A0(int a1)
{
  return sub_5A350(a1, 3);
}

//----- (0005A4B0) --------------------------------------------------------
int sub_5A4B0(int a1)
{
  return sub_5A350(a1, 4);
}

//----- (0005A4C0) --------------------------------------------------------
int sub_5A4C0(int a1)
{
  return sub_5A350(a1, 5);
}

//----- (0005A4D0) --------------------------------------------------------
int sub_5A4D0(int a1)
{
  return sub_5A350(a1, 6);
}

//----- (0005A4E0) --------------------------------------------------------
int sub_5A4E0(int a1)
{
  return sub_5A350(a1, 7);
}

//----- (0005A4F0) --------------------------------------------------------
int sub_5A4F0(int a1)
{
  return sub_5A350(a1, 8);
}

//----- (0005A500) --------------------------------------------------------
int sub_5A500(int a1)
{
  return sub_5A350(a1, 9);
}

//----- (0005A510) --------------------------------------------------------
int sub_5A510(int a1)
{
  return sub_5A350(a1, 10);
}

//----- (0005A520) --------------------------------------------------------
int sub_5A520(int a1)
{
  return sub_5A350(a1, 11);
}

//----- (0005A530) --------------------------------------------------------
int sub_5A530(int a1)
{
  return sub_5A350(a1, 12);
}

//----- (0005A540) --------------------------------------------------------
int sub_5A540(int a1)
{
  return sub_5A350(a1, 13);
}

//----- (0005A550) --------------------------------------------------------
int sub_5A550(int a1)
{
  return sub_5A350(a1, 14);
}

//----- (0005A560) --------------------------------------------------------
int sub_5A560(int a1)
{
  return sub_5A350(a1, 15);
}

//----- (0005A570) --------------------------------------------------------
int sub_5A570(int a1)
{
  return sub_5A350(a1, 16);
}

//----- (0005A580) --------------------------------------------------------
int sub_5A580(int a1)
{
  return sub_5A350(a1, -1);
}

//----- (0005A5A0) --------------------------------------------------------
int sub_5A5A0(int a1, int a2)
{
  unsigned int i; // ebx

  if ( (*(_BYTE *)(a1 + 63) & 7) == 0 )
  {
    for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
    {
      if ( !*(_BYTE *)(i + 65) && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)i) == a2 )
      {
        sub_55370_558A0((int)(i - (dword_AE400_AE3F0() + 29795)) / 164, -1, 41);
        return 1;
      }
    }
    *(_WORD *)(a1 + 76) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  }
  return 0;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (0005A630) --------------------------------------------------------
int sub_5A630(int a1, int a2)
{
  unsigned __int16 v2; // si
  int v3; // ebx

  v2 = 0;
  v3 = dword_AE400_AE3F0() + 13323;
  while ( v2 < *(_WORD *)(dword_AE400_AE3F0() + 10) )
  {
    if ( sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)(164 * *(unsigned __int16 *)(v3 + 10) + dword_AE400_AE3F0() + 29795)) == a2 )
      return 1;
    v3 += 2049;
    ++v2;
  }
  return 0;
}
// AE3F0: using guessed type int dword_AE400_AE3F0();

//SYNCHRONIZED WITH REMC1
void DrawText_5A180_5A690(char* a1, int a2, __int16 a3, unsigned __int8 a4)//22B180_
{
  char* v4; // esi
  int v5; // ebx
  char v6; // ah
  int result; // eax
  unsigned __int16 v8; // ax
  int v9; // edi
  int v10; // eax

  v4 = a1;
  v5 = a2;
  v6 = *a1;
  word_9ADFC = 64;
  if ( !v6 )
  {
    result = a2;
    word_9ADFC = 0;
    return;
  }
  while ( (__int16)v5 < 640 )
  {
    v8 = (unsigned __int8)*v4;
    if ( v8 < 0xAu )
    {
      if ( *v4 )
      {
        if ( v8 != 9 )
          goto LABEL_13;
        goto LABEL_15;
      }
    }
    else if ( (unsigned __int8)*v4 <= 0xAu )
    {
      v5 = a2;
      a3 += GetLetterY_5A3B0_5A8C0();
    }
    else
    {
      if ( v8 < 0xDu )
        goto LABEL_13;
      if ( v8 > 0xDu )
      {
        if ( v8 != 32 )
        {
LABEL_13:
          if ( *v4 )
          {
            v9 = 6 * ((unsigned __int8)*v4 + 1);
            DrawLetter_58768_58C78(v5, a3, (TypeTab*)(v9 + (int)dword_AE44C_AE43C), a4);
            HIWORD(v10) = HIWORD(dword_AE44C_AE43C);
            LOWORD(v10) = *(unsigned __int8 *)(v9 + dword_AE44C_AE43C + 4);
LABEL_16:
            v5 += v10;
            goto LABEL_17;
          }
        }
LABEL_15:
        LOWORD(v10) = GetLetterX_5A3A0_5A8B0();
        goto LABEL_16;
      }
    }
LABEL_17:
    if ( !*++v4 )
      break;
  }
  result = v5;
  word_9ADFC = 0;
}

//----- (0005A8B0) --------------------------------------------------------
__int16 GetLetterX_5A3A0_5A8B0()
{
  return *(unsigned __int8 *)(dword_AE44C_AE43C + 202);
}
// AE43C: using guessed type int dword_AE44C_AE43C;

//----- (0005A8C0) --------------------------------------------------------
__int16 GetLetterY_5A3B0_5A8C0()
{
  return *(unsigned __int8 *)(dword_AE44C_AE43C + 203);
}
// AE43C: using guessed type int dword_AE44C_AE43C;

void sub_5A3C0_5A8D0(int fontIndex)
{
    if (!dword_AE3B8_2[fontIndex]->bTab)//fix !!!!
        dword_AE44C_AE43C = dword_AE3B8_2[0]->bTab;
    else
        dword_AE44C_AE43C = dword_AE3B8_2[fontIndex]->bTab;
    /*if (!begFont0Tab_AE3B8_AE3A8_26C3B8_26C3A8[fontIndex])
        begFont0Tab_AE3B8_AE3A8_26C3B8_26C3A8[fontIndex] = begFont0Tab_AE3B8_AE3A8_26C3B8_26C3A8[0];
    dword_AE44C_AE43C = begFont0Tab_AE3B8_AE3A8_26C3B8_26C3A8[fontIndex];*/
}

//----- (0005A8F3) --------------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_5A8F3(
        int a1,
        int a2,
        int a3,
        int a4,
        int a5,
        int a6,
        int a7)
{
  int v7; // [esp-4h] [ebp-4h] BYREF
  //fix
  /*
  ((void (*)(_DWORD, _DWORD, _DWORD, _DWORD, int, int, int, int, int *, int, int, int))_GETDS)(
    (unsigned __int16)__GS__,
    (unsigned __int16)__FS__,
    (unsigned __int16)__ES__,
    (unsigned __int16)__DS__,
    a1,
    a2,
    a3,
    a4,
    &v7,
    a5,
    a6,
    a7);*/
}
// 5A968: positive sp value 4 has been found
// 62965: using guessed type _DWORD outp(_DWORD, char);
// 62970: using guessed type _DWORD __far chain_intr(_DWORD);
// AC5C4: using guessed type int dword_AC5D4_AC5C4;
// AE3F8: using guessed type int dword_AE408_AE3F8();

//----- (0005A969) --------------------------------------------------------
int sub_5A459_5A969()
{
  int v2; // eax
  int result; // eax

  *(_DWORD *)(dword_AE408_AE3F8() + 206) = 9903;
  *(_DWORD *)(dword_AE408_AE3F8() + 210) = 0;
  v2 = dos_getvect(8);
  word_12EBF4 = 0;//fix a2;
  dword_12EBF0 = v2;
  outp(67, 54);
  outp(64, *(_DWORD *)(dword_AE408_AE3F8() + 206));
  outp(64, BYTE1(*(_DWORD *)(dword_AE408_AE3F8() + 206)));
  result = dos_setvect(8, (uint32)sub_5A8F3, (unsigned __int16)__CS__);
  byte_9AD04 = 1;
  return result;
}
// 62965: using guessed type _DWORD outp(_DWORD, char);
// 62991: using guessed type _DWORD dos_getvect(_DWORD);
// 629C5: using guessed type _DWORD dos_setvect(_DWORD, _DWORD, _DWORD);
// 9AD04: using guessed type char byte_9AD04;
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 12EBF0: using guessed type int dword_12EBF0;
// 12EBF4: using guessed type __int16 word_12EBF4;

//----- (0005A9FA) --------------------------------------------------------
void sub_5A4EA_5A9FA()
{
    FixPerifery();

  if ( byte_9AD04 == 1 )
  {
    outp(67, 54);
    outp(64, 0);
    outp(64, 0);
    dos_setvect(8, dword_12EBF0, (unsigned __int16)word_12EBF4);
  }
  byte_9AD04 = 0;
}
// 62965: using guessed type _DWORD outp(_DWORD, char);
// 629C5: using guessed type _DWORD dos_setvect(_DWORD, _DWORD, _DWORD);
// 9AD04: using guessed type char byte_9AD04;
// 12EBF0: using guessed type int dword_12EBF0;
// 12EBF4: using guessed type __int16 word_12EBF4;

//----- (0005AA70) --------------------------------------------------------
int sub_5A560_5AA70()
{
  __int16 v0; // bx
  __int16 v1; // bx
  __int16 v2; // bx
  __int16 v3; // bx
  __int16 v4; // bx
  __int16 v5; // bx
  __int16 v6; // bx
  __int16 v7; // bx
  __int16 v8; // bx
  __int16 v9; // bx
  __int16 v10; // bx
  __int16 v11; // bx
  __int16 v12; // bx
  __int16 v13; // bx
  __int16 v14; // bx
  __int16 v15; // bx
  __int16 v16; // bx
  __int16 v17; // bx
  __int16 v18; // bx
  __int16 v19; // bx
  int v20; // eax
  __int16 v21; // bx
  __int16 v22; // bx
  __int16 v23; // bx
  __int16 v24; // bx
  __int16 v25; // bx
  int *v26; // edi
  __int16 v27; // si
  int i; // ebx
  unsigned __int8 v29; // al
  int v30; // eax
  int result; // eax
  char v32[272]; // [esp+0h] [ebp-110h] BYREF

  if ( (*(_BYTE *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13328) & 8) != 0 )
  {
    sub_5A3C0_5A8D0(1);
    DrawText_5A180_5A690((char*)aProductName, 320, 0, byte_AD167_AD157[3841]);
    v0 = GetLetterY_5A3B0_5A8C0();
    DrawText_5A180_5A690((char*)"Magic Carpet", 320, v0, byte_AD167_AD157[16]);
    v1 = GetLetterY_5A3B0_5A8C0() + v0;
    DrawText_5A180_5A690((char*)aVersionNumber, 320, v1, byte_AD167_AD157[3841]);
    v2 = GetLetterY_5A3B0_5A8C0() + v1;
    DrawText_5A180_5A690((char*)aBetaV80, 320, v2, byte_AD167_AD157[16]);
    v3 = GetLetterY_5A3B0_5A8C0() + v2;
    DrawText_5A180_5A690((char*)aVersionDate, 320, v3, byte_AD167_AD157[3841]);
    v4 = GetLetterY_5A3B0_5A8C0() + v3;
    sprintf(v32, "%s %s", a161643, aJun051995);
    DrawText_5A180_5A690((char*)v32, 320, v4, byte_AD167_AD157[16]);
    v5 = GetLetterY_5A3B0_5A8C0() + v4;
    DrawText_5A180_5A690((char*)aProgrammer, 320, v5, byte_AD167_AD157[3841]);
    v6 = GetLetterY_5A3B0_5A8C0() + v5;
    DrawText_5A180_5A690((char*)aBullfrogSeanCo, 320, v6, byte_AD167_AD157[16]);
    v7 = GetLetterY_5A3B0_5A8C0() + v6;
    DrawText_5A180_5A690((char*)aSuppliedTo, 320, v7, byte_AD167_AD157[3841]);
    v8 = GetLetterY_5A3B0_5A8C0() + v7;
    DrawText_5A180_5A690((char*)aPublic, 320, v8, byte_AD167_AD157[16]);
    v9 = GetLetterY_5A3B0_5A8C0() + v8;
    DrawText_5A180_5A690((char*)aLevelNumber, 320, v9, byte_AD167_AD157[3841]);
    v10 = GetLetterY_5A3B0_5A8C0() + v9;
    sprintf(v32, "%d", *(unsigned __int16 *)(dword_AE408_AE3F8() + 17));
    DrawText_5A180_5A690((char*)v32, 320, v10, byte_AD167_AD157[16]);
    v11 = GetLetterY_5A3B0_5A8C0() + v10;
    if ( (*(_BYTE *)dword_AE408_AE3F8() & 0x10) != 0 )
    {
      DrawText_5A180_5A690((char*)aTransferRate, 320, v11, byte_AD167_AD157[3841]);
      v12 = GetLetterY_5A3B0_5A8C0() + v11;
      sprintf(v32, "%d", *(_DWORD *)(dword_AE408_AE3F8() + 157));
      DrawText_5A180_5A690((char*)v32, 320, v12, byte_AD167_AD157[16]);
      v11 = GetLetterY_5A3B0_5A8C0() + v12;
    }
    DrawText_5A180_5A690((char*)aGameturn, 320, v11, byte_AD167_AD157[3841]);
    v13 = GetLetterY_5A3B0_5A8C0() + v11;
    sprintf(v32, "%d", *(_DWORD *)(dword_AE408_AE3F8() + 153));
    DrawText_5A180_5A690((char*)v32, 320, v13, byte_AD167_AD157[16]);
    v14 = GetLetterY_5A3B0_5A8C0() + v13;
    DrawText_5A180_5A690((char*)aSoundNumber, 320, v14, byte_AD167_AD157[3841]);
    v15 = GetLetterY_5A3B0_5A8C0() + v14;
    sprintf(v32, "%d", (unsigned __int8)byte_939EC);
    DrawText_5A180_5A690((char*)v32, 320, v15, byte_AD167_AD157[16]);
    v16 = GetLetterY_5A3B0_5A8C0() + v15;
    DrawText_5A180_5A690((char*)aGameTurn, 320, v16, byte_AD167_AD157[3841]);
    v17 = GetLetterY_5A3B0_5A8C0() + v16;
    sprintf(v32, "%d %d", *(_DWORD *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13341), dword_AC5D4_AC5C4);
    DrawText_5A180_5A690((char*)v32, 320, v17, byte_AD167_AD157[16]);
    v18 = GetLetterY_5A3B0_5A8C0() + v17;
    DrawText_5A180_5A690((char*)aThing, 320, v18, byte_AD167_AD157[3841]);
    v19 = GetLetterY_5A3B0_5A8C0() + v18;
    v20 = sub_37AD0();
    sprintf(v32, "Thing %d, Active %d", 164, 1000 - v20);
    DrawText_5A180_5A690((char*)v32, 320, v19, byte_AD167_AD157[16]);
    v21 = GetLetterY_5A3B0_5A8C0() + v19;
    sprintf(v32, "Carpet %d", byte_38D09);
    DrawText_5A180_5A690((char*)v32, 320, v21, byte_AD167_AD157[16]);
    v22 = GetLetterY_5A3B0_5A8C0() + v21;
    sprintf(v32, "Tape %d", 36478);
    DrawText_5A180_5A690((char*)v32, 320, v22, byte_AD167_AD157[16]);
    v23 = GetLetterY_5A3B0_5A8C0() + v22;
    sprintf(v32, "Heap %d", *(_DWORD *)(dword_AE408_AE3F8() + 172));
    DrawText_5A180_5A690((char*)v32, 320, v23, byte_AD167_AD157[16]);
    v24 = GetLetterY_5A3B0_5A8C0() + v23;
    sub_63338_63848();
    DrawText_5A180_5A690((char*)aMemoryUsedFree, 320, v24, byte_AD167_AD157[3841]);
    v25 = GetLetterY_5A3B0_5A8C0() + v24;
    sprintf(v32, "%d/%d", dword_131498, dword_131494);
    DrawText_5A180_5A690((char*)v32, 320, v25, byte_AD167_AD157[16]);
    GetLetterY_5A3B0_5A8C0();
    v26 = &dword_1302A0_130290;
    v27 = 0;
    for ( i = 0; v26; v26 = (int *)v26[2] )
    {
      sprintf(v32, "s%7.7d,u%01d", v26[1], *((unsigned __int8 *)v26 + 16));
      if ( dword_12F6A4_12F694[3 * *((unsigned __int8 *)v26 + 17)] )
        v29 = byte_AD167_AD157[1];
      else
        v29 = byte_AD167_AD157[3841];
      DrawText_5A180_5A690((char*)v32, v27, i, v29);
      LOWORD(v30) = GetLetterY_5A3B0_5A8C0();
      i += v30;
      if ( (__int16)i > 400 - GetLetterY_5A3B0_5A8C0() )
      {
        i = 0;
        v27 += 12 * GetLetterX_5A3A0_5A8B0();
      }
    }
  }
  result = dword_AE408_AE3F8();
  if ( *(_DWORD *)(dword_AE408_AE3F8() + 25) == 16273849 )
    *(_BYTE *)(dword_AE408_AE3F8() + 24) |= 2u;
  return result;
}
// 5B12C: variable 'v30' is possibly undefined
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 939EC: using guessed type char byte_939EC;
// AC5C4: using guessed type int dword_AC5D4_AC5C4;
// AD167: using guessed type char byte_AD167;
// AE058: using guessed type char byte_AE058;
// AE3F0: using guessed type int dword_AE400_AE3F0();
// AE3F8: using guessed type int dword_AE408_AE3F8();
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;
// 12F694: using guessed type int dword_12F6A4_12F694[];
// 130290: using guessed type int dword_1302A0_130290;
// 131494: using guessed type int dword_131494;
// 131498: using guessed type int dword_131498;

void DrawStartGameTexts_5ACA0_5B1B0()//22bca0_
{
  printf("Copyright (c) 1995 Bullfrog Productions Ltd.\n");
  printf("All rights reserved.\n");
  printf("%s \n", "Magic Carpet");
}

void DrawTextLine_5AD10_5B220(char* text)//22bd10_22c220
{
  if ( (str_AE408_AE3F8->var_u8_1 & 1) != 0 )
    printf("%s\n", text);
}

//----- (0005B240) --------------------------------------------------------

int sub_5AD30_5B240()
{
  int v0; // ebx
  int v1; // esi

  v0 = 96;
  v1 = 24576;
  do
  {
    memset(&unk_12EE94, 0, 50);
    dword_12EEB0 = v1 | 0x7F;
    dword_12EEA4 = 0;
    dword_12EEAC = 0;
    dword_12EEA8 = 0;
    sub_5B8F0((int)&unk_12EE94);
    if ( (v0 | 0x7F00) == dword_12EEB0 )
      return v1 & 0xFF00;
    ++v0;
    v1 += 256;
  }
  while ( v0 <= 112 );
  return 0;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 12EEA4: using guessed type int dword_12EEA4;
// 12EEA8: using guessed type int dword_12EEA8;
// 12EEAC: using guessed type int dword_12EEAC;
// 12EEB0: using guessed type int dword_12EEB0;

//----- (0005B2C0) --------------------------------------------------------
int sub_5ADB0_5B2C0(int a1, int32_t* a2, char* a3)
{
  int v3; // ebx
  int v4; // eax
  _BYTE *v5; // eax

  v3 = 0;
  memset(&unk_12EE94, 0, 50);
  v4 = a1;
  LOBYTE(v4) = a1 | 3;
  dword_12EEAC = 0;
  dword_12EEB0 = v4;
  dword_12EEA8 = 0;
  word_12EEB6 = word_12EED8_12EEC8;
  sub_5B8F0((int)&unk_12EE94);
  v5 = (_BYTE *)dword_12EE98_12EE88;
  if ( dword_12EEAC > 0 )
  {
    do
    {
      *a3++ = *v5;
      ++v3;
      ++v5;
    }
    while ( v3 < dword_12EEAC );
  }
  *a2 = dword_12EEAC;
  return dword_12EEB0;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 12EE88: using guessed type int dword_12EE98_12EE88;
// 12EEA8: using guessed type int dword_12EEA8;
// 12EEAC: using guessed type int dword_12EEAC;
// 12EEB0: using guessed type int dword_12EEB0;
// 12EEB6: using guessed type __int16 word_12EEB6;
// 12EEC8: using guessed type __int16 word_12EED8_12EEC8;

//----- (0005B340) --------------------------------------------------------
int sub_5AE30_5B340(int a1, char *a2)
{
  int v2; // edx
  char *v3; // eax
  char v4; // bl
  int v5; // eax

  v2 = dword_12EE98_12EE88;
  v3 = a2;
  do
  {
    ++v2;
    v4 = *v3++;
    *(_BYTE *)(v2 - 1) = v4;
  }
  while ( v3 != a2 + 256 );
  memset(&unk_12EE94, 0, 50);
  v5 = a1;
  LOBYTE(v5) = a1 | 4;
  dword_12EEAC = 0;
  dword_12EEB0 = v5;
  dword_12EEA8 = 0;
  word_12EEB6 = word_12EED8_12EEC8;
  sub_5B8F0((int)&unk_12EE94);
  return dword_12EEB0;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 12EE88: using guessed type int dword_12EE98_12EE88;
// 12EEA8: using guessed type int dword_12EEA8;
// 12EEAC: using guessed type int dword_12EEAC;
// 12EEB0: using guessed type int dword_12EEB0;
// 12EEB6: using guessed type __int16 word_12EEB6;
// 12EEC8: using guessed type __int16 word_12EED8_12EEC8;

//----- (0005B3C0) --------------------------------------------------------
int sub_5AEB0_5B3C0(int a1, int32_t* a2, char* a3)
{
  int v3; // ebx
  int v4; // eax
  _BYTE *v5; // eax

  v3 = 0;
  memset(&unk_12EE94, 0, 50);
  v4 = a1;
  LOBYTE(v4) = a1 | 5;
  dword_12EEAC = 0;
  dword_12EEB0 = v4;
  dword_12EEA8 = 0;
  word_12EEB6 = word_12EED8_12EEC8;
  sub_5B8F0((int)&unk_12EE94);
  v5 = (_BYTE *)dword_12EE98_12EE88;
  if ( dword_12EEAC > 0 )
  {
    do
    {
      *a3++ = *v5;
      ++v3;
      ++v5;
    }
    while ( v3 < dword_12EEAC );
  }
  *a2 = dword_12EEAC;
  return dword_12EEB0;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 12EE88: using guessed type int dword_12EE98_12EE88;
// 12EEA8: using guessed type int dword_12EEA8;
// 12EEAC: using guessed type int dword_12EEAC;
// 12EEB0: using guessed type int dword_12EEB0;
// 12EEB6: using guessed type __int16 word_12EEB6;
// 12EEC8: using guessed type __int16 word_12EED8_12EEC8;

int InitVfx_5AF50_5B460()
{
	char* v4;
	char* v16;
	memset(word_12EE9C_12EE8C, 0, 6);
	memset(&str_12EEDA_12EECA, 0, 7);
	dword_12EE98_12EE88 = sub_5B480_5B990(256, &word_12EED8_12EEC8, &word_12EED6_12EEC6);
	if (!dword_12EE98_12EE88)
		return 0;
	char* vipEnv = getenv("VIPPORT");
	if (vipEnv)
	{
		dword_12EE94_12EE84 = sub_6660D_66B1D(vipEnv, &v16, 16);
		dword_12EE24_12EE14 = dword_12EE94_12EE84 + 1;
		dword_12EE10_12EE00 = sub_5AD30_5B240();
		if (!dword_12EE10_12EE00 || sub_5ADB0_5B2C0(dword_12EE10_12EE00, &dword_12EE18_12EE08, byte_12EC10_12EC00))
		{
			sub_5B3B0_5B8C0();
			return 0;
		}
		dword_12EE14_12EE04 = 0;
		dword_12EE2C_12EE1C = 0;
		dword_12EE1C_12EE0 = 0;
		for (dword_12EE30_12EE20 = byte_12ED10_12ED00; dword_12EE1C_12EE0 < dword_12EE18_12EE08; dword_12EE1C_12EE0 += dword_12EE28_12EE18)
		{
			dword_12EE28_12EE18 = byte_12EC10_12EC00[dword_12EE1C_12EE0];
			v4 = &byte_12EC10_12EC00[dword_12EE1C_12EE0];
			switch (byte_12EC11_12EC01[dword_12EE1C_12EE0])
			{
			case 0:
				dword_12EE1C_12EE0 = dword_12EE18_12EE08;
				break;
			case 1:
				dword_12EE40_12EE30 = (int)&byte_12EC10_12EC00[dword_12EE1C_12EE0];
				break;
			case 2:
				dword_12EE38_12EE28 = (int)&byte_12EC10_12EC00[dword_12EE1C_12EE0];
                byte_12EEE1_12EED1 = strcmp(v4 + 34, "VFX1 CyberPuck") == 0;
				break;
			case 6:
				if (dword_12EE2C_12EE1C < 6)
				{
					dword_12EE68_12EE58 = (int)&byte_12EC10_12EC00[dword_12EE1C_12EE0];
					*(_WORD*)&byte_12EE6E_12EE5E[6 * dword_12EE2C_12EE1C + 4] = __DS__;
					*(_DWORD*)&byte_12EE6E_12EE5E[6 * dword_12EE2C_12EE1C] = (uint32)dword_12EE30_12EE20;
					dword_12EE2C_12EE1C++;
					dword_12EE30_12EE20 = dword_12EE30_12EE20 + 6;
					if (byte_12EEE1_12EED1)
					{
						v4[22] |= 0x80;
						v4[14] |= 0x80;
						v4[30] |= 0x80;
					}
				}
				break;
			case 7:
				if (dword_12EE14_12EE04 < 6)
				{
					dword_12EE3C_12EE2C = (int)&byte_12EC10_12EC00[dword_12EE1C_12EE0];
					*(_WORD*)&byte_12EE44_12EE34[6 * dword_12EE14_12EE04 + 4] = __DS__;
					*(_DWORD*)&byte_12EE44_12EE34[6 * dword_12EE14_12EE04] = (uint32)dword_12EE30_12EE20;
					dword_12EE14_12EE04++;
					dword_12EE30_12EE20 += 7;
					if (byte_12EEE1_12EED1)
					{
						v4[14] |= 0x80;
						v4[30] |= 0x80;
						v4[22] |= 0x80;
						v4[33] |= 0x80;
					}
				}
				break;
			default:
				continue;
			}
		}
		if (sub_5AE30_5B340(dword_12EE10_12EE00, byte_12EC10_12EC00))
		{
			sub_5B3B0_5B8C0();
			return 0;
		}
		else
		{
			if (dword_12EE2C_12EE1C)
				byte_9AD08 = 1;
			if (dword_12EE14_12EE04)
				byte_9AD09 = 1;
			return 1;
		}
	}
	else
	{
		dword_12EE94_12EE84 = 768;
		sub_5B3B0_5B8C0();
		return 0;
	}
}

//----- (0005B720) --------------------------------------------------------
int sub_5B720()
{
  unsigned __int8 v2; // al

  if ( sub_5AEB0_5B3C0(dword_12EE10_12EE00, &dword_12EE18_12EE08, byte_12ED10_12ED00) )
  {
    sub_5B3B0_5B8C0();
    return 0;
  }
  else
  {
    if ( byte_9AD08 )
    {
      word_12EE9C_12EE8C[0] = __readgsword(*(unsigned int *)byte_12EE6E_12EE5E);
      word_12EE9C_12EE8C[1] = __readgsword(*(_DWORD *)byte_12EE6E_12EE5E + 2);
      word_12EE9C_12EE8C[2] = __readgsword(*(_DWORD*)byte_12EE6E_12EE5E + 4);
    }
    if ( byte_9AD09 )
    {
        str_12EEDA_12EECA.word_0 = __readgsword(*(unsigned int *)byte_12EE44_12EE34);
        str_12EEDA_12EECA.word_2 = __readgsword(*(_DWORD *)byte_12EE44_12EE34 + 2);
        str_12EEDA_12EECA.word_4 = __readgsword(*(_DWORD *)byte_12EE44_12EE34 + 4);
        str_12EEDA_12EECA.byte_6 = __readgsbyte(*(_DWORD*)byte_12EE44_12EE34 + 6);
    }
    return 1;
  }
}
// 9AD08: using guessed type char byte_9AD08;
// 9AD09: using guessed type char byte_9AD09;
// 12ED00: using guessed type _BYTE byte_12ED10_12ED00[256];
// 12EE00: using guessed type int dword_12EE10_12EE00;
// 12EE08: using guessed type int dword_12EE18_12EE08;
// 12EE8C: using guessed type __int16 word_12EE9C_12EE8C;
// 12EE8E: using guessed type __int16 word_12EE8E;
// 12EE90: using guessed type __int16 word_12EE90;
// 12EECA: using guessed type __int16 word_12EEDA_12EECA;
// 12EECC: using guessed type __int16 word_12EECC;
// 12EECE: using guessed type __int16 word_12EECE;
// 12EED0: using guessed type char byte_12EED0;

//----- (0005B7C0) --------------------------------------------------------
int sub_5B7C0()
{
  int result; // eax
  __int16 v1[14]; // [esp+0h] [ebp-1Ch] BYREF

  //fix
  result = 0;
  //fix

  if ( byte_9AD08 )
  {
    memset(v1, 0, sizeof(v1));
    v1[0] = 24584;
    v1[2] = *(unsigned __int8 *)(dword_12EE68_12EE58 + 3) | 0x800;
    return int386(51, (uint32)v1, (uint32)v1);
  }
  return result;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 63488: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 9AD08: using guessed type char byte_9AD08;
// 12EE58: using guessed type int dword_12EE68_12EE58;

//----- (0005B820) --------------------------------------------------------
unsigned __int8 sub_5B310_5B820(int a1, unsigned __int8 *a2)
{
  unsigned __int8 v3; // al
  char v5; // dl
  unsigned __int8 v6; // al
  int v7; // ecx
  unsigned __int8 v8; // al
  unsigned __int8 *v9; // ebx
  unsigned __int8 v10; // al
  unsigned __int8 result; // al

  __outbyte(dword_12EE94_12EE84, 7u);
  __outbyte(dword_12EE24_12EE14, 0xFFu);
  __outbyte(dword_12EE94_12EE84, 6u);
  v3 = __inbyte(dword_12EE24_12EE14);
  v5 = v3 & 0xF8;
  if ( a1 )
  {
    if ( a1 == 1 )
      v6 = v5 | 1;
    else
      v6 = v3 & 0xFA | 4;
  }
  else
  {
    v6 = v5 | 3;
  }
  __outbyte(dword_12EE24_12EE14, v6);
  __outbyte(dword_12EE94_12EE84, 9u);
  __outbyte(dword_12EE24_12EE14, 0);
  v7 = 0;
  __outbyte(dword_12EE94_12EE84, 0xAu);
  do
  {
    v8 = *a2;
    v9 = a2 + 1;
    __outbyte(dword_12EE24_12EE14, v8);
    v10 = *v9++;
    __outbyte(dword_12EE24_12EE14, v10);
    ++v7;
    result = *v9;
    a2 = v9 + 1;
    __outbyte(dword_12EE24_12EE14, result);
  }
  while ( v7 < 256 );
  return result;
}
// 12EE14: using guessed type int dword_12EE24_12EE14;
// 12EE84: using guessed type int dword_12EE94_12EE84;

//----- (0005B8C0) --------------------------------------------------------
int sub_5B3B0_5B8C0()
{
  int result; // eax

  if ( dword_12EE98_12EE88 )
  {
    result = sub_5B960(word_12EED6_12EEC6);
    dword_12EE98_12EE88 = 0;
  }
  return result;
}
// 12EE88: using guessed type int dword_12EE98_12EE88;
// 12EEC6: using guessed type __int16 word_12EED6_12EEC6;

//----- (0005B8F0) --------------------------------------------------------
int sub_5B8F0(int a1)
{
  int v2[7]; // [esp+0h] [ebp-30h] BYREF
  __int16 v3[10]; // [esp+1Ch] [ebp-14h] BYREF

  memset(v3, 0, 12);
  memset(v2, 0, sizeof(v2));
  v2[0] = 768;
  v2[1] = 51;
  v2[2] = 0;
  v2[5] = a1;
  v3[0] = __DS__;
  return int386x(49, (uint32)v2, (uint32)v2, (uint32)v3);
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 63BF6: using guessed type _DWORD int386x(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (0005B960) --------------------------------------------------------
int sub_5B960(__int16 a1)
{
  int v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  v2[3] = a1;
  v2[0] = 257;
  return int386(49, (uint32)v2, (uint32)v2);
}
// 63488: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);

//----- (0005B990) --------------------------------------------------------
int sub_5B480_5B990(int a1, int16_t* a2, int16_t* a3)
{
  int v3; // ebx
  int v5[3]; // [esp+0h] [ebp-34h] BYREF
  int v6; // [esp+Ch] [ebp-28h]
  int v7; // [esp+18h] [ebp-1Ch]
  char v8[24]; // [esp+1Ch] [ebp-18h] BYREF

  //fix
  v6 = 0;
  v7 = 0;
  //fix

  *a2 = 0;
  *a3 = 0;
  segread((uint32)v8);
  v5[0] = 256;
  v5[1] = (unsigned int)(a1 + 15) >> 4;
  int386(49, (uint32)v5, (uint32)v5);
  v3 = 0;
  if ( !v7 )
  {
    *a2 = v5[0];
    *a3 = v6;
    return 16 * *a2;
  }
  return v3;
}
// 63488: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 63BCC: using guessed type _DWORD segread(_DWORD);
// 5B990: using guessed type char var_18[24];

//----- (0005BA10) --------------------------------------------------------
void sub_5B500_5BA10()
{
  __outbyte(0x302u, 2u);
  __outbyte(0x303u, 0x10u);
  memset((void*)begWscreen_2ECFF4_2ECFE4, 0, scrHeight_12EFF8_12EFE8 * scrWidth_12EFF0_12EFE0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 12EFE0: using guessed type int scrWidth_12EFF0_12EFE0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12EFE8: using guessed type int scrHeight_12EFF8_12EFE8;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0005BA70) --------------------------------------------------------
void sub_5BA70()
{
  __outbyte(0x302u, 2u);
  __outbyte(0x303u, 1u);
  memset((void*)begWscreen_2ECFF4_2ECFE4, 0, scrHeight_12EFF8_12EFE8 * scrWidth_12EFF0_12EFE0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 12EFE0: using guessed type int scrWidth_12EFF0_12EFE0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12EFE8: using guessed type int scrHeight_12EFF8_12EFE8;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0005BAF0) --------------------------------------------------------
void sub_5BAF0()
{
  ;
}

//----- (0005BB04) --------------------------------------------------------
void sub_5B5F4_5BB04()
{
  ;
}

//----- (0005BB60) --------------------------------------------------------
void sub_5B650_5BB60()
{
  int result; // eax
  _BYTE *v1; // eax
  _BYTE *v2; // eax

  mouseXY_12EF80_12EF70 = *(uint32_t*)&mouse_9AD90;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    LOWORD(mouseXY_12EF80_12EF70) = (__int16)mouseXY_12EF80_12EF70 >> 1;
    SHIWORD(mouseXY_12EF80_12EF70) >>= 1;
  }
  mouseByteIndex2_12EF8C_12EF7C = ((int)unk_12EF6E >> 16) + (mouseXY_12EF80_12EF70 >> 16) * scrWidth_12EFF0_12EFE0;
  if ( (typeResolution_12F02E_12F01E & 8) != 0 )
  {
    word_12EFC0 = HIWORD(mouseByteIndex2_12EF8C_12EF7C);
    sub_61A1C_61F2C(SHIWORD(mouseByteIndex2_12EF8C_12EF7C));
  }
  unk_12EF84_12EF74 = scrWidth_12EFF0_12EFE0 - mouseXY_12EF80_12EF70;
  if ( (__int16)(scrWidth_12EFF0_12EFE0 - mouseXY_12EF80_12EF70) > word_12EFC4_12EFB4 )
    unk_12EF84_12EF74 = word_12EFC4_12EFB4;
  word_12EF86_12EF76 = scrHeight_12EFF8_12EFE8 - HIWORD(mouseXY_12EF80_12EF70);
  if ( (__int16)(scrHeight_12EFF8_12EFE8 - HIWORD(mouseXY_12EF80_12EF70)) > word_12EFC6_12EFB6 )
    word_12EF86_12EF76 = word_12EFC6_12EFB6;
  dword_12EFA8_12EF98 = dword_12EF88_12EF78;
  dword_12EFA4_12EF94 = (int)&tempScreenBuffer_A0000 + (unsigned __int16)mouseByteIndex2_12EF8C_12EF7C;
  dword_12EFA0_12EF90 = dword_12EFC8_12EFB8;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    for ( word_12EFD4_12EFC4 = 0; ; ++word_12EFD4_12EFC4 )
    {
      result = (int)unk_12EF84_12EF74 >> 16;
      if ( (unsigned __int16)word_12EFD4_12EFC4 >= (int)unk_12EF84_12EF74 >> 16 )
        break;
      for ( word_12EFD2_12EFC2 = 0; (unsigned __int16)word_12EFD2_12EFC2 < *(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16; ++word_12EFD2_12EFC2 )
      {
        v1 = (_BYTE *)dword_12EFA8_12EF98++;
        *v1 = *(_BYTE *)dword_12EFA4_12EF94;
        if ( *(_BYTE *)dword_12EFA0_12EF90 != 0xFE )
          *(_BYTE *)dword_12EFA4_12EF94 = *(_BYTE *)dword_12EFA0_12EF90;
        ++dword_12EFA4_12EF94;
        ++dword_12EFA0_12EF90;
      }
      dword_12EFA4_12EF94 += scrWidth_12EFF0_12EFE0 - (*(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16);
      dword_12EFA0_12EF90 += (*(int *)((char *)&dword_12EFC8_12EFB8 + 2) >> 16) - (*(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16);
    }
  }
  else
  {
    for ( word_12EFD4_12EFC4 = 0; ; ++word_12EFD4_12EFC4 )
    {
      result = (int)unk_12EF84_12EF74 >> 16;
      if ( (unsigned __int16)word_12EFD4_12EFC4 >= (int)unk_12EF84_12EF74 >> 16 )
        break;
      for ( word_12EFD2_12EFC2 = 0; (unsigned __int16)word_12EFD2_12EFC2 < *(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16; ++word_12EFD2_12EFC2 )
      {
        v2 = (_BYTE *)dword_12EFA8_12EF98++;
        *v2 = *(_BYTE *)dword_12EFA4_12EF94;
        if ( *(_BYTE *)dword_12EFA0_12EF90 != 0xFE )
          *(_BYTE *)dword_12EFA4_12EF94 = *(_BYTE *)dword_12EFA0_12EF90;
        if ( ++dword_12EFA4_12EF94 >= (unsigned int)&unk_B0000 )
        {
          sub_61A1C_61F2C(++word_12EFC0);
          dword_12EFA4_12EF94 -= (int)sub_10000;
        }
        ++dword_12EFA0_12EF90;
      }
      dword_12EFA4_12EF94 += scrWidth_12EFF0_12EFE0 - (*(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16);
      if ( dword_12EFA4_12EF94 >= (unsigned int)&unk_B0000 )
      {
        sub_61A1C_61F2C(++word_12EFC0);
        dword_12EFA4_12EF94 -= (int)sub_10000;
      }
      dword_12EFA0_12EF90 += (*(int *)((char *)&dword_12EFC8_12EFB8 + 2) >> 16) - (*(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16);
    }
  }
}
// 10000: using guessed type void sub_10000();
// 9AD90: using guessed type int dword_9AD90;
// 12EF70: using guessed type int mouseXY_12EF80_12EF70;
// 12EF76: using guessed type __int16 word_12EF86_12EF76;
// 12EF78: using guessed type int dword_12EF88_12EF78;
// 12EF7C: using guessed type int mouseByteIndex2_12EF8C_12EF7C;
// 12EF90: using guessed type int dword_12EFA0_12EF90;
// 12EF94: using guessed type int dword_12EFA4_12EF94;
// 12EF98: using guessed type int dword_12EFA8_12EF98;
// 12EFB4: using guessed type __int16 word_12EFC4_12EFB4;
// 12EFB6: using guessed type __int16 word_12EFC6_12EFB6;
// 12EFB8: using guessed type int dword_12EFC8_12EFB8;
// 12EFBC: using guessed type int dword_12EFCC_12EFBC;
// 12EFC0: using guessed type __int16;
// 12EFC2: using guessed type __int16 word_12EFD2_12EFC2;
// 12EFC4: using guessed type __int16 word_12EFD4_12EFC4;
// 12EFE0: using guessed type int scrWidth_12EFF0_12EFE0;
// 12EFE8: using guessed type int scrHeight_12EFF8_12EFE8;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//SYNC WITH REMC1
void sub_5B95C_5BE6C()
{
  int result; // eax
  _BYTE *v1; // eax
  _BYTE *v2; // edx

  //mouse_9AD90.x = 100;
  //mouse_9AD90.y = 100;

  mouseXY2_12EF90_12EF80 = mouse_9AD90;
  mouseXY_12EF80_12EF70 = *(uint32_t*)&mouse_9AD90;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    mouseXY2_12EF90_12EF80.x >>= 1;
    mouseXY2_12EF90_12EF80.y >>= 1;
  }
  dword_12EF9C_12EF8C = mouseXY2_12EF90_12EF80.x + mouseXY2_12EF90_12EF80.y * scrWidth_12EFF0_12EFE0;
  mouseByteIndex2_12EF8C_12EF7C = dword_12EF9C_12EF8C;
  LOWORD(dword_12EF94_12EF84) = scrWidth_12EFF0_12EFE0 - mouseXY2_12EF90_12EF80.x;
  if ( (__int16)(scrWidth_12EFF0_12EFE0 - mouseXY2_12EF90_12EF80.x) > word_12EFC4_12EFB4 )
    LOWORD(dword_12EF94_12EF84) = word_12EFC4_12EFB4;
  unk_12EF84_12EF74 = *(int*)&dword_12EF94_12EF84;
  HIWORD(dword_12EF94_12EF84) = scrHeight_12EFF8_12EFE8 - mouseXY2_12EF90_12EF80.y;
  if ( (__int16)(scrHeight_12EFF8_12EFE8 - mouseXY2_12EF90_12EF80.y) > word_12EFC6_12EFB6 )
    HIWORD(dword_12EF94_12EF84) = word_12EFC6_12EFB6;
  word_12EF86_12EF76 = HIWORD(dword_12EF94_12EF84);
  dword_12EFA8_12EF98 = dword_12EF98_12EF88;
  dword_12EFAC_12EF9C = dword_12EF88_12EF78;
  dword_12EFA4_12EF94 = dword_12EF9C_12EF8C + (int)begWscreen_2ECFF4_2ECFE4;
  dword_12EFA0_12EF90 = (int)dword_12EFC8_12EFB8;
  for ( word_12EFD4_12EFC4 = 0; ; ++word_12EFD4_12EFC4 )
  {
    result = *(int*)&dword_12EF94_12EF84 >> 16;
    if ( (unsigned __int16)word_12EFD4_12EFC4 >= dword_12EF94_12EF84.y)
      break;
    for ( word_12EFD2_12EFC2 = 0; (unsigned __int16)word_12EFD2_12EFC2 < dword_12EF94_12EF84.x; ++word_12EFD2_12EFC2 )
    {
      v1 = (_BYTE *)dword_12EFA8_12EF98++;
      *v1 = *(_BYTE *)dword_12EFA4_12EF94;
      v2 = (_BYTE *)dword_12EFAC_12EF9C++;
      *v2 = *(_BYTE *)dword_12EFA4_12EF94;
      if ( *(_BYTE *)dword_12EFA0_12EF90 != 0xFE )
        *(_BYTE *)dword_12EFA4_12EF94 = *(_BYTE *)dword_12EFA0_12EF90;
      ++dword_12EFA4_12EF94;
      ++dword_12EFA0_12EF90;
    }
    dword_12EFA4_12EF94 += scrWidth_12EFF0_12EFE0 - dword_12EF94_12EF84.x;
    dword_12EFA0_12EF90 += dword_12EFCC_12EFBC.x - dword_12EF94_12EF84.x;
  }
}

//----- (0005C070) --------------------------------------------------------
void sub_5BB60_5C070()
{
  int result; // eax
  _BYTE *v1; // eax
  _BYTE *v2; // edx
  _BYTE *v3; // eax
  _BYTE *v4; // edx

  if ( (typeResolution_12F02E_12F01E & 1) == 0 )
  {
    word_12EFC0 = HIWORD(mouseByteIndex2_12EF8C_12EF7C);
    sub_61A1C_61F2C(SHIWORD(mouseByteIndex2_12EF8C_12EF7C));
  }
  dword_12EFA8_12EF98 = dword_12EF88_12EF78;
  dword_12EFA4_12EF94 = (int)&tempScreenBuffer_A0000 + (unsigned __int16)mouseByteIndex2_12EF8C_12EF7C;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    for ( word_12EFD4_12EFC4 = 0; ; ++word_12EFD4_12EFC4 )
    {
      result = (int)unk_12EF84_12EF74 >> 16;
      if ( (unsigned __int16)word_12EFD4_12EFC4 >= (int)unk_12EF84_12EF74 >> 16 )
        break;
      for ( word_12EFD2_12EFC2 = 0; (unsigned __int16)word_12EFD2_12EFC2 < *(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16; ++word_12EFD2_12EFC2 )
      {
        v1 = (_BYTE *)dword_12EFA8_12EF98++;
        v2 = (_BYTE *)dword_12EFA4_12EF94++;
        *v2 = *v1;
      }
      dword_12EFA4_12EF94 += scrWidth_12EFF0_12EFE0 - (*(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16);
    }
  }
  else
  {
    for ( word_12EFD4_12EFC4 = 0; ; ++word_12EFD4_12EFC4 )
    {
      result = (int)unk_12EF84_12EF74 >> 16;
      if ( (unsigned __int16)word_12EFD4_12EFC4 >= (int)unk_12EF84_12EF74 >> 16 )
        break;
      for ( word_12EFD2_12EFC2 = 0; (unsigned __int16)word_12EFD2_12EFC2 < *(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16; ++word_12EFD2_12EFC2 )
      {
        v3 = (_BYTE *)dword_12EFA8_12EF98++;
        v4 = (_BYTE *)dword_12EFA4_12EF94++;
        *v4 = *v3;
        if ( dword_12EFA4_12EF94 >= (unsigned int)&unk_B0000 )
        {
          sub_61A1C_61F2C(++word_12EFC0);
          dword_12EFA4_12EF94 -= (int)sub_10000;
        }
      }
      dword_12EFA4_12EF94 += scrWidth_12EFF0_12EFE0 - (*(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16);
      if ( dword_12EFA4_12EF94 >= (unsigned int)&unk_B0000 )
      {
        sub_61A1C_61F2C(++word_12EFC0);
        dword_12EFA4_12EF94 -= (int)sub_10000;
      }
    }
  }
}
// 10000: using guessed type void sub_10000();
// 12EF70: using guessed type int mouseXY_12EF80_12EF70;
// 12EF78: using guessed type int dword_12EF88_12EF78;
// 12EF7C: using guessed type int mouseByteIndex2_12EF8C_12EF7C;
// 12EF94: using guessed type int dword_12EFA4_12EF94;
// 12EF98: using guessed type int dword_12EFA8_12EF98;
// 12EFBC: using guessed type int dword_12EFCC_12EFBC;
// 12EFC0: using guessed type __int16 word_12EFC0;
// 12EFC2: using guessed type __int16 word_12EFD2_12EFC2;
// 12EFC4: using guessed type __int16 word_12EFD4_12EFC4;
// 12EFE0: using guessed type int scrWidth_12EFF0_12EFE0;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0005C250) --------------------------------------------------------
int sub_5C250()
{
  int result; // eax
  _BYTE *v1; // eax
  _BYTE *v2; // edx

  dword_12EFA8_12EF98 = dword_12EF98_12EF88;
  dword_12EFA4_12EF94 = dword_12EF9C_12EF8C + (int)begWscreen_2ECFF4_2ECFE4;
  for ( word_12EFD4_12EFC4 = 0; ; ++word_12EFD4_12EFC4 )
  {
    result = *(int*)&dword_12EF94_12EF84 >> 16;
    if ( (unsigned __int16)word_12EFD4_12EFC4 >= dword_12EF94_12EF84.y)
      break;
    for ( word_12EFD2_12EFC2 = 0; (unsigned __int16)word_12EFD2_12EFC2 < *(int *)((char *)&mouseXY2_12EF90_12EF80 + 2) >> 16; ++word_12EFD2_12EFC2 )
    {
      v1 = (_BYTE *)dword_12EFA8_12EF98++;
      v2 = (_BYTE *)dword_12EFA4_12EF94++;
      *v2 = *v1;
    }
    dword_12EFA4_12EF94 += scrWidth_12EFF0_12EFE0 - (*(int *)((char *)&mouseXY2_12EF90_12EF80 + 2) >> 16);
  }
  return result;
}
// 12EF80: using guessed type int mouseXY2_12EF90_12EF80;
// 12EF84: using guessed type int dword_12EF94_12EF84;
// 12EF88: using guessed type int dword_12EF98_12EF88;
// 12EF8C: using guessed type int dword_12EF9C_12EF8C;
// 12EF94: using guessed type int dword_12EFA4_12EF94;
// 12EF98: using guessed type int dword_12EFA8_12EF98;
// 12EFC2: using guessed type __int16 word_12EFD2_12EFC2;
// 12EFC4: using guessed type __int16 word_12EFD4_12EFC4;
// 12EFE0: using guessed type int scrWidth_12EFF0_12EFE0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

void sub_5BDF8_5C308()
{
  if ( dword_9AD98 )
  {
    dword_9AD88 = 1;
    sub_5B95C_5BE6C();
  }
}

//----- (0005C360) --------------------------------------------------------
void sub_5BE50_5C360()
{
  dword_9AD88 = 0;
}
// 9AD88: using guessed type int dword_9AD88;

//----- (0005C37C) --------------------------------------------------------
void sub_5C37C()
{
  //fix ((void (*)(_DWORD))_GETDS)((unsigned __int16)__DS__);
}
// 5C37C: using guessed type void sub_5C37C();

//----- (0005C56C) --------------------------------------------------------
void sub_5C05C_5C56C(TypeTab* a1x)
{
  int result; // eax
  unsigned int i; // [esp+0h] [ebp-10h]
  int v3; // [esp+4h] [ebp-Ch]
  __int16 v4; // [esp+8h] [ebp-8h]
  int v5; // [esp+Ch] [ebp-4h]

  dword_9AD88 = 1;
  v5 = (int)begWscreen_2ECFF4_2ECFE4;
  begWscreen_2ECFF4_2ECFE4 = (uint8_t*)dword_12EFC8_12EFB8;
  if ( a1x )
  {
    word_12EFC4_12EFB4 = a1x->dim.x;
    word_12EFC6_12EFB6 = a1x->dim.y;
  }
  else
  {
    word_12EFC4_12EFB4 = 0;
    word_12EFC6_12EFB6 = 0;
  }
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    word_12EFC4_12EFB4 >>= 1;
    word_12EFC6_12EFB6 >>= 1;
  }
  dword_12F004 = dword_12F018_12F008;
  dword_12EFFC = dword_12F000;
  dword_12EFF4 = dword_12F008_12EFF8;
  dword_12F00C = dword_12F024_12F014;
  dword_12EFEC = dword_12F000_12EFF0;
  dword_12F010 = dword_12F028_12F018;
  dword_12F018_12F008 = 0;
  dword_12F000 = 64;
  dword_12F008_12EFF8 = 0;
  dword_12F024_12F014 = 64;
  dword_12F000_12EFF0 = 64;
  dword_12F028_12F018 = 64;
  v4 = word_9ADFC;
  word_9ADFC = 0;
  v3 = scrWidth_12EFF0_12EFE0;
  scrWidth_12EFF0_12EFE0 = 64;
  for ( i = 0; i < 0x1000; ++i )
    *(_BYTE *)(i + dword_12EFC8_12EFB8) = -2;
  if ( a1x )
    DrawBitmap_60CE0_611F0(0, 0, a1x);
  scrWidth_12EFF0_12EFE0 = v3;
  word_9ADFC = v4;
  dword_12F018_12F008 = dword_12F004;
  dword_12F000 = dword_12EFFC;
  dword_12F008_12EFF8 = dword_12EFF4;
  dword_12F024_12F014 = dword_12F00C;
  dword_12F000_12EFF0 = dword_12EFEC;
  dword_12F028_12F018 = dword_12F010;
  result = v5;
  begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v5;
  dword_9AD88 = 0;
}
// 9AD88: using guessed type int dword_9AD88;
// 9ADFC: using guessed type __int16 word_9ADFC;
// 12EFB4: using guessed type __int16 word_12EFC4_12EFB4;
// 12EFB6: using guessed type __int16 word_12EFC6_12EFB6;
// 12EFB8: using guessed type int dword_12EFC8_12EFB8;
// 12EFE0: using guessed type int scrWidth_12EFF0_12EFE0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12EFEC: using guessed type int dword_12EFEC;
// 12EFF0: using guessed type int dword_12F000_12EFF0;
// 12EFF4: using guessed type int dword_12EFF4;
// 12EFF8: using guessed type int dword_12F008_12EFF8;
// 12EFFC: using guessed type int dword_12EFFC;
// 12F000: using guessed type int dword_12F000;
// 12F004: using guessed type int dword_12F004;
// 12F008: using guessed type int dword_12F018_12F008;
// 12F00C: using guessed type int dword_12F00C;
// 12F010: using guessed type int dword_12F010;
// 12F014: using guessed type int dword_12F024_12F014;
// 12F018: using guessed type int dword_12F028_12F018;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0005C724) --------------------------------------------------------
int sub_5C214_5C724()
{
  __int16 v1[14]; // [esp+0h] [ebp-54h] BYREF
  __int16 v2[4]; // [esp+1Ch] [ebp-38h] BYREF
  __int16 v3; // [esp+24h] [ebp-30h]
  int (*v4)(); // [esp+28h] [ebp-2Ch]
  __int16 v5[6]; // [esp+38h] [ebp-1Ch] BYREF
  int (*v6)(); // [esp+44h] [ebp-10h]
  int v7; // [esp+48h] [ebp-Ch]
  int i; // [esp+4Ch] [ebp-8h]

  FixPerifery((char*)"mouseRes");

  dword_9AD98 = 0;
  segread((uint32)v5);
  v2[0] = 0;
  int386(51, (uint32)v2, (uint32)v1);
  //fix
  v1[0] = -1;
  //fix
  if ( v1[0] != -1 )
    return 0;
  v2[0] = 12;
  v3 = 127;
  //fix LOWORD(v7) = __CS__;
  v6 = (int (*)())sub_5C37C;
  v4 = (int (*)())sub_5C37C;
  //fix v5[0] = __CS__;
  FixPerifery((char*)"mouseSubr");
  int386x(51, (uint32)v2, (uint32)v1, (uint32)v5);//Set Mouse User Defined Subroutine and Input Mask
  sub_5C468_5C978();
  if ( !dword_12EFC8_12EFB8 )
    dword_12EFC8_12EFB8 = (int)malloc_42540_42880(4096);
  if ( !dword_12EF98_12EF88 )
    dword_12EF98_12EF88 = (int)malloc_42540_42880(4096);
  if ( !dword_12EF88_12EF78 )
    dword_12EF88_12EF78 = (int)malloc_42540_42880(4096);
  if ( !dword_12EFC8_12EFB8 || !dword_12EF98_12EF88 || !dword_12EF88_12EF78 )
    return 0;
  word_12EFC4_12EFB4 = 0;
  word_12EFC6_12EFB6 = 0;
  LOWORD(dword_12EFCC_12EFBC) = 64;
  for ( i = 0; i < 4096; ++i )
    *(_BYTE *)(i + dword_12EFC8_12EFB8) = -2;
  if ( dword_12EFA4 )
    sub_5C05C_5C56C((TypeTab*)dword_12EFA4);
  v2[0] = 2;
  FixPerifery((char*)"mouseHide");
  int386(51, (uint32)v2, (uint32)v1);//Hide Mouse Cursor
  if ( (typeResolution_12F02E_12F01E & 8) != 0 )
  {
    v2[0] = 15;
    v3 = 1;
    LOWORD(v4) = 1;
    FixPerifery((char*)"mouseSetPix");
    int386(51, (uint32)v2, (uint32)v1);//Set Mouse Mickey Pixel Ratio
  }
  dword_9AD98 = 1;
  return 1;
}
// 5C37C: using guessed type int sub_5C37C();
// 63488: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 63BCC: using guessed type _DWORD segread(_DWORD);
// 63BF6: using guessed type _DWORD int386x(_DWORD, _DWORD, _DWORD, _DWORD);
// 9AD98: using guessed type int dword_9AD98;
// 12EF78: using guessed type int dword_12EF88_12EF78;
// 12EF88: using guessed type int dword_12EF98_12EF88;
// 12EFA4: using guessed type int dword_12EFA4;
// 12EFB4: using guessed type __int16 word_12EFC4_12EFB4;
// 12EFB6: using guessed type __int16 word_12EFC6_12EFB6;
// 12EFB8: using guessed type int dword_12EFC8_12EFB8;
// 12EFBC: using guessed type int dword_12EFCC_12EFBC;
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0005C978) --------------------------------------------------------
int sub_5C468_5C978()
{
  int result; // eax
  char v1[28]; // [esp+0h] [ebp-38h] BYREF
  __int16 v2[4]; // [esp+1Ch] [ebp-1Ch] BYREF
  __int16 v3; // [esp+24h] [ebp-14h]
  __int16 v4; // [esp+28h] [ebp-10h]

  if ( typeResolution_12F02E_12F01E == 8 )
  {
    v2[0] = 7;
    v3 = 0;
    v4 = 5120;
    int386(51, (uint32)v2, (uint32)v1);
    v2[0] = 8;
    v3 = 0;
    v4 = 3840;
    result = int386(51, (uint32)v2, (uint32)v1);
  }
  if ( typeResolution_12F02E_12F01E == 2 )
  {
    v2[0] = 7;
    v3 = 0;
    v4 = 640;
    int386(51, (uint32)v2, (uint32)v1);
    v2[0] = 8;
    v3 = 0;
    v4 = 480;
    result = int386(51, (uint32)v2, (uint32)v1);
  }
  if ( typeResolution_12F02E_12F01E == 4 )
  {
    v2[0] = 7;
    v3 = 0;
    v4 = 640;
    int386(51, (uint32)v2, (uint32)v1);
    v2[0] = 8;
    v3 = 0;
    v4 = 400;
    result = int386(51, (uint32)v2, (uint32)v1);
  }
  if ( typeResolution_12F02E_12F01E == 1 )
  {
    v2[0] = 7;
    v3 = 0;
    v4 = 640;
    int386(51, (uint32)v2, (uint32)v1);
    v2[0] = 8;
    v3 = 0;
    v4 = 400;
    return int386(51, (uint32)v2, (uint32)v1);
  }
  return result;
}
// 63488: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 12F01E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0005CC7B) --------------------------------------------------------
__int16 sub_5CC7B()
{
  __int16 result; // ax

  sub_5D6B0(dword_9ADC0, (int)&word_9ADA8, 2u);
  sub_5D6B0(dword_9ADC0, (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 8u);
  while ( 1 )
  {
    result = word_9ADA8;
    if ( !word_9ADA8 )
      break;
    --word_9ADA8;
    sub_5D6B0(dword_9ADC0, (int)&dword_9ADA4, 4u);
    sub_5D6B0(dword_9ADC0, (int)&word_9AD9C, 2u);
    switch ( word_9AD9C )
    {
      case 7:
        sub_5CE79();
        break;
      case 12:
        sub_5CF50();
        break;
      case 4:
        sub_5CDDD();
        break;
      case 15:
        sub_5CFF7();
        break;
      case 16:
        sub_5CDA1();
        break;
      default:
        sub_5CDBF();
        break;
    }
  }
  return result;
}
// 9AD9C: using guessed type __int16 word_9AD9C;
// 9ADA4: using guessed type int dword_9ADA4;
// 9ADA8: using guessed type __int16 word_9ADA8;
// 9ADC0: using guessed type int dword_9ADC0;
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;

//----- (0005CD3E) --------------------------------------------------------
__int16 sub_5CD3E()
{
  __int16 result; // ax

  sub_5D6B0(dword_9ADC0, (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, dword_9ADA4 - 6);
  dword_9AD9E = *(_DWORD *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  result = *(_WORD *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 4);
  word_9ADA2 = result;
  return result;
}
// 9AD9E: using guessed type int dword_9AD9E;
// 9ADA2: using guessed type __int16 word_9ADA2;
// 9ADA4: using guessed type int dword_9ADA4;
// 9ADC0: using guessed type int dword_9ADC0;
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;

//----- (0005CDA1) --------------------------------------------------------
int sub_5CDA1()
{
  return sub_5D6B0(dword_9ADC0, (int)begWscreen_2ECFF4_2ECFE4, dword_9ADA4 - 6);
}
// 9ADA4: using guessed type int dword_9ADA4;
// 9ADC0: using guessed type int dword_9ADC0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//----- (0005CDBF) --------------------------------------------------------
int sub_5CDBF()
{
  return sub_5D6B0(dword_9ADC0, (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, dword_9ADA4 - 6);
}
// 9ADA4: using guessed type int dword_9ADA4;
// 9ADC0: using guessed type int dword_9ADC0;
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;

//----- (0005CDDD) --------------------------------------------------------
int sub_5CDDD()
{
  int result; // eax

  result = sub_5D6B0(dword_9ADC0, (int)begPalData_AE424_AE414_26C424_26C414, dword_9ADA4 - 6);
  word_9ADFA = 1;
  return result;
}
// 9ADA4: using guessed type int dword_9ADA4;
// 9ADC0: using guessed type int dword_9ADC0;
// 9ADFA: using guessed type __int16 word_9ADFA;
// AE414: using guessed type int begPalData_AE424_AE414_26C424_26C414;

//----- (0005CE04) --------------------------------------------------------
void sub_5CE04()
{
  __int16 v0; // ax
  char *v1; // edi
  _BYTE *v2; // esi
  int v3; // ecx
  char *v4; // edi
  char v5; // dl
  char v6; // al
  char *v7; // edi
  _BYTE *v8; // esi
  char v9; // al
  char v10; // al
  __int16 v11; // [esp-2h] [ebp-6h]

  word_9ADFA = 0;
  if ( dword_9ADBC == 1 )
  {
    v0 = *(_WORD *)begPalData_AE424_AE414_26C424_26C414;
    v1 = (char *)(begPalData_AE424_AE414_26C424_26C414 + 2);
    v2 = (_BYTE *)begPalMem_AE418_AE408_26C418_26C408;
    do
    {
      v11 = v0;
      v3 = (unsigned __int8)*v1;
      v4 = v1 + 1;
      v2 += v3 + v3 + v3;
      v5 = *v4;
      v1 = v4 + 1;
      do
      {
        v6 = *v1;
        v7 = v1 + 1;
        *v2 = v6;
        v8 = v2 + 1;
        v9 = *v7++;
        *v8++ = v9;
        v10 = *v7;
        v1 = v7 + 1;
        *v8 = v10;
        v2 = v8 + 1;
        --v5;
      }
      while ( v5 );
      v0 = v11 - 1;
    }
    while ( v11 != 1 );
    SetPalette_319A0_319E0(begPalMem_AE418_AE408_26C418_26C408);
  }
}
// 9ADBC: using guessed type int dword_9ADBC;
// 9ADFA: using guessed type __int16 word_9ADFA;
// AE408: using guessed type int begPalMem_AE418_AE408_26C418;
// AE414: using guessed type int begPalData_AE424_AE414_26C424_26C414;

//----- (0005CE79) --------------------------------------------------------
__int16 sub_5CE79()
{
  _WORD *v0; // esi
  __int16 *v1; // edi
  __int16 result; // ax
  unsigned __int8 v3; // bl
  _BYTE *v4; // edi
  char v5; // dl
  __int16 v6; // bx
  __int16 v7; // bx
  _WORD *v8; // [esp+0h] [ebp-10h]
  __int16 i; // [esp+6h] [ebp-Ah]
  __int16 v10; // [esp+8h] [ebp-8h]
  int v11; // [esp+Ch] [ebp-4h]

  v11 = (unsigned __int16)MEMORY[0x9ADA0];
  sub_5D6B0(dword_9ADC0, (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, dword_9ADA4 - 6);
  v0 = (_WORD *)begWscreen_2ECFF4_2ECFE4;
  v10 = *(_WORD *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  v1 = (__int16 *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 2);
  do
  {
    while ( 1 )
    {
      result = *v1++;
      v8 = v0;
      if ( result >= 0 )
        goto LABEL_6;
      if ( (result & 0x4000) == 0 )
        break;
      v0 = (_WORD *)((char *)v0 + v11 * -result);
    }
    *((_BYTE *)v0 + v11 - 1) = result;
LABEL_6:
    for ( i = result; i; --i )
    {
      while ( 1 )
      {
        v3 = *(_BYTE *)v1;
        v4 = (uint8*)((char *)v1 + 1);
        v0 = (_WORD *)((char *)v0 + v3);
        v5 = *v4;
        v1 = (__int16 *)(v4 + 1);
        if ( v5 > 0 )
          break;
        v6 = *v1++;
        do
        {
          *v0++ = v6;
          ++v5;
        }
        while ( v5 );
        if ( !--i )
          goto LABEL_14;
      }
      do
      {
        v7 = *v1++;
        *v0++ = v7;
        --v5;
      }
      while ( v5 );
    }
LABEL_14:
    v0 = (_WORD *)((char *)v8 + v11);
    --v10;
  }
  while ( v10 );
  return result;
}
// 9ADA0: using guessed type __int16 word_9ADA0;
// 9ADA4: using guessed type int dword_9ADA4;
// 9ADC0: using guessed type int dword_9ADC0;
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//----- (0005CF50) --------------------------------------------------------
int sub_5CF50()
{
  int v0; // eax
  char *v1; // esi
  char *v2; // edi
  __int16 v3; // ax
  int v4; // eax
  _BYTE *v5; // esi
  char *v6; // edi
  unsigned __int8 v7; // al
  char *v8; // esi
  unsigned int v9; // ecx
  char v10; // al
  int result; // eax
  int v12; // [esp+0h] [ebp-10h]
  __int16 i; // [esp+6h] [ebp-Ah]
  __int16 v14; // [esp+8h] [ebp-8h]
  int v15; // [esp+Ch] [ebp-4h]

  v15 = (unsigned __int16)MEMORY[0x9ADA0];
  v0 = sub_5D6B0(dword_9ADC0, (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, dword_9ADA4 - 6);
  LOWORD(v0) = *(_WORD *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  v12 = v15 * v0 + (int)begWscreen_2ECFF4_2ECFE4;
  v1 = (char *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 4);
  v14 = *(_WORD *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 2);
  do
  {
    v2 = (char *)v12;
    v3 = (unsigned __int8)*v1++;
    for ( i = v3; i; --i )
    {
      v4 = (unsigned __int8)*v1;
      v5 = (uint8*)(v1 + 1);
      v6 = &v2[v4];
      v7 = *v5;
      v8 = (char*)(v5 + 1);
      if ( (v7 & 0x80u) != 0 )
      {
        v9 = (unsigned __int8)-v7;
        v10 = *v8;
        v1 = v8 + 1;
        memset(v6, v10, v9);
        v2 = &v6[v9];
      }
      else
      {
        qmemcpy((int)v6, (int)v8, v7);
        v1 = &v8[v7];
        v2 = &v6[v7];
      }
    }
    result = (unsigned __int16)MEMORY[0x9ADA0];
    v12 += (unsigned __int16)MEMORY[0x9ADA0];
    --v14;
  }
  while ( v14 );
  return result;
}
// 9ADA0: using guessed type __int16 word_9ADA0;
// 9ADA4: using guessed type int dword_9ADA4;
// 9ADC0: using guessed type int dword_9ADC0;
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//----- (0005CFF7) --------------------------------------------------------
char sub_5CFF7()
{
  _BYTE *v0; // esi
  char *v1; // edi
  __int16 v2; // bx
  __int16 v3; // cx
  char v4; // dl
  __int16 v5; // ax
  char v6; // dh
  char v7; // dh
  __int16 v9; // [esp+0h] [ebp-4h]
  __int16 v10; // [esp+2h] [ebp-2h]

  v10 = MEMORY[0x9ADA0];
  v9 = word_9ADA2;
  sub_5D6B0(dword_9ADC0, (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, dword_9ADA4 - 6);
  v0 = (_BYTE *)begWscreen_2ECFF4_2ECFE4;
  v1 = (char *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  v2 = v9;
  do
  {
    ++v1;
    v3 = v10;
    do
    {
      v4 = *v1++;
      if ( v4 > 0 )
      {
        LOBYTE(v5) = v4;
        v3 -= (unsigned __int8)v4;
      }
      else
      {
        HIBYTE(v5) = -1;
        LOBYTE(v5) = v4;
        v3 += v5;
      }
      if ( v4 > 0 )
      {
        v7 = *v1++;
        do
        {
          *v0++ = v7;
          --v4;
        }
        while ( v4 );
      }
      else
      {
        do
        {
          v6 = *v1++;
          *v0++ = v6;
          ++v4;
        }
        while ( v4 );
      }
    }
    while ( v3 );
    --v2;
  }
  while ( v2 );
  return v5;
}
// 9ADA0: using guessed type __int16 word_9ADA0;
// 9ADA2: using guessed type __int16 word_9ADA2;
// 9ADA4: using guessed type int dword_9ADA4;
// 9ADC0: using guessed type int dword_9ADC0;
// AE3EC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//----- (0005D083) --------------------------------------------------------
void sub_5D083(int a1, __int16 a2)
{
  __int16 v2; // cx

  if ( dword_9ADC4 )
  {
    do
    {
      do
      {
        //fix __asm { int     21h; DOS - GET CURRENT TIME }
        v2 = 100 * HIBYTE(a2) + (unsigned __int8)a2;
        a2 = v2 - word_9ADB4;
      }
      while ( v2 == word_9ADB4 );
      if ( a2 <= 0 )
        a2 += 6000;
    }
    while ( (unsigned __int16)a2 < dword_9ADC4 );
    word_9ADB4 = v2;
  }
}
// 9ADB4: using guessed type __int16 word_9ADB4;
// 9ADC4: using guessed type int dword_9ADC4;

//----- (0005D164) --------------------------------------------------------
void sub_5CC54_5D164()
{
    FixPerifery();
    //fix !!! (VSYNC)
    /*
  unsigned __int8 result; // al

  do
    result = __inbyte(0x3DAu);
  while ( (result & 8) == 0 );
  */
}

uint8_t sub_5CC70_5D180(TColor* colors, uint8_t colR, uint8_t colG, uint8_t colB)
{
    int colorsCount;

    if ((typeResolution_12F02E_12F01E & 6) != 0)
        colorsCount = 16;
    else
        colorsCount = 256;
    int minColors = 0;
    int bestColor = 9999;
    uint8_t bestColorIndex = 0;
    for (int i = 0; i < colorsCount; i++)
    {
        int diffCol = ((colR - colors[i].red) * (colR - colors[i].red) + (colG - colors[i].green) * (colG - colors[i].green) + (colB - colors[i].blue) * (colB - colors[i].blue));
        if (diffCol < bestColor)
        {
            bestColor = diffCol;
            bestColorIndex = minColors;
        }
    }
    return bestColorIndex;
}

//----- (0005D280) --------------------------------------------------------
int sub_5CD70_5D280()
{
  char v1[28]; // [esp+0h] [ebp-38h] BYREF
  int v2[7]; // [esp+1Ch] [ebp-1Ch] BYREF

  v2[0] = (unsigned __int16)word_12F01C;
  return int386(16, (uint32)v2, (uint32)v1);
}
// 63488: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 12F01C: using guessed type __int16 word_12F01C;
// 5D280: using guessed type int var_1C[7];
// 5D280: using guessed type char var_38[28];

//----- (0005D2B0) --------------------------------------------------------
void Blit_5CDA0_5D2B0()
{
    FixPerifery((char*)"blit320");
  if ( !byte_9AD96 )
    sub_5BDF8_5C308();
  VGA_Blit(begWscreen_2ECFF4_2ECFE4);
  if ( !byte_9AD96 )
    sub_5BE50_5C360();
}
// 9AD96: using guessed type char byte_9AD96;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//----- (0005D400) --------------------------------------------------------
int sub_5CEF0_5D400(unsigned __int16 a1)
{
  if ( !byte_939CC )
    return 1;
  sprintf((char*)"data/music0-0.dat", "data/music%d-%d.dat", a1, (unsigned __int8)byte_CBFDE);
  sprintf(aDataMusic00Tab, "data/music%d-%d.tab", a1, (unsigned __int8)byte_CBFDE);
  if ( sub_634E0_639F0((Pathstruct*)"data/music0-0.dat") != 1 )
    return 1;
  if ( sub_634E0_639F0((Pathstruct*)aDataMusic00Tab) != 1 )
  {
    sub_634A0_639B0((Pathstruct*)"data/music0-0.dat");
    return 1;
  }
  sub_5D4B4();
  return 0;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 939CC: using guessed type char byte_939CC;
// CBFDE: using guessed type char byte_CBFDE;

//----- (0005D4B4) --------------------------------------------------------
unsigned int sub_5D4B4()
{
  unsigned int result; // eax
  unsigned int v1; // [esp+0h] [ebp-4h]

  if ( dword_CBF50 && dword_CBF58 )
  {
    v1 = dword_CBF50 + 32;
    for ( word_939D6 = 0; ; ++word_939D6 )
    {
      result = v1;
      if ( v1 >= dword_CBF54 )
        break;
      *(_DWORD *)(v1 + 18) += dword_CBF58;
      v1 += 32;
    }
  }
  return result;
}
// 939D6: using guessed type __int16 word_939D6;
// CBF50: using guessed type int dword_CBF50;
// CBF54: using guessed type int dword_CBF54;
// CBF58: using guessed type int dword_CBF58;

//----- (0005D520) --------------------------------------------------------
void sub_5D010_5D520()
{
  unsigned __int8 i; // [esp+0h] [ebp-4h]

  if ( byte_939E4 )
  {
    for ( i = 0; i < 0x20u; ++i )
    {
      while ( !sub_65708(dword_CC130, i) )
        sub_65E75(dword_CC130, i);
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// CC130: using guessed type int dword_CC130;

//----- (0005D580) --------------------------------------------------------
int sub_5D070_5D580(unsigned __int8 a1)
{
  if ( !byte_939E4 )
    return 1;
  sprintf((char*)"data/snds0-0.dat", (char*)"data/snds%d-%d.dat", a1, (unsigned __int8)byte_939EC);
  sprintf(aDataSnds00Tab, (char*)"data/snds%d-%d.tab", a1, (unsigned __int8)byte_939EC);
  if ( sub_634E0_639F0((Pathstruct*)"data/snds0-0.dat") != 1 )
    return 1;
  if ( sub_634E0_639F0((Pathstruct*)aDataSnds00Tab) != 1 )
  {
    sub_634A0_639B0((Pathstruct*)"data/snds0-0.dat");
    return 1;
  }
  sub_5D648();
  return 0;
}
// 611BC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 939E4: using guessed type char byte_939E4;
// 939EC: using guessed type char byte_939EC;

//----- (0005D648) --------------------------------------------------------
unsigned int sub_5D648()
{
  unsigned int result; // eax
  unsigned int v1; // [esp+0h] [ebp-4h]

  if ( dword_CC144 && dword_CC120 )
  {
    v1 = dword_CC144 + 32;
    for ( word_CC1B6 = 0; ; ++word_CC1B6 )
    {
      result = v1;
      if ( v1 >= dword_CC1B0 )
        break;
      *(_DWORD *)(v1 + 18) += dword_CC120;
      v1 += 32;
    }
  }
  return result;
}
// CC120: using guessed type int dword_CC120;
// CC144: using guessed type int dword_CC144;
// CC1B0: using guessed type int dword_CC1B0;
// CC1B6: using guessed type __int16 word_CC1B6;

//----- (0005D6B0) --------------------------------------------------------
int sub_5D6B0(int a1, int a2, unsigned int a3)
{
  _BYTE *v3; // eax
  _BYTE *v4; // edx
  unsigned int i; // [esp+4h] [ebp-4h]

  if ( !dword_9AF08 )
    return DataFileIO::Read((FILE*)a1, (uint8_t*)a2, a3);
  for ( i = 0; i < a3 && dword_9AF14 + i < dword_9AF10; ++i )
  {
    v3 = (_BYTE *)dword_9AF0C++;
    v4 = (_BYTE *)a2++;
    *v4 = *v3;
  }
  dword_9AF14 += a3;
  return i;
}
// 9AF08: using guessed type int dword_9AF08;
// 9AF0C: using guessed type int dword_9AF0C;
// 9AF10: using guessed type int dword_9AF10;
// 9AF14: using guessed type int dword_9AF14;

//----- (0005D740) --------------------------------------------------------
int sub_5D740(int a1, int a2, int a3)
{
  int result; // eax

  result = read(a1, dword_9AF08, a3);
  dword_9AF0C = dword_9AF08;
  dword_9AF10 = result;
  dword_9AF14 = 0;
  return result;
}
// 66E3C: using guessed type _DWORD read(_DWORD, _DWORD, _DWORD);
// 9AF08: using guessed type int dword_9AF08;
// 9AF0C: using guessed type int dword_9AF0C;
// 9AF10: using guessed type int dword_9AF10;
// 9AF14: using guessed type int dword_9AF14;

//----- (0005D7A0) --------------------------------------------------------
void sub_5D290_5D7A0(__int16 a1)
{
  int v1; // edx
  char *v2; // eax
  char *v3; // eax
  int v4; // [esp+64h] [ebp-8h]
  int v5; // [esp+64h] [ebp-8h]

  if ( byte_939CC && byte_939CD && a1 <= (int)(unsigned __int16)word_939D6 && (unsigned __int16)word_939D2 != a1 )
  {
    if ( word_939D2 )
    {
      if ( !sub_5DD00(dword_CBFC8) )
        sub_5F930(dword_CBFC8);
      sub_5F865(dword_CBFC8);
      sub_60E2D(dword_CBFCC);
      if ( byte_9AF9C )
        sub_60E2D(dword_12F064);
      word_939D2 = 0;
    }
    v1 = *(_DWORD *)(dword_CBF50 + 32 * a1 + 18);
    word_12F024 = __DS__;
    dword_12F020 = v1;
    word_12F02C = 0;
    dword_12F028 = 0;
    v4 = sub_5F332(
           (unsigned int)&dword_12F020,
           (unsigned __int16)__DS__,
           (int)&unk_9AF18,
           __DS__,
           (unsigned int)&dword_CBFC8);
    if ( v4 )
    {
      v2 = sub_63C9C(v4);
      printf("\nError : %s", v2);
      sub_60D1C(dword_CBFCC, 1);
      sub_60845();
      byte_939CC = 0;
    }
    else
    {
      v5 = sub_5F8A8(dword_CBFC8);
      if ( v5 )
      {
        v3 = sub_63C9C(v5);
        printf("\nError : %s", v3);
        sub_60D1C(dword_CBFCC, 1);
        sub_60845();
      }
      else
      {
        sub_5F2E6(0);
        word_939D0 = 100;
        word_939D2 = a1;
      }
    }
  }
}
// 5D113: using guessed type _DWORD printf(const char *, ...);
// 939CC: using guessed type char byte_939CC;
// 939CD: using guessed type char byte_939CD;
// 939D0: using guessed type __int16 word_939D0;
// 939D2: using guessed type __int16 word_939D2;
// 939D6: using guessed type __int16 word_939D6;
// 9AF9C: using guessed type char byte_9AF9C;
// CBF50: using guessed type int dword_CBF50;
// CBFC8: using guessed type int dword_CBFC8;
// CBFCC: using guessed type int dword_CBFCC;
// 12F020: using guessed type int dword_12F020;
// 12F024: using guessed type __int16 word_12F024;
// 12F028: using guessed type int dword_12F028;
// 12F02C: using guessed type __int16 word_12F02C;
// 12F064: using guessed type int dword_12F064;

//----- (0005D970) --------------------------------------------------------
void sub_5D970(__int16 a1, __int16 a2, __int16 a3)
{
  int v3; // edx
  __int16 *v4; // [esp+0h] [ebp-10h]
  char v5; // [esp+4h] [ebp-Ch]
  char v6; // [esp+8h] [ebp-8h]
  unsigned __int8 i; // [esp+Ch] [ebp-4h]
  unsigned __int8 j; // [esp+Ch] [ebp-4h]

  if ( byte_939E4 && byte_939E5 && a2 <= (int)(unsigned __int16)word_CC1B6 )
  {
    v5 = 0;
    v4 = word_CBFE0;
    for ( i = 0; i < 0x20u; ++i )
    {
      if ( *v4 == a1 && v4[1] == a2 && !sub_65708(dword_CC130, i) )
      {
        v5 = 1;
        break;
      }
      v4 += 2;
    }
    if ( !v5 )
    {
      v6 = 0;
      for ( j = 0; j < 0x20u; ++j )
      {
        if ( sub_65708(dword_CC130, j) )
        {
          v6 = 1;
          break;
        }
      }
      if ( v6 )
      {
        word_CBFE0[2 * j] = a1;
        word_CBFE2[2 * j] = a2;
        word_93A0C = 16640;
        word_939FC = a3;
        word_93A00 = 0x7FFF;
        word_CC060[j] = 0x7FFF;
        word_93A02 = j;
        dword_939F8 = *(_DWORD *)(32 * a2 + dword_CC144 + 26) - 16;
        v3 = *(_DWORD *)(32 * a2 + dword_CC144 + 18);
        word_939F4 = __DS__;
        dword_939F0 = v3;
        dword_CC134 = sub_6586C(dword_CC130, (unsigned int)&dword_939F0);
      }
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// 939F0: using guessed type int dword_939F0;
// 939F4: using guessed type __int16 word_939F4;
// 939F8: using guessed type int dword_939F8;
// 939FC: using guessed type __int16 word_939FC;
// 93A00: using guessed type __int16 word_93A00;
// 93A02: using guessed type __int16 word_93A02;
// 93A0C: using guessed type __int16 word_93A0C;
// CBFE0: using guessed type __int16 word_CBFE0[];
// CBFE2: using guessed type __int16 word_CBFE2[63];
// CC060: using guessed type __int16 word_CC060[];
// CC130: using guessed type int dword_CC130;
// CC134: using guessed type int dword_CC134;
// CC144: using guessed type int dword_CC144;
// CC1B6: using guessed type __int16 word_CC1B6;

//----- (0005DB20) --------------------------------------------------------
void sub_5DB20(__int16 a1, __int16 a2)
{
  int v2; // edx
  unsigned __int8 i; // [esp+0h] [ebp-8h]
  char v4; // [esp+4h] [ebp-4h]

  if ( byte_939E4 && byte_939E5 && a2 <= (int)(unsigned __int16)word_CC1B6 )
  {
    v4 = 0;
    for ( i = 0; i < 0x20u; ++i )
    {
      if ( sub_65708(dword_CC130, i) )
      {
        v4 = 1;
        break;
      }
    }
    if ( v4 )
    {
      word_CBFE0[2 * i] = a1;
      word_CBFE2[2 * i] = a2;
      word_93A02 = i;
      word_93A0C = 256;
      word_93A00 = 0x7FFF;
      word_CC060[i] = 0x7FFF;
      dword_939F8 = *(_DWORD *)(32 * a2 + dword_CC144 + 26) - 16;
      v2 = *(_DWORD *)(32 * a2 + dword_CC144 + 18);
      word_939F4 = __DS__;
      dword_939F0 = v2;
      dword_CC134 = sub_6586C(dword_CC130, (unsigned int)&dword_939F0);
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// 939F0: using guessed type int dword_939F0;
// 939F4: using guessed type __int16 word_939F4;
// 939F8: using guessed type int dword_939F8;
// 93A00: using guessed type __int16 word_93A00;
// 93A02: using guessed type __int16 word_93A02;
// 93A0C: using guessed type __int16 word_93A0C;
// CBFE0: using guessed type __int16 word_CBFE0[];
// CBFE2: using guessed type __int16 word_CBFE2[63];
// CC060: using guessed type __int16 word_CC060[];
// CC130: using guessed type int dword_CC130;
// CC134: using guessed type int dword_CC134;
// CC144: using guessed type int dword_CC144;
// CC1B6: using guessed type __int16 word_CC1B6;

//----- (0005DC60) --------------------------------------------------------
void sub_5DC60(__int16 a1, __int16 a2)
{
  __int16 *v2; // [esp+0h] [ebp-8h]
  __int16 i; // [esp+4h] [ebp-4h]

  if ( byte_939E4 )
  {
    v2 = word_CBFE0;
    for ( i = 0; i < 32; ++i )
    {
      if ( *v2 == a1 && v2[1] == a2 && !sub_65708(dword_CC130, i) )
      {
        sub_65E75(dword_CC130, i);
        return;
      }
      v2 += 2;
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// CBFE0: using guessed type __int16 word_CBFE0[];
// CC130: using guessed type int dword_CC130;

//----- (0005DCEF) --------------------------------------------------------
void sub_5DCEF()
{
  ;
}

//----- (0005DD00) --------------------------------------------------------
bool sub_5DD00(int a1)
{
  return dword_9C136[a1] == 0;
}
// 9C136: using guessed type int dword_9C136[8];

//----- (0005DD39) --------------------------------------------------------
void sub_5DD39()
{
  ;
}

//----- (0005DD82) --------------------------------------------------------
void sub_5DD82()
{
  ;
}

//----- (0005DD93) --------------------------------------------------------
int sub_5D883_5DD93(int a1, unsigned int a2, char a3)
{
  if ( (a3 & 1) != 0 )
  {
    LOBYTE(dword_A01C4) = 0;
  }
  else
  {
    LOBYTE(dword_A01C4) = 1;
    sub_67305();
    sub_66D6A_6727A(a1, 0xFFFF, (int)sub_5E3A1, __CS__);
    sub_67331();
  }
  if ( a2 && (a3 & 1) == 0 )
  {
    if ( a2 == 65280 )
    {
      sub_5E373(0xFFFF);
      dword_A043D = 65280;
    }
    else
    {
      sub_5E373((unsigned int)&unk_1234DC / a2);
      dword_A043D = a2;
    }
    word_A03FF = __CS__;
    dword_A03FB = (int)sub_5E45B;
    dword_A047D = (int)sub_10000;
  }
  else
  {
    dword_A039D = 0xFFFF;
  }
  return 0;
}
// 10000: using guessed type void sub_10000();
// A01C4: using guessed type int dword_A01C4;
// A039D: using guessed type int dword_A039D;
// A03FB: using guessed type int dword_A03FB;
// A03FF: using guessed type __int16 word_A03FF;
// A043D: using guessed type int dword_A043D;
// A047D: using guessed type int dword_A047D;

//----- (0005DE58) --------------------------------------------------------
int sub_5DE58()
{
  if ( (_BYTE)dword_A01C4 )
  {
    sub_67305();
    sub_6735D();
    sub_67331();
  }
  return 0;
}
// A01C4: using guessed type int dword_A01C4;

//----- (0005DE8B) --------------------------------------------------------
int sub_5DE8B(unsigned int a1, int a2, __int16 a3, unsigned int a4)
{
  int v4; // edx
  unsigned int v7; // [esp+4h] [ebp-8h]
  unsigned int i; // [esp+8h] [ebp-4h]
  unsigned int j; // [esp+8h] [ebp-4h]

  for ( i = 0; i < 0x10 && (*(_DWORD *)&byte_A03A1[6 * i] || *(_WORD *)&byte_A03A1[6 * i + 4]); ++i )
    ;
  if ( i >= 0x10 )
    return 11;
  if ( (_BYTE)dword_A01C4 )
    sub_67305();
  v7 = i;
  v4 = 6 * i;
  *(_WORD *)&byte_A03A1[v4 + 4] = a3;
  *(_DWORD *)&byte_A03A1[v4] = a2;
  dword_A0401[i] = a1;
  if ( (unsigned int)&unk_1234DC / a1 < dword_A039D )
    sub_5E373((unsigned int)&unk_1234DC / a1);
  for ( j = 0; j < 0x10; ++j )
  {
    if ( *(_DWORD *)&byte_A03A1[6 * j] || *(_WORD *)&byte_A03A1[6 * j + 4] )
    {
      if ( dword_A0401[j] == 65280 )
      {
        if ( dword_A039D == 0xFFFF )
          dword_A0441[j] = (int)sub_10000;
        else
          dword_A0441[j] = (unsigned int)&unk_123333 / ((unsigned int)&unk_1234DC / dword_A039D);
      }
      else
      {
        dword_A0441[j] = (dword_A0401[j] << 16) / ((unsigned int)&unk_1234DC / dword_A039D);
      }
      dword_A0481[j] = 0;
    }
  }
  if ( (_BYTE)dword_A01C4 )
    sub_67331();
  __writegsdword(a4, v7);
  return 0;
}
// 10000: using guessed type void sub_10000();
// A01C4: using guessed type int dword_A01C4;
// A039D: using guessed type int dword_A039D;
// A0401: using guessed type int dword_A0401[15];
// A0441: using guessed type int dword_A0441[15];
// A0481: using guessed type int dword_A0481[];

//----- (0005E02D) --------------------------------------------------------
int sub_5E02D(unsigned int a1, unsigned int a2)
{
  unsigned int i; // [esp+4h] [ebp-4h]

  if ( a1 >= 0x10 )
    return 10;
  if ( !*(_DWORD *)&byte_A03A1[6 * a1] && !*(_WORD *)&byte_A03A1[6 * a1 + 4] )
    return 10;
  if ( (_BYTE)dword_A01C4 )
    sub_67305();
  dword_A0401[a1] = a2;
  if ( (unsigned int)&unk_1234DC / a2 < dword_A039D )
    sub_5E373((unsigned int)&unk_1234DC / a2);
  for ( i = 0; i < 0x10; ++i )
  {
    if ( *(_DWORD *)&byte_A03A1[6 * i] || *(_WORD *)&byte_A03A1[6 * i + 4] )
    {
      if ( dword_A0401[i] == 65280 )
      {
        if ( dword_A039D == 0xFFFF )
          dword_A0441[i] = (int)sub_10000;
        else
          dword_A0441[i] = (unsigned int)&unk_123333 / ((unsigned int)&unk_1234DC / dword_A039D);
      }
      else
      {
        dword_A0441[i] = (dword_A0401[i] << 16) / ((unsigned int)&unk_1234DC / dword_A039D);
      }
      dword_A0481[i] = 0;
    }
  }
  if ( (_BYTE)dword_A01C4 )
    sub_67331();
  return 0;
}
// 10000: using guessed type void sub_10000();
// A01C4: using guessed type int dword_A01C4;
// A039D: using guessed type int dword_A039D;
// A0401: using guessed type int dword_A0401[15];
// A0441: using guessed type int dword_A0441[15];
// A0481: using guessed type int dword_A0481[];

//----- (0005E1A1) --------------------------------------------------------
int sub_5E1A1(int a1)
{
  int v1; // eax
  unsigned int v3; // [esp+4h] [ebp-8h]
  unsigned int i; // [esp+8h] [ebp-4h]
  unsigned int j; // [esp+8h] [ebp-4h]

  v3 = 0;
  v1 = 6 * a1;
  *(_WORD *)&byte_A03A1[v1 + 4] = 0;
  *(_DWORD *)&byte_A03A1[v1] = 0;
  for ( i = 0; i < 0x10; ++i )
  {
    if ( (*(_DWORD *)&byte_A03A1[6 * i] || *(_WORD *)&byte_A03A1[6 * i + 4])
      && dword_A0401[i] > v3
      && dword_A0401[i] != 65280 )
    {
      v3 = dword_A0401[i];
    }
  }
  if ( v3 )
    sub_5E373((unsigned int)&unk_1234DC / v3);
  else
    sub_5E373(0xFFFF);
  if ( (_BYTE)dword_A01C4 )
    sub_67305();
  for ( j = 0; j < 0x10; ++j )
  {
    if ( *(_DWORD *)&byte_A03A1[6 * j] || *(_WORD *)&byte_A03A1[6 * j + 4] )
    {
      if ( dword_A0401[j] == 65280 )
      {
        if ( dword_A039D == 0xFFFF )
          dword_A0441[j] = (int)sub_10000;
        else
          dword_A0441[j] = (unsigned int)&unk_123333 / ((unsigned int)&unk_1234DC / dword_A039D);
      }
      else
      {
        dword_A0441[j] = (dword_A0401[j] << 16) / ((unsigned int)&unk_1234DC / dword_A039D);
      }
      dword_A0481[j] = 0;
    }
  }
  if ( (_BYTE)dword_A01C4 )
    sub_67331();
  return 0;
}
// 10000: using guessed type void sub_10000();
// A01C4: using guessed type int dword_A01C4;
// A039D: using guessed type int dword_A039D;
// A0401: using guessed type int dword_A0401[15];
// A0441: using guessed type int dword_A0441[15];
// A0481: using guessed type int dword_A0481[];

//----- (0005E350) --------------------------------------------------------
int sub_5E350(int a1)
{
  return dword_A0401[a1];
}
// A0401: using guessed type int dword_A0401[15];

//----- (0005E373) --------------------------------------------------------
int sub_5E373(int a1)
{
  dword_A039D = a1;
  sub_67234(a1);
  return 0;
}
// A039D: using guessed type int dword_A039D;

//----- (0005E3A1) --------------------------------------------------------
int sub_5E3A1(int a1, int a2, int a3)
{
  void *retaddr[2]; // [esp+10h] [ebp+10h]

  for ( dword_12F030 = 0; (unsigned int)dword_12F030 < 0x10; ++dword_12F030 )
  {
    a1 = 6 * dword_12F030;
    if ( *(_DWORD *)&byte_A03A1[6 * dword_12F030] || *(_WORD *)&byte_A03A1[6 * dword_12F030 + 4] )
    {
      a2 = dword_A0441[dword_12F030];
      dword_A0481[dword_12F030] += a2;
      a1 = 4 * dword_12F030;
      if ( (dword_A0481[dword_12F030] & 0x10000) != 0 )
      {
        HIWORD(dword_A0481[dword_12F030]) = 0;
        if ( byte_A04C1[dword_12F030] != -1 )
          byte_A04D1 = byte_A04C1[dword_12F030];
        //fix a1 = MK_FP(*(_WORD *)&byte_A03A1[6 * dword_12F030 + 4], *(_DWORD *)&byte_A03A1[6 * dword_12F030])();
      }
    }
  }
  return 0; //fix MK_FP(retaddr[0], retaddr[0])(a1, a2, a3);
}
// A0441: using guessed type int dword_A0441[15];
// A0481: using guessed type int dword_A0481[];
// A04D1: using guessed type char byte_A04D1;
// 12F030: using guessed type int dword_12F030;

//----- (0005E45B) --------------------------------------------------------
// positive sp value has been detected, the output may be wrong!
int sub_5E45B(int a1, int a2, int a3)
{
  int v3; // eax
  void *retaddr[2]; // [esp+10h] [ebp+10h]

  v3 = sub_673B2();
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(v3, a2, a3);
}
// 5E470: positive sp value 4 has been found

//----- (0005E471) --------------------------------------------------------
void sub_5E471()
{
  ;
}

//----- (0005E482) --------------------------------------------------------
void sub_5E482()
{
  ;
}

//----- (0005E493) --------------------------------------------------------
int sub_5E493(int a1, unsigned int a2, unsigned __int16 a3, int a4, int a5)
{
  unsigned __int8 v6; // [esp+0h] [ebp-38h]
  unsigned __int8 v7; // [esp+4h] [ebp-34h]
  int v9; // [esp+14h] [ebp-24h]
  int v10; // [esp+1Ch] [ebp-1Ch]
  unsigned int k; // [esp+1Ch] [ebp-1Ch]
  unsigned int n; // [esp+1Ch] [ebp-1Ch]
  unsigned int ii; // [esp+1Ch] [ebp-1Ch]
  unsigned int j; // [esp+20h] [ebp-18h]
  unsigned int m; // [esp+20h] [ebp-18h]
  unsigned __int8 v16; // [esp+24h] [ebp-14h]
  unsigned __int8 v17; // [esp+28h] [ebp-10h]
  unsigned __int8 v18; // [esp+2Ch] [ebp-Ch]
  unsigned __int8 i; // [esp+30h] [ebp-8h]
  unsigned __int8 v20; // [esp+34h] [ebp-4h]

  v17 = 0;
  v16 = -1;
  v9 = -1;
  if ( dword_9EBC9 )
  {
    v18 = __readgsbyte(a2);
    v20 = v18 & 0xF;
    for ( i = byte_9DF8F[128 * a4 + 16 * a1 + (v18 & 0xF)]; ; i = 9 )
    {
LABEL_9:
      if ( i != 0xFF )
      {
        __writegsbyte(a2, v18 & 0xF0 | i);
        goto LABEL_66;
      }
      if ( v20 != 9 )
        break;
      byte_9DF8F[128 * a4 + 9 + 16 * a1] = 9;
    }
    for ( j = 0; j < 0x10; ++j )
    {
      while ( !byte_9EC5D[16 * a4 + j] && j < 0x10 )
        ++j;
      if ( j < 0x10 && byte_9E25F[16 * a4 + j] == -1 )
      {
        byte_9DF8F[128 * a4 + 16 * a1 + v20] = j;
        i = j;
        byte_9E25F[16 * a4 + j] = v20;
        byte_9E2AF[16 * a4 + j] = a1;
        byte_9E20F[16 * a4 + j] = __readgsbyte(*(_DWORD *)&byte_9C176[6 * a1] + 4 * v20 + 64);
        v10 = (unsigned __int8)byte_9E93F[128 * a4 + 16 * a1 + v20];
        if ( v10 == 255 )
        {
          for ( k = 0; k < 4; ++k )
          {
            if ( byte_9E2FF[320 * a4 + 20 * v20 + 5 * k] == -1 )
            {
              byte_9E2FF[320 * a4 + 20 * v20 + 5 * k] = 1;
              byte_9E93F[128 * a4 + 16 * a1 + v20] = k;
              goto LABEL_9;
            }
          }
        }
        else
        {
          byte_9ECAE[16 * a4 + (unsigned __int8)j] = 127;
          byte_9EBBF = j | 0xC0;
          byte_9EBC0 = 121;
          byte_9EBC1 = 0;
          //fix
          /*MK_FP(*(_WORD *)&byte_9C062[36 * a4 + 4], *(_DWORD *)&byte_9C062[36 * a4])(
            &byte_9EBBF,
            (unsigned __int16)__DS__,
            3,
            a4);*/
          if ( byte_9E302[320 * a4 + 20 * v20 + 5 * v10] != -1 )
          {
            byte_9EBBF = j | 0xC0;
            byte_9EBC0 = byte_9E302[320 * a4 + 20 * v20 + 5 * v10];
            //fix
            /*
            MK_FP(*(_WORD *)&byte_9C062[36 * a4 + 4], *(_DWORD *)&byte_9C062[36 * a4])(
              &byte_9EBBF,
              (unsigned __int16)__DS__,
              2,
              a4);*/
          }
          if ( byte_9E300[320 * a4 + 20 * v20 + 5 * v10] != -1 )
          {
            byte_9EBBF = j | 0xE0;
            byte_9EBC0 = 0;
            byte_9EBC1 = byte_9E300[320 * a4 + 20 * v20 + 5 * v10];
            //fix
            /*
            MK_FP(*(_WORD *)&byte_9C062[36 * a4 + 4], *(_DWORD *)&byte_9C062[36 * a4])(
              &byte_9EBBF,
              (unsigned __int16)__DS__,
              2,
              a4);*/
          }
          if ( byte_9E301[320 * a4 + 20 * v20 + 5 * v10] != -1 )
          {
            byte_9EBBF = j | 0xB0;
            byte_9EBC0 = 7;
            byte_9EBC1 = byte_9E301[320 * a4 + 20 * v20 + 5 * v10];
            //fix
            /*
            MK_FP(*(_WORD *)&byte_9C062[36 * a4 + 4], *(_DWORD *)&byte_9C062[36 * a4])(
              &byte_9EBBF,
              (unsigned __int16)__DS__,
              3,
              a4);*/
          }
          if ( byte_9E303[320 * a4 + 20 * v20 + 5 * v10] != -1 )
          {
            byte_9EBBF = j | 0xB0;
            byte_9EBC0 = 64;
            byte_9EBC1 = byte_9E303[320 * a4 + 20 * v20 + 5 * v10];
            //fix
            /*
            MK_FP(*(_WORD *)&byte_9C062[36 * a4 + 4], *(_DWORD *)&byte_9C062[36 * a4])(
              &byte_9EBBF,
              (unsigned __int16)__DS__,
              3,
              a4);*/
          }
        }
        goto LABEL_9;
      }
    }
    for ( m = 0; m < 0x10; ++m )
    {
      while ( !byte_9EC5D[16 * a4 + m] && m < 0x10 )
        ++m;
      if ( m < 0x10 && (unsigned __int8)byte_9E20F[16 * a4 + m] > v17 && byte_9E20F[16 * a4 + m] != -1 )
      {
        v17 = byte_9E20F[16 * a4 + m];
        v16 = m;
      }
    }
    if ( v16 == 0xFF )
      goto LABEL_66;
    if ( v17 > __readgsdword(*(_DWORD *)&byte_9C176[6 * a1] + 4 * v20 + 64) )
    {
      byte_9DF8F[128 * a4 + 16 * a1 + v20] = v16;
      byte_9DF8F[128 * a4 + 16 * (unsigned __int8)byte_9E2AF[16 * a4 + v16] + (unsigned __int8)byte_9E25F[16 * a4 + v16]] = -1;
      byte_9E25F[16 * a4 + v16] = v20;
      byte_9E2AF[16 * a4 + v16] = a1;
      i = v16;
      byte_9E20F[16 * a4 + v16] = __readgsbyte(*(_DWORD *)&byte_9C176[6 * a1] + 4 * v20 + 64);
      byte_9ECAE[16 * a4 + v16] = 127;
      byte_9EBBF = v16 | 0xB0;
      byte_9EBC0 = 123;
      byte_9EBC1 = 0;
      //fix
      /*
      MK_FP(*(_WORD *)&byte_9C062[36 * a4 + 4], *(_DWORD *)&byte_9C062[36 * a4])(
        &byte_9EBBF,
        (unsigned __int16)__DS__,
        3,
        a4);*/
      byte_9EBBF = v16 | 0xB0;
      byte_9EBC0 = 121;
      byte_9EBC1 = 0;
      //fix
      /*
      MK_FP(*(_WORD *)&byte_9C062[36 * a4 + 4], *(_DWORD *)&byte_9C062[36 * a4])(
        &byte_9EBBF,
        (unsigned __int16)__DS__,
        3,
        a4);*/
      if ( byte_9E93F[128 * a4 + 16 * a1 + v20] == -1 )
      {
        for ( n = 0; n < 4; ++n )
        {
          if ( byte_9E2FF[320 * a4 + 20 * v20 + 5 * n] == -1 )
          {
            byte_9E2FF[320 * a4 + 20 * v20 + 5 * n] = 1;
            byte_9E93F[128 * a4 + 16 * a1 + v20] = n;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    if ( byte_9E93F[128 * a4 + 16 * a1 + v20] == -1 )
    {
      for ( ii = 0; ii < 4; ++ii )
      {
        if ( byte_9E2FF[320 * a4 + 20 * v20 + 5 * ii] == -1 )
        {
          byte_9E2FF[320 * a4 + 20 * v20 + 5 * ii] = 1;
          byte_9E93F[128 * a4 + 16 * a1 + v20] = ii;
          break;
        }
      }
    }
LABEL_66:
    if ( v20 == 9 )
    {
      if ( v18 == 0xB9 && __readgsbyte(a2 + 1) == 7 )
        v9 = __readgsbyte(a2 + 2);
      byte_9ECB7[16 * a4] = v9;
    }
    else
    {
      v6 = v18 & 0xF0;
      if ( (v18 & 0xF0u) < 0xC0 )
      {
        if ( v6 == 0xB0 )
        {
          v7 = __readgsbyte(a2 + 1);
          if ( v7 >= 7u )
          {
            if ( v7 <= 7u )
            {
              byte_9E301[320 * a4 + 20 * v20 + 5 * (unsigned __int8)byte_9E93F[128 * a4 + 16 * a1 + v20]] = __readgsbyte(a2 + 2);
              v9 = __readgsbyte(a2 + 2);
              byte_9ECAE[16 * a4 + i] = v9;
            }
            else if ( v7 == 64 )
            {
              byte_9E303[320 * a4 + 20 * v20 + 5 * (unsigned __int8)byte_9E93F[128 * a4 + 16 * a1 + v20]] = __readgsbyte(a2 + 2);
            }
          }
        }
      }
      else if ( v6 <= 0xC0u )
      {
        byte_9E302[320 * a4 + 20 * v20 + 5 * (unsigned __int8)byte_9E93F[128 * a4 + 16 * a1 + v20]] = __readgsbyte(a2 + 1);
      }
      else if ( v6 == 0xE0 )
      {
        byte_9E300[320 * a4 + 20 * v20 + 5 * (unsigned __int8)byte_9E93F[128 * a4 + 16 * a1 + v20]] = __readgsbyte(a2 + 2);
      }
    }
    if ( i == 0xFF )
    {
      return -1;
    }
    else
    {
      if ( v9 != -1 )
        __writegsbyte(a2 + 2, (v9 * (unsigned int)(unsigned __int8)byte_9ECAD) >> 7);
      //fix MK_FP(*(_WORD *)&byte_9C062[36 * a4 + 4], *(_DWORD *)&byte_9C062[36 * a4])(a2, a3, a5, a4);
      __writegsbyte(a2, v18);
      if ( v9 != -1 )
        __writegsbyte(a2 + 2, v9);
      return 0;
    }
  }
  else
  {
    if ( (__readgsbyte(a2) & 0xF0) == 0xB0 )
    {
      if ( __readgsbyte(a2 + 1) == 7 )
      {
        byte_9EBBF = __readgsbyte(a2);
        byte_9EBC0 = 7;
        byte_9EBC1 = (__readgsbyte(a2 + 2) * (unsigned int)(unsigned __int8)byte_9ECAD) >> 7;
      }
      //fix
      /*
      MK_FP(*(_WORD *)&byte_9C062[36 * a4 + 4], *(_DWORD *)&byte_9C062[36 * a4])(
        &byte_9EBBF,
        (unsigned __int16)__DS__,
        a5,
        a4);*/
    }
    else
    {
        //fix MK_FP(*(_WORD *)&byte_9C062[36 * a4 + 4], *(_DWORD *)&byte_9C062[36 * a4])(a2, a3, a5, a4);
    }
    return 1;
  }
}
// 9EBBF: using guessed type char byte_9EBBF;
// 9EBC0: using guessed type char byte_9EBC0;
// 9EBC1: using guessed type char byte_9EBC1;
// 9EBC9: using guessed type int dword_9EBC9;
// 9ECAD: using guessed type char byte_9ECAD;
// 5E493: using guessed type unsigned int arg_4;

//----- (0005EED1) --------------------------------------------------------
int sub_5EED1(int a1)
{
  unsigned int i; // [esp+8h] [ebp-14h]
  unsigned int v3; // [esp+Ch] [ebp-10h]
  unsigned __int8 v4; // [esp+10h] [ebp-Ch]
  unsigned __int8 v5; // [esp+14h] [ebp-8h]
  unsigned __int8 v6; // [esp+18h] [ebp-4h]

  for ( i = 0; i < dword_9C042[a1]; ++i )
  {
    v3 = __readgsdword(*(int *)((char *)&dword_9BFF2 + 6 * a1) + 4 * i);
    if ( v3 != -1 && v3 != 255 )
    {
      v5 = __readgsbyte(*(int *)((char *)&dword_9D98F[48 * a1] + 6 * i) + 8);
      if ( dword_9EBC9 )
      {
        v4 = byte_9DF8F[128 * v3 + 16 * a1 + v5];
        byte_9DF8F[128 * v3 + 16 * a1 + v5] = -1;
        v6 = byte_9E93F[128 * v3 + 16 * a1 + v5];
        byte_9E25F[16 * v3 + v4] = -1;
        byte_9E2AF[16 * v3 + v4] = -1;
        byte_9EBBF = v4 | 0xB0;
        byte_9EBC0 = 123;
        byte_9EBC1 = 0;
        //fix
        /*
        MK_FP(*(_WORD *)&byte_9C062[36 * v3 + 4], *(_DWORD *)&byte_9C062[36 * v3])(
          &byte_9EBBF,
          (unsigned __int16)__DS__,
          3,
          v3);*/
        byte_9EBBF = v4 | 0xB0;
        byte_9EBC0 = 121;
        byte_9EBC1 = 0;
        //fix
        /*
        MK_FP(*(_WORD *)&byte_9C062[36 * v3 + 4], *(_DWORD *)&byte_9C062[36 * v3])(
          &byte_9EBBF,
          (unsigned __int16)__DS__,
          3,
          v3);*/
        byte_9EBBF = v4 | 0xE0;
        byte_9EBC0 = 64;
        byte_9EBC1 = 64;
        //fix
        /*
        MK_FP(*(_WORD *)&byte_9C062[36 * v3 + 4], *(_DWORD *)&byte_9C062[36 * v3])(
          &byte_9EBBF,
          (unsigned __int16)__DS__,
          3,
          v3);*/
        byte_9EBBF = v4 | 0xB0;
        byte_9EBC0 = 7;
        byte_9EBC1 = 0;
        //fix
        /*
        MK_FP(*(_WORD *)&byte_9C062[36 * v3 + 4], *(_DWORD *)&byte_9C062[36 * v3])(
          &byte_9EBBF,
          (unsigned __int16)__DS__,
          3,
          v3);*/
        if ( v6 != 0xFF )
        {
          byte_9E302[320 * v3 + 20 * v5 + 5 * v6] = -1;
          byte_9E300[320 * v3 + 20 * v5 + 5 * v6] = -1;
          byte_9E301[320 * v3 + 20 * v5 + 5 * v6] = -1;
          byte_9E303[320 * v3 + 20 * v5 + 5 * v6] = -1;
          byte_9E2FF[320 * v3 + 20 * v5 + 5 * v6] = -1;
          byte_9E93F[128 * v3 + 16 * a1 + v5] = -1;
        }
      }
      else
      {
        byte_9EBBF = v5 | 0xB0;
        byte_9EBC0 = 123;
        byte_9EBC1 = 0;
        //fix
        /*
        MK_FP(*(_WORD *)&byte_9C062[36 * v3 + 4], *(_DWORD *)&byte_9C062[36 * v3])(
          &byte_9EBBF,
          (unsigned __int16)__DS__,
          3,
          v3);*/
        byte_9EBBF = v5 | 0xB0;
        byte_9EBC0 = 121;
        byte_9EBC1 = 0;
        //fix
        /*
        MK_FP(*(_WORD *)&byte_9C062[36 * v3 + 4], *(_DWORD *)&byte_9C062[36 * v3])(
          &byte_9EBBF,
          (unsigned __int16)__DS__,
          3,
          v3);*/
        byte_9EBBF = v5 | 0xE0;
        byte_9EBC0 = 64;
        byte_9EBC1 = 64;
        //fix
        /*
        MK_FP(*(_WORD *)&byte_9C062[36 * v3 + 4], *(_DWORD *)&byte_9C062[36 * v3])(
          &byte_9EBBF,
          (unsigned __int16)__DS__,
          3,
          v3);*/
        byte_9EBBF = v5 | 0xB0;
        byte_9EBC0 = 7;
        byte_9EBC1 = 0;
        //fix
        /*
        MK_FP(*(_WORD *)&byte_9C062[36 * v3 + 4], *(_DWORD *)&byte_9C062[36 * v3])(
          &byte_9EBBF,
          (unsigned __int16)__DS__,
          3,
          v3);*/
      }
    }
  }
  return 1;
}
// 9BFF2: using guessed type int dword_9BFF2;
// 9C042: using guessed type int dword_9C042[8];
// 9D98F: using guessed type int dword_9D98F[];
// 9EBBF: using guessed type char byte_9EBBF;
// 9EBC0: using guessed type char byte_9EBC0;
// 9EBC1: using guessed type char byte_9EBC1;
// 9EBC9: using guessed type int dword_9EBC9;

//----- (0005F2B0) --------------------------------------------------------
int sub_5F2B0(int a1, int a2, unsigned __int16 a3, int a4)
{
  //fix MK_FP(*(_WORD *)&byte_9C062[36 * a1 + 4], *(_DWORD *)&byte_9C062[36 * a1])(a2, a3, a4, a1);
  return 0;
}

//----- (0005F2E6) --------------------------------------------------------
int sub_5F2E6(int a1)
{
  int v2; // [esp+4h] [ebp-4h]

  v2 = dword_9EBC9;
  dword_9EBC9 = a1;
  return v2;
}
// 9EBC9: using guessed type int dword_9EBC9;

//----- (0005F310) --------------------------------------------------------
void sub_5F310()
{
  ;
}

//----- (0005F321) --------------------------------------------------------
void sub_5F321()
{
  ;
}

//----- (0005F332) --------------------------------------------------------
int sub_5F332(unsigned int a1, int a2, int a3, __int16 a4, unsigned int a5)
{
  unsigned __int64 v5; // rax
  int v6; // ebx
  int v7; // ebx
  unsigned int v8; // ebx
  unsigned __int64 v9; // rax
  int v10; // ebx
  unsigned __int64 v11; // rax
  int v12; // ebx
  int v13; // ebx
  int v14; // eax
  int v16; // [esp+8h] [ebp-34h]
  __int16 v17; // [esp+Ch] [ebp-30h]
  int v18; // [esp+10h] [ebp-2Ch]
  int i; // [esp+18h] [ebp-24h]
  int v20; // [esp+1Ch] [ebp-20h]
  unsigned int n; // [esp+20h] [ebp-1Ch]
  unsigned int v22; // [esp+24h] [ebp-18h]
  unsigned int j; // [esp+28h] [ebp-14h]
  unsigned int ii; // [esp+28h] [ebp-14h]
  int v26; // [esp+34h] [ebp-8h]
  unsigned int k; // [esp+38h] [ebp-4h]
  unsigned int m; // [esp+38h] [ebp-4h]

  v26 = 0;
  for ( i = 0; byte_9ECFF[i]; ++i )
  {
    if ( byte_9ECFF[i] != __readgsbyte(__readgsdword(a1) + i) )
      return 14;
  }
  for ( j = 0; j < 8; ++j )
  {
    if ( !*(_DWORD *)&byte_9C176[6 * j] && !*(_WORD *)&byte_9C176[6 * j + 4] )
    {
      v22 = j;
      break;
    }
  }
  if ( j == 8 )
    return 11;
  v5 = sub_67406(__readgsdword(a1), __readgsword(a1 + 4));
  v6 = v5;
  LODWORD(v5) = 6 * v22;
  *(_WORD *)&byte_9C176[v5 + 4] = WORD2(v5);
  *(_DWORD *)&byte_9C176[v5] = v6;
  v17 = *(_WORD *)&byte_9C176[6 * v22 + 4];
  v16 = *(_DWORD *)&byte_9C176[6 * v22] + 776;
  v7 = 3 * v22;
  word_9BFF6[v7] = a4;
  *(int *)((char *)&dword_9BFF2 + v7 * 2) = a3;
  dword_9C022[v22] = __readgsdword(*(_DWORD *)&byte_9C176[6 * v22] + 48);
  dword_9C042[v22] = dword_9C022[v22];
  LODWORD(v5) = *(_DWORD *)&byte_9C176[6 * v22];
  v8 = __readgsdword(a1 + 8);
  __writegsword(v5 + 772, __readgsword(a1 + 12));
  __writegsdword(v5 + 768, v8);
  for ( k = 0; k < dword_9C022[v22]; ++k )
  {
    dword_9BBF2[32 * v22 + k] = 0;
    v9 = sub_67406(v26 + v16, v17);
    v10 = v9;
    LODWORD(v9) = 6 * k + 192 * v22;
    *(__int16 *)((char *)&word_9D993 + v9) = WORD2(v9);
    *(int *)((char *)dword_9D98F + v9) = v10;
    v11 = sub_67406(v16 + v26 + 12, v17);
    v12 = v11;
    LODWORD(v11) = 192 * v22 + 6 * k;
    *(_WORD *)&byte_9B1F2[v11 + 4] = WORD2(v11);
    *(_DWORD *)&byte_9B1F2[v11] = v12;
    v13 = v11;
    v18 = sub_5FCD7(
            *(_DWORD *)&byte_9B1F2[v11],
            *(unsigned __int16 *)&byte_9B1F2[v11 + 4],
            (unsigned int)&dword_9B7F2[32 * v22 + k])
        + *(_DWORD *)&byte_9B1F2[v13];
    *(_WORD *)&byte_9B1F2[v13 + 4] = *(_WORD *)&byte_9B1F2[v13 + 4];
    *(_DWORD *)&byte_9B1F2[v13] = v18;
    v26 += __readgsdword(sub_67406(v26 + v16, v17) + 4);
  }
  for ( m = 0; m < dword_9C042[v22]; ++m )
  {
    if ( __readgsdword(*(int *)((char *)&dword_9BFF2 + 6 * v22) + 4 * m) == 255 )
    {
      v20 = 0;
      for ( n = 0; __readgsdword(*(_DWORD *)&byte_9C176[6 * v22] + 20 * m + 4 * n + 128) && !v20 && n < 5; ++n )
      {
        for ( ii = 0; ii < 5; ++ii )
        {
          if ( __readgsdword(*(_DWORD *)&byte_9C176[6 * v22] + 20 * m + 4 * n + 128) == 40960 )
          {
            if ( dword_9B1B6[ii] == 40960 || dword_9B1B6[ii] == 40961 || dword_9B1B6[ii] == 40968 )
            {
LABEL_38:
              __writegsdword(*(int *)((char *)&dword_9BFF2 + 6 * v22) + 4 * m, ii);
              v20 = 1;
              break;
            }
          }
          else if ( dword_9B1B6[ii] == __readgsdword(*(_DWORD *)&byte_9C176[6 * v22] + 20 * m + 4 * n + 128) )
          {
            goto LABEL_38;
          }
        }
      }
      if ( __readgsdword(*(_DWORD *)&byte_9C176[6 * v22] + 20 * m + 128) )
      {
        if ( !v20 )
        {
          v14 = 6 * m + 192 * v22;
          *(_WORD *)&byte_9B1F2[v14 + 4] = 0;
          *(_DWORD *)&byte_9B1F2[v14] = 0;
          __writegsdword(*(int *)((char *)&dword_9BFF2 + 6 * v22) + 4 * m, 0xFFu);
          --dword_9C022[v22];
        }
      }
      else
      {
        __writegsdword(*(int *)((char *)&dword_9BFF2 + 6 * v22) + 4 * m, 0);
      }
    }
  }
  __writegsdword(a5, v22);
  return 0;
}
// 5F3F0: variable 'v22' is possibly undefined
// 9B1B6: using guessed type int dword_9B1B6[6];
// 9B7F2: using guessed type int dword_9B7F2[256];
// 9BBF2: using guessed type int dword_9BBF2[256];
// 9BFF2: using guessed type int dword_9BFF2;
// 9BFF6: using guessed type __int16 word_9BFF6[];
// 9C022: using guessed type int dword_9C022[8];
// 9C042: using guessed type int dword_9C042[8];
// 9D98F: using guessed type int dword_9D98F[];
// 9D993: using guessed type __int16 word_9D993;
// 5F332: using guessed type unsigned int arg_0;

//----- (0005F865) --------------------------------------------------------
int sub_5F865(unsigned int a1)
{
  int v1; // eax

  if ( a1 >= 8 )
    return 10;
  v1 = 6 * a1;
  *(_WORD *)&byte_9C176[v1 + 4] = 0;
  *(_DWORD *)&byte_9C176[v1] = 0;
  return 0;
}

//----- (0005F8A8) --------------------------------------------------------
int sub_5F8A8(int a1)
{
  int v3; // [esp+4h] [ebp-4h]

  v3 = sub_5DE8B(
         __readgsdword(*(_DWORD *)&byte_9C176[6 * a1] + 56),
         (int)sub_6744C,
         __CS__,
         (unsigned int)&dword_9C1A6[a1]);
  if ( v3 )
    return v3;
  byte_A04C1[dword_9C1A6[a1]] = a1;
  dword_9C136[a1] = 1;
  return 0;
}
// 9C136: using guessed type int dword_9C136[8];
// 9C1A6: using guessed type int dword_9C1A6[8];

//----- (0005F930) --------------------------------------------------------
int sub_5F930(unsigned int a1)
{
  int v1; // edx
  int v2; // eax
  int v4; // [esp+0h] [ebp-14h] BYREF
  __int16 v5; // [esp+4h] [ebp-10h]
  unsigned int v6; // [esp+8h] [ebp-Ch]
  unsigned __int16 v7; // [esp+Ch] [ebp-8h]

  if ( a1 >= 8 )
    return 10;
  if ( dword_9C1A6[a1] != -1 )
    sub_5E1A1(dword_9C1A6[a1]);
  byte_A04C1[dword_9C1A6[a1]] = -1;
  dword_9C1A6[a1] = -1;
  if ( dword_9C136[a1] )
  {
    v5 = *(_WORD *)&byte_9C176[6 * a1 + 4];
    v4 = *(_DWORD *)&byte_9C176[6 * a1];
    v1 = *(_DWORD *)&byte_9C176[6 * a1];
    v7 = __readgsword(v1 + 772);
    v6 = __readgsdword(v1 + 768);
    sub_5EED1(a1);
    dword_9C136[a1] = 0;
    v2 = 6 * a1;
    *(_WORD *)&byte_9C176[v2 + 4] = 0;
    *(_DWORD *)&byte_9C176[v2] = 0;
    sub_5FA39(a1, (unsigned int)&v4);
  }
  return 0;
}
// 9C136: using guessed type int dword_9C136[8];
// 9C1A6: using guessed type int dword_9C1A6[8];

//----- (0005FA39) --------------------------------------------------------
int sub_5FA39(int a1, unsigned int a2)
{
  unsigned __int64 v2; // rax
  int v3; // ebx
  unsigned int v4; // ebx
  unsigned __int64 v5; // rax
  int v6; // ebx
  unsigned __int64 v7; // rax
  int v8; // ebx
  int v9; // ebx
  int v10; // eax
  int v12; // [esp+8h] [ebp-20h]
  int v13; // [esp+10h] [ebp-18h]
  __int16 v14; // [esp+14h] [ebp-14h]
  int v15; // [esp+20h] [ebp-8h]
  unsigned int i; // [esp+24h] [ebp-4h]
  unsigned int j; // [esp+24h] [ebp-4h]

  v15 = 0;
  v2 = sub_67406(__readgsdword(a2), __readgsword(a2 + 4));
  v3 = v2;
  LODWORD(v2) = 6 * a1;
  *(_WORD *)&byte_9C176[v2 + 4] = WORD2(v2);
  *(_DWORD *)&byte_9C176[v2] = v3;
  v14 = *(_WORD *)&byte_9C176[6 * a1 + 4];
  v13 = *(_DWORD *)&byte_9C176[6 * a1] + 776;
  dword_9C022[a1] = __readgsdword(*(_DWORD *)&byte_9C176[6 * a1] + 48);
  dword_9C042[a1] = dword_9C022[a1];
  LODWORD(v2) = *(_DWORD *)&byte_9C176[6 * a1];
  v4 = __readgsdword(a2 + 8);
  __writegsword(v2 + 772, __readgsword(a2 + 12));
  __writegsdword(v2 + 768, v4);
  for ( i = 0; i < dword_9C022[a1]; ++i )
  {
    dword_9BBF2[32 * a1 + i] = 0;
    v5 = sub_67406(v15 + v13, v14);
    v6 = v5;
    LODWORD(v5) = 6 * i + 192 * a1;
    *(__int16 *)((char *)&word_9D993 + v5) = WORD2(v5);
    *(int *)((char *)dword_9D98F + v5) = v6;
    v7 = sub_67406(v13 + v15 + 12, v14);
    v8 = v7;
    LODWORD(v7) = 192 * a1 + 6 * i;
    *(_WORD *)&byte_9B1F2[v7 + 4] = WORD2(v7);
    *(_DWORD *)&byte_9B1F2[v7] = v8;
    v9 = v7;
    v12 = sub_5FCD7(
            *(_DWORD *)&byte_9B1F2[v7],
            *(unsigned __int16 *)&byte_9B1F2[v7 + 4],
            (unsigned int)&dword_9B7F2[32 * a1 + i])
        + *(_DWORD *)&byte_9B1F2[v9];
    *(_WORD *)&byte_9B1F2[v9 + 4] = *(_WORD *)&byte_9B1F2[v9 + 4];
    *(_DWORD *)&byte_9B1F2[v9] = v12;
    v15 += __readgsdword(sub_67406(v15 + v13, v14) + 4);
  }
  for ( j = 0; j < dword_9C042[a1]; ++j )
  {
    if ( __readgsdword(*(int *)((char *)&dword_9BFF2 + 6 * a1) + 4 * j) == 255 )
    {
      v10 = 192 * a1 + 6 * j;
      *(_WORD *)&byte_9B1F2[v10 + 4] = 0;
      *(_DWORD *)&byte_9B1F2[v10] = 0;
      --dword_9C022[a1];
    }
  }
  return 0;
}
// 9B7F2: using guessed type int dword_9B7F2[256];
// 9BBF2: using guessed type int dword_9BBF2[256];
// 9BFF2: using guessed type int dword_9BFF2;
// 9C022: using guessed type int dword_9C022[8];
// 9C042: using guessed type int dword_9C042[8];
// 9D98F: using guessed type int dword_9D98F[];
// 9D993: using guessed type __int16 word_9D993;

//----- (0005FCD7) --------------------------------------------------------
int sub_5FCD7(unsigned int a1, int a2, unsigned int a3)
{
  unsigned int v3; // eax
  int v5; // [esp+4h] [ebp-14h]
  unsigned int v6; // [esp+8h] [ebp-10h]
  int v7; // [esp+Ch] [ebp-Ch]
  int v8; // [esp+10h] [ebp-8h]
  char v9; // [esp+14h] [ebp-4h]

  v8 = 0;
  v7 = 0;
  v6 = 0;
  v5 = 0;
  do
  {
    ++v5;
    v3 = a1++;
    v9 = __readgsbyte(v3);
    if ( v9 < 0 )
      v8 = 1;
    v6 |= (v9 & 0x7F) << v7;
    v7 += 7;
  }
  while ( !v8 );
  __writegsdword(a3, v6);
  return v5;
}

//----- (0005FD4E) --------------------------------------------------------
int sub_5FD4E(char a1)
{
  int v2; // [esp+8h] [ebp-Ch]
  unsigned int i; // [esp+Ch] [ebp-8h]
  char v4; // [esp+10h] [ebp-4h]

  v2 = 0;
  byte_9ECAD = a1;
  while ( dword_9B1B6[v2] )
  {
    for ( i = 0; i < 0x10; ++i )
    {
      if ( byte_9EC5D[16 * v2 + i] || i == 9 )
      {
        v4 = ((unsigned __int8)byte_9ECAE[16 * v2 + i] * (unsigned int)(unsigned __int8)byte_9ECAD) >> 7;
        byte_9EBBF = i | 0xB0;
        byte_9EBC0 = 7;
        byte_9EBC1 = v4;
        //fix
        /*
        MK_FP(*(_WORD *)&byte_9C062[36 * v2 + 4], *(_DWORD *)&byte_9C062[36 * v2])(
          &byte_9EBBF,
          (unsigned __int16)__DS__,
          3,
          v2);*/
      }
    }
    ++v2;
  }
  return 0;
}
// 9B1B6: using guessed type int dword_9B1B6[6];
// 9EBBF: using guessed type char byte_9EBBF;
// 9EBC0: using guessed type char byte_9EBC0;
// 9EBC1: using guessed type char byte_9EBC1;
// 9ECAD: using guessed type char byte_9ECAD;

//----- (0005FE23) --------------------------------------------------------
void sub_5FE23()
{
  ;
}

//----- (0005FE34) --------------------------------------------------------
void sub_5FE34()
{
  ;
}

//----- (0005FE45) --------------------------------------------------------
__int16 sub_5FE45()
{
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  return sub_679DD();
}

//----- (00060277) --------------------------------------------------------
__int16 sub_60277()
{
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  return sub_67A0A();
}

//----- (000606A9) --------------------------------------------------------
int sub_606A9(int a1, unsigned __int16 a2)
{
  sub_5FE45();
  //fix
  /*
  if ( a1 || a2 )
    fstrcpy(&unk_9ED08, (unsigned __int16)__DS__, a1, a2);
  else
    byte_A04D2 = 0;
  word_131516 = __CS__;
  dword_131512 = (int)sub_67EBE;
  word_13151C = __CS__;
  dword_131518 = (int)sub_67EEE;
  word_131522 = __CS__;
  dword_13151E = (int)sub_67F07;
  word_131528 = __CS__;
  dword_131524 = (int)sub_67F20;
  word_13152E = __CS__;
  dword_13152A = (int)sub_67F39;
  word_1314BC = __CS__;
  dword_1314B8 = (int)sub_68F24;
  word_1314C2 = __CS__;
  dword_1314BE = (int)sub_690EA;
  word_1314C8 = __CS__;
  dword_1314C4 = (int)sub_6915B;
  word_1314CE = __CS__;
  dword_1314CA = (int)sub_69179;
  word_1314D4 = __CS__;
  dword_1314D0 = (int)sub_69192;
  word_1314F8 = __CS__;
  dword_1314F4 = (int)sub_67FA6;
  word_1314FE = __CS__;
  dword_1314FA = (int)sub_682AD;
  word_131504 = __CS__;
  dword_131500 = (int)sub_6842C;
  word_13150A = __CS__;
  dword_131506 = (int)sub_684AA;
  word_131510 = __CS__;
  dword_13150C = (int)sub_684C3;
  word_1314DA = __CS__;
  dword_1314D6 = (int)sub_6A3FD;
  word_1314E0 = __CS__;
  dword_1314DC = (int)sub_6A42C;
  word_1314E6 = __CS__;
  dword_1314E2 = (int)sub_6A467;
  word_1314EC = __CS__;
  dword_1314E8 = (int)sub_6A485;
  word_1314F2 = __CS__;
  dword_1314EE = (int)sub_6A4A3;
  dword_9C22A = 1;*/
  return 0;
}
// 6AB8A: using guessed type _DWORD fstrcpy(_DWORD, _DWORD, _DWORD, _DWORD);
// 9C22A: using guessed type int dword_9C22A;
// A04D2: using guessed type char byte_A04D2;
// 1314B8: using guessed type int dword_1314B8;
// 1314BC: using guessed type __int16 word_1314BC;
// 1314BE: using guessed type int dword_1314BE;
// 1314C2: using guessed type __int16 word_1314C2;
// 1314C4: using guessed type int dword_1314C4;
// 1314C8: using guessed type __int16 word_1314C8;
// 1314CA: using guessed type int dword_1314CA;
// 1314CE: using guessed type __int16 word_1314CE;
// 1314D0: using guessed type int dword_1314D0;
// 1314D4: using guessed type __int16 word_1314D4;
// 1314D6: using guessed type int dword_1314D6;
// 1314DA: using guessed type __int16 word_1314DA;
// 1314DC: using guessed type int dword_1314DC;
// 1314E0: using guessed type __int16 word_1314E0;
// 1314E2: using guessed type int dword_1314E2;
// 1314E6: using guessed type __int16 word_1314E6;
// 1314E8: using guessed type int dword_1314E8;
// 1314EC: using guessed type __int16 word_1314EC;
// 1314EE: using guessed type int dword_1314EE;
// 1314F2: using guessed type __int16 word_1314F2;
// 1314F4: using guessed type int dword_1314F4;
// 1314F8: using guessed type __int16 word_1314F8;
// 1314FA: using guessed type int dword_1314FA;
// 1314FE: using guessed type __int16 word_1314FE;
// 131500: using guessed type int dword_131500;
// 131504: using guessed type __int16 word_131504;
// 131506: using guessed type int dword_131506;
// 13150A: using guessed type __int16 word_13150A;
// 13150C: using guessed type int dword_13150C;
// 131510: using guessed type __int16 word_131510;
// 131512: using guessed type int dword_131512;
// 131516: using guessed type __int16 word_131516;
// 131518: using guessed type int dword_131518;
// 13151C: using guessed type __int16 word_13151C;
// 13151E: using guessed type int dword_13151E;
// 131522: using guessed type __int16 word_131522;
// 131524: using guessed type int dword_131524;
// 131528: using guessed type __int16 word_131528;
// 13152A: using guessed type int dword_13152A;
// 13152E: using guessed type __int16 word_13152E;

//----- (00060845) --------------------------------------------------------
int sub_60845()
{
  sub_60277();
  dword_9C22A = 0;
  return 0;
}
// 9C22A: using guessed type int dword_9C22A;

//----- (0006086F) --------------------------------------------------------
int sub_6086F(unsigned int a1, unsigned int a2, int a3, int a4, int a5, unsigned int a6)
{
  int v6; // ecx
  unsigned int v7; // edx
  int v8; // eax
  int v9; // ecx
  int v10; // eax
  int v11; // eax
  int v12; // ecx
  int v13; // eax
  int v14; // eax
  int v15; // ecx
  int v16; // eax
  int v17; // eax
  int v18; // ecx
  int v19; // eax
  unsigned __int16 v20; // ax
  int v21; // edx
  int v22; // edx
  unsigned int v24; // [esp+Ch] [ebp-3Ch] BYREF
  int v25; // [esp+10h] [ebp-38h]
  int *v26; // [esp+14h] [ebp-34h]
  __int16 v27; // [esp+18h] [ebp-30h]
  int v28; // [esp+1Ch] [ebp-2Ch]
  void (*v29)(_DWORD); // [esp+24h] [ebp-24h] BYREF
  int v30; // [esp+28h] [ebp-20h]
  int v31; // [esp+2Ch] [ebp-1Ch]
  unsigned int i; // [esp+34h] [ebp-14h]
  unsigned int v33; // [esp+40h] [ebp-8h]
  unsigned int v34; // [esp+44h] [ebp-4h]

  //fix
  v6 = 0;
  v10 = 0;
  v13 = 0;
  v16 = 0;
  v19 = 0;
  v25 = 0;
  //fix

  v34 = __readgsdword(a4 + 24);
  v33 = __readgsdword(a4 + 28);
  v31 = 6;
  for ( i = 0; i < 5; ++i )
  {
    if ( !dword_9B1B6[i] )
    {
      v31 = i;
      break;
    }
  }
  if ( v31 == 6 )
    return 11;
  LOWORD(v7) = 4 * v31;
  dword_9B1B6[v31] = a1;
  for ( i = 0; i < 0x10; ++i )
  {
    v7 = i + 16 * a1;
    LOBYTE(v7) = byte_90000[v7 - 594995];
    byte_9EC5D[16 * v31 + i] = v7;
  }
  switch ( dword_9B1B6[v31] )
  {
    case 40962:
      for ( i = 0; i < 6; ++i )
      {
        v11 = 36 * v31 + 6 * i;
        v12 = *(int *)((char *)&dword_1314D6 + 6 * i);
        *(_WORD *)&byte_9C062[v11 + 4] = word_1314DA[3 * i];
        *(_DWORD *)&byte_9C062[v11] = v12;
      }
      //fix
      /*
      v13 = MK_FP(*(_WORD *)&byte_9C068[36 * v31 + 4], *(_DWORD *)&byte_9C068[36 * v31])(
              __readgsdword(a4 + 16),
              __readgsword(a4 + 20),
              v31,
              __readgsdword(a2));*/
      v28 = v13;
      if ( !v13 )
        goto LABEL_47;
      v30 = v28;
      break;
    case 40963:
      v27 = v7;
      v26 = sub_67E9D();
      for ( i = 0; i < 6; ++i )
      {
        v14 = 36 * v31 + 6 * i;
        v15 = *(int *)((char *)&dword_131512 + 6 * i);
        *(_WORD *)&byte_9C062[v14 + 4] = word_131516[3 * i];
        *(_DWORD *)&byte_9C062[v14] = v15;
      }
      //fix
      /*
      v16 = MK_FP(*(_WORD *)&byte_9C068[36 * v31 + 4], *(_DWORD *)&byte_9C068[36 * v31])(
              __readgsdword(a4 + 16),
              __readgsword(a4 + 20),
              v31,
              dword_9EF0C);*/
      v28 = v16;
      if ( !v16 )
        goto LABEL_47;
      v30 = v28;
      break;
    case 40965:
      v27 = v7;
      v26 = sub_67F85();
      for ( i = 0; i < 6; ++i )
      {
        v8 = 36 * v31 + 6 * i;
        v9 = *(int *)((char *)&dword_1314F4 + 6 * i);
        *(_WORD *)&byte_9C062[v8 + 4] = word_1314F8[3 * i];
        *(_DWORD *)&byte_9C062[v8] = v9;
      }
      //fix
      /*
      v10 = MK_FP(*(_WORD *)&byte_9C068[36 * v31 + 4], *(_DWORD *)&byte_9C068[36 * v31])(
              __readgsdword(a4 + 16),
              __readgsword(a4 + 20),
              v31,
              dword_9EF0C);*/
      v28 = v10;
      if ( !v10 )
        goto LABEL_47;
      v30 = v28;
      break;
    case 40968:
      v27 = v7;
      v26 = sub_68F03();
      for ( i = 0; i < 6; ++i )
      {
        v17 = 36 * v31 + 6 * i;
        v18 = *(int *)((char *)&dword_1314B8 + 6 * i);
        *(_WORD *)&byte_9C062[v17 + 4] = word_1314BC[3 * i];
        *(_DWORD *)&byte_9C062[v17] = v18;
      }
      //fix
      /*
      v19 = MK_FP(*(_WORD *)&byte_9C068[36 * v31 + 4], *(_DWORD *)&byte_9C068[36 * v31])(
              __readgsdword(a4 + 16),
              __readgsword(a4 + 20),
              v31,
              __readgsdword(a2));*/
      v28 = v19;
      if ( !v19 )
        goto LABEL_47;
      v30 = v28;
      break;
    default:
      word_9EF0A = 0;
      dword_9EF06 = 0;
      v20 = __readgsword(a4 + 8);
      if ( !__readgsdword(a4 + 4) && v20 == word_9EF0A )
      {
        v28 = sub_68622_68B32((__int16)&v24, v6, a1, v31, (int *)&v29, (unsigned int)&v24);
        if ( v28 )
          return v28;
        __writegsword(a4 + 8, v25);
        __writegsdword(a4 + 4, v24);
        __writegsdword(a4 + 12, (unsigned int)v29);
        v22 = 3 * v31;
        word_9B160[v22] = v25;
        *(int *)((char *)&dword_9B15C + v22 * 2) = v24;
        dword_9B17A[v31] = (int)v29;
      }
      else
      {
        LOWORD(v25) = __readgsword(a4 + 8);
        v24 = __readgsdword(a4 + 4);
        v29 = (void (*)(_DWORD))__readgsdword(a4 + 12);
        v21 = 3 * v31;
        word_9B160[v21] = v25;
        *(int *)((char *)&dword_9B15C + v21 * 2) = v24;
        dword_9B17A[v31] = (int)v29;
      }
      sub_67996(v31);
      sub_6AC47(v29, v24, (unsigned __int16)v25, (int)&byte_9C062[36 * v31], __DS__);
      //fix
      /*
      MK_FP(*(_WORD *)&byte_9C068[36 * v31 + 4], *(_DWORD *)&byte_9C068[36 * v31])(
        dword_9EF06,
        (unsigned __int16)word_9EF0A,
        dword_9EF0C,
        __readgsdword(a2));*/
LABEL_47:
      dword_9B18E[v31] = 1;
      __writegsdword(a6, v31);
      v30 = 0;
      break;
  }
  return v30;
}
// 60C25: variable 'v6' is possibly undefined
// 9B15C: using guessed type int dword_9B15C;
// 9B160: using guessed type __int16 word_9B160[];
// 9B17A: using guessed type int dword_9B17A[5];
// 9B18E: using guessed type int dword_9B18E[5];
// 9B1B6: using guessed type int dword_9B1B6[6];
// 9EF06: using guessed type int dword_9EF06;
// 9EF0A: using guessed type __int16 word_9EF0A;
// 9EF0C: using guessed type int dword_9EF0C;
// 1314B8: using guessed type int dword_1314B8;
// 1314BC: using guessed type __int16 word_1314BC[];
// 1314D6: using guessed type int dword_1314D6;
// 1314DA: using guessed type __int16 word_1314DA[];
// 1314F4: using guessed type int dword_1314F4;
// 1314F8: using guessed type __int16 word_1314F8[];
// 131512: using guessed type int dword_131512;
// 131516: using guessed type __int16 word_131516[];
// 6086F: using guessed type int arg_C;
// 6086F: using guessed type unsigned int arg_4;

//----- (00060D1C) --------------------------------------------------------
int sub_60D1C(unsigned int a1, int a2)
{
  int v2; // eax
  unsigned int v4; // [esp+0h] [ebp-10h]

  if ( dword_9B18E[a1] )
  {
    //fix
    /*
    MK_FP(*(_WORD *)&byte_9C06E[36 * a1 + 4], *(_DWORD *)&byte_9C06E[36 * a1])(
      dword_9EF06,
      (unsigned __int16)word_9EF0A,
      dword_9EF0C,
      dword_9EF0C);*/
    if ( a2 )
    {
      v4 = dword_9B1B6[a1];
      if ( v4 < 0xA005 )
      {
        if ( v4 < 0xA002 || v4 > 0xA003 )
          goto LABEL_13;
      }
      else if ( v4 > 0xA005 && v4 != 40968 )
      {
LABEL_13:
        sub_68D23(a1);
        goto LABEL_14;
      }
      //fix
      /*
      MK_FP(*(_WORD *)&byte_9C06E[36 * a1 + 4], *(_DWORD *)&byte_9C06E[36 * a1])(
        dword_9EF06,
        (unsigned __int16)word_9EF0A,
        a1,
        dword_9EF0C);*/
    }
LABEL_14:
    v2 = 3 * a1;
    word_9B160[v2] = 0;
    *(int *)((char *)&dword_9B15C + v2 * 2) = 0;
    dword_9B1B6[a1] = 0;
    dword_9B18E[a1] = 0;
    return 0;
  }
  return 1;
}
// 9B15C: using guessed type int dword_9B15C;
// 9B160: using guessed type __int16 word_9B160[];
// 9B18E: using guessed type int dword_9B18E[5];
// 9B1B6: using guessed type int dword_9B1B6[6];
// 9EF06: using guessed type int dword_9EF06;
// 9EF0A: using guessed type __int16 word_9EF0A;
// 9EF0C: using guessed type int dword_9EF0C;

//----- (00060E2D) --------------------------------------------------------
int sub_60E2D(int a1)
{
  unsigned int i; // [esp+8h] [ebp-4h]

  for ( i = 0; i < 0x10; ++i )
  {
    byte_9EBBF = i | 0xB0;
    byte_9EBC0 = 121;
    byte_9EBC1 = 0;
    //fix
    /*
    MK_FP(*(_WORD *)&byte_9C062[36 * a1 + 4], *(_DWORD *)&byte_9C062[36 * a1])(
      &byte_9EBBF,
      (unsigned __int16)__DS__,
      3,
      a1);*/
    byte_9EBBF = i | 0xB0;
    byte_9EBC0 = 123;
    byte_9EBC1 = 0;
    //fix
    /*
    MK_FP(*(_WORD *)&byte_9C062[36 * a1 + 4], *(_DWORD *)&byte_9C062[36 * a1])(
      &byte_9EBBF,
      (unsigned __int16)__DS__,
      3,
      a1);*/
  }
  //fix
  /*
  MK_FP(*(_WORD *)&byte_9C074[36 * a1 + 4], *(_DWORD *)&byte_9C074[36 * a1])(
    dword_9EF06,
    (unsigned __int16)word_9EF0A,
    a1,
    dword_9EF0C);*/
  return 0;
}
// 9EBBF: using guessed type char byte_9EBBF;
// 9EBC0: using guessed type char byte_9EBC0;
// 9EBC1: using guessed type char byte_9EBC1;
// 9EF06: using guessed type int dword_9EF06;
// 9EF0A: using guessed type __int16 word_9EF0A;
// 9EF0C: using guessed type int dword_9EF0C;

//----- (00060F04) --------------------------------------------------------
void sub_60F04()
{
  ;
}

//----- (000610EC) --------------------------------------------------------
unsigned __int64 sub_610EC(int a1)
{
  int v2; // [esp+0h] [ebp-1Ch]
  __int16 v3; // [esp+4h] [ebp-18h]
  unsigned int v4; // [esp+Ch] [ebp-10h]
  int v5; // [esp+10h] [ebp-Ch]
  int v6; // [esp+14h] [ebp-8h]
  FILE* v7; // [esp+18h] [ebp-4h]

  v5 = 0;
  v3 = 0;
  v2 = 0;
  v6 = GetRNCFilesize_63910_63E20((Pathstruct*)a1);
  if ( v6 > 0 )
  {
    v7 = DataFileIO::CreateOrOpenFile((char*)a1, 514);
    if ( v7 != nullptr )
    {
      v5 = (int)malloc_42540_42880(v6);
      if ( v5 )
      {
        if ( DataFileIO::Read(v7, (uint8_t*)v5, v6) != v6 )
          v5 = 0;
      }
    }
    DataFileIO::Close(v7);
  }
  if ( v5 )
  {
    v3 = __DS__;
    v2 = v5;
  }
  LOWORD(v4) = v3;
  return __PAIR64__(v4, v2);
}
// 6119B: variable 'v4' is possibly undefined

//----- (000611F0) --------------------------------------------------------
void DrawBitmap_60CE0_611F0(__int16 a1, __int16 a2, TypeTab* a3)
{
  sub_60D65_61275(*(_WORD *)(a3 + 4), a2, a1, *(uint8_t**)a3, 0, 0);
}
// 61225: variable 'v4' is possibly undefined
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//----- (00061228) --------------------------------------------------------
int DrawBitmap_60D18_61228(__int16 a1, __int16 a2, TypeTab* a3)
{
  int v4; // [esp+4h] [ebp-4h]

  //fix
  v4 = 0;
  //fix;

  sub_60D65_61275(*(_WORD *)(a3 + 4), a2, a1, *(uint8_t**)a3, 0, 0);
  return v4;
}
// 6125D: variable 'v4' is possibly undefined
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//----- (00061260) --------------------------------------------------------
void sub_60D50_61260(__int16 a1, int a2, int a3, uint8_t* sprite, unsigned __int8 a5, char a6)
{
  sub_60D65_61275(a1, a2, a3, sprite, a5, a6);
}

//SYNCHRONIZED WITH REMC1
void sub_60D65_61275(__int16 a1, int a2, int a3, uint8_t* sprite, unsigned __int8 a5, char a6)//231D65_
{
  int v6; // edi
  _BYTE *v7; // edi
  int v8; // ecx
  int v9; // eax
  _BYTE *v10; // ebx
  char v11; // al
  char v12; // al
  char v13; // al
  _BYTE *v14; // edi
  int v15; // ecx
  int v16; // eax
  _BYTE *v17; // ebx
  char v18; // al
  char v19; // al
  char v20; // al
  char *v21; // edi
  unsigned int v22; // ecx
  int v23; // eax
  char *v24; // ebx
  char *v25; // edi
  char v26; // al
  uint8_t* v27; // esi
  char *v28; // edi
  unsigned int v29; // ecx
  int v30; // eax
  char *v31; // ebx
  char *v32; // edi
  char v33; // al
  uint8_t* v34; // esi
  int v35; // ebp
  _BYTE *v36; // edi
  int v37; // ecx
  _BYTE *v38; // ebx
  char v39; // al
  int v40; // eax
  _BYTE *v41; // edi
  int v42; // ecx
  unsigned __int8 i; // dl
  char v44; // al
  char v45; // al
  char v46; // cc
  char v47; // dl
  char v48; // al
  char *v49; // edi
  char v50; // al
  char v51; // dl
  char v52; // al
  char v53; // dl
  unsigned int v54; // ebx
  const void *v55; // esi
  char *v56; // edi
  unsigned int v57; // ecx
  int v58; // eax
  char *v59; // ebx
  char *v60; // edi
  char *v61; // edi
  unsigned int v62; // ecx
  int v63; // eax
  char *v64; // ebx
  char *v65; // edi
  char v66; // al
  uint8_t* v67; // esi
  int v68; // edi
  int v69; // ebx
  _BYTE *v70; // edi
  _BYTE *v71; // edx
  int v72; // ecx
  char v73; // al
  char v74; // al
  char v75; // al
  char v76; // al
  int v77; // ebx
  _BYTE *v78; // edi
  int v79; // ecx
  int v80; // eax
  _BYTE *v81; // ebx
  char v82; // al
  int v83; // ebx
  _BYTE *v84; // edi
  int v85; // ecx
  int v86; // eax
  _BYTE *v87; // ebx
  char v88; // al
  _BYTE *v89; // edi
  int v90; // ecx
  int v91; // ebx
  int v92; // eax
  _BYTE *v93; // ebx
  char v94; // al
  unsigned int v95; // ebx
  _BYTE *v96; // edi
  _BYTE *v97; // edx
  int v98; // ecx
  char v99; // al
  char v100; // al
  char v101; // al
  char v102; // al
  _BYTE *v103; // edi
  int v104; // ecx
  int v105; // ebx
  _BYTE *v106; // ebx
  int v107; // eax
  char v108; // al
  _BYTE *v109; // edi
  int v110; // ecx
  int v111; // ebx
  _BYTE *v112; // ebx
  int v113; // eax
  char v114; // al
  unsigned int v115; // ebx
  _BYTE *v116; // edi
  _BYTE *v117; // edx
  int v118; // ecx
  char v119; // al
  char v120; // al
  char v121; // al
  char v122; // al
  int v123; // eax
  int v124; // edi
  int v125; // eax
  int v126; // eax
  char v127; // al
  int v128; // eax
  uint8_t* v129; // [esp-4h] [ebp-Ch]
  unsigned __int8 v130; // [esp+2h] [ebp-6h]
  unsigned __int8 v131; // [esp+2h] [ebp-6h]
  unsigned __int8 v132; // [esp+2h] [ebp-6h]
  unsigned __int8 v133; // [esp+2h] [ebp-6h]
  unsigned __int8 v134; // [esp+2h] [ebp-6h]
  unsigned __int8 v135; // [esp+2h] [ebp-6h]
  unsigned __int8 v136; // [esp+2h] [ebp-6h]
  unsigned __int8 v137; // [esp+2h] [ebp-6h]
  char v138; // [esp+3h] [ebp-5h]
  char v139; // [esp+3h] [ebp-5h]
  _BYTE *v140; // [esp+4h] [ebp-4h]
  _BYTE *v141; // [esp+4h] [ebp-4h]

  //fix
  v46 = 0;
  //fix

  if ( !HIBYTE(a1) )
    return;
  v6 = (int)begWscreen_2ECFF4_2ECFE4 + dword_12F008_12EFF8 + scrWidth_12EFF0_12EFE0 * dword_12F018_12F008;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    LOBYTE(a1) = (unsigned __int8)a1 >> 1;
    HIBYTE(a1) >>= 1;
    a3 >>= 1;
    a2 >>= 1;
  }
  if ( a2 < 0 )
  {
    if ( (word_9ADFC & 2) != 0 )
    {
      v126 = a2 + HIBYTE(a1);
      v46 = (v126 + 1 < 0) ^ __OFADD__(1, v126) | (v126 == -1);
      v127 = v126 + 1;
      if ( v46 )
        return;
      a2 = -1;
      HIBYTE(a1) = v127;
    }
    else
    {
      v128 = a2 + HIBYTE(a1);
      if ( (v128 < 0) ^ __OFADD__(a2, HIBYTE(a1)) | (v128 == 0) )
        return;
      HIBYTE(a1) = v128;
      BYTE1(v128) = 0;
      do
      {
        while ( 1 )
        {
          LOBYTE(v128) = *sprite++;
          if ( !(_BYTE)v128 )
            break;
          if ( (v128 & 0x80u) == 0 )
              sprite += v128;
        }
        ++a2;
      }
      while ( a2 );
    }
  }
  else if ( a2 + HIBYTE(a1) >= dword_12F028_12F018 )
  {
    if ( (word_9ADFC & 2) != 0 )
    {
      if ( a2 + 1 >= dword_12F028_12F018 )
        return;
      v123 = HIBYTE(a1) + a2 + 1 - dword_12F028_12F018;
      HIBYTE(a1) = dword_12F028_12F018 - (a2 + 1);
      v124 = v123;
      v125 = 0;
      do
      {
        while ( 1 )
        {
          LOBYTE(v125) = *sprite++;
          if ( !(_BYTE)v125 )
            break;
          if ( (v125 & 0x80u) == 0 )
              sprite += v125;
        }
        --v124;
      }
      while ( v124 );
      v6 = (int)begWscreen_2ECFF4_2ECFE4;
    }
    else
    {
      if ( dword_12F028_12F018 <= a2 )
        return;
      HIBYTE(a1) = dword_12F028_12F018 - a2;
    }
  }
  if ( a3 >= 0 )
  {
    if ( a3 + (unsigned __int8)a1 >= dword_12F000_12EFF0 )
    {
      if ( word_9ADFC )
      {
        if ( (word_9ADFC & 1) != 0 )
        {
          if ( (word_9ADFC & 2) != 0 )
          {
            if ( dword_12F024_12F014 - a3 >= 0 )
            {
              v77 = (unsigned __int8)a1 + a3;
              v78 = (_BYTE *)(scrWidth_12EFF0_12EFE0 * (HIBYTE(a1) + a2) + v77 + v6);
              v79 = 0;
              LOBYTE(a1) = dword_12F024_12F014 - v77 - 2;
              v131 = a1;
              v80 = -1;
              v81 = v78;
              do
              {
                while ( 1 )
                {
                  while ( 1 )
                  {
                    LOBYTE(v80) = *sprite++;
                    if ( (v80 & 0x80u) == 0 )
                      break;
                    v78 += v80;
                    LOBYTE(a1) = a1 - v80;
                  }
                  if ( !(_BYTE)v80 )
                    break;
                  LOBYTE(v79) = v80;
                  do
                  {
                    v82 = *sprite++;
                    LOBYTE(a1) = a1 + 1;
                    if ( (a1 & 0x80u) == 0 )
                      *v78 = v82;
                    --v78;
                    --v79;
                  }
                  while ( v79 );
                }
                v81 -= scrWidth_12EFF0_12EFE0;
                v78 = v81;
                a1 = __PAIR16__(HIBYTE(a1), v131) - 256;
              }
              while ( HIBYTE(a1) );
            }
          }
          else if ( dword_12F024_12F014 - a3 >= 0 )
          {
            v83 = (unsigned __int8)a1 + a3;
            v84 = (_BYTE *)(scrWidth_12EFF0_12EFE0 * a2 + v83 + v6);
            v85 = 0;
            LOBYTE(a1) = dword_12F024_12F014 - v83 - 2;
            v132 = a1;
            v86 = -1;
            v87 = v84;
            do
            {
              while ( 1 )
              {
                while ( 1 )
                {
                  LOBYTE(v86) = *sprite++;
                  if ( (v86 & 0x80u) == 0 )
                    break;
                  v84 += v86;
                  LOBYTE(a1) = a1 - v86;
                }
                if ( !(_BYTE)v86 )
                  break;
                LOBYTE(v85) = v86;
                do
                {
                  v88 = *sprite++;
                  LOBYTE(a1) = a1 + 1;
                  if ( (a1 & 0x80u) == 0 )
                    *v84 = v88;
                  --v84;
                  --v85;
                }
                while ( v85 );
              }
              v87 += scrWidth_12EFF0_12EFE0;
              v84 = v87;
              a1 = __PAIR16__(HIBYTE(a1), v132) - 256;
            }
            while ( HIBYTE(a1) );
          }
        }
        else if ( (word_9ADFC & 2) != 0 )
        {
          v89 = (_BYTE *)(scrWidth_12EFF0_12EFE0 * (HIBYTE(a1) + a2) + a3 + v6);
          v90 = 0;
          v91 = dword_12F024_12F014 - a3;
          if ( v91 >= 0 )
          {
            LOBYTE(a1) = v91;
            v133 = v91;
            v92 = -1;
            v93 = v89;
            do
            {
              while ( 1 )
              {
                while ( 1 )
                {
                  LOBYTE(v92) = *sprite++;
                  if ( (v92 & 0x80u) == 0 )
                    break;
                  v89 -= v92;
                  LOBYTE(a1) = v92 + a1;
                }
                if ( !(_BYTE)v92 )
                  break;
                LOBYTE(v90) = v92;
                do
                {
                  v94 = *sprite++;
                  LOBYTE(a1) = a1 - 1;
                  if ( (a1 & 0x80u) == 0 )
                    *v89++ = v94;
                  --v90;
                }
                while ( v90 );
              }
              v93 -= scrWidth_12EFF0_12EFE0;
              v89 = v93;
              a1 = __PAIR16__(HIBYTE(a1), v133) - 256;
            }
            while ( HIBYTE(a1) );
          }
        }
      }
      else
      {
        v68 = a3 + v6;
        v69 = dword_12F024_12F014 - a3;
        if ( v69 >= 0 )
        {
          v70 = (_BYTE *)(scrWidth_12EFF0_12EFE0 * a2 + v68);
          BYTE1(v69) = HIBYTE(a1);
          v130 = v69;
          v71 = v70;
          v72 = 0;
          do
          {
            while ( 1 )
            {
              while ( 1 )
              {
                v73 = *sprite++;
                if ( v73 >= 0 )
                  break;
                v46 = ((char)(v73 + v69) < 0) ^ __OFADD__(v73, (_BYTE)v69) | (v73 + (_BYTE)v69 == 0);
                LOBYTE(v69) = v73 + v69;
                if ( !v46 )
                {
                  v70 -= v73;
                  v75 = *sprite++;
                  LOBYTE(v72) = v75;
                  do
                  {
                    v76 = *sprite++;
                    LOBYTE(v69) = v69 - 1;
                    if ( (v69 & 0x80u) == 0 )
                      *v70++ = v76;
                    --v72;
                  }
                  while ( v72 );
                }
              }
              if ( !v73 )
                break;
              LOBYTE(v72) = v73;
              do
              {
                v74 = *sprite++;
                LOBYTE(v69) = v69 - 1;
                if ( (v69 & 0x80u) == 0 )
                  *v70++ = v74;
                --v72;
              }
              while ( v72 );
            }
            v71 += scrWidth_12EFF0_12EFE0;
            v70 = v71;
            LOWORD(v69) = __PAIR16__(BYTE1(v69), v130) - 256;
          }
          while ( BYTE1(v69) );
        }
      }
    }
    else if ( (word_9ADFC & 1) != 0 )
    {
      if ( (word_9ADFC & 2) != 0 )
      {
        v7 = (_BYTE *)(scrWidth_12EFF0_12EFE0 * (HIBYTE(a1) + a2) + (unsigned __int8)a1 + a3 + v6);
        v8 = 0;
        v9 = -1;
        v10 = v7;
        do
        {
          while ( 1 )
          {
            while ( 1 )
            {
              LOBYTE(v9) = *sprite++;
              if ( (v9 & 0x80u) == 0 )
                break;
              v7 += v9;
              v12 = *sprite++;
              LOBYTE(v8) = v12;
              do
              {
                v13 = *sprite++;
                *v7-- = v13;
                --v8;
              }
              while ( v8 );
            }
            if ( !(_BYTE)v9 )
              break;
            LOBYTE(v8) = v9;
            do
            {
              v11 = *sprite++;
              *v7-- = v11;
              --v8;
            }
            while ( v8 );
          }
          v10 -= scrWidth_12EFF0_12EFE0;
          v7 = v10;
          --HIBYTE(a1);
        }
        while ( HIBYTE(a1) );
      }
      else
      {
        v14 = (_BYTE *)(scrWidth_12EFF0_12EFE0 * a2 + (unsigned __int8)a1 + a3 + v6);
        v15 = 0;
        v16 = -1;
        v17 = v14;
        do
        {
          while ( 1 )
          {
            while ( 1 )
            {
              LOBYTE(v16) = *sprite++;
              if ( (v16 & 0x80u) == 0 )
                break;
              v14 += v16;
              v19 = *sprite++;
              LOBYTE(v15) = v19;
              do
              {
                v20 = *sprite++;
                *v14-- = v20;
                --v15;
              }
              while ( v15 );
            }
            if ( !(_BYTE)v16 )
              break;
            LOBYTE(v15) = v16;
            do
            {
              v18 = *sprite++;
              *v14-- = v18;
              --v15;
            }
            while ( v15 );
          }
          v17 += scrWidth_12EFF0_12EFE0;
          v14 = v17;
          --HIBYTE(a1);
        }
        while ( HIBYTE(a1) );
      }
    }
    else if ( word_9ADFC )
    {
      if ( (word_9ADFC & 2) != 0 )
      {
        v28 = (char *)(scrWidth_12EFF0_12EFE0 * (HIBYTE(a1) + a2) + a3 + v6);
        v29 = 0;
        v30 = -1;
        v31 = v28;
        do
        {
          while ( 1 )
          {
            while ( 1 )
            {
              LOBYTE(v30) = *sprite++;
              if ( (v30 & 0x80u) == 0 )
                break;
              v32 = &v28[-v30];
              v33 = *sprite;
              v34 = sprite + 1;
              LOBYTE(v29) = v33;
              qmemcpy(v32, v34, v29);
              sprite = &v34[v29];
              v28 = &v32[v29];
              v29 = 0;
            }
            if ( !(_BYTE)v30 )
              break;
            LOBYTE(v29) = v30;
            qmemcpy(v28, sprite, v29);
            sprite += v29;
            v28 += v29;
            v29 = 0;
          }
          v31 -= scrWidth_12EFF0_12EFE0;
          v28 = v31;
          --HIBYTE(a1);
        }
        while ( HIBYTE(a1) );
      }
      else if ( (word_9ADFC & 4) != 0 )
      {
        v35 = dword_9AFA0;
        v36 = (_BYTE *)(scrWidth_12EFF0_12EFE0 * a2 + a3 + v6);
        v37 = 0;
        v38 = v36;
        do
        {
          while ( 1 )
          {
            while ( 1 )
            {
              v39 = *sprite++;
              if ( v39 >= 0 )
                break;
              v36 -= v39;
            }
            if ( !v39 )
              break;
            LOBYTE(v37) = v39;
            v40 = (unsigned __int8)v39;
            do
            {
              LOBYTE(v40) = *sprite++;
              BYTE1(v40) = *v36;
              *v36++ = *(_BYTE *)(v40 + v35);
              --v37;
            }
            while ( v37 );
          }
          v38 += scrWidth_12EFF0_12EFE0;
          v36 = v38;
          --HIBYTE(a1);
        }
        while ( HIBYTE(a1) );
      }
      else if ( (word_9ADFC & 8) != 0 )
      {
        v41 = (_BYTE *)(scrWidth_12EFF0_12EFE0 * a2 + a3 + v6);
        v42 = 0;
        v140 = v41;
        v138 = HIBYTE(a1);
        for ( i = a5; ; i = a5 )
        {
          while ( 1 )
          {
            while ( 1 )
            {
              v44 = *sprite++;
              if ( v44 >= 0 )
                break;
              v42 = (unsigned __int8)-v44;
              do
              {
                v46 = (char)i-- < 1;
                if ( v46 )
                {
                  i = a5;
                  ++v41;
                }
                --v42;
              }
              while ( v42 );
            }
            if ( !v44 )
              break;
            LOBYTE(v42) = v44;
            do
            {
              v45 = *sprite++;
              v46 = (char)i-- < 1;
              if ( v46 )
              {
                i = a5;
                *v41++ = v45;
              }
              --v42;
            }
            while ( v42 );
          }
          if ( !--v138 )
            break;
          v47 = a6;
          while ( --v47 >= 0 )
          {
            while ( 1 )
            {
              do
                v48 = *sprite++;
              while ( v48 < 0 );
              if ( !v48 )
                break;
              sprite += (unsigned __int8)v48;
            }
          }
          v140 += scrWidth_12EFF0_12EFE0;
          v41 = v140;
        }
      }
      else if ( (word_9ADFC & 0x20) != 0 )
      {
        v49 = (char *)(scrWidth_12EFF0_12EFE0 * a2 + a3 + v6);
        v141 = (uint8*)v49;
        v139 = HIBYTE(a1);
        do
        {
          while ( 1 )
          {
            while ( 1 )
            {
              v50 = *sprite++;
              if ( v50 >= 0 )
                break;
              v49 += (unsigned __int16)(a5 * (unsigned __int8)-v50);
            }
            if ( !v50 )
              break;
            v51 = v50;
            do
            {
              v52 = *sprite++;
              memset(v49, v52, a5);
              v49 += a5;
              v46 = v51-- <= 1;
            }
            while ( !v46 );
          }
          v53 = a6 - 1;
          if ( a6 > 1 )
          {
            v129 = sprite;
            v54 = (unsigned int)((char*)v49 - (char*)v141);
            do
            {
              v55 = v141;
              v141 += scrWidth_12EFF0_12EFE0;
              qmemcpy(v141, v55, v54);
              v46 = v53-- <= 1;
            }
            while ( !v46 );
            sprite = v129;
          }
          v141 += scrWidth_12EFF0_12EFE0;
          v49 = (char*)v141;
          --v139;
        }
        while ( v139 );
      }
      else if ( (word_9ADFC & 0x40) != 0 )
      {
        v56 = (char *)(scrWidth_12EFF0_12EFE0 * a2 + a3 + v6);
        v57 = 0;
        v58 = -1;
        v59 = v56;
        do
        {
          while ( 1 )
          {
            while ( 1 )
            {
              LOBYTE(v58) = *sprite++;
              if ( (v58 & 0x80u) == 0 )
                break;
              v60 = &v56[-v58];
              LOBYTE(v57) = *sprite;
              sprite += v57 + 1;
              memset(v60, a5, v57);
              v56 = &v60[v57];
              v57 = 0;
            }
            if ( !(_BYTE)v58 )
              break;
            LOBYTE(v57) = v58;
            sprite += v57;
            memset(v56, a5, v57);
            v56 += v57;
            v57 = 0;
          }
          v59 += scrWidth_12EFF0_12EFE0;
          v56 = v59;
          --HIBYTE(a1);
        }
        while ( HIBYTE(a1) );
      }
      else
      {
        v61 = (char *)(scrWidth_12EFF0_12EFE0 * a2 + a3 + v6);
        v62 = 0;
        v63 = -1;
        v64 = v61;
        do
        {
          while ( 1 )
          {
            while ( 1 )
            {
              LOBYTE(v63) = *sprite++;
              if ( (v63 & 0x80u) == 0 )
                break;
              v65 = &v61[-v63];
              v66 = *sprite;
              v67 = sprite + 1;
              LOBYTE(v62) = v66;
              qmemcpy(v65, v67, v62);
              sprite = &v67[v62];
              v61 = &v65[v62];
              v62 = 0;
            }
            if ( !(_BYTE)v63 )
              break;
            LOBYTE(v62) = v63;
            qmemcpy(v61, sprite, v62);
            sprite += v62;
            v61 += v62;
            v62 = 0;
          }
          v64 += scrWidth_12EFF0_12EFE0;
          v61 = v64;
          --HIBYTE(a1);
        }
        while ( HIBYTE(a1) );
      }
    }
    else
    {
      v21 = (char *)(scrWidth_12EFF0_12EFE0 * a2 + a3 + v6);
      v22 = 0;
      v23 = -1;
      v24 = v21;
      do
      {
        while ( 1 )
        {
          while ( 1 )
          {
            LOBYTE(v23) = *sprite++;
            if ( (v23 & 0x80u) == 0 )
              break;
            v25 = &v21[-v23];
            v26 = *sprite;
            v27 = sprite + 1;
            LOBYTE(v22) = v26;
            qmemcpy(v25, v27, v22);
            sprite = &v27[v22];
            v21 = &v25[v22];
            v22 = 0;
          }
          if ( !(_BYTE)v23 )
            break;
          LOBYTE(v22) = v23;
          qmemcpy(v21, sprite, v22);
          sprite += v22;
          v21 += v22;
          v22 = 0;
        }
        v24 += scrWidth_12EFF0_12EFE0;
        v21 = v24;
        --HIBYTE(a1);
      }
      while ( HIBYTE(a1) );
    }
    return;
  }
  if ( !word_9ADFC )
  {
    v95 = -a3;
    if ( (unsigned __int8)a1 <= v95 )
      return;
    v96 = (_BYTE *)(scrWidth_12EFF0_12EFE0 * a2 + v6);
    BYTE1(v95) = HIBYTE(a1);
    v97 = v96;
    v134 = v95;
    v98 = 0;
    while ( 1 )
    {
      while ( 1 )
      {
        while ( 1 )
        {
          v99 = *sprite++;
          if ( v99 < 0 )
            break;
          if ( v99 )
          {
            LOBYTE(v98) = v99;
            do
            {
              v100 = *sprite++;
              LOBYTE(v95) = v95 - 1;
              if ( (v95 & 0x80u) != 0 )
                *v96++ = v100;
              --v98;
            }
            while ( v98 );
          }
          else
          {
            v97 += scrWidth_12EFF0_12EFE0;
            v96 = v97;
            LOWORD(v95) = __PAIR16__(BYTE1(v95), v134) - 256;
            if ( !BYTE1(v95) )
              return;
          }
        }
        if ( (char)v95 > 0 )
          break;
LABEL_179:
        v96 -= v99;
        v101 = *sprite++;
        LOBYTE(v98) = v101;
        do
        {
          v102 = *sprite++;
          LOBYTE(v95) = v95 - 1;
          if ( (v95 & 0x80u) != 0 )
            *v96++ = v102;
          --v98;
        }
        while ( v98 );
      }
      LOBYTE(v95) = v99 + v95;
      if ( (v95 & 0x80u) != 0 )
      {
        v99 = v95;
        goto LABEL_179;
      }
    }
  }
  if ( (word_9ADFC & 1) == 0 )
  {
    if ( (word_9ADFC & 2) == 0 )
      return;
    v115 = -a3;
    if ( (unsigned __int8)a1 <= v115 )
      return;
    v116 = (_BYTE *)(scrWidth_12EFF0_12EFE0 * (HIBYTE(a1) + a2) + v6);
    BYTE1(v115) = HIBYTE(a1);
    v117 = v116;
    v137 = v115;
    v118 = 0;
    while ( 1 )
    {
      while ( 1 )
      {
        while ( 1 )
        {
          v119 = *sprite++;
          if ( v119 < 0 )
            break;
          if ( v119 )
          {
            LOBYTE(v118) = v119;
            do
            {
              v120 = *sprite++;
              LOBYTE(v115) = v115 - 1;
              if ( (v115 & 0x80u) != 0 )
                *v116++ = v120;
              --v118;
            }
            while ( v118 );
          }
          else
          {
            v117 -= scrWidth_12EFF0_12EFE0;
            v116 = v117;
            LOWORD(v115) = __PAIR16__(BYTE1(v115), v137) - 256;
            if ( !BYTE1(v115) )
              return;
          }
        }
        if ( (char)v115 > 0 )
          break;
LABEL_225:
        v116 -= v119;
        v121 = *sprite++;
        LOBYTE(v118) = v121;
        do
        {
          v122 = *sprite++;
          LOBYTE(v115) = v115 - 1;
          if ( (v115 & 0x80u) != 0 )
            *v116++ = v122;
          --v118;
        }
        while ( v118 );
      }
      LOBYTE(v115) = v119 + v115;
      if ( (v115 & 0x80u) != 0 )
      {
        v119 = v115;
        goto LABEL_225;
      }
    }
  }
  if ( (word_9ADFC & 2) != 0 )
  {
    v103 = (_BYTE *)(scrWidth_12EFF0_12EFE0 * (HIBYTE(a1) + a2) + (unsigned __int8)a1 + a3 + v6);
    v104 = 0;
    v105 = (unsigned __int8)a1 + a3 + 1;
    if ( v105 >= 0 )
    {
      LOBYTE(a1) = v105;
      v135 = v105;
      v106 = v103;
      v107 = -1;
      do
      {
        while ( 1 )
        {
          while ( 1 )
          {
            LOBYTE(v107) = *sprite++;
            if ( (v107 & 0x80u) == 0 )
              break;
            v103 += v107;
            LOBYTE(a1) = v107 + a1;
          }
          if ( !(_BYTE)v107 )
            break;
          LOBYTE(v104) = v107;
          do
          {
            v108 = *sprite++;
            LOBYTE(a1) = a1 - 1;
            if ( (a1 & 0x80u) == 0 )
              *v103 = v108;
            --v103;
            --v104;
          }
          while ( v104 );
        }
        v106 -= scrWidth_12EFF0_12EFE0;
        v103 = v106;
        a1 = __PAIR16__(HIBYTE(a1), v135) - 256;
      }
      while ( HIBYTE(a1) );
    }
  }
  else
  {
    v109 = (_BYTE *)(scrWidth_12EFF0_12EFE0 * a2 + (unsigned __int8)a1 + a3 + v6);
    v110 = 0;
    v111 = (unsigned __int8)a1 + a3 + 1;
    if ( v111 >= 0 )
    {
      LOBYTE(a1) = v111;
      v136 = v111;
      v112 = v109;
      v113 = -1;
      do
      {
        while ( 1 )
        {
          while ( 1 )
          {
            LOBYTE(v113) = *sprite++;
            if ( (v113 & 0x80u) == 0 )
              break;
            v109 += v113;
            LOBYTE(a1) = v113 + a1;
          }
          if ( !(_BYTE)v113 )
            break;
          LOBYTE(v110) = v113;
          do
          {
            v114 = *sprite++;
            LOBYTE(a1) = a1 - 1;
            if ( (a1 & 0x80u) == 0 )
              *v109 = v114;
            --v109;
            --v110;
          }
          while ( v110 );
        }
        v112 += scrWidth_12EFF0_12EFE0;
        v109 = v112;
        a1 = __PAIR16__(HIBYTE(a1), v136) - 256;
      }
      while ( HIBYTE(a1) );
    }
  }
}

//----- (00061AA4) --------------------------------------------------------
int sub_61AA4(unsigned __int16 a1, unsigned __int16 a2, __int16 a3)
{
  int v3; // eax
  int v5; // [esp+4h] [ebp-4h]

  //fix
  v5 = 0;
  //fix

  if ( a1 < 0x280u && a2 < 0x190u )
  {
    v3 = (int)a2 >> 1;
    LOWORD(v3) = 320 * v3;
    *(_BYTE *)(begWscreen_2ECFF4_2ECFE4 + v3 + ((int)a1 >> 1)) = a3;
  }
  return v5;
}
// 61ADE: variable 'v5' is possibly undefined
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//----- (00061AE4) --------------------------------------------------------
int sub_61AE4(unsigned __int16 a1, unsigned __int16 a2, __int16 a3)
{
  int v4; // [esp+4h] [ebp-4h]

  //fix
  v4 = 0;
  //fix;

  if ( a1 < 0x280u && a2 < 0x1E0u )
    *(_BYTE *)(begWscreen_2ECFF4_2ECFE4 + 640 * a2 + a1) = a3;
  return v4;
}
// 61B1B: variable 'v4' is possibly undefined
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

void sub_61610_61B20(Pathstruct* pathstruct)
{
    while (1)
    {
        if (!pathstruct->colorPalette_var28)
            break;
        sub_634A0_639B0(pathstruct);
        pathstruct++;
    }
}

//----- (00061B50) --------------------------------------------------------
void sub_61B50(
        unsigned __int16 a1,
        unsigned __int16 a2,
        unsigned __int16 a3,
        unsigned __int16 a4,
        unsigned __int16 a5)
{
  _BYTE *v5; // edi
  __int16 v6; // dx
  int v7; // ebx
  int v8; // esi
  int v9; // ecx
  int v10; // [esp+0h] [ebp-4h]
  unsigned __int16 v11; // [esp+14h] [ebp+10h]

  v5 = (_BYTE *)(320 * (a2 >> 1) + begWscreen_2ECFF4_2ECFE4 + (a1 >> 1));
  v6 = a4 >> 1;
  v11 = a3 >> 1;
  v10 = (unsigned __int16)(320 - v11);
  if ( (word_9ADFC & 4) != 0 )
  {
    v7 = a5;
    v8 = dword_9AFA0;
    do
    {
      v9 = v11;
      do
      {
        BYTE1(v7) = *v5;
        *v5++ = *(_BYTE *)(v7 + v8);
        --v9;
      }
      while ( v9 );
      v5 += v10;
      --v6;
    }
    while ( v6 );
  }
  else
  {
    do
    {
      memset(v5, a5, v11);
      v5 += v10 + v11;
      --v6;
    }
    while ( v6 );
  }
}
// 9ADFC: using guessed type __int16 word_9ADFC;
// 9AFA0: using guessed type int dword_9AFA0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//----- (00061BD0) --------------------------------------------------------
void sub_61BD0(unsigned __int16 a1, unsigned __int16 a2, unsigned __int16 a3, __int16 a4, unsigned __int16 a5)
{
  _BYTE *v5; // edi
  int v7; // ebx
  int v8; // esi
  int v9; // ecx
  int v10; // [esp+0h] [ebp-4h]

  v5 = (_BYTE *)(640 * a2 + begWscreen_2ECFF4_2ECFE4 + a1);
  v10 = (unsigned __int16)(640 - a3);
  if ( (word_9ADFC & 4) != 0 )
  {
    v7 = a5;
    v8 = dword_9AFA0;
    do
    {
      v9 = a3;
      do
      {
        BYTE1(v7) = *v5;
        *v5++ = *(_BYTE *)(v7 + v8);
        --v9;
      }
      while ( v9 );
      v5 += v10;
      --a4;
    }
    while ( a4 );
  }
  else
  {
    do
    {
      memset(v5, a5, a3);
      v5 += v10 + a3;
      --a4;
    }
    while ( a4 );
  }
}
// 9ADFC: using guessed type __int16 word_9ADFC;
// 9AFA0: using guessed type int dword_9AFA0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//----- (00061C50) --------------------------------------------------------
int sub_61C50(__int16 a1, __int16 a2, __int16 a3, __int16 a4, unsigned __int16 a5)
{
  __int16 v6; // [esp+1Ch] [ebp+1Ch]
  __int16 v7; // [esp+20h] [ebp+20h]

  v6 = a3 - 1;
  v7 = a4 - 1;
  sub_6B770(a1, a2, v6 + a1, a2, a5, 0);
  sub_6B770(v6 + a1, a2, v6 + a1, v7 + a2 + 1, a5, 0);
  sub_6B770(a1, v7 + a2, v6 + a1 + 1, v7 + a2, a5, 0);
  return sub_6B770(a1, a2, a1, v7 + a2, a5, 0);
}

//----- (00061D20) --------------------------------------------------------
int sub_61D20(__int16 a1, __int16 a2, __int16 a3, __int16 a4, unsigned __int16 a5)
{
  __int16 v6; // [esp+1Ch] [ebp+1Ch]
  __int16 v7; // [esp+20h] [ebp+20h]

  v6 = a3 - 1;
  v7 = a4 - 1;
  sub_6B888(a1, a2, v6 + a1, a2, a5, 0);
  sub_6B888(v6 + a1, a2, v6 + a1, v7 + a2 + 1, a5, 0);
  sub_6B888(a1, v7 + a2, v6 + a1 + 1, v7 + a2, a5, 0);
  return sub_6B888(a1, a2, a1, v7 + a2, a5, 0);
}

//----- (00061DF0) --------------------------------------------------------
int sub_61DF0(__int16 a1)
{
  int result; // eax
  int v2[13]; // [esp+0h] [ebp-78h] BYREF
  char v3[28]; // [esp+34h] [ebp-44h] BYREF
  int v4[7]; // [esp+50h] [ebp-28h] BYREF
  char v5[12]; // [esp+6Ch] [ebp-Ch] BYREF

  memset(v2, 0, 50);
  HIWORD(v2[8]) = (unsigned int)dword_12F080_12F070 >> 4;
  LOWORD(v2[9]) = HIWORD(v2[8]);
  v2[0] = 0;
  v2[7] = 20225;
  v2[6] = a1;
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  memset(v5, 0, sizeof(v5));
  segread((uint32)v5);
  v4[0] = 768;
  v4[1] = 16;
  v4[5] = (int)v2;
  int386x(49, (uint32)v4, (uint32)v3, (uint32)v5);
  HIWORD(result) = HIWORD(dword_12F080_12F070);
  LOWORD(result) = *(unsigned __int8 *)((int)dword_12F080_12F070 + 4);
  word_12F074 = (unsigned __int8)result + (*(unsigned __int8 *)((int)dword_12F080_12F070 + 5) << 8);
  return result;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 63BCC: using guessed type _DWORD segread(_DWORD);
// 63BF6: using guessed type _DWORD int386x(_DWORD, _DWORD, _DWORD, _DWORD);
// 12F070: using guessed type int dword_12F080_12F070;
// 12F074: using guessed type __int16 word_12F074;

//----- (00061EC8) --------------------------------------------------------
int sub_619B8_61EC8(__int16 a1)
{
  char v2[28]; // [esp+0h] [ebp-38h] BYREF
  _WORD v3[14]; // [esp+1Ch] [ebp-1Ch] BYREF

  memset(v3, 0, sizeof(v3));
  memset(v2, 0, sizeof(v2));
  v3[0] = 20226;
  v3[2] = a1;
  int386(16, (uint32)v3, (uint32)v2);
  return sub_61DF0(a1);
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 63488: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);

//----- (00061F2C) --------------------------------------------------------
void sub_61A1C_61F2C(__int16 a1)
{
  int result; // eax

  FixPerifery();

  word_9AFA4 = a1;
  if ( (unsigned __int16)a1 >= 6u )
  {
    __outbyte(0x3C8u, 0);
    __outbyte(0x3C9u, 0x3Fu);
    __outbyte(0x3C9u, 0);
    __outbyte(0x3C9u, 0);
  }
  //fix __asm { int     10h; - VIDEO - VESA SuperVGA BIOS -  VESA SuperVGA BIOS - CPU VIDEO MEMORY CONTROL }
  result = 20229;
  //fix __asm { int     10h; - VIDEO - VESA SuperVGA BIOS -  VESA SuperVGA BIOS - CPU VIDEO MEMORY CONTROL }
}
// 9AFA4: using guessed type __int16 word_9AFA4;
// 12F070: using guessed type int dword_12F080_12F070;

//SYNCHRONIZED WITH REMC1
int sub_61AB0_61FC0()
{
  int v1[13]; // [esp+0h] [ebp-7Ch] BYREF
  int v2[7]; // [esp+34h] [ebp-48h] BYREF
  char v3[28]; // [esp+50h] [ebp-2Ch] BYREF
  char v4[12]; // [esp+6Ch] [ebp-10h] BYREF

  FixPerifery((char*)"SET PAL REG");

  memset(v1, 0, 50);
  HIWORD(v1[8]) = (unsigned int)dword_12F080_12F070 >> 4;
  LOWORD(v1[9]) = HIWORD(v1[8]);
  v1[0] = 0;
  v1[7] = 20224;
  v1[4] = 257;
  memset(v2, 0, sizeof(v2));
  memset(v3, 0, sizeof(v3));
  memset(v4, 0, sizeof(v4));
  segread((uint32)v4);
  v2[0] = 768;
  v2[1] = 16;
  v2[5] = (int)v1;
  int386x(49, (uint32)v2, (uint32)v3, (uint32)v4);
  return strncmp((char*)dword_12F080_12F070, "VESA", 4);
}

//----- (000620A0) --------------------------------------------------------
void sub_61B90_620A0(unsigned __int8 *a1)
{
    FixPerifery((char*)"initVga320");

    scrWidth_12EFF0_12EFE0 = 320;
    scrHeight_12EFF8_12EFE8 = 200;
    SetPalette_319A0_319E0((TColor*)a1);
    sub_5C468_5C978();
    sub_65EB0_663C0(0, 0, 320, 200);
  /*
  char v2[28]; // [esp+0h] [ebp-38h] BYREF
  int v3[7]; // [esp+1Ch] [ebp-1Ch] BYREF

  v3[0] = 3840;
  int386(16, (uint32)v3, (uint32)v2);
  if ( !word_12F01C )
    word_12F01C = (unsigned __int8)v2[0];
  v3[0] = 19;
  scrWidth_12EFF0_12EFE0 = 320;
  scrHeight_12EFF8_12EFE8 = 200;
  int386(16, (uint32)v3, (uint32)v2);
  SetPalette_319A0_319E0((TColor*)a1);
  sub_5C468_5C978();
  return sub_65EB0_663C0(0, 0, 320, 200);
  */
}
// 63488: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 12EFE0: using guessed type int scrWidth_12EFF0_12EFE0;
// 12EFE8: using guessed type int scrHeight_12EFF8_12EFE8;
// 12F01C: using guessed type __int16 word_12F01C;

//----- (00062140) --------------------------------------------------------
int sub_61C30_62140(unsigned __int8 *a1)
{
  char v2[28]; // [esp+0h] [ebp-38h] BYREF
  int v3[7]; // [esp+1Ch] [ebp-1Ch] BYREF

  v3[0] = 3840;
  int386(16, (uint32)v3, (uint32)v2);
  if ( !word_12F01C )
    word_12F01C = (unsigned __int8)v2[0];
  scrWidth_12EFF0_12EFE0 = 640;
  scrHeight_12EFF8_12EFE8 = 480;
  sub_619B8_61EC8(257);
  SetPalette_319A0_319E0((TColor*)a1);
  sub_5C468_5C978();
  return sub_65EB0_663C0(0, 0, 640, 480);
}
// 63488: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 12EFE0: using guessed type int scrWidth_12EFF0_12EFE0;
// 12EFE8: using guessed type int scrHeight_12EFF8_12EFE8;
// 12F01C: using guessed type __int16 word_12F01C;
// 62140: using guessed type int var_1C[7];
// 62140: using guessed type char var_38[28];

//----- (000621D0) --------------------------------------------------------
void FadeInOut_61CC0_621D0(TColor* palette, unsigned __int8 a2, char a3)
{
    TColor palette2[256]; // [esp+0h] [ebp-30Ch] BYREF

  int v3; // eax
  int v4; // eax
  //unsigned __int8 v6[768]; // [esp+0h] [ebp-30Ch] BYREF
  int i; // [esp+300h] [ebp-Ch]
  int v8; // [esp+308h] [ebp-4h]

  if ( a3 )
  {
    if ( byte_9AFA8 )
    {
      if ( a2 == ++word_12F690_12F680 )
        byte_9AFA8 = 0;
    }
    else
    {
      word_12F690_12F680 = 0;
      byte_9AFA8 = 1;
      sub_6B47C_6B98C(byte_12F090_12F080);
      if ( !palette)
        memset(&byte_12F390_12F380, 0, 768);
    }
    if ( !palette)
        palette = byte_12F390_12F380;
    for (int i = 0; i < 256; i++)
    {
        palette2[i].red = byte_12F090_12F080[i].red + (palette[i].red - byte_12F090_12F080[i].red) * word_12F690_12F680 / a2;
        palette2[i].green = byte_12F090_12F080[i].green + (palette[i].green - byte_12F090_12F080[i].green) * word_12F690_12F680 / a2;
        palette2[i].blue = byte_12F090_12F080[i].blue + (palette[i].blue - byte_12F090_12F080[i].blue) * word_12F690_12F680 / a2;
    }
    sub_5CC54_5D164();
    SetPalette_319A0_319E0(palette2);
  }
  else
  {
    sub_6B47C_6B98C(byte_12F090_12F080);
    if ( !palette)
    {
        palette = byte_12F390_12F380;
      memset(&byte_12F390_12F380, 0, 768);
    }
    for ( word_12F690_12F680 = 0; a2 >= word_12F690_12F680; ++word_12F690_12F680 )
    {
        for (int i = 0; i < 256; i++)
      {
            palette2[i].red = byte_12F090_12F080[i].red + (palette[i].red - byte_12F090_12F080[i].red) * word_12F690_12F680 / a2;
            palette2[i].green = byte_12F090_12F080[i].green + (palette[i].green - byte_12F090_12F080[i].green) * word_12F690_12F680 / a2;
            palette2[i].blue = byte_12F090_12F080[i].blue + (palette[i].blue - byte_12F090_12F080[i].blue) * word_12F690_12F680 / a2;
      }
      sub_5CC54_5D164();
      SetPalette_319A0_319E0(palette2);
    }
    byte_9AFA8 = 0;
  }
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 9AFA8: using guessed type char byte_9AFA8;
// 12F680: using guessed type __int16 word_12F690_12F680;
// 621D0: using guessed type unsigned __int8 var_30C[768];

//----- (000623D8) --------------------------------------------------------
void sub_623D8()
{
  byte_9AFA8 = 0;
}
// 9AFA8: using guessed type char byte_9AFA8;

//----- (000624A0) --------------------------------------------------------
void sub_624A0()
{
  if ( byte_939E4 )
  {
    sub_5D010_5D520();
    while ( sub_55ED0() )
      ;
    sub_666B4(dword_CC130, 0);
    sub_5E1A1(dword_CC138);
    if ( !byte_939CC )
      sub_5DE58();
    sub_65488(dword_CC130, 1, 1);
    sub_64D2C();
    sub_61610_61B20((Pathstruct*)(char*)"data/snds0-0.dat");
  }
}
// 939CC: using guessed type char byte_939CC;
// 939E4: using guessed type char byte_939E4;
// CC130: using guessed type int dword_CC130;
// CC138: using guessed type int dword_CC138;

//----- (00062530) --------------------------------------------------------
void sub_62530()
{
  int result; // eax

  //fix
  result = 0;
  //fix

  if ( byte_939CC )
  {
    if ( word_939D2 )
    {
      sub_5F930(dword_CBFC8);
      sub_5F865(dword_CBFC8);
      sub_60E2D(dword_CBFCC);
    }
    if ( byte_9AF9C )
      sub_60E2D(dword_12F064);
    sub_60D1C(dword_CBFCC, 1);
    if ( byte_9AF9C )
      sub_60D1C(dword_12F064, 1);
    sub_5DE58();
    sub_60845();
    if ( byte_CBFDF )
    {
      free_62128_62638((void*)dword_CBFD8);
      free_62128_62638((void*)dword_CBFD2);
    }
    if ( byte_9AF9C )
      free_62128_62638((void*)dword_12F06A);
    sub_61610_61B20((Pathstruct*)(char*)"data/music0-0.dat");
  }
}
// 939CC: using guessed type char byte_939CC;
// 939D2: using guessed type __int16 word_939D2;
// 9AF9C: using guessed type char byte_9AF9C;
// CBFC8: using guessed type int dword_CBFC8;
// CBFCC: using guessed type int dword_CBFCC;
// CBFD2: using guessed type int dword_CBFD2;
// CBFD8: using guessed type int dword_CBFD8;
// CBFDF: using guessed type char byte_CBFDF;
// 12F064: using guessed type int dword_12F064;
// 12F06A: using guessed type int dword_12F06A;

//----- (00062638) --------------------------------------------------------
void free_62128_62638(void* buffer)
{
  free_426E0_42A20(buffer);
}

//----- (00063040) --------------------------------------------------------
int sub_62B30_63040(int a1, int a2, char a3)
{
  return lseek(a1, a2, a3);
}
// 6BEA2: using guessed type _DWORD lseek(_DWORD, _DWORD, char);

//SYNCHRONIZED WITH REMC1
//int sub_62B60_63070_new(uint8_t* input, uint8_t* output)
int sub_62B60_63070(uint8_t* a1, uint8_t* a2)
{
    unsigned int i; // ecx
    int* v3; // esi
    int v4; // eax
    int v5; // eax
    _WORD* v6; // esi
    unsigned int v7; // edx
    char* v8; // ebx
    _DWORD* v9; // esi
    char* v10; // edi
    _DWORD* v11; // esi
    _WORD* v12; // edi
    _BYTE* v13; // esi
    _BYTE* v14; // edi
    char* v15; // edi
    int v16; // eax
    __int16 v17; // bx
    __int16 v18; // ax
    __int16 v19; // dx
    __int16 v20; // ax
    unsigned __int16 v22; // [esp-1Ah] [ebp-1Eh]

    if (*(_WORD*)a1 != 20050)
        return 0;
    v3 = (int*)(a1 + 4);
    if (*(_WORD*)(a1 + 2) != 323)
        return 0;
    LOBYTE(v4) = sub_62CF4_63204(v3);
    dword_9B140 = v4;
    LOBYTE(v5) = sub_62CF4_63204(v3);
    dword_9B144 = v5;
    byte_9B150 = *(_BYTE*)(a1 + 9);
    v6 = (_WORD*)(a1 + 10);
    v7 = (uint32)(v5 + 18 + a1);
    if (v7 > (unsigned int)a2)
    {
        v8 = (char*)&a2[dword_9B140 + *(unsigned __int8*)(a1 + 16)];
        if ((unsigned int)v8 > v7)
        {
            v9 = (_DWORD*)(v7 - 4);
            v10 = v8 - 4;
            for (i = (unsigned int)dword_9B144 >> 2; i; --i)
            {
                *(_DWORD*)v10 = *v9--;
                v10 -= 4;
            }
            v11 = v9 + 1;
            v12 = (uint16*)(v10 + 4);
            LOWORD(i) = dword_9B144 & 3;
            if ((dword_9B144 & 3) != 0)
            {
                v13 = (uint8*)v11 - 1;
                v14 = (uint8*)v12 - 1;
                while (i)
                {
                    *v14-- = *v13--;
                    --i;
                }
                v12 = (uint16*)(v14 + 1);
            }
            v6 = v12;
        }
    }
    v15 = (char*)a2;
    byte_9B151 = 0;
    word_9B14C = *v6;
    sub_62D40_63250(2u, (int)v6);
    do
    {
        sub_62DC3_632D3((int)v6);
        sub_62DC3_632D3((int)v6);
        sub_62DC3_632D3((int)v6);
        word_9B14A = sub_62D40_63250(0x10u, (int)v6);
        while (1)
        {
            sub_62CFD_6320D(word_9AFC0, (int)v6);
            if ((_WORD)i)
            {
                qmemcpy(v15, v6, i);
                v6 = (_WORD*)((char*)v6 + i);
                v15 += i;
                i = (unsigned __int8)byte_9B151;
                v17 = *v6;
                v18 = __ROL2__(*v6, byte_9B151);
                v19 = (1 << byte_9B151) - 1;
                word_9B14C &= v19;
                v20 = v18 & v19 | (v6[1] << byte_9B151);
                word_9B14C |= v17 << byte_9B151;
                word_9B14E = v20;
            }
            if (!--word_9B14A)
                break;
            sub_62CFD_6320D(word_9B040, (int)v6);
            v22 = i;
            sub_62CFD_6320D(word_9B0C0, (int)v6);
            LOWORD(i) = i + 2;
            v16 = v22;
            LOWORD(v16) = v22 + 1;
            qmemcpy(v15, &v15[-v16], i);
            v15 += i;
            i = 0;
        }
        --byte_9B150;
    } while (byte_9B150);
    return dword_9B140;
}

//----- (00063070) --------------------------------------------------------
int sub_62B60_63070_new(uint8_t* input, uint8_t* output)
{
    char RNSSING[5] = "RNC\x1";
    Type_fileSize fileSize;
    if (!memcmp((char*)input, RNSSING, 4))
    {
        fileSize.bytes[0] = input[7];
        fileSize.bytes[1] = input[6];
        fileSize.bytes[2] = input[5];
        fileSize.bytes[3] = input[4];
    }
    else
        return -1;
    DataFileIO::Decompress(input, output);
    return fileSize.size;
    /*
  unsigned int i; // ecx
  int *v3; // esi
  int v4; // eax
  int v5; // eax
  _WORD *v6; // esi
  unsigned int v7; // edx
  char *v8; // ebx
  _DWORD *v9; // esi
  char *v10; // edi
  _DWORD *v11; // esi
  _WORD *v12; // edi
  _BYTE *v13; // esi
  _BYTE *v14; // edi
  char *v15; // edi
  int v16; // eax
  __int16 v17; // bx
  __int16 v18; // ax
  __int16 v19; // dx
  __int16 v20; // ax
  unsigned __int16 v22; // [esp-1Ah] [ebp-1Eh]

  if ( *(_WORD *)input != 20050 )
    return 0;
  v3 = (int *)(input + 4);
  if ( *(_WORD *)(input + 2) != 323 )
    return 0;
  LOBYTE(v4) = sub_62CF4_63204(v3);
  dword_9B140 = v4;
  LOBYTE(v5) = sub_62CF4_63204(v3);
  dword_9B144 = v5;
  byte_9B150 = *(_BYTE *)(input + 9);
  v6 = (_WORD *)(input + 10);
  v7 = v5 + 18 + input;
  if ( v7 > (unsigned int)output)
  {
    v8 = &a2[dword_9B140 + *(unsigned __int8 *)(input + 16)];
    if ( (unsigned int)v8 > v7 )
    {
      v9 = (_DWORD *)(v7 - 4);
      v10 = v8 - 4;
      for ( i = (unsigned int)dword_9B144 >> 2; i; --i )
      {
        *(_DWORD *)v10 = *v9--;
        v10 -= 4;
      }
      v11 = v9 + 1;
      v12 = (uint16*)(v10 + 4);
      LOWORD(i) = dword_9B144 & 3;
      if ( (dword_9B144 & 3) != 0 )
      {
        v13 = (uint8 *)v11 - 1;
        v14 = (uint8 *)v12 - 1;
        while ( i )
        {
          *v14-- = *v13--;
          --i;
        }
        v12 = (uint16*)(v14 + 1);
      }
      v6 = v12;
    }
  }
  v15 = output;
  byte_9B151 = 0;
  word_9B14C = *v6;
  sub_62D40_63250(2u, (int)v6);
  do
  {
    sub_62DC3_632D3((int)v6);
    sub_62DC3_632D3((int)v6);
    sub_62DC3_632D3((int)v6);
    word_9B14A = sub_62D40_63250(0x10u, (int)v6);
    while ( 1 )
    {
      sub_62CFD_6320D(word_9AFC0, (int)v6);
      if ( (_WORD)i )
      {
        qmemcpy(v15, v6, i);
        v6 = (_WORD *)((char *)v6 + i);
        v15 += i;
        i = (unsigned __int8)byte_9B151;
        v17 = *v6;
        v18 = __ROL2__(*v6, byte_9B151);
        v19 = (1 << byte_9B151) - 1;
        word_9B14C &= v19;
        v20 = v18 & v19 | (v6[1] << byte_9B151);
        word_9B14C |= v17 << byte_9B151;
        word_9B14E = v20;
      }
      if ( !--word_9B14A )
        break;
      sub_62CFD_6320D(word_9B040, (int)v6);
      v22 = i;
      sub_62CFD_6320D(word_9B0C0, (int)v6);
      LOWORD(i) = i + 2;
      v16 = v22;
      LOWORD(v16) = v22 + 1;
      qmemcpy(v15, &v15[-v16], i);
      v15 += i;
      i = 0;
    }
    --byte_9B150;
  }
  while ( byte_9B150 );
  return dword_9B140;
  */
}
// 6309D: variable 'v4' is possibly undefined
// 630A7: variable 'v5' is possibly undefined
// 6315F: variable 'i' is possibly undefined
// 9AFC0: using guessed type __int16 word_9AFC0[64];
// 9B040: using guessed type __int16 word_9B040[64];
// 9B0C0: using guessed type __int16 word_9B0C0[64];
// 9B140: using guessed type int dword_9B140;
// 9B144: using guessed type int dword_9B144;
// 9B14A: using guessed type __int16 word_9B14A;
// 9B14C: using guessed type __int16 word_9B14C;
// 9B14E: using guessed type __int16 word_9B14E;
// 9B150: using guessed type char byte_9B150;
// 9B151: using guessed type char byte_9B151;

//----- (00063204) --------------------------------------------------------
char sub_62CF4_63204(int *a1)
{
  int v1; // eax

  v1 = *a1;
  BYTE1(v1) = *a1;
  LOBYTE(v1) = BYTE1(*a1);
  return (unsigned __int16)__ROL4__(v1, 16) >> 8;
}

//----- (0006320D) --------------------------------------------------------
__int16 sub_62CFD_6320D(__int16 *a1, int a2)
{
  __int16 *v3; // esi
  __int16 v5; // ax
  __int16 *v6; // esi
  __int16 v7; // bx
  __int16 v8; // ax
  __int16 v9; // cx
  __int16 result; // ax

  v3 = a1;
  do
  {
    v5 = *v3;
    v6 = v3 + 1;
    v7 = word_9B14C & v5;
    v8 = *v6;
    v3 = v6 + 1;
  }
  while ( v8 != v7 );
  v9 = v3[30];
  result = sub_62D40_63250(HIBYTE(v9), a2);
  if ( (unsigned __int8)v9 >= 2u )
    return (1 << (v9 - 1)) | sub_62D40_63250(v9 - 1, a2);
  return result;
}
// 9B14C: using guessed type __int16 word_9B14C;

//----- (00063250) --------------------------------------------------------
__int16 sub_62D40_63250(unsigned __int8 a1, int a2)
{
  unsigned __int16 v3; // ax
  unsigned __int16 v4; // bx
  char v5; // ch
  __int16 v7; // [esp-4h] [ebp-4h]

  v3 = word_9B14E;
  v4 = word_9B14C;
  v7 = word_9B14C & ((1 << a1) - 1);
  v5 = byte_9B151 - a1;
  if ( (unsigned __int8)byte_9B151 < a1 )
  {
    v4 = __ROR2__(word_9B14E & ((1 << byte_9B151) - 1), byte_9B151) | ((unsigned __int16)word_9B14C >> byte_9B151);
    v3 = *(_WORD *)(a2 + 2);
    a1 -= byte_9B151;
    v5 = 16 - a1;
  }
  word_9B14E = v3 >> a1;
  word_9B14C = __ROR2__(v3 & ((1 << a1) - 1), a1) | (v4 >> a1);
  byte_9B151 = v5;
  return v7;
}
// 9B14C: using guessed type __int16 word_9B14C;
// 9B14E: using guessed type __int16 word_9B14E;
// 9B151: using guessed type char byte_9B151;

//----- (000632D3) --------------------------------------------------------
char sub_62DC3_632D3(int a1)
{
  _BYTE *v1; // edi
  unsigned __int16 v2; // ax
  int v3; // ecx
  int v4; // ecx
  _BYTE *v5; // esi
  _WORD *v6; // edi
  unsigned __int16 v7; // bx
  unsigned __int16 v8; // dx
  _WORD *v9; // edi
  unsigned __int16 v10; // bx
  char v11; // cf
  __int16 v13; // t2
  __int16 v14; // ax
  __int16 v16; // [esp-24h] [ebp-28h] BYREF
  unsigned __int16 v17; // [esp-22h] [ebp-26h]
  unsigned __int16 v18; // [esp-20h] [ebp-24h]
  _BYTE *v19; // [esp-1Eh] [ebp-22h]
  __int16 v20; // [esp-1Ah] [ebp-1Eh]
  int v21; // [esp-18h] [ebp-1Ch]
  _DWORD v22[6]; // [esp-14h] [ebp-18h] BYREF

  v1 = (uint8*)v22;
  v2 = sub_62D40_63250(5u, a1);
  v3 = v2;
  if ( v2 )
  {
    v21 = v2;
    do
    {
      v2 = sub_62D40_63250(4u, a1);
      *v1++ = v2;
      --v3;
    }
    while ( v3 );
    v4 = v21;
    v21 = a1;
    v5 = (uint8*)v22;
    v6 = (_WORD *)v22[4];
    LOBYTE(v2) = 1;
    v7 = 0;
    v8 = 0x8000;
    do
    {
      v20 = v4;
      v19 = v5;
      do
      {
        if ( (_BYTE)v2 == *v5 )
        {
          v18 = v2;
          v17 = v7;
          v16 = v4;
          *v6 = (1 << v2) - 1;
          v9 = v6 + 1;
          v10 = v7 >> (16 - v2);
          LOBYTE(v4) = v2;
          //fix _AX = 0;
          v11 = 0;
          do
          {
            v13 = v11 << 15;
            v11 = v10 & 1;
            v10 = (v10 >> 1) | v13;
            __asm { rcl     ax, 1 }
            --v4;
          }
          while ( v4 );
          //fix *v9 = _AX;
          v6 = v9 + 1;
          LOBYTE(v14) = v5 - (_BYTE *)&v16 - 16;
          HIBYTE(v14) = *v5;
          v6[30] = v14;
          LOWORD(v4) = v16;
          v2 = v18;
          v7 = v8 + v17;
        }
        ++v5;
        --v4;
      }
      while ( v4 );
      v5 = v19;
      LOWORD(v4) = v20;
      v8 >>= 1;
      LOBYTE(v2) = v2 + 1;
    }
    while ( (_BYTE)v2 != 17 );
  }
  return v2;
}

//----- (00063370) --------------------------------------------------------
void sub_62E60_63370(int a1, int a2, int a3)
{
  FILE* v5; // [esp+4h] [ebp-8h]
  int v6; // [esp+8h] [ebp-4h]

  v5 = DataFileIO::CreateOrOpenFile((char*)a1, 546);
  if ( v5 == nullptr )
    return;
  v6 = FileWrite_62ED0_633E0(v5, (uint8_t*)a2, a3);
  DataFileIO::Close(v5);
}

size_t FileWrite_62ED0_633E0(FILE* descriptor, uint8_t* buffer, uint32_t count)
{
    return fwrite(buffer, 1, count, descriptor);
}

//----- (000634B8) --------------------------------------------------------
void CopyScreen_62FA8_634B8(const void *a1, void *a2, unsigned __int16 a3)
{
  qmemcpy(a2, a1, 320 * a3);
}

//----- (000634D4) --------------------------------------------------------
void CopyScreen_62FC4_634D4(const void *a1, void *a2, unsigned __int16 a3)
{
  qmemcpy(a2, a1, 640 * a3);
}

//----- (00063500) --------------------------------------------------------
int sub_63500(int a1)
{
  return *(_DWORD *)(a1 + 4);
}

//----- (00063520) --------------------------------------------------------
void sub_63010_63520()
{
  int v0; // [esp+0h] [ebp-14h]
  int n; // [esp+4h] [ebp-10h]
  signed int k; // [esp+8h] [ebp-Ch]
  int m; // [esp+8h] [ebp-Ch]
  int ii; // [esp+8h] [ebp-Ch]
  int jj; // [esp+8h] [ebp-Ch]
  int kk; // [esp+8h] [ebp-Ch]
  int i; // [esp+Ch] [ebp-8h]
  int j; // [esp+Ch] [ebp-8h]
  int v9; // [esp+Ch] [ebp-8h]
  unsigned int v10; // [esp+10h] [ebp-4h]

  if ( !dword_12F6A8_12F698[0] && false)//fixed(false)
  {
    v0 = sub_6342C_6393C(0xFA00u);
    for ( i = 0; i < 256; ++i )
      memset(&dword_12F6A0_12F690[3 * i], 0, 12);
    for ( j = 0; j < 256; ++j )
      memset((char *)&dword_1302A0_130290 + 18 * j, 0, 18);
    v9 = 0;
    for ( k = 0xA0000; k >= 1024; k -= 1024 )
    {
      v10 = sub_6342C_6393C(k);
      if ( v10 )
      {
        dword_12F6A8_12F698[3 * v9] = k;
        dword_12F6A0_12F690[3 * v9] = 16 * (unsigned __int16)v10;
        dword_12F6A4_12F694[3 * v9] = HIWORD(v10);
        k += 1024;
        ++v9;
      }
    }
    for ( m = 0x1000000; m >= 4096; m -= 4096 )
    {
      dword_12F6A0_12F690[3 * v9] = (int)malloc(m);
      if ( dword_12F6A0_12F690[3 * v9] )
      {
        for ( n = 4096; n > 0; n -= 16 )
        {
          if ( expand(dword_12F6A0_12F690[3 * v9], n + m) )
          {
            dword_12F6A8_12F698[3 * v9] = n + m;
            dword_12F6A4_12F694[3 * v9] = 0;
            break;
          }
        }
        m += 4096;
        ++v9;
      }
    }
    for ( ii = 4096; ii >= 16; ii -= 16 )
    {
      dword_12F6A0_12F690[3 * v9] = (int)malloc(ii);
      if ( dword_12F6A0_12F690[3 * v9] )
      {
        dword_12F6A8_12F698[3 * v9] = ii;
        dword_12F6A4_12F694[3 * v9] = 0;
        ii += 4096;
        ++v9;
      }
    }
    qsort(dword_12F6A0_12F690, v9, 12, (_CoreCrtNonSecureSearchSortCompareFunction)sub_63500);
    for ( jj = 0; jj < 256; ++jj )
      *(int *)((char *)&dword_130294 + 18 * jj) = 0;
    for ( kk = 0; kk < v9; ++kk )
    {
      *(int *)((char *)&dword_1302A0_130290 + 18 * kk) = dword_12F6A0_12F690[3 * kk];
      *(int *)((char *)&dword_130294 + 18 * kk) = dword_12F6A8_12F698[3 * kk];
      if ( kk )
        *(int *)((char *)&dword_1302AC_13029C + 18 * kk) = (int)&dword_1302A0_130290 + 18 * kk - 18;
      else
        dword_1302AC_13029C = 0;
      *(int *)((char *)&dword_1302A8_130298 + 18 * kk) = (int)&dword_1302A0_130290 + 18 * kk + 18;
      byte_1302B0_1302A0[18 * kk] = 0;
      byte_1302B1_1302A1[18 * kk] = kk;
    }
    *(int *)((char *)&dword_1302A8_130298 + 18 * v9 - 18) = 0;
    sub_6D35C_6D86C(HIWORD(v0));
  }
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 6D071: using guessed type _DWORD malloc(_DWORD);
// 6D16D: using guessed type _DWORD expand(_DWORD, _DWORD);
// 6D43D: using guessed type _DWORD qsort(_DWORD, _DWORD, _DWORD, _DWORD);
// 12F690: using guessed type int dword_12F6A0_12F690[];
// 12F694: using guessed type int dword_12F6A4_12F694[];
// 12F698: using guessed type int dword_12F6A8_12F698[];
// 130290: using guessed type int dword_1302A0_130290;
// 130294: using guessed type int dword_130294;
// 130298: using guessed type int dword_1302A8_130298;
// 13029C: using guessed type int dword_1302AC_13029C;

//----- (00063848) --------------------------------------------------------
void sub_63338_63848()
{
  int *result; // eax
  int *i; // [esp+0h] [ebp-4h]

  //fix
  result = 0;
  //fix

  dword_131490 = 0;
  dword_131494 = 0;
  dword_131498 = 0;
  freeMem_1314AC_13149C = 0;
  dword_1314A0 = -1;
  for ( i = &dword_1302A0_130290; i; i = result )
  {
    if ( *((_BYTE *)i + 16) )
    {
      dword_131498 += i[1];
      dword_131490 += i[1];
    }
    else
    {
      dword_131494 += i[1];
      if ( i[1] > (unsigned int)freeMem_1314AC_13149C )
        freeMem_1314AC_13149C = i[1];
      if ( i[1] < (unsigned int)dword_1314A0 )
        dword_1314A0 = i[1];
      dword_131490 += i[1];
    }
    result = (int *)i[2];
  }
  LOBYTE(dword_131490) = dword_131490 & 0xFC;
  LOBYTE(dword_131494) = dword_131494 & 0xFC;
  LOBYTE(dword_131498) = dword_131498 & 0xFC;
  LOBYTE(freeMem_1314AC_13149C) = freeMem_1314AC_13149C & 0xFC;
  LOBYTE(dword_1314A0) = dword_1314A0 & 0xFC;
}
// 130290: using guessed type int dword_1302A0_130290;
// 131490: using guessed type int dword_131490;
// 131494: using guessed type int dword_131494;
// 131498: using guessed type int dword_131498;
// 13149C: using guessed type int freeMem_1314AC_13149C;
// 1314A0: using guessed type int dword_1314A0;

//----- (0006393C) --------------------------------------------------------
int sub_6342C_6393C(unsigned int a1)
{
  int v2[7]; // [esp+0h] [ebp-40h] BYREF
  int v3[7]; // [esp+1Ch] [ebp-24h] BYREF
  int v4; // [esp+38h] [ebp-8h]

  v4 = 0;
  if ( a1 < (unsigned int)&tempScreenBuffer_A0000 )
  {
    v2[0] = 256;
    v2[1] = (a1 + 15) >> 4;
    int386(49, (uint32)v2, (uint32)v3);
    if ( !v3[6] )
      return (v3[3] << 16) | v3[0];
  }
  return v4;
}
// 63488: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);

void sub_634A0_639B0(Pathstruct* pathstruct)
{
	if (*pathstruct->colorPalette_var28)
	{
		free_426E0_42A20((void*)*pathstruct->colorPalette_var28);
		*pathstruct->colorPalette_var28 = 0;
	}
}

int sub_634E0_639F0(Pathstruct* pathstruct)
{
	void* (*mallocVar)(size_t);
	sub_63010_63520();
	if ((pathstruct->var40_alloc_type & 1) != 0)
		mallocVar = malloc_425C0_42900;
	else
		mallocVar = malloc_42540_42880;
	sub_634A0_639B0(pathstruct);
	if (pathstruct->path[0] == '*')
	{
		*pathstruct->colorPalette_var28 = (uint8_t*)mallocVar(pathstruct->var36_size_buffer);
		if (!(*pathstruct->colorPalette_var28))
			return 0;
	}
	else
	{
		pathstruct->var36_size_buffer = GetRNCFilesize_63910_63E20(pathstruct);
		if (pathstruct->var36_size_buffer <= 0)
			return 0;
		*pathstruct->colorPalette_var28 = (uint8_t*)mallocVar(pathstruct->var36_size_buffer);
		if (!(*pathstruct->colorPalette_var28))
			return -1;
		if (sub_3EEA0_3F1E0(pathstruct->path, *pathstruct->colorPalette_var28) != pathstruct->var36_size_buffer)
		{
			*pathstruct->colorPalette_var28 = 0;
			*pathstruct->var32_end_buffer = 0;
			pathstruct->var36_size_buffer = 0;
			return 0;
		}
	}
	if (pathstruct->var32_end_buffer)
		*pathstruct->var32_end_buffer = pathstruct->var36_size_buffer + *pathstruct->colorPalette_var28;
	return 1;
}

//----- (00063C8B) --------------------------------------------------------
void sub_63C8B()
{
  ;
}

//----- (00063C9C) --------------------------------------------------------
char *sub_63C9C(int a1)
{
  return off_9EF10[a1];
}
// 9EF10: using guessed type char *off_9EF10[20];

//----- (00063CBF) --------------------------------------------------------
void sub_63CBF()
{
  ;
}

//----- (00063CD0) --------------------------------------------------------
void sub_63CD0()
{
  ;
}

//----- (00063CE1) --------------------------------------------------------
int sub_63CE1(int a1, int a2, unsigned __int16 a3, int a4)
{
  //fix MK_FP(byte_9C07A[9 * a1 + 1], byte_9C07A[9 * a1])(a2, a3, a1, a4);
  return 0;
}
// 9C07A: using guessed type _DWORD byte_9C07A[39];

//----- (00063DF0) --------------------------------------------------------
int sub_63DF0(int a1, int a2, int a3)
{
  void *retaddr[2]; // [esp+10h] [ebp+10h]

  byte_9ECFE = 1;
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(a1, a2, a3);
}
// 9ECFE: using guessed type char byte_9ECFE;

//----- (00063E08) --------------------------------------------------------
void sub_63E08()
{
  ;
}

int GetRNCFilesize_63910_63E20(Pathstruct* pathstruct)
{
	uint8_t miniBuffer[8];
	char dataPath[MAX_PATH];
	sprintf(dataPath, "%s/%s", gameDataPath.c_str(), pathstruct->path);
	char RNSSING[5] = "RNC\x1";
	FILE* file = DataFileIO::CreateOrOpenFile(dataPath, 512);
	if (file == nullptr)
		return -1;
	DataFileIO::Read(file, miniBuffer, 8);
	Type_fileSize fileSize;
	fileSize.size = -1;
	if (!memcmp((char*)miniBuffer, RNSSING, 4))
	{
		fileSize.bytes[0] = miniBuffer[7];
		fileSize.bytes[1] = miniBuffer[6];
		fileSize.bytes[2] = miniBuffer[5];
		fileSize.bytes[3] = miniBuffer[4];
	}
	else
	{
		fileSize.size = DataFileIO::FileLengthBytes(file);
	}
	DataFileIO::Close(file);
	return fileSize.size;
}

//----- (00063F9C) --------------------------------------------------------
void sub_63F9C()
{
  ;
}

//----- (00063FAD) --------------------------------------------------------
int sub_63A9D_63FAD(int a3, __int16 a4)
{
    __int64 v4; // eax

    //fix
    __int16 a1 = 0;
    int a2 = 0;
    //fix

  if ( dword_9EF60 )
    return 3;
  if ( a3 || a4 )
  {
    strcpy(&unk_A05D1, (char*)a3);
    strcat(&unk_A05D1, aHmidet386);
  }
  else
  {
    strcpy(&unk_A05D1, aHmidet386);
  }
  dword_131564 = open((uint32)&unk_A05D1, 512);
  if ( dword_131564 == -1 )
    return 15;
  read(dword_131564, (uint32)&unk_131578, 44);
  dword_131568 = (int)malloc(4096);
  if ( dword_131568 )
  {
    dword_131570 = sub_67557_67A67(a1, a2, dword_131568);
    v4 = sub_67A92();
    word_1315A8 = a1;
    dword_1315A4 = v4;
    sub_679DD();
    lseek(dword_131564, 0, 0);
    dword_9EF64 = 0;
    dword_9EF60 = 1;
    return 0;
  }
  else
  {
    close(dword_131564);
    return 5;
  }
}
// 66E2E: using guessed type _DWORD close(_DWORD);
// 66E3C: using guessed type _DWORD read(_DWORD, _DWORD, _DWORD);
// 6BEA2: using guessed type _DWORD lseek(_DWORD, _DWORD, char);
// 6D071: using guessed type _DWORD malloc(_DWORD);
// 6E21E: using guessed type _DWORD strcpy(_DWORD, _DWORD);
// 6E243: using guessed type _DWORD strcat(_DWORD, _DWORD);
// 9EF60: using guessed type int dword_9EF60;
// 9EF64: using guessed type int dword_9EF64;
// 131564: using guessed type int dword_131564;
// 131568: using guessed type int dword_131568;
// 131570: using guessed type int dword_131570;
// 1315A4: using guessed type int dword_1315A4;
// 1315A8: using guessed type __int16 word_1315A8;

//----- (00064116) --------------------------------------------------------
int sub_64116()
{
  dword_9EF60 = 0;
  close(dword_131564);
  sub_67A0A();
  free((void*)dword_131568);
  return 0;
}
// 66E2E: using guessed type _DWORD close(_DWORD);
// 6BF22: using guessed type _DWORD free(_DWORD);
// 9EF60: using guessed type int dword_9EF60;
// 131564: using guessed type int dword_131564;
// 131568: using guessed type int dword_131568;

//----- (0006416A) --------------------------------------------------------
int sub_63C5A_6416A(const void *a1, unsigned int a2, char *a3, __int16 a4, unsigned int a5)
{
  int v7; // [esp+4h] [ebp-18h]
  int v8; // [esp+Ch] [ebp-10h]
  int v9; // [esp+10h] [ebp-Ch]
  unsigned int v10; // [esp+14h] [ebp-8h]

  v10 = 0;
  if ( !a3 && !a4 )
    return 2;
  if ( a2 < 0xE000 || a2 > 0xE200 )
    return 6;
  v9 = 0;
  lseek(dword_131564, 0, 0);
  read(dword_131564, (uint32)&unk_131578, 44);
  while ( v10 <= dword_131598 && !v9 )
  {
    v7 = lseek(dword_131564, 0, 1);
    read(dword_131564, (uint32)&unk_131530, 48);
    if ( dword_131558 == a2 && byte_13155D < 0 )
    {
      v9 = 1;
      read(dword_131564, dword_131568, dword_131554);
      dword_131574 = dword_131568;
    }
    else
    {
      lseek(dword_131564, dword_131554, 1);
    }
    ++v10;
  }
  if ( v9 != 1 )
    return 7;
  v8 = sub_67C20((int (*)(_DWORD))dword_131574);
  if ( !v8 )
    return 8;
  sub_6765C_67B6C(a1, (int (*)(_DWORD))dword_131574, dword_1315A4, word_1315A8, a3, a4);
  __writegsdword(a5, v8);
  dword_131560 = v7;
  return 0;
}
// 642F1: variable 'v7' is possibly undefined
// 66E3C: using guessed type _DWORD read(_DWORD, _DWORD, _DWORD);
// 6BEA2: using guessed type _DWORD lseek(_DWORD, _DWORD, char);
// 131554: using guessed type int dword_131554;
// 131558: using guessed type int dword_131558;
// 13155D: using guessed type char byte_13155D;
// 131560: using guessed type int dword_131560;
// 131564: using guessed type int dword_131564;
// 131568: using guessed type int dword_131568;
// 131574: using guessed type int dword_131574;
// 131598: using guessed type int dword_131598;
// 1315A4: using guessed type int dword_1315A4;
// 1315A8: using guessed type __int16 word_1315A8;

//----- (00064758) --------------------------------------------------------
int sub_64758(unsigned int a1, __int16 a2)
{
  if ( !a1 && !a2 )
    return 2;
  lseek(dword_131564, dword_131560, 0);
  read(dword_131564, (uint32)&unk_131530, 48);
  read(dword_131564, dword_131568, dword_131554);
  sub_67C20((int (*)(_DWORD))dword_131574);
  sub_67C4B((int (*)(_DWORD))dword_131574);
  __writegsdword(a1, dword_A06DC);
  __writegsdword(a1 + 8, dword_A06E0);
  __writegsdword(a1 + 4, dword_A06E4);
  return 0;
}
// 66E3C: using guessed type _DWORD read(_DWORD, _DWORD, _DWORD);
// 6BEA2: using guessed type _DWORD lseek(_DWORD, _DWORD, char);
// A06DC: using guessed type int dword_A06DC;
// A06E0: using guessed type int dword_A06E0;
// A06E4: using guessed type int dword_A06E4;
// 131554: using guessed type int dword_131554;
// 131560: using guessed type int dword_131560;
// 131564: using guessed type int dword_131564;
// 131568: using guessed type int dword_131568;
// 131574: using guessed type int dword_131574;
// 1315A4: using guessed type int dword_1315A4;
// 1315A8: using guessed type __int16 word_1315A8;

//----- (00064924) --------------------------------------------------------
void sub_64924()
{
  ;
}

//----- (00064935) --------------------------------------------------------
void sub_64935()
{
  ;
}

//----- (00064946) --------------------------------------------------------
__int16 sub_64946()
{
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  sub_679DD();
  return sub_679DD();
}

//----- (00064B0B) --------------------------------------------------------
__int16 sub_64B0B()
{
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  sub_67A0A();
  return sub_67A0A();
}

//----- (00064CD0) --------------------------------------------------------
int sub_64CD0(int a1, unsigned __int16 a2)
{
  sub_64946();
  dword_9EF80 = 1;
  //fix
  /*
  if ( a1 || a2 )
    fstrcpy(&byte_A04D2, (unsigned __int16)__DS__, a1, a2);
  else
    byte_A04D2 = 0;*/
  return 0;
}
// 6AB8A: using guessed type _DWORD fstrcpy(_DWORD, _DWORD, _DWORD, _DWORD);
// 9EF80: using guessed type int dword_9EF80;
// A04D2: using guessed type char byte_A04D2;

//----- (00064D2C) --------------------------------------------------------
int sub_64D2C()
{
  sub_64B0B();
  dword_9EF80 = 0;
  return 0;
}
// 9EF80: using guessed type int dword_9EF80;

//----- (00064D56) --------------------------------------------------------
int sub_64846_64D56(
        int a1,
        int a2,
        unsigned int a3,
        unsigned int a4,
        int a5,
        unsigned int a6,
        int a7,
        unsigned int a8)
{
  int v8; // edx
  int v9; // edx
  __int16 v10; // dx
  int v11; // edx
  int v12; // edx
  int v13; // edx
  int v14; // eax
  int v15; // ebx
  int v16; // eax
  int v17; // ebx
  int v18; // eax
  unsigned int v19; // ebx
  int v20; // eax
  int v21; // ebx
  int v22; // eax
  int v23; // ebx
  int v24; // eax
  int v25; // ebx
  int v26; // eax
  int v27; // ebx
  int v29; // [esp+8h] [ebp-64h]
  unsigned __int16 v30; // [esp+Ch] [ebp-60h]
  int v31; // [esp+10h] [ebp-5Ch] BYREF
  int v32; // [esp+14h] [ebp-58h]
  int v33; // [esp+18h] [ebp-54h]
  __int16 v34; // [esp+1Ch] [ebp-50h]
  unsigned int v35; // [esp+20h] [ebp-4Ch] BYREF
  int v36; // [esp+24h] [ebp-48h]
  unsigned int v38; // [esp+2Ch] [ebp-40h]
  unsigned int j; // [esp+30h] [ebp-3Ch]
  int v40; // [esp+34h] [ebp-38h] BYREF
  int (*v41)(_DWORD); // [esp+38h] [ebp-34h] BYREF
  int v42; // [esp+3Ch] [ebp-30h]
  int v43; // [esp+40h] [ebp-2Ch]
  unsigned int i; // [esp+44h] [ebp-28h]
  void (*v45[5])(_DWORD); // [esp+48h] [ebp-24h] BYREF
  unsigned int v46; // [esp+5Ch] [ebp-10h]
  int v47; // [esp+60h] [ebp-Ch]
  void (*v48)(_DWORD); // [esp+64h] [ebp-8h]
  unsigned int v49; // [esp+68h] [ebp-4h]

  //fix
  v36 = 0;
  //fix

  v49 = __readgsdword(a6);
  v48 = (void (*)(_DWORD))__readgsdword(a6 + 16);
  v30 = __readgsword(a6 + 8);
  v29 = __readgsdword(a6 + 4);
  v46 = __readgsdword(a6 + 12);
  v45[4] = v48;
  v45[3] = (void (*)(_DWORD))__readgsdword(a6 + 20);
  v45[2] = (void (*)(_DWORD))__readgsdword(a6 + 24);
  v43 = 6;
  for ( i = 0; i < 5; ++i )
  {
    if ( !dword_A0338[i] )
    {
      v43 = i;
      break;
    }
  }
  if ( v43 == 6 )
    return 11;
  dword_A0338[v43] = a3;
  if ( __readgsdword(a6 + 36) || __readgsword(a6 + 40) )
  {
    LOWORD(v36) = __readgsword(a6 + 40);
    v35 = __readgsdword(a6 + 36);
    v41 = (int (*)(_DWORD))__readgsdword(a6 + 44);
    v8 = 3 * v43;
    word_A01D0[v8] = v36;
    *(int *)((char *)&dword_A01CC + v8 * 2) = v35;
    dword_A01EA[v43] = (int)v41;
  }
  else
  {
    v42 = sub_6DE34_6E344((__int16)&v35, a1, a3, v43, (int *)&v41, (unsigned int)&v35);
    if ( v42 )
      return v42;
    __writegsword(a6 + 40, v36);
    __writegsdword(a6 + 36, v35);
    __writegsdword(a6 + 44, (unsigned int)v41);
    v9 = 3 * v43;
    word_A01D0[v9] = v36;
    *(int *)((char *)&dword_A01CC + v9 * 2) = v35;
    dword_A01EA[v43] = (int)v41;
  }
  v42 = sub_6E28D(v43, (int)&byte_A0350[6 * v43], __DS__);
  if ( !v42 )
  {
    if ( (unsigned int)dword_A0338[v43] >= 0xE106 )
    {
      v18 = 3 * v43;
      word_A02DE[v18] = 0;
      *(int *)((char *)&dword_A02DA + v18 * 2) = 0;
    }
    else
    {
      v10 = 4 * v43;
      dword_A0280[v43] = v49;
      if ( v46 )
      {
        dword_9EF6C[v43] = 1;
        v34 = 0;
        v33 = 0;
        a1 = sub_650FF_6560F(v10, a1, v49, (uint32*)&v40);
        v30 = v10;
        v29 = a1;
        if ( !a1 && v10 == v34 )
        {
          sub_6E540(v43);
          dword_A0338[v43] = 0;
          return 5;
        }
        v11 = 3 * v43;
        word_A0298[v11] = v30;
        *(int *)((char *)&dword_A0294 + v11 * 2) = a1;
        if ( __readgsdword(*(_DWORD *)&byte_A0350[6 * v43] + 36) == 8 )
        {
          if ( (__readgsbyte(*(_DWORD *)&byte_A0350[6 * v43] + 61) & 0x80u) == 0 )
          {
            for ( j = 0; j < v49; ++j )
              __writegsbyte(j + a1, 0x80u);
          }
          else
          {
            for ( j = 0; j < v49; ++j )
              __writegsbyte(j + a1, 0);
          }
        }
        else
        {
          for ( j = 0; j < v49; ++j )
            __writegsbyte(j + a1, 0);
        }
      }
      else
      {
        v12 = 3 * v43;
        word_A0298[v12] = v30;
        *(int *)((char *)&dword_A0294 + v12 * 2) = v29;
        dword_9EF6C[v43] = 0;
      }
      __writegsword(a6 + 8, v30);
      __writegsdword(a6 + 4, v29);
      if ( __readgsdword(a6 + 48) || __readgsword(a6 + 52) )
      {
        LOWORD(v32) = __readgsword(a6 + 52);
        v31 = __readgsdword(a6 + 48);
      }
      else if ( __readgsdword(a6 + 60) )
      {
        v42 = sub_6E09A_6E5AA(a6, a1, __readgsdword(a6 + 60), (int *)v45, (unsigned int)&v31);
        if ( v42 )
          return v42;
      }
      else
      {
        v42 = sub_6E09A_6E5AA(
                (__int16)&v31,
                a1,
                __readgsdword(*(_DWORD *)&byte_A0350[6 * v43] + 104),
                (int *)v45,
                (unsigned int)&v31);
        if ( v42 )
          return v42;
      }
      __writegsword(a6 + 52, v32);
      __writegsdword(a6 + 48, v31);
      v13 = 3 * v43;
      word_A0202[v13] = v32;
      *(int *)((char *)&dword_A01FE + v13 * 2) = v31;
      dword_A021C[v43] = (int)v45[0];
      dword_A0244[v43] = 1;
      v47 = __readgsdword(a4 + 8);
      v47 = dword_A0374[v47];
      sub_677E3_67CF3(a2, v45[0], v31, (unsigned __int16)v32, v29, v30, v49, v47, v43, (int)&dword_1315AC);
      v14 = 3 * v43;
      v15 = dword_1315AC;
      word_A02DE[v14] = word_1315B0;
      *(int *)((char *)&dword_A02DA + v14 * 2) = v15;
      v16 = 3 * v43;
      v17 = dword_1315B4;
      word_A031A[v16] = word_1315B8;
      *(int *)((char *)&dword_A0316 + v16 * 2) = v17;
      sub_67A37((int)&byte_131714[192 * v43], dword_1315BC, word_1315C0);
    }
    v19 = *(int *)((char *)&dword_A02DA + 6 * v43);
    __writegsword(a6 + 32, word_A02DE[3 * v43]);
    __writegsdword(a6 + 28, v19);
    sub_67E1D();
    dword_A02B2[v43] = v40;
    v45[1] = (void (*)(_DWORD))__readgsdword(a4);
    v38 = __readgsdword(a4 + 4);
    v47 = __readgsdword(a4 + 8);
    byte_A0394[v43] = v47;
    sub_67D55(v41);
    sub_67DEE(v41);
    sub_67DBF(v41);
    v40 = dword_A02B2[v43];
    sub_67D8E(v41);
    dword_A0230[v43] = 1;
    dword_A0258[v43] = 1;
    dword_1315D4[16 * v43] = __readgsdword(a6);
    v20 = v43 << 6;
    v21 = __readgsdword(a6 + 4);
    *(__int16 *)((char *)&word_1315DC + v20) = __readgsword(a6 + 8);
    *(int *)((char *)&dword_1315D8 + v20) = v21;
    dword_1315E0[16 * v43] = __readgsdword(a6 + 12);
    dword_1315E4[16 * v43] = __readgsdword(a6 + 16);
    dword_1315E8[16 * v43] = a3;
    dword_1315EC[16 * v43] = __readgsdword(a6 + 24);
    v22 = v43 << 6;
    v23 = __readgsdword(a6 + 28);
    *(__int16 *)((char *)&word_1315F4 + v22) = __readgsword(a6 + 32);
    *(int *)((char *)&dword_1315F0 + v22) = v23;
    v24 = v43 << 6;
    v25 = __readgsdword(a6 + 36);
    *(__int16 *)((char *)&word_1315FC + v24) = __readgsword(a6 + 40);
    *(int *)((char *)&dword_1315F8 + v24) = v25;
    v26 = v43 << 6;
    v27 = __readgsdword(a6 + 48);
    *(__int16 *)((char *)&word_131608 + v26) = __readgsword(a6 + 52);
    *(int *)((char *)&dword_131604 + v26) = v27;
    dword_131610[16 * v43] = __readgsdword(a6 + 60);
    __writegsdword(a8, v43);
    return 0;
  }
  return v42;
}
// 9EF6C: using guessed type int dword_9EF6C[];
// A01CC: using guessed type int dword_A01CC;
// A01D0: using guessed type __int16 word_A01D0[13];
// A01EA: using guessed type int dword_A01EA[5];
// A01FE: using guessed type int dword_A01FE;
// A0202: using guessed type __int16 word_A0202[13];
// A021C: using guessed type int dword_A021C[5];
// A0230: using guessed type int dword_A0230[5];
// A0244: using guessed type int dword_A0244[5];
// A0258: using guessed type int dword_A0258[5];
// A0280: using guessed type int dword_A0280[5];
// A0294: using guessed type int dword_A0294;
// A0298: using guessed type __int16 word_A0298[];
// A02B2: using guessed type int dword_A02B2[5];
// A02DA: using guessed type int dword_A02DA;
// A02DE: using guessed type __int16 word_A02DE[28];
// A0316: using guessed type int dword_A0316;
// A031A: using guessed type __int16 word_A031A[];
// A0338: using guessed type int dword_A0338[6];
// A0374: using guessed type int dword_A0374[8];
// 1315AC: using guessed type int dword_1315AC;
// 1315B0: using guessed type __int16 word_1315B0;
// 1315B4: using guessed type int dword_1315B4;
// 1315B8: using guessed type __int16 word_1315B8;
// 1315BC: using guessed type int dword_1315BC;
// 1315C0: using guessed type __int16 word_1315C0;
// 1315D4: using guessed type int dword_1315D4[];
// 1315D8: using guessed type int dword_1315D8;
// 1315DC: using guessed type __int16 word_1315DC;
// 1315E0: using guessed type int dword_1315E0[];
// 1315E4: using guessed type int dword_1315E4[];
// 1315E8: using guessed type int dword_1315E8[];
// 1315EC: using guessed type int dword_1315EC[];
// 1315F0: using guessed type int dword_1315F0;
// 1315F4: using guessed type __int16 word_1315F4;
// 1315F8: using guessed type int dword_1315F8;
// 1315FC: using guessed type __int16 word_1315FC;
// 131604: using guessed type int dword_131604;
// 131608: using guessed type __int16 word_131608;
// 131610: using guessed type int dword_131610[65];
// 64D56: using guessed type unsigned int arg_C;
// 64D56: using guessed type unsigned int arg_4;

//----- (00065488) --------------------------------------------------------
int sub_65488(unsigned int a1, int a2, int a3)
{
  int v3; // eax
  int v4; // eax
  int v5; // eax
  int (*v8)(_DWORD); // [esp+14h] [ebp-4h]

  if ( !dword_A0230[a1] )
    return 1;
  dword_A0258[a1] = 0;
  if ( (unsigned int)dword_A02C6[a1] < 0xE106 && dword_9EF6C[a1] && a2 )
    dword_9EF6C[a1] = 0;
  v8 = (int (*)(_DWORD))dword_A01EA[a1];
  sub_67BF5(v8);
  sub_67CC8(v8);
  sub_67E54();
  if ( a3 )
  {
    sub_6E540(a1);
    sub_6E74C(*(int *)((char *)&dword_A01FE + 6 * a1), word_A0202[3 * a1]);
  }
  v3 = 3 * a1;
  word_A01D0[v3] = 0;
  *(int *)((char *)&dword_A01CC + v3 * 2) = 0;
  v4 = 3 * a1;
  word_A02DE[v4] = 0;
  *(int *)((char *)&dword_A02DA + v4 * 2) = 0;
  v5 = 3 * a1;
  word_A0202[v5] = 0;
  *(int *)((char *)&dword_A01FE + v5 * 2) = 0;
  dword_A0338[a1] = 0;
  dword_A0230[a1] = 0;
  return 0;
}
// 9EF6C: using guessed type int dword_9EF6C[];
// A01CC: using guessed type int dword_A01CC;
// A01D0: using guessed type __int16 word_A01D0[];
// A01EA: using guessed type int dword_A01EA[5];
// A01FE: using guessed type int dword_A01FE;
// A0202: using guessed type __int16 word_A0202[13];
// A0230: using guessed type int dword_A0230[5];
// A0258: using guessed type int dword_A0258[5];
// A02C6: using guessed type int dword_A02C6[5];
// A02DA: using guessed type int dword_A02DA;
// A02DE: using guessed type __int16 word_A02DE[];
// A0338: using guessed type int dword_A0338[6];

//----- (0006560F) --------------------------------------------------------
int sub_650FF_6560F(__int16 a1, int a2, unsigned int a3, _DWORD *a4)
{
  int v5; // [esp+14h] [ebp-4h] BYREF

  do
  {
    sub_67AD8((a3 >> 4) + 4, (uint32*)&v5);
    v5 = sub_67557_67A67(a1, a2, v5);
    *a4 = v5;
    a1 = v5;
  }
  while ( (unsigned __int16)v5 > 0xFFFF - a3 );
  return sub_67A92();
}

//----- (000656E6) --------------------------------------------------------
void sub_656E6()
{
  ;
}

//----- (000656F7) --------------------------------------------------------
void sub_656F7()
{
  ;
}

//----- (00065708) --------------------------------------------------------
bool sub_65708(int a1, int a2)
{
  unsigned int i; // [esp+8h] [ebp-4h]

  for ( i = 0; ; ++i )
  {
    if ( i >= 0x20 )
      return 1;
    if ( (__int16)__readgsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 52) == a2 )
      break;
  }
  return ((__readgsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 48) >> 8) & 0x80u) == 0;
}

//----- (0006584A) --------------------------------------------------------
void sub_6584A()
{
  ;
}

//----- (0006585B) --------------------------------------------------------
void sub_6585B()
{
  ;
}

//----- (0006586C) --------------------------------------------------------
int sub_6586C(int a1, unsigned int a2)
{
  unsigned int v2; // edx
  unsigned int v3; // ebx
  int v4; // edx
  unsigned int v5; // ebx
  unsigned int v6; // ebx
  int v7; // edx
  unsigned __int16 v8; // bx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int i; // [esp+20h] [ebp-4h]

  if ( (unsigned int)dword_A02C6[a1] >= 0xE106 )
    return 0;
  for ( i = 0; ; ++i )
  {
    if ( i >= 0x20 )
      return -1;
    if ( ((__readgsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 48) >> 8) & 0x80u) == 0 )
      break;
  }
  v2 = *(_DWORD *)&byte_131714[192 * a1 + 6 * i];
  v3 = __readgsdword(a2);
  __writegsword(v2 + 4, __readgsword(a2 + 4));
  __writegsdword(v2, v3);
  v4 = *(_DWORD *)&byte_131714[192 * a1 + 6 * i];
  v5 = __readgsdword(a2);
  __writegsword(v4 + 12, __readgsword(a2 + 4));
  __writegsdword(v4 + 8, v5);
  v6 = __readgsdword(a2 + 36) + __readgsdword(a2);
  v7 = *(_DWORD *)&byte_131714[192 * a1 + 6 * i];
  __writegsword(v7 + 20, __readgsword(a2 + 4));
  __writegsdword(v7 + 16, v6);
  if ( (__readgsbyte(a2 + 28) & 0x40) != 0 )
  {
    __writegsdword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 24, __readgsdword(a2 + 36));
    __writegsdword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 28, __readgsdword(a2 + 36));
    __writegsdword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 32, __readgsdword(a2 + 40));
    __writegsdword(
      *(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 44,
      __readgsdword(a2 + 32) - (__readgsdword(a2 + 40) + __readgsdword(a2 + 36)));
  }
  else
  {
    __writegsdword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 24, __readgsdword(a2 + 8));
    __writegsdword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 28, __readgsdword(a2 + 8));
  }
  __writegsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 50, __readgsword(a2 + 16));
  __writegsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 52, __readgsword(a2 + 18));
  v8 = __readgsword(a2 + 28);
  HIBYTE(v8) |= 0xA0u;
  __writegsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 48, v8);
  __writegsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 54, __readgsword(a2 + 14));
  v9 = *(_DWORD *)&byte_131714[192 * a1 + 6 * i];
  v10 = __readgsdword(a2 + 20);
  __writegsword(v9 + 64, __readgsword(a2 + 24));
  __writegsdword(v9 + 60, v10);
  __writegsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 56, __readgsword(a2 + 12));
  __writegsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 74, __readgsword(a2 + 26));
  __writegsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 58, 0);
  __writegsdword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 68, __readgsdword(a2 + 44));
  __writegsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 72, 0);
  __writegsdword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 76, 0);
  __writegsdword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 80, __readgsdword(a2 + 8));
  __writegsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 84, __readgsword(a2 + 50));
  __writegsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 86, __readgsword(a2 + 52));
  __writegsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 88, __readgsword(a2 + 54));
  __writegsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 90, __readgsword(a2 + 56));
  __writegsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 92, __readgsword(a2 + 58));
  __writegsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 94, __readgsword(a2 + 60));
  __writegsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 96, __readgsword(a2 + 62));
  __writegsdword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 100, 0);
  __writegsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 104, 0);
  return i;
}
// A02C6: using guessed type int dword_A02C6[5];

//----- (00065E75) --------------------------------------------------------
int sub_65E75(int a1, int a2)
{
  unsigned int i; // [esp+4h] [ebp-4h]

  for ( i = 0; ; ++i )
  {
    if ( i >= 0x20 )
      return 10;
    if ( (__int16)__readgsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 52) == a2 )
      break;
  }
  __writegsbyte(
    *(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 49,
    __readgsbyte(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 49) & 0x7F);
  __writegsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 52, 0);
  return 0;
}

//----- (00066267) --------------------------------------------------------
void sub_66267()
{
  ;
}

//----- (00066280) --------------------------------------------------------
void sub_65D70_66280(uint8_t* a1, uint8_t* a2, uint8_t* a3)
{
  unsigned int result; // eax

  while ( 1 )
  {
    result = (int)a1;
    if ( a1 >= a2 )
      break;
    if ( *(_DWORD *)a1 < (int)a3 )
    {
      *(_BYTE *)(a1 + 4) *= 2;
      *(_BYTE *)(a1 + 5) *= 2;
      *(_DWORD *)a1 += (int)a3;
    }
    a1 += 6;
  }
}

//----- (000662D0) --------------------------------------------------------
void sub_65DC0_662D0(uint8_t* a1, uint8_t* a2, uint8_t* a3)
{
  unsigned int result; // eax

  while ( 1 )
  {
    result = (int)a1;
    if ( (unsigned int)a1 >= (int)a2 )
      break;
    if ( *(unsigned int*)a1 < (int)a3 )
      *(unsigned int*)a1 += (int)a3;
    a1 = (uint8_t*)((char *)a1 + 6);
  }
}

//----- (00066310) --------------------------------------------------------
void sub_66310()
{
  if ( byte_939CC && byte_939CD && word_939D2 && sub_5DD00(dword_CBFC8) )
  {
    sub_5FA39(dword_CBFC8, (unsigned int)&dword_12F020);
    sub_5F8A8(dword_CBFC8);
  }
}
// 939CC: using guessed type char byte_939CC;
// 939CD: using guessed type char byte_939CD;
// 939D2: using guessed type __int16 word_939D2;
// CBFC8: using guessed type int dword_CBFC8;
// 12F020: using guessed type int dword_12F020;

//----- (000663C0) --------------------------------------------------------
int sub_65EB0_663C0(__int16 a1, __int16 a2, __int16 a3, __int16 a4)
{
  int result; // eax

  dword_12F008_12EFF8 = a1;
  dword_12F018_12F008 = a2;
  dword_12F000_12EFF0 = a3;
  dword_12F028_12F018 = a4;
  dword_12F024_12F014 = a3 + a1;
  result = a4;
  dword_12F000 = a4 + a2;
  return result;
}
// 12EFF0: using guessed type int dword_12F000_12EFF0;
// 12EFF8: using guessed type int dword_12F008_12EFF8;
// 12F000: using guessed type int dword_12F000;
// 12F008: using guessed type int dword_12F018_12F008;
// 12F014: using guessed type int dword_12F024_12F014;
// 12F018: using guessed type int dword_12F028_12F018;

//----- (00066420) --------------------------------------------------------
void sub_66420(__int16 a1, __int16 a2)
{
  int v2; // edx
  __int16 *v3; // [esp+0h] [ebp-Ch]
  __int16 i; // [esp+4h] [ebp-8h]
  __int16 j; // [esp+4h] [ebp-8h]
  char v6; // [esp+8h] [ebp-4h]

  if ( byte_939E4 && byte_939E5 && a2 <= (int)(unsigned __int16)word_CC1B6 )
  {
    v3 = word_CBFE0;
    for ( i = 0; i < 32; ++i )
    {
      if ( *v3 == a1 && v3[1] == a2 && !sub_65708(dword_CC130, i) )
      {
        sub_65E75(dword_CC130, i);
        break;
      }
      v3 += 2;
    }
    v6 = 0;
    for ( j = 0; j < 32; ++j )
    {
      if ( sub_65708(dword_CC130, j) )
      {
        v6 = 1;
        break;
      }
    }
    if ( v6 )
    {
      word_CBFE0[2 * j] = a1;
      word_CBFE2[2 * j] = a2;
      word_93A02 = j;
      word_93A0C = 256;
      word_93A00 = 0x7FFF;
      word_CC060[j] = 0x7FFF;
      dword_939F8 = *(_DWORD *)(32 * a2 + dword_CC144 + 26) - 16;
      v2 = *(_DWORD *)(32 * a2 + dword_CC144 + 18);
      word_939F4 = __DS__;
      dword_939F0 = v2;
      dword_CC134 = sub_6586C(dword_CC130, (unsigned int)&dword_939F0);
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// 939F0: using guessed type int dword_939F0;
// 939F4: using guessed type __int16 word_939F4;
// 939F8: using guessed type int dword_939F8;
// 93A00: using guessed type __int16 word_93A00;
// 93A02: using guessed type __int16 word_93A02;
// 93A0C: using guessed type __int16 word_93A0C;
// CBFE0: using guessed type __int16 word_CBFE0[];
// CBFE2: using guessed type __int16 word_CBFE2[63];
// CC060: using guessed type __int16 word_CC060[];
// CC130: using guessed type int dword_CC130;
// CC134: using guessed type int dword_CC134;
// CC144: using guessed type int dword_CC144;
// CC1B6: using guessed type __int16 word_CC1B6;

//----- (00066617) --------------------------------------------------------
void sub_66617()
{
  ;
}

//----- (00066628) --------------------------------------------------------
int sub_66628(int a1, int a2, unsigned __int16 a3)
{
  unsigned int i; // [esp+4h] [ebp-4h]

  if ( !dword_A0258[a1] )
    return -1;
  for ( i = 0; ; ++i )
  {
    if ( i >= 0x20 )
      return 10;
    if ( (__int16)__readgsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 52) == a2 )
      break;
  }
  __writegsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 50, a3);
  return 0;
}
// A0258: using guessed type int dword_A0258[5];

//----- (000666B4) --------------------------------------------------------
int sub_666B4(int a1, int a2)
{
  unsigned int i; // [esp+8h] [ebp-4h]

  if ( !dword_A0258[a1] )
    return -1;
  for ( i = 0; i < 0x20; ++i )
    __writegsword(
      *(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 50,
      (__int16)__readgsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 50) * a2 / 0x7FFFu);
  return 0;
}
// A0258: using guessed type int dword_A0258[5];

//----- (0006674A) --------------------------------------------------------
void sub_6674A()
{
  ;
}

//----- (00066760) --------------------------------------------------------
void sub_66760(__int16 a1, __int16 a2, unsigned __int16 a3)
{
  __int16 *v3; // [esp+0h] [ebp-8h]
  __int16 i; // [esp+4h] [ebp-4h]

  if ( byte_939E4 )
  {
    v3 = word_CBFE0;
    for ( i = 0; i < 32; ++i )
    {
      if ( *v3 == a1 && v3[1] == a2 && !sub_65708(dword_CC130, i) && a3 < 0x81u )
      {
        sub_66628(dword_CC130, i, (a3 << 8) - 1);
        word_CC060[i] = (a3 << 8) - 1;
        return;
      }
      v3 += 2;
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// CBFE0: using guessed type __int16 word_CBFE0[];
// CC060: using guessed type __int16 word_CC060[];
// CC130: using guessed type int dword_CC130;

//----- (00066823) --------------------------------------------------------
void sub_66823()
{
  ;
}

//----- (00066834) --------------------------------------------------------
int sub_66834(int a1)
{
  int v2; // [esp+4h] [ebp-8h]
  unsigned int i; // [esp+8h] [ebp-4h]

  v2 = 0;
  for ( i = 0; i < 0x20; ++i )
  {
    if ( ((__readgsword(*(_DWORD *)&byte_131714[192 * a1 + 6 * i] + 48) >> 8) & 0x80u) != 0 )
      ++v2;
  }
  return v2;
}

//----- (0006688C) --------------------------------------------------------
void sub_6688C()
{
  ;
}

//----- (000668A0) --------------------------------------------------------
unsigned int sub_668A0(unsigned int a1, unsigned int a2, unsigned int a3)
{
  unsigned int result; // eax

  while ( 1 )
  {
    result = a1;
    if ( a1 >= a2 )
      break;
    if ( *(_DWORD *)a1 >= a3 )
    {
      *(_BYTE *)(a1 + 4) = (int)*(unsigned __int8 *)(a1 + 4) >> 1;
      *(_BYTE *)(a1 + 5) = (int)*(unsigned __int8 *)(a1 + 5) >> 1;
      *(_DWORD *)a1 -= a3;
    }
    a1 += 6;
  }
  return result;
}

//----- (00066920) --------------------------------------------------------
unsigned int *sub_66920(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  unsigned int *result; // eax

  while ( 1 )
  {
    result = a1;
    if ( (unsigned int)a1 >= a2 )
      break;
    if ( *a1 >= a3 )
      *a1 -= a3;
    a1 = (unsigned int *)((char *)a1 + 6);
  }
  return result;
}

//----- (000669BB) --------------------------------------------------------
int sub_664AB_669BB(char* vipEnv, char** a2, int a3, int a4)
{
  int v4; // edi
  char* i; // ebx
  unsigned __int8 v6; // al
  unsigned __int8 v8; // cl
  unsigned int v9; // esi
  int v10; // eax
  unsigned int v11; // edx
  char* v12; // [esp+0h] [ebp-1Ch]
  char v13; // [esp+4h] [ebp-18h]
  unsigned __int8 v14; // [esp+8h] [ebp-14h]

  v4 = a3;
  if ( a2 )
    *a2 = vipEnv;
  for ( i = vipEnv; (IsTable[(unsigned __int8)(*i + 1)] & 2) != 0; ++i )
    ;
  v14 = *i;
  if ( *i == 43 || *i == 45 )
    ++i;
  if ( !a3 )
  {
    if ( *i == 48 && ((v6 = i[1], v6 == 120) || v6 == 88) )
    {
      v4 = 16;
    }
    else if ( *i == 48 )
    {
      v4 = 8;
    }
    else
    {
      v4 = 10;
    }
  }
  if ( v4 >= 2 && v4 <= 36 )
  {
    if ( v4 == 16 && *i == 48 )
    {
      v8 = i[1];
      if ( v8 == 120 || v8 == 88 )
        i += 2;
    }
    v12 = i;
    v9 = 0;
    v13 = 0;
    while ( 1 )
    {
      v10 = sub_66B22(*i);
      if ( v10 >= v4 )
        break;
      v11 = v9;
      v9 = v10 + v4 * v9;
      if ( v9 < v11 )
        v13 = 1;
      ++i;
    }
    if ( i == v12 )
      i = vipEnv;
    if ( a2 )
      *a2 = i;
    if ( a4 == 1 && v9 >= 0x80000000 && (v9 != 0x80000000 || v14 != 45) )
      v13 = 1;
    if ( v13 )
    {
      _set_errno(14);
      if ( a4 )
      {
        if ( v14 == 45 )
          return 0x80000000;
        else
          return 0x7FFFFFFF;
      }
      else
      {
        return -1;
      }
    }
    else
    {
      if ( v14 == 45 )
          return 0;//fix -v9;
      return v9;
    }
  }
  else
  {
    _set_errno(13);
    return 0;
  }
}
// 6719B: using guessed type _DWORD _set_errno(_DWORD);

//----- (00066B1D) --------------------------------------------------------
int sub_6660D_66B1D(char* vipEnv, char** a2, int a3)
{
  return sub_664AB_669BB(vipEnv, a2, a3, 1);
}

//----- (00066B22) --------------------------------------------------------
int sub_66B22(unsigned __int8 a1)
{
  unsigned __int8 v2; // al

  if ( a1 >= 0x30u && a1 <= 0x39u )
    return a1 - 48;
  v2 = tolower(a1);
  if ( v2 >= 0x61u && v2 <= 0x69u )
    return v2 - 87;
  if ( v2 >= 0x6Au && v2 <= 0x72u || v2 >= 0x73u && v2 <= 0x7Au )
    return v2 - 87;
  return 37;
}
// 6BAB3: using guessed type _DWORD tolower(_DWORD);

//----- (00066B7C) --------------------------------------------------------
__int16 sub_66B7C(__int16 result)
{
  _BOOL1 v1; // zf

  //fix __asm { int     16h; KEYBOARD - GET ENHANCED SHIFT FLAGS (AT model 339,XT2,XT286,PS) }
  byte_12EF61 = (result & 3) != 0;
  if ( (result & 4) != 0 )
    byte_12EF61 |= 2u;
  v1 = (result & 8) == 0;
  if ( (result & 8) != 0 )
  {
    v1 = 0;
    byte_12EF61 |= 4u;
  }
  lastPressedKey_12EF70_12EF60 = 0;
  //fix __asm { int     16h; KEYBOARD - CHECK ENHANCED KEYSTROKE (AT model 339,XT2,XT286,PS) }
  if ( !v1 )
  {
    //fix __asm { int     16h; KEYBOARD - GET ENHANCED KEYSTROKE (AT model 339,XT2,XT286,PS) }
    lastPressedKey_12EF70_12EF60 = 16;
  }
  return result;
}
// 12EF60: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EF61: using guessed type char byte_12EF61;

//----- (000671BD) --------------------------------------------------------
void sub_671BD()
{
  //fix ((void (*)(_DWORD))_GETDS)((unsigned __int16)__DS__);
}
// 671BD: using guessed type void sub_671BD();

//----- (00067234) --------------------------------------------------------
unsigned __int8 sub_67234(__int16 a1)
{
  unsigned __int8 v1; // al
  unsigned __int8 v2; // ah
  unsigned __int8 v3; // al
  unsigned __int8 result; // al

  if ( dword_A01C4 )
  {
    v1 = __inbyte(0x21u);
    __outbyte(0x21u, v1 | 1);
    __outbyte(0x43u, 0x36u);
    v2 = HIBYTE(a1);
    __outbyte(0x40u, a1);
    __outbyte(0x40u, v2);
    v3 = __inbyte(0x21u);
    result = v3 & 0xFE;
    __outbyte(0x21u, result);
  }
  return result;
}
// A01C4: using guessed type int dword_A01C4;

//----- (0006727A) --------------------------------------------------------
unsigned __int8 sub_66D6A_6727A(int a1, __int16 a2, int a3, __int16 a4)
{
  unsigned __int8 v4; // al
  unsigned __int8 v5; // ah
  unsigned __int8 v6; // al
  unsigned __int8 result; // al

  *(_DWORD *)byte_9F1A8 = a3;
  *(_WORD *)&byte_9F1A8[4] = a4;
  word_9F1B0 = __DS__;
  word_9F1B6 = __DS__;
  if ( dword_A01C4 )
  {
    v4 = __inbyte(0x21u);
    __outbyte(0x21u, v4 | 1);
    //fix __asm { int     21h; DOS - 2+ - GET INTERRUPT VECTOR }
    dword_9F19C = a1;
    LOWORD(dword_9F1A0) = a4;
    //fix __asm { int     21h; DOS - SET INTERRUPT VECTOR }
    __outbyte(0x43u, 0x36u);
    v5 = HIBYTE(a2);
    __outbyte(0x40u, a2);
    __outbyte(0x40u, v5);
    v6 = __inbyte(0x21u);
    result = v6 & 0xFE;
    __outbyte(0x21u, result);
  }
  return result;
}
// 9F19C: using guessed type int dword_9F19C;
// 9F1A0: using guessed type int dword_9F1A0;
// 9F1B0: using guessed type __int16 word_9F1B0;
// 9F1B6: using guessed type __int16 word_9F1B6;
// A01C4: using guessed type int dword_A01C4;

//----- (00067305) --------------------------------------------------------
unsigned __int8 sub_67305()
{
  unsigned __int8 v0; // al
  unsigned __int8 result; // al

  if ( dword_A01C4 )
  {
    v0 = __inbyte(0x21u);
    result = v0 | 1;
    __outbyte(0x21u, result);
  }
  return result;
}
// A01C4: using guessed type int dword_A01C4;

//----- (00067331) --------------------------------------------------------
unsigned __int8 sub_67331()
{
  unsigned __int8 v0; // al
  unsigned __int8 result; // al

  if ( dword_A01C4 )
  {
    v0 = __inbyte(0x21u);
    result = v0 & 0xFE;
    __outbyte(0x21u, result);
  }
  return result;
}
// A01C4: using guessed type int dword_A01C4;

//----- (0006735D) --------------------------------------------------------
unsigned __int8 sub_6735D()
{
  unsigned __int8 v0; // al
  unsigned __int8 v1; // al
  unsigned __int8 result; // al

  if ( dword_A01C4 )
  {
    v0 = __inbyte(0x21u);
    __outbyte(0x21u, v0 | 1);
    //fix __asm { int     31h; DPMI Services   ax=func xxxxh }
    __outbyte(0x40u, 0);
    __outbyte(0x40u, 0);
    v1 = __inbyte(0x21u);
    result = v1 & 0xFE;
    __outbyte(0x21u, result);
  }
  return result;
}
// 9F19C: using guessed type int dword_9F19C;
// A01C4: using guessed type int dword_A01C4;

//----- (000673B2) --------------------------------------------------------
// positive sp value has been detected, the output may be wrong!
int sub_673B2()
{
  int result; // eax
  int v1; // [esp-8h] [ebp-8h]
  int v2; // [esp-4h] [ebp-4h]
  void *retaddr[2]; // [esp+0h] [ebp+0h] BYREF

  //fix
  result = 0;
  //fix

  if ( dword_A01C4 )
  {
    word_A01C2 = 0;
    return 0;//fix
    /*MK_FP(retaddr[0], retaddr[0])(
             _InterlockedExchange((volatile __int32 *)&retaddr[1], dword_9F1A0),
             v2,
             v1,
             _InterlockedExchange((volatile __int32 *)retaddr, dword_9F19C));*/
  }
  return result;
}
// 673F2: positive sp value 28 has been found
// 673F2: variable 'v2' is possibly undefined
// 673F2: variable 'v1' is possibly undefined
// 9F19C: using guessed type int dword_9F19C;
// 9F1A0: using guessed type int dword_9F1A0;
// A01C2: using guessed type __int16 word_A01C2;
// A01C4: using guessed type int dword_A01C4;

//----- (000673F5) --------------------------------------------------------
void sub_673F5()
{
  ;
}

//----- (00067406) --------------------------------------------------------
unsigned __int64 sub_67406(unsigned int a1, __int16 a2)
{
  unsigned int v3; // [esp+4h] [ebp-4h]

  LOWORD(v3) = a2;
  return __PAIR64__(v3, a1);
}
// 67422: variable 'v3' is possibly undefined

//----- (0006742A) --------------------------------------------------------
void sub_6742A()
{
  ;
}

//----- (0006743B) --------------------------------------------------------
void sub_6743B()
{
  ;
}

//----- (0006744C) --------------------------------------------------------
int sub_6744C()
{
  int v0; // eax
  int v1; // eax
  int v2; // eax
  int v3; // eax
  int v4; // eax
  int v5; // edx
  int v6; // edx
  int v7; // eax
  int v8; // eax
  int v9; // edx
  int v10; // eax
  int v11; // edx
  unsigned __int8 v13; // [esp+0h] [ebp-34h]
  int v14; // [esp+4h] [ebp-30h] BYREF
  __int16 v15; // [esp+8h] [ebp-2Ch]
  int v16; // [esp+Ch] [ebp-28h]
  __int16 v17; // [esp+10h] [ebp-24h]
  _DWORD v18[2]; // [esp+14h] [ebp-20h]
  int v19; // [esp+1Ch] [ebp-18h]
  int v20; // [esp+20h] [ebp-14h]
  int v21; // [esp+24h] [ebp-10h]
  unsigned __int8 i; // [esp+30h] [ebp-4h]
  void *retaddr[2]; // [esp+44h] [ebp+10h]

  if (!dword_9C136[(unsigned __int8)byte_A04D1] || dword_9C116[(unsigned __int8)byte_A04D1])
      return 0;//fix MK_FP(retaddr[0], retaddr[0])();
  for ( i = 0; ; ++i )
  {
    if (i >= (unsigned int)dword_9C042[(unsigned __int8)byte_A04D1])
        return 0;//fix MK_FP(retaddr[0], retaddr[0])();
    v0 = ((unsigned __int8)byte_A04D1 << 7) + 4 * i;
    ++*(int *)((char *)dword_9BBF2 + v0);
    v1 = 192 * (unsigned __int8)byte_A04D1 + 6 * i;
    if ( (*(_DWORD *)&byte_9B1F2[v1] || *(_WORD *)&byte_9B1F2[v1 + 4])
      && dword_9B7F2[32 * (unsigned __int8)byte_A04D1 + i] <= (unsigned int)dword_9BBF2[32 * (unsigned __int8)byte_A04D1
                                                                                      + i] )
    {
      break;
    }
LABEL_31:
    ;
  }
  while ( 1 )
  {
    if ( __readgsbyte(*(_DWORD *)&byte_9B1F2[192 * (unsigned __int8)byte_A04D1 + 6 * i]) >= 0xF0u )
      v2 = (unsigned __int8)byte_9C166[__readgsbyte(*(_DWORD *)&byte_9B1F2[192 * (unsigned __int8)byte_A04D1 + 6 * i]) & 0xF];
    else
      v2 = (unsigned __int8)byte_9C156[(int)__readgsbyte(*(_DWORD *)&byte_9B1F2[192 * (unsigned __int8)byte_A04D1
                                                                              + 6 * i]) >> 4];
    v21 = v2;
    if ( __readgsbyte(*(_DWORD *)&byte_9B1F2[192 * (unsigned __int8)byte_A04D1 + 6 * i]) != 0xFF )
    {
      v7 = 192 * (unsigned __int8)byte_A04D1 + 6 * i;
      sub_5E493(
        (unsigned __int8)byte_A04D1,
        *(_DWORD *)&byte_9B1F2[v7],
        *(_WORD *)&byte_9B1F2[v7 + 4],
        __readgsdword(*(int *)((char *)&dword_9BFF2 + 6 * (unsigned __int8)byte_A04D1) + 4 * i),
        v21);
      goto LABEL_28;
    }
    v13 = __readgsbyte(*(_DWORD *)&byte_9B1F2[192 * (unsigned __int8)byte_A04D1 + 6 * i] + 1);
    if ( v13 < 0x2Fu )
      goto LABEL_28;
    if ( v13 > 0x2Fu )
    {
      if ( v13 == 81 )
        v21 = 5;
      goto LABEL_28;
    }
    v3 = 192 * (unsigned __int8)byte_A04D1 + 6 * i;
    *(_WORD *)&byte_9B1F2[v3 + 4] = 0;
    *(_DWORD *)&byte_9B1F2[v3] = 0;
    v4 = (unsigned __int8)byte_A04D1;
    if ( !--dword_9C022[v4] )
      break;
    v21 = 3;
LABEL_28:
    dword_9BBF2[32 * (unsigned __int8)byte_A04D1 + i] = 0;
    v8 = 192 * (unsigned __int8)byte_A04D1 + 6 * i;
    if ( *(_DWORD *)&byte_9B1F2[v8] || *(_WORD *)&byte_9B1F2[v8 + 4] )
    {
      v9 = 192 * (unsigned __int8)byte_A04D1 + 6 * i;
      LOWORD(v20) = *(_WORD *)&byte_9B1F2[v9 + 4];
      v19 = v21 + *(_DWORD *)&byte_9B1F2[v9];
      *(_WORD *)&byte_9B1F2[v9 + 4] = v20;
      *(_DWORD *)&byte_9B1F2[v9] = v19;
      v10 = 192 * (unsigned __int8)byte_A04D1 + 6 * i;
      v21 = sub_5FCD7(
              *(_DWORD *)&byte_9B1F2[v10],
              *(unsigned __int16 *)&byte_9B1F2[v10 + 4],
              (unsigned int)&dword_9B7F2[32 * (unsigned __int8)byte_A04D1 + i]);
      v11 = 6 * i + 192 * (unsigned __int8)byte_A04D1;
      LOWORD(v20) = *(_WORD *)&byte_9B1F2[v11 + 4];
      v19 = v21 + *(_DWORD *)&byte_9B1F2[v11];
      *(_WORD *)&byte_9B1F2[v11 + 4] = v20;
      *(_DWORD *)&byte_9B1F2[v11] = v19;
      if ( !dword_9B7F2[32 * (unsigned __int8)byte_A04D1 + i] )
        continue;
    }
    goto LABEL_31;
  }
  dword_9C136[(unsigned __int8)byte_A04D1] = 0;
  sub_5EED1((unsigned __int8)byte_A04D1);
  if ( dword_9C1A6[(unsigned __int8)byte_A04D1] != -1 )
    sub_5E1A1(dword_9C1A6[(unsigned __int8)byte_A04D1]);
  byte_A04C1[dword_9C1A6[(unsigned __int8)byte_A04D1]] = -1;
  dword_9C1A6[(unsigned __int8)byte_A04D1] = -1;
  v5 = *(_DWORD *)&byte_9C176[6 * (unsigned __int8)byte_A04D1];
  LOWORD(v18[1]) = __readgsword(v5 + 772);
  v18[0] = __readgsdword(v5 + 768);
  v6 = 6 * (unsigned __int8)byte_A04D1;
  v15 = *(_WORD *)&byte_9C176[v6 + 4];
  v14 = *(_DWORD *)&byte_9C176[v6];
  v17 = v18[1];
  v16 = v18[0];
  *(_WORD *)&byte_9C176[v6 + 4] = 0;
  *(_DWORD *)&byte_9C176[v6] = 0;
  sub_5FA39((unsigned __int8)byte_A04D1, (unsigned int)&v14);
  if (v18[0] || LOWORD(v18[1]))
      ;//fix MK_FP(v18[1], v18[0])((unsigned __int8)byte_A04D1);
  return 0;//fix MK_FP(retaddr[0], retaddr[0])();
}
// 9B7F2: using guessed type int dword_9B7F2[256];
// 9BBF2: using guessed type int dword_9BBF2[256];
// 9BFF2: using guessed type int dword_9BFF2;
// 9C022: using guessed type int dword_9C022[8];
// 9C042: using guessed type int dword_9C042[8];
// 9C116: using guessed type int dword_9C116[8];
// 9C136: using guessed type int dword_9C136[8];
// 9C1A6: using guessed type int dword_9C1A6[8];
// A04D1: using guessed type char byte_A04D1;

//----- (00067974) --------------------------------------------------------
void sub_67974()
{
  ;
}

//----- (00067985) --------------------------------------------------------
void sub_67985()
{
  ;
}

//----- (00067996) --------------------------------------------------------
bool sub_67996(int a1)
{
  return dword_9B18E[a1] == 0;
}
// 9B18E: using guessed type int dword_9B18E[5];

//----- (000679C9) --------------------------------------------------------
void sub_679C9()
{
  ;
}

//----- (000679DD) --------------------------------------------------------
__int16 sub_679DD()
{
  __int16 result; // ax

  result = 1536;
  //fix __asm { int     31h; DPMI Services   ax=func xxxxh }
  return result;
}

//----- (00067A0A) --------------------------------------------------------
__int16 sub_67A0A()
{
  __int16 result; // ax

  result = 1536;
  //fix __asm { int     31h; DPMI Services   ax=func xxxxh }
  return result;
}

//----- (00067A37) --------------------------------------------------------
void sub_67A37(int a1, int a2, __int16 a3)
{
  int v5; // ecx

  v5 = 32;
  do
  {
    *(_DWORD *)a1 = a2;
    *(_WORD *)(a1 + 4) = a3;
    a2 += 108;
    a1 += 6;
    --v5;
  }
  while ( v5 );
}

//----- (00067A67) --------------------------------------------------------
int sub_67557_67A67(__int16 a1, int a2, int a3)
{
  int v3; // ecx

  //fix __asm { int     31h; DPMI Services   ax=func xxxxh }
  v3 = a2 << 16;
  LOWORD(v3) = a1;
  return v3 + a3;
}

//----- (00067A92) --------------------------------------------------------
int sub_67A92()
{
  __asm
  {
    int     31h; DPMI Services   ax=func xxxxh
    int     31h; DPMI Services   ax=func xxxxh
    int     31h; DPMI Services   ax=func xxxxh
  }
  return 0;
}

//----- (00067AD8) --------------------------------------------------------
__int16 sub_67AD8(int a1, _DWORD *a2)
{
  __int16 result; // ax

  //fix __asm { int     31h; DPMI Services   ax=func xxxxh }
  *a2 = 4096;
  //fix __asm { int     31h; DPMI Services   ax=func xxxxh }
  result = 1536;
  //fix __asm { int     31h; DPMI Services   ax=func xxxxh }
  return result;
}

//----- (00067B6C) --------------------------------------------------------
int sub_6765C_67B6C(
        const void *a1,
        int (*a2)(_DWORD),
        char a3,
        __int16 a4,
        char *a5,
        __int16 a6)
{
  int result; // eax

  result = a2((uint32)a2);
  qmemcpy(a5, a1, 0x6Au);
  //fix *MK_FP(a6, a5 + 52) = a4;
  //fix *MK_FP(a6, a5 + 60) = a4;
  //fix *MK_FP(a6, a5 + 68) = a4;
  //fix *MK_FP(a6, a5 + 76) = a4;
  return result;
}

//----- (00067BC0) --------------------------------------------------------
int sub_67BC0(int a1, int (*a2)(_DWORD), char a3, __int16 a4, int a5, __int16 a6)
{
  int result; // eax

  result = a2((uint32)a2);
  //fix *MK_FP(a6, a5) = a1;
  //fix *MK_FP(a6, a5 + 4) = a4;
  return result;
}

//----- (00067BF5) --------------------------------------------------------
int sub_67BF5(int (*a1)(_DWORD))
{
  return a1((uint32)a1);
}

//----- (00067C20) --------------------------------------------------------
int sub_67C20(int (*a1)(_DWORD))
{
  return a1((uint32)a1);
}

//----- (00067C4B) --------------------------------------------------------
__int16 sub_67C4B(int (*a1)(_DWORD))
{
  __int16 v1; // cx
  __int16 result; // ax

  //fix
  v1 = 0;
  //fix

  LOWORD(dword_A06DC) = a1((uint32)a1);
  LOWORD(dword_A06E4) = SHIBYTE(v1);
  result = (char)v1;
  LOWORD(dword_A06E0) = (char)v1;
  return result;
}
// 67C75: variable 'v1' is possibly undefined
// A06DC: using guessed type int dword_A06DC;
// A06E0: using guessed type int dword_A06E0;
// A06E4: using guessed type int dword_A06E4;

//----- (00067C90) --------------------------------------------------------
int sub_67C90(int (*a1)(_DWORD))
{
  return a1((uint32)a1);
}

//----- (00067CC8) --------------------------------------------------------
int sub_67CC8(int (*a1)(_DWORD))
{
  return a1((uint32)a1);
}

//----- (00067CF3) --------------------------------------------------------
__int16 sub_677E3_67CF3(
        int a1,
        void (*a2)(_DWORD),
        char a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9,
        int a10)
{
  __int16 result; // ax

  a2((uint32)a2);
  _disable();
  *(_DWORD *)a10 = (uint32)((char *)a2 + a5);
  *(_DWORD *)(a10 + 8) = (uint32)((char *)a2 + a7);
  *(_DWORD *)(a10 + 16) = (uint32)((char *)a2 + a1);
  *(_WORD *)(a10 + 4) = __CS__;
  result = __DS__;
  *(_WORD *)(a10 + 12) = __DS__;
  *(_WORD *)(a10 + 20) = __DS__;
  _enable();
  return result;
}
// 67CF3: using guessed type _DWORD arg_C;

//----- (00067D55) --------------------------------------------------------
int sub_67D55(int (*a1)(_DWORD))
{
  return a1((uint32)a1);
}

//----- (00067D8E) --------------------------------------------------------
int sub_67D8E(int (*a1)(_DWORD))
{
  return a1((uint32)a1);
}

//----- (00067DBF) --------------------------------------------------------
int sub_67DBF(int (*a1)(_DWORD))
{
  return a1((uint32)a1);
}

//----- (00067DEE) --------------------------------------------------------
int sub_67DEE(int (*a1)(_DWORD))
{
  return a1((uint32)a1);
}

//----- (00067E1D) --------------------------------------------------------
__int16 sub_67E1D()
{
  __int16 result; // ax

  result = 5632;
  //fix __asm { int     2Fh; - Multiplex - MS WINDOWS - ENHANCED WINDOWS INSTALLATION CHECK }
  return result;
}

//----- (00067E54) --------------------------------------------------------
__int16 sub_67E54()
{
  __int16 result; // ax

  result = 5632;
  //fix __asm { int     2Fh; - Multiplex - MS WINDOWS - ENHANCED WINDOWS INSTALLATION CHECK }
  return result;
}

//----- (00067E8C) --------------------------------------------------------
void sub_67E8C()
{
  ;
}

//----- (00067E9D) --------------------------------------------------------
int *sub_67E9D()
{
  return &dword_131512;
}
// 131512: using guessed type int dword_131512;

//----- (00067EBE) --------------------------------------------------------
int sub_67EBE(int a1, unsigned __int16 a2, int a3, int a4)
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  //fix MK_FP(*((_WORD *)&byte_9C22E + 2), byte_9C22E)(a1, a2, a3, a4);
  return 0; //fix MK_FP(retaddr[0], retaddr[0])(0);
}
// 9C22E: using guessed type int (*byte_9C22E)(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00067EEE) --------------------------------------------------------
int sub_67EEE()
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (00067F07) --------------------------------------------------------
int sub_67F07()
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (00067F20) --------------------------------------------------------
int sub_67F20()
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (00067F39) --------------------------------------------------------
int sub_67F39(int (*a1)(_DWORD, _DWORD, _DWORD, _DWORD), __int16 a2)
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  *((_WORD *)&byte_9C22E + 2) = a2;
  byte_9C22E = a1;
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}
// 9C22E: using guessed type int (*byte_9C22E)(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00067F63) --------------------------------------------------------
void sub_67F63()
{
  ;
}

//----- (00067F74) --------------------------------------------------------
void sub_67F74()
{
  ;
}

//----- (00067F85) --------------------------------------------------------
int *sub_67F85()
{
  return &dword_1314F4;
}
// 1314F4: using guessed type int dword_1314F4;

//----- (00067FA6) --------------------------------------------------------
int sub_67FA6(unsigned int a1, int a2, int a3, int a4)
{
  int v4; // eax
  char *v5; // eoff
  int v7; // [esp+Ch] [ebp-4h]
  int v8; // [esp+Ch] [ebp-4h]
  int v9; // [esp+Ch] [ebp-4h]
  int v10; // [esp+Ch] [ebp-4h]
  void *retaddr[2]; // [esp+1Ch] [ebp+Ch]

  if ( (__readgsbyte(a1) & 0xF0) == 0xB0 && __readgsbyte(a1 + 1) == 123 )
  {
    while ( dword_9C9F0[a4] )
    {
      v7 = sub_687DB(a4);
      sub_65E75(dword_9D922[a4], v7 + 1);
    }
  }
  if ( (__readgsbyte(a1) & 0xF0) == 0x90 && *(_DWORD *)&byte_9CA04[768 * a4 + 6 * __readgsbyte(a1 + 1)] )
  {
    if ( __readgsbyte(a1 + 2) )
    {
      if ( __readgsword(*(_DWORD *)&byte_9CA04[768 * a4 + 6 * __readgsbyte(a1 + 1)] + 26) != 0x8000 )
      {
        v8 = sub_689A1(a4, __readgsbyte(a1 + 1));
        if ( v8 != -1 )
          sub_65E75(dword_9D922[a4], v8 + 1);
      }
      if ( dword_9C9F0[a4] >= (unsigned int)dword_9C9DC[a4] )
      {
        v9 = sub_687DB(a4);
        sub_65E75(dword_9D922[a4], v9 + 1);
      }
      v4 = 768 * a4 + 6 * __readgsbyte(a1 + 1);
      __writegsword(
        *(_DWORD *)&byte_9CA04[v4] + 18,
        sub_68717(a4, *(_DWORD *)&byte_9CA04[v4], *(_WORD *)&byte_9CA04[v4 + 4]) + 1);
      if ( dword_9D972[a4] )
      {
        __writegsword(
          *(_DWORD *)&byte_9CA04[768 * a4 + 6 * __readgsbyte(a1 + 1)] + 16,
          ((unsigned __int8)byte_9ECAD * (unsigned int)__readgsbyte(a1 + 2)) >> 7);
        v5 = &byte_9CA04[768 * a4 + 6 * __readgsbyte(a1 + 1)];
        __writegsword(*(_DWORD *)v5 + 16, __readgsword(*(_DWORD *)v5 + 16) << 8);
      }
      sub_6586C(dword_9D922[a4], *(_DWORD *)&byte_9CA04[768 * a4 + 6 * __readgsbyte(a1 + 1)]);
      __writegsword(*(_DWORD *)&byte_9CA04[768 * a4 + 6 * __readgsbyte(a1 + 1)] + 18, __readgsbyte(a1 + 1));
    }
    else if ( __readgsword(*(_DWORD *)&byte_9CA04[768 * a4 + 6 * __readgsbyte(a1 + 1)] + 26) != 0x8000 )
    {
      v10 = sub_689A1(a4, __readgsbyte(a1 + 1));
      if ( v10 != -1 )
        sub_65E75(dword_9D922[a4], v10 + 1);
    }
  }
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}
// 9C9DC: using guessed type int dword_9C9DC[5];
// 9C9F0: using guessed type int dword_9C9F0[5];
// 9D922: using guessed type int dword_9D922[5];
// 9D972: using guessed type int dword_9D972[5];
// 9ECAD: using guessed type char byte_9ECAD;
// 67FA6: using guessed type unsigned int arg_0;

//----- (000682AD) --------------------------------------------------------
int sub_682AD(int a1, int a2, unsigned int a3, int a4, int a5)
{
  unsigned int v6; // eax
  int v7; // [esp+14h] [ebp-10h]
  int v8; // [esp+1Ch] [ebp-8h] BYREF
  unsigned int i; // [esp+20h] [ebp-4h]
  void *retaddr[2]; // [esp+30h] [ebp+Ch]

  for ( i = 0; i < 5; ++i )
  {
    if ( dword_1315E8[16 * i] == __readgsdword(a3) )
    {
      dword_9D922[a5] = i;
      break;
    }
  }
  if ( i == 5 )
  {
    dword_9D95E[a5] = 1;
    v7 = sub_64846_64D56(
           a1,
           a2,
           __readgsdword(a3),
           __readgsdword(a3 + 28),
           __readgsword(a3 + 32),
           __readgsdword(a3 + 20),
           __readgsword(a3 + 24),
           (unsigned int)&v8);
    if (v7)
        return 0;//fix MK_FP(retaddr[0], retaddr[0])(v7);
    dword_9D922[a5] = v8;
    v6 = __readgsdword(a3 + 20);
    v7 = sub_5DE8B(__readgsdword(a3 + 4), __readgsdword(v6 + 28), __readgsword(v6 + 32), (unsigned int)&dword_9D94A[a5]);
    if (v7)
        return 0;//fix MK_FP(retaddr[0], retaddr[0])(v7);
    dword_9D936[a5] = 1;
  }
  else
  {
    dword_9D95E[a5] = 0;
  }
  dword_9D972[a5] = __readgsdword(a3 + 16);
  sub_68690(a5, __readgsdword(a3 + 12));
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}
// 9D922: using guessed type int dword_9D922[5];
// 9D936: using guessed type int dword_9D936[5];
// 9D94A: using guessed type int dword_9D94A[5];
// 9D95E: using guessed type int dword_9D95E[5];
// 9D972: using guessed type int dword_9D972[5];
// 1315E8: using guessed type int dword_1315E8[];

//----- (0006842C) --------------------------------------------------------
int sub_6842C(int a1, int a2, int a3)
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  if ( dword_9D936[a3] )
  {
    dword_9D936[a3] = 0;
    if ( dword_9D95E[a3] )
    {
      sub_65488(dword_9D922[a3], 1, 1);
      sub_5E1A1(dword_9D94A[a3]);
    }
  }
  sub_68706();
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}
// 9D922: using guessed type int dword_9D922[5];
// 9D936: using guessed type int dword_9D936[5];
// 9D94A: using guessed type int dword_9D94A[5];
// 9D95E: using guessed type int dword_9D95E[5];

//----- (000684AA) --------------------------------------------------------
int sub_684AA()
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (000684C3) --------------------------------------------------------
int sub_684C3(int a1, __int16 a2, int a3, int a4)
{
  int v4; // edx
  int v5; // eax
  unsigned __int64 v7; // rax
  int v8; // ebx
  unsigned __int64 v9; // rax
  unsigned int v10; // ebx
  unsigned int i; // [esp+4h] [ebp-Ch]
  int v12; // [esp+8h] [ebp-8h]
  int j; // [esp+Ch] [ebp-4h]
  unsigned int v14; // [esp+Ch] [ebp-4h]
  void *retaddr[2]; // [esp+1Ch] [ebp+Ch]

  v4 = 6 * a4;
  *(_WORD *)&byte_9D904[v4 + 4] = a2;
  *(_DWORD *)&byte_9D904[v4] = a1;
  for ( i = 0; i < 0x80; ++i )
  {
    v5 = 768 * a4 + 6 * i;
    *(_WORD *)&byte_9CA04[v5 + 4] = 0;
    *(_DWORD *)&byte_9CA04[v5] = 0;
  }
  for ( j = 0; byte_9D986[j]; ++j )
  {
    if ( byte_9D986[j] != __readgsbyte(j + a1) )
      return 0;//fix MK_FP(retaddr[0], retaddr[0])(14);
  }
  v14 = 40;
  do
  {
    v12 = (__int16)__readgsword(sub_67406(v14 + a1, a2) + 18);
    v7 = sub_67406(v14 + a1, a2);
    v8 = v7;
    LODWORD(v7) = 6 * v12 + 768 * a4;
    *(_WORD *)&byte_9CA04[v7 + 4] = WORD2(v7);
    *(_DWORD *)&byte_9CA04[v7] = v8;
    v9 = sub_67406(v14 + a1 + 84, a2);
    v10 = v9;
    LODWORD(v9) = *(_DWORD *)&byte_9CA04[768 * a4 + 6 * v12];
    __writegsword(v9 + 4, WORD2(v9));
    __writegsdword(v9, v10);
    LODWORD(v9) = *(_DWORD *)&byte_9CA04[768 * a4 + 6 * v12];
    __writegsword(v9 + 24, __CS__);
    __writegsdword(v9 + 20, (unsigned int)sub_6864F);
    v14 += __readgsdword(*(_DWORD *)&byte_9CA04[768 * a4 + 6 * v12] + 8) + 84;
  }
  while ( v14 < __readgsdword(*(_DWORD *)&byte_9D904[6 * a4] + 36) );
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (0006864F) --------------------------------------------------------
int sub_6864F(int a1, int a2, int a3)
{
  int v3; // eax
  void *retaddr[2]; // [esp+Ch] [ebp+Ch]

  v3 = sub_68875(a1, a3 - 1);
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(v3);
}

//----- (0006866E) --------------------------------------------------------
void sub_6866E()
{
  ;
}

//----- (0006867F) --------------------------------------------------------
void sub_6867F()
{
  ;
}

//----- (00068690) --------------------------------------------------------
int sub_68690(int a1, int a2)
{
  int v2; // eax
  int result; // eax
  unsigned int i; // [esp+0h] [ebp-4h]

  for ( i = 0; i < 0x20; ++i )
  {
    v2 = 384 * a1 + 12 * i;
    *(__int16 *)((char *)&word_9C23C + v2) = 0;
    *(int *)((char *)&dword_9C238 + v2) = 0;
  }
  dword_9C9B4[a1] = 31;
  dword_9C9C8[a1] = 0;
  result = a2;
  dword_9C9DC[a1] = a2;
  return result;
}
// 9C238: using guessed type int dword_9C238;
// 9C23C: using guessed type __int16 word_9C23C;
// 9C9B4: using guessed type int dword_9C9B4[5];
// 9C9C8: using guessed type int dword_9C9C8[5];
// 9C9DC: using guessed type int dword_9C9DC[5];

//----- (00068706) --------------------------------------------------------
void sub_68706()
{
  ;
}

//----- (00068717) --------------------------------------------------------
int sub_68717(int a1, int a2, __int16 a3)
{
  int v3; // edx
  int v6; // [esp+4h] [ebp-4h]

  if ( dword_9C9F0[a1] >= (unsigned int)dword_9C9DC[a1] )
    return -1;
  if ( dword_9C9B4[a1] == 31 )
    dword_9C9B4[a1] = 0;
  else
    ++dword_9C9B4[a1];
  v6 = dword_9C9B4[a1];
  dword_9C234[96 * a1 + 3 * v6] = (__int16)__readgsword(a2 + 18);
  v3 = 384 * a1 + 12 * v6;
  *(__int16 *)((char *)&word_9C23C + v3) = a3;
  *(int *)((char *)&dword_9C238 + v3) = a2;
  ++dword_9C9F0[a1];
  return v6;
}
// 9C234: using guessed type int dword_9C234[];
// 9C238: using guessed type int dword_9C238;
// 9C23C: using guessed type __int16 word_9C23C;
// 9C9B4: using guessed type int dword_9C9B4[5];
// 9C9DC: using guessed type int dword_9C9DC[5];
// 9C9F0: using guessed type int dword_9C9F0[5];

//----- (000687DB) --------------------------------------------------------
int sub_687DB(int a1)
{
  int v1; // eax
  int v4; // [esp+4h] [ebp-4h]

  if ( !dword_9C9F0[a1] )
    return -1;
  v4 = dword_9C9C8[a1];
  v1 = 384 * a1 + 12 * v4;
  *(__int16 *)((char *)&word_9C23C + v1) = 0;
  *(int *)((char *)&dword_9C238 + v1) = 0;
  if ( dword_9C9C8[a1] == 31 )
    dword_9C9C8[a1] = 0;
  else
    ++dword_9C9C8[a1];
  --dword_9C9F0[a1];
  return v4;
}
// 9C238: using guessed type int dword_9C238;
// 9C23C: using guessed type __int16 word_9C23C;
// 9C9C8: using guessed type int dword_9C9C8[5];
// 9C9F0: using guessed type int dword_9C9F0[5];

//----- (00068875) --------------------------------------------------------
int sub_68875(int a1, int a2)
{
  int v2; // edx
  int v3; // eax
  int v4; // ecx
  int v5; // eax
  int v8; // [esp+4h] [ebp-4h]

  if ( !dword_9C9F0[a1] )
    return -1;
  while ( a2 != dword_9C9C8[a1] )
  {
    if ( a2 )
      v8 = a2 - 1;
    else
      v8 = 31;
    v2 = 384 * a1 + 12 * v8;
    v3 = 384 * a1 + 12 * a2;
    v4 = *(int *)((char *)&dword_9C238 + v2);
    *(__int16 *)((char *)&word_9C23C + v3) = *(__int16 *)((char *)&word_9C23C + v2);
    *(int *)((char *)&dword_9C238 + v3) = v4;
    *(int *)((char *)dword_9C234 + v3) = *(int *)((char *)dword_9C234 + v2);
    if ( a2 )
      --a2;
    else
      a2 = 31;
  }
  v5 = 384 * a1 + 12 * a2;
  *(__int16 *)((char *)&word_9C23C + v5) = 0;
  *(int *)((char *)&dword_9C238 + v5) = 0;
  if ( (unsigned int)dword_9C9C8[a1] >= 0x1F )
    dword_9C9C8[a1] = 0;
  else
    ++dword_9C9C8[a1];
  --dword_9C9F0[a1];
  return 0;
}
// 9C234: using guessed type int dword_9C234[];
// 9C238: using guessed type int dword_9C238;
// 9C23C: using guessed type __int16 word_9C23C;
// 9C9C8: using guessed type int dword_9C9C8[5];
// 9C9F0: using guessed type int dword_9C9F0[5];

//----- (000689A1) --------------------------------------------------------
int sub_689A1(int a1, int a2)
{
  int v2; // edx
  int v3; // eax
  int v4; // ecx
  int v5; // eax
  unsigned int v8; // [esp+4h] [ebp-Ch]
  int v9; // [esp+8h] [ebp-8h]
  unsigned int i; // [esp+Ch] [ebp-4h]

  if ( !dword_9C9F0[a1] )
    return -1;
  for ( i = 0; i < 0x21 && dword_9C234[96 * a1 + 3 * i] != a2; ++i )
    ;
  if ( i == 32 )
    return -1;
  v8 = i;
  while ( i != dword_9C9C8[a1] )
  {
    if ( i )
      v9 = i - 1;
    else
      v9 = 31;
    v2 = 384 * a1 + 12 * v9;
    v3 = 384 * a1 + 12 * i;
    v4 = *(int *)((char *)&dword_9C238 + v2);
    *(__int16 *)((char *)&word_9C23C + v3) = *(__int16 *)((char *)&word_9C23C + v2);
    *(int *)((char *)&dword_9C238 + v3) = v4;
    *(int *)((char *)dword_9C234 + v3) = *(int *)((char *)dword_9C234 + v2);
    if ( i )
      --i;
    else
      i = 31;
  }
  v5 = 384 * a1 + 12 * i;
  *(__int16 *)((char *)&word_9C23C + v5) = 0;
  *(int *)((char *)&dword_9C238 + v5) = 0;
  if ( (unsigned int)dword_9C9C8[a1] >= 0x1F )
    dword_9C9C8[a1] = 0;
  else
    ++dword_9C9C8[a1];
  --dword_9C9F0[a1];
  return v8;
}
// 9C234: using guessed type int dword_9C234[];
// 9C238: using guessed type int dword_9C238;
// 9C23C: using guessed type __int16 word_9C23C;
// 9C9C8: using guessed type int dword_9C9C8[5];
// 9C9F0: using guessed type int dword_9C9F0[5];

//----- (00068B10) --------------------------------------------------------
void sub_68B10()
{
  ;
}

//----- (00068B21) --------------------------------------------------------
void sub_68B21()
{
  ;
}

//----- (00068B32) --------------------------------------------------------
int sub_68622_68B32(
        __int16 a1,
        int a2,
        unsigned int a3,
        unsigned int a4,
        int *a5,
        unsigned int a6)
{
  int v7; // [esp+0h] [ebp-30h]
  unsigned __int16 v8; // [esp+4h] [ebp-2Ch]
  int v10; // [esp+14h] [ebp-1Ch]
  unsigned int v11; // [esp+18h] [ebp-18h]
  int v12; // [esp+1Ch] [ebp-14h]
  int v13; // [esp+28h] [ebp-8h]
  int v14; // [esp+2Ch] [ebp-4h]

  v12 = 0;
  v11 = 0;
  if ( a4 > 5 )
    return 10;
  if ( dword_9B18E[a4] )
    return 9;
  if ( a3 < 0xA000 || a3 > 0xA200 )
    return 6;
  strcpy(&unk_9EE07, &unk_9ED08);
  strcat(&unk_9EE07, aHmimdrv386);
  v14 = open((uint32)&unk_9EE07, 512);
  if ( v14 != -1 )
  {
    read(v14, (uint32)&unk_9C1D2, 44);
    while ( 1 )
    {
      if ( v11 > dword_9C1F2 || v12 )
      {
        close(v14);
        dword_9B1A2[a4] = dword_9C226;
        dword_9B18E[a4] = 1;
        __writegsword(a6 + 4, v8);
        __writegsdword(a6, v7);
        return 0;
      }
      read(v14, (uint32)&unk_9C1FE, 44);
      v13 = dword_9C222;
      if ( dword_9C226 == a3 )
      {
        v12 = 1;
        v10 = (int)malloc(dword_9C222);
        if ( !v10 )
          return 5;
        sub_67557_67A67(a1, a2, v10);
        v8 = a1;
        v7 = sub_67A92();
        read(v14, v10, v13);
        sub_679DD();
        a2 = (int)a5;
        *a5 = v10;
      }
      else
      {
        lseek(v14, dword_9C222, 1);
      }
      ++v11;
    }
  }
  return 15;
}
// 68D05: variable 'v8' is possibly undefined
// 68D11: variable 'v7' is possibly undefined
// 66E2E: using guessed type _DWORD close(_DWORD);
// 66E3C: using guessed type _DWORD read(_DWORD, _DWORD, _DWORD);
// 6BEA2: using guessed type _DWORD lseek(_DWORD, _DWORD, char);
// 6D071: using guessed type _DWORD malloc(_DWORD);
// 6E21E: using guessed type _DWORD strcpy(_DWORD, _DWORD);
// 6E243: using guessed type _DWORD strcat(_DWORD, _DWORD);
// 9B18E: using guessed type int dword_9B18E[5];
// 9B1A2: using guessed type int dword_9B1A2[5];
// 9C1F2: using guessed type int dword_9C1F2;
// 9C222: using guessed type int dword_9C222;
// 9C226: using guessed type int dword_9C226;

//----- (00068D23) --------------------------------------------------------
int sub_68D23(unsigned int a1)
{
  if ( a1 > 5 )
    return 10;
  if ( !dword_9B18E[a1] )
    return 10;
  dword_9B18E[a1] = 0;
  return 0;
}
// 9B18E: using guessed type int dword_9B18E[5];

//----- (00068D8D) --------------------------------------------------------
void sub_68D8D()
{
  ;
}

//----- (00068D9E) --------------------------------------------------------
void sub_68D9E()
{
  ;
}

//----- (00068E05) --------------------------------------------------------
void sub_68E05()
{
  ;
}

//----- (00068E16) --------------------------------------------------------
void sub_68E16()
{
  ;
}

//----- (00068EE1) --------------------------------------------------------
void sub_68EE1()
{
  ;
}

//----- (00068EF2) --------------------------------------------------------
void sub_68EF2()
{
  ;
}

//----- (00068F03) --------------------------------------------------------
int *sub_68F03()
{
  return &dword_1314B8;
}
// 1314B8: using guessed type int dword_1314B8;

//----- (00068F24) --------------------------------------------------------
int sub_68F24(int a1, int a2, int a3, unsigned int a4)
{
  int v4; // eax
  unsigned __int8 v6; // [esp+0h] [ebp-8h]
  void *retaddr[2]; // [esp+14h] [ebp+Ch]

  v6 = __readgsbyte(a4) & 0xF0;
  if ( v6 >= 0xB0u )
  {
    if ( v6 <= 0xB0u )
    {
      sub_6FF63(__readgsbyte(a4 + 2), __readgsbyte(a4 + 1), __readgsbyte(a4) & 0xF);
    }
    else if ( v6 < 0xD0u )
    {
      if ( v6 == 0xC0 )
        sub_70154(__readgsbyte(a4 + 1), __readgsbyte(a4) & 0xF);
    }
    else if ( v6 <= 0xD0u )
    {
      sub_702B4(__readgsbyte(a4 + 2), __readgsbyte(a4 + 1), __readgsbyte(a4) & 0xF);
    }
    else if ( v6 == 0xE0 )
    {
      sub_702FC(__readgsbyte(a4 + 2), __readgsbyte(a4 + 1), __readgsbyte(a4) & 0xF);
    }
    return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
  }
  if ( v6 < 0x90u )
  {
    if ( v6 != 0x80 )
      return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
LABEL_14:
    sub_6F8C3(__readgsbyte(a4 + 2), __readgsbyte(a4 + 1), __readgsbyte(a4) & 0xF);
    return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
  }
  if ( v6 <= 0x90u )
  {
    if ( __readgsbyte(a4 + 2) )
    {
      v4 = __readgsbyte(a4 + 2);
      sub_6F9DB(v4, a1, a3, a2, (unsigned __int8)v4, __readgsbyte(a4 + 1), __readgsbyte(a4) & 0xF);
      return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
    }
    goto LABEL_14;
  }
  if ( v6 == 0xA0 )
    sub_702BC(__readgsbyte(a4 + 1), __readgsbyte(a4) & 0xF);
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (000690EA) --------------------------------------------------------
int sub_690EA(int a1, int a2, int a3, __int16 a4)
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  sub_70554(a4);
  sub_70FB0();
  dword_A1F24 = (int)&unk_A1F48;
  dword_A1F28 = (int)&off_A2150;
  dword_A1F2C = (int)&unk_A22BC;
  dword_A1F30 = (int)&off_A282F;
  dword_A1F34 = (int)&off_A2995;
  dword_A1F38 = (int)&unk_A2F5F;
  dword_A1F3C = (int)&unk_A59DD;
  sub_6EAC2();
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}
// A1F24: using guessed type int dword_A1F24;
// A1F28: using guessed type int dword_A1F28;
// A1F2C: using guessed type int dword_A1F2C;
// A1F30: using guessed type int dword_A1F30;
// A1F34: using guessed type int dword_A1F34;
// A1F38: using guessed type int dword_A1F38;
// A1F3C: using guessed type int dword_A1F3C;
// A2150: using guessed type void *off_A2150;
// A282F: using guessed type char *off_A282F;
// A2995: using guessed type void *off_A2995;

//----- (0006915B) --------------------------------------------------------
int sub_6915B()
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  sub_7104E();
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (00069179) --------------------------------------------------------
int sub_69179()
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (00069192) --------------------------------------------------------
int sub_69192()
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (000691AB) --------------------------------------------------------
void sub_691AB()
{
  ;
}

//----- (000691BC) --------------------------------------------------------
void sub_691BC()
{
  ;
}

//----- (000691CD) --------------------------------------------------------
char sub_691CD(int a1, int a2, unsigned int a3)
{
  int v3; // eax
  __int16 v4; // ax
  unsigned int i; // [esp+0h] [ebp-4h]

  LOBYTE(v3) = a3;
  if ( __readgsbyte(a3) < 0x10u )
  {
    LOBYTE(v3) = a3;
    if ( __readgsbyte(a3) != 9 )
    {
      dword_A082C[__readgsbyte(a3)] = __readgsbyte(a3 + 1);
      v3 = 4 * __readgsbyte(a3);
      *(int *)((char *)dword_A086C + v3) = 1;
      for ( i = 0; i < 9; ++i )
      {
        LOBYTE(v3) = i;
        if ( byte_A0764[i] )
        {
          LOBYTE(v3) = __readgsbyte(a3);
          if ( (unsigned __int8)v3 == dword_A0808[i] )
          {
            v4 = sub_6928F(__readgsbyte(a3 + 1), (unsigned __int8)byte_A0764[i], i);
            LOBYTE(v3) = sub_6A595(i, v4);
          }
        }
      }
    }
  }
  return v3;
}
// A0808: using guessed type int dword_A0808[9];
// A082C: using guessed type int dword_A082C[16];
// A086C: using guessed type int dword_A086C[16];

//----- (0006928F) --------------------------------------------------------
unsigned int sub_6928F(unsigned int a1, int a2, int a3)
{
  unsigned int i; // [esp+4h] [ebp-18h]
  int v5; // [esp+14h] [ebp-8h]
  unsigned int v7; // [esp+18h] [ebp-4h]
  unsigned int v8; // [esp+18h] [ebp-4h]
  unsigned int v9; // [esp+34h] [ebp+18h]

  v9 = a2 - 12;
  for ( i = v9; i >= 0xC; i -= 12 )
    ;
  v5 = dword_A0A68[v9];
  if ( a1 >= 0x40 )
  {
    v8 = dword_A0A68[dword_A08AC[dword_A0808[a3]] + v9] - v5;
    if ( v8 > 0x2CF )
    {
      v5 = dword_A0C04[11 - i] | ((dword_A0A68[v9] & 0x1C00) + 1024);
      v8 = dword_A0A68[dword_A08AC[dword_A0808[a3]] + v9] - v5;
    }
    return ((1000 * (a1 - 64)) >> 6) * v8 / 0x3E8 + v5;
  }
  else
  {
    v7 = v5 - dword_A0A68[v9 - dword_A08AC[dword_A0808[a3]]];
    if ( v7 > 0x2CF )
      v7 = ((v5 & 0x3FF) - LOWORD(dword_A0C00[dword_A08AC[dword_A0808[a3]]])) & 0x3FF;
    return v5 - ((1000 * (63 - a1)) >> 6) * v7 / 0x3E8;
  }
}
// A0808: using guessed type int dword_A0808[9];
// A08AC: using guessed type int dword_A08AC[16];
// A0A68: using guessed type int dword_A0A68[102];
// A0C00: using guessed type int dword_A0C00[];
// A0C04: using guessed type int dword_A0C04[36];

//----- (00069425) --------------------------------------------------------
void sub_69425()
{
  ;
}

//----- (00069436) --------------------------------------------------------
void sub_69436()
{
  ;
}

//----- (00069447) --------------------------------------------------------
char sub_69447(int a1, int a2, unsigned int a3)
{
  int v3; // eax

  LOBYTE(v3) = __readgsbyte(a3 + 1);
  if ( (unsigned __int8)v3 < 0x66u )
  {
    if ( (unsigned __int8)v3 >= 7u )
    {
      if ( (unsigned __int8)v3 <= 7u )
      {
        LOBYTE(v3) = sub_7109B(__readgsbyte(a3), __readgsbyte(a3 + 2));
      }
      else if ( (_BYTE)v3 == 64 )
      {
        dword_A0994[__readgsbyte(a3)] = __readgsbyte(a3 + 2);
        LOBYTE(v3) = a3;
        if ( !__readgsbyte(a3 + 2) )
        {
          while ( dword_A09F0 )
          {
            LOBYTE(v3) = sub_69A7E(0, 0, (unsigned int)&byte_A09F4[3 * dword_A09F0]);
            --dword_A09F0;
          }
        }
      }
    }
  }
  else if ( (unsigned __int8)v3 <= 0x66u )
  {
    v3 = 4 * __readgsbyte(a3);
    *(int *)((char *)dword_A08AC + v3) = __readgsbyte(a3 + 2);
  }
  else if ( (unsigned __int8)v3 >= 0x79u )
  {
    if ( (unsigned __int8)v3 <= 0x79u )
    {
      LOBYTE(v3) = sub_69C26(__readgsbyte(a3));
    }
    else if ( (_BYTE)v3 == 123 )
    {
      LOBYTE(v3) = sub_69B7D(__readgsbyte(a3));
    }
  }
  return v3;
}
// A08AC: using guessed type int dword_A08AC[16];
// A0994: using guessed type int dword_A0994[18];
// A09F0: using guessed type int dword_A09F0;

//----- (0006956C) --------------------------------------------------------
void sub_6956C()
{
  ;
}

//----- (0006957D) --------------------------------------------------------
void sub_6957D()
{
  ;
}

//----- (0006958E) --------------------------------------------------------
void sub_6958E(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3)
{
  __int16 v3; // ax
  unsigned int j; // [esp+0h] [ebp-14h]
  unsigned int i; // [esp+0h] [ebp-14h]
  unsigned int v6; // [esp+4h] [ebp-10h]
  unsigned __int8 v7; // [esp+10h] [ebp-4h]
  unsigned __int8 v8; // [esp+10h] [ebp-4h]

  if ( a3 < 0x10u )
  {
    if ( a3 == 9 )
    {
      v8 = sub_71265(9u);
      sub_6A7A7(v8);
      dword_A0808[v8] = 9;
      for ( i = 0; i < 5; ++i )
      {
        sub_6AB50(byte_A0776[2 * v8] + 0x80, byte_A0724[(unsigned __int8)byte_A0776[2 * v8]] | 0xF);
        sub_6AB50(byte_A0775[2 * v8] + 0x80, byte_A0724[(unsigned __int8)byte_A0775[2 * v8]] | 0xF);
      }
      sub_6A915(dword_A07B6 + 30 * a1, (unsigned __int16)word_A07BA, v8);
      dword_A0930[v8] = a2;
      sub_6AB50(
        byte_A0776[2 * v8] + 64,
        byte_A0704[(unsigned __int8)byte_A0776[2 * v8]] & 0xC0 | ((0x2000
                                                                 - (64
                                                                  - (byte_A0704[(unsigned __int8)byte_A0776[2 * v8]] & 0x3F))
                                                                 * 2
                                                                 * (64
                                                                  - (unsigned int)(unsigned __int8)byte_A0A24[(int)(unsigned __int8)(((dword_A08F0[9] << 7) / 127 * dword_A0930[v8]) >> 7) >> 1])) >> 7));
      sub_6A6E5(v8, dword_A0A38[__readgsbyte(dword_A07B0 + 12 * a1 + 2)]);
      byte_A0764[v8] = a1;
    }
    else
    {
      v7 = sub_71265(a3);
      sub_6A7A7(v7);
      dword_A0808[v7] = a3;
      for ( j = 0; j < 5; ++j )
      {
        sub_6AB50(byte_A0776[2 * v7] + 0x80, byte_A0724[(unsigned __int8)byte_A0776[2 * v7]] | 0xF);
        sub_6AB50(byte_A0775[2 * v7] + 0x80, byte_A0724[(unsigned __int8)byte_A0775[2 * v7]] | 0xF);
      }
      sub_6A915(dword_A07A0 + 30 * dword_A07C8[a3], (unsigned __int16)word_A07A4, v7);
      dword_A0930[v7] = a2;
      v6 = (0x2000
          - (64 - (byte_A0704[(unsigned __int8)byte_A0776[2 * v7]] & 0x3F))
          * 2
          * (64
           - (unsigned int)(unsigned __int8)byte_A0A24[(int)(unsigned __int8)(((dword_A08F0[a3] << 7)
                                                                             / 127
                                                                             * dword_A0930[v7]) >> 7) >> 1])) >> 7;
      if ( !__readgsbyte(dword_A07A0 + 30 * dword_A07C8[a3] + 14) )
        sub_6AB50(byte_A0775[2 * v7] + 64, byte_A0704[(unsigned __int8)byte_A0775[2 * v7]] & 0xC0 | v6);
      sub_6AB50(byte_A0776[2 * v7] + 64, byte_A0704[(unsigned __int8)byte_A0776[2 * v7]] & 0xC0 | v6);
      sub_6A6E5(v7, dword_A0A38[a1]);
      byte_A0764[v7] = a1;
      if ( dword_A07C4 )
      {
        if ( dword_A086C[a3] )
        {
          v3 = sub_6928F(dword_A082C[a3], a1, v7);
          sub_6A595(v7, v3);
        }
      }
    }
  }
}
// A07A0: using guessed type int dword_A07A0;
// A07A4: using guessed type __int16 word_A07A4;
// A07B0: using guessed type int dword_A07B0;
// A07B6: using guessed type int dword_A07B6;
// A07BA: using guessed type __int16 word_A07BA;
// A07C4: using guessed type int dword_A07C4;
// A07C8: using guessed type int dword_A07C8[16];
// A0808: using guessed type int dword_A0808[9];
// A082C: using guessed type int dword_A082C[16];
// A086C: using guessed type int dword_A086C[16];
// A08F0: using guessed type int dword_A08F0[16];
// A0930: using guessed type int dword_A0930[9];
// A0A38: using guessed type int dword_A0A38[12];

//----- (00069A5C) --------------------------------------------------------
void sub_69A5C()
{
  ;
}

//----- (00069A6D) --------------------------------------------------------
void sub_69A6D()
{
  ;
}

//----- (00069A7E) --------------------------------------------------------
char sub_69A7E(int a1, int a2, unsigned int a3)
{
  int v3; // eax
  unsigned int i; // [esp+4h] [ebp-8h]

  LOBYTE(v3) = a3;
  if ( __readgsbyte(a3 + 2) < 0x10u )
  {
    v3 = 4 * __readgsbyte(a3 + 2);
    if ( *(int *)((char *)dword_A0994 + v3) && (unsigned int)dword_A09F0 < 0x10 )
    {
      byte_A09F4[3 * dword_A09F0] = __readgsbyte(a3);
      byte_A09F5[3 * dword_A09F0] = __readgsbyte(a3 + 1);
      LOBYTE(v3) = __readgsbyte(a3 + 2);
      byte_A09F6[3 * dword_A09F0++] = v3;
    }
    else
    {
      for ( i = 0; i < 9; ++i )
      {
        LOBYTE(v3) = a3;
        if ( byte_A0764[i] == __readgsbyte(a3) )
        {
          LOBYTE(v3) = __readgsbyte(a3 + 2);
          if ( (unsigned __int8)v3 == dword_A0808[i] )
          {
            sub_6A7A7(i);
            LOBYTE(v3) = i;
            byte_A0764[i] = 0;
          }
        }
      }
    }
  }
  return v3;
}
// A0808: using guessed type int dword_A0808[9];
// A0994: using guessed type int dword_A0994[18];
// A09F0: using guessed type int dword_A09F0;

//----- (00069B7D) --------------------------------------------------------
int sub_69B7D(unsigned int a1)
{
  int result; // eax
  unsigned int i; // [esp+0h] [ebp-4h]

  if ( a1 < 0x10 )
  {
    dword_A08F0[a1] = 127;
    dword_A0930[a1] = 127;
    dword_A0954[a1] = 0;
    result = 4 * a1;
    dword_A0994[a1] = 0;
    for ( i = 0; i < 9; ++i )
    {
      result = dword_A0808[i];
      if ( result == a1 )
      {
        sub_6A7A7(i);
        result = i;
        byte_A0764[i] = 0;
      }
    }
  }
  return result;
}
// 69B93: conditional instruction was optimized away because %arg_0.4>=10u
// A0808: using guessed type int dword_A0808[9];
// A08F0: using guessed type int dword_A08F0[16];
// A0930: using guessed type int dword_A0930[9];
// A0954: using guessed type int dword_A0954[16];
// A0994: using guessed type int dword_A0994[18];

//----- (00069C26) --------------------------------------------------------
int sub_69C26(unsigned int a1)
{
  int result; // eax

  if ( a1 < 0x10 )
  {
    dword_A08F0[a1] = 127;
    dword_A0930[a1] = 127;
    dword_A0954[a1] = 0;
    dword_A0994[a1] = 0;
    dword_A082C[a1] = 64;
    result = 4 * a1;
    dword_A08AC[a1] = 2;
  }
  return result;
}
// 69C3C: conditional instruction was optimized away because %arg_0.4>=10u
// A082C: using guessed type int dword_A082C[16];
// A08AC: using guessed type int dword_A08AC[16];
// A08F0: using guessed type int dword_A08F0[16];
// A0930: using guessed type int dword_A0930[9];
// A0954: using guessed type int dword_A0954[16];
// A0994: using guessed type int dword_A0994[18];

//----- (00069CAE) --------------------------------------------------------
void sub_69CAE()
{
  ;
}

//----- (00069CBF) --------------------------------------------------------
void sub_69CBF()
{
  ;
}

//----- (00069CD0) --------------------------------------------------------
void sub_69CD0(int a1, int a2, unsigned int a3)
{
  unsigned __int8 v3; // [esp+0h] [ebp-4h]

  v3 = __readgsbyte(a3) & 0xF0;
  if ( v3 < 0xB0u )
  {
    if ( v3 >= 0x80u )
    {
      if ( v3 > 0x80u )
      {
        if ( v3 != 0x90 )
          return;
        if ( __readgsbyte(a3 + 2) )
        {
          sub_6958E(__readgsbyte(a3 + 1), __readgsbyte(a3 + 2), __readgsbyte(a3) & 0xF);
          return;
        }
      }
      byte_A09E0 = __readgsbyte(a3) & 0xF;
      byte_A09DE = __readgsbyte(a3 + 1);
      byte_A09DF = __readgsbyte(a3 + 2);
      sub_69A7E(0, 0, (unsigned int)&byte_A09DE);
    }
  }
  else if ( v3 <= 0xB0u )
  {
    byte_A09E3 = __readgsbyte(a3) & 0xF;
    byte_A09E4 = __readgsbyte(a3 + 1);
    byte_A09E5 = __readgsbyte(a3 + 2);
    sub_69447(0, 0, (unsigned int)&byte_A09E3);
  }
  else if ( v3 >= 0xC0u )
  {
    if ( v3 <= 0xC0u )
    {
      byte_A09E1 = __readgsbyte(a3 + 1);
      byte_A09E2 = __readgsbyte(a3) & 0xF;
      sub_7132C(0, 0, (unsigned int)&byte_A09E1);
    }
    else if ( v3 == 0xE0 )
    {
      byte_A09E6 = __readgsbyte(a3) & 0xF;
      byte_A09E7 = __readgsbyte(a3 + 2);
      sub_691CD(0, 0, (unsigned int)&byte_A09E6);
    }
  }
}
// A09DE: using guessed type char byte_A09DE;
// A09DF: using guessed type char byte_A09DF;
// A09E0: using guessed type char byte_A09E0;
// A09E1: using guessed type char byte_A09E1;
// A09E2: using guessed type char byte_A09E2;
// A09E3: using guessed type char byte_A09E3;
// A09E4: using guessed type char byte_A09E4;
// A09E5: using guessed type char byte_A09E5;
// A09E6: using guessed type char byte_A09E6;
// A09E7: using guessed type char byte_A09E7;

//----- (00069EAB) --------------------------------------------------------
void sub_69EAB()
{
  ;
}

//----- (00069EBC) --------------------------------------------------------
void sub_69EBC()
{
  ;
}

//----- (00069ECD) --------------------------------------------------------
char sub_69ECD()
{
  char result; // al
  unsigned int i; // [esp+0h] [ebp-4h]
  unsigned int j; // [esp+0h] [ebp-4h]

  result = sub_6A827();
  dword_A08EC = 0;
  for ( i = 0; i < 9; ++i )
  {
    byte_A0764[i] = 0;
    dword_A0808[i] = 0;
    result = 4 * i;
    dword_A0930[i] = 127;
  }
  for ( j = 0; j < 0x10; ++j )
  {
    dword_A082C[j] = 64;
    dword_A07C8[j] = 0;
    dword_A086C[j] = 0;
    dword_A08F0[j] = 127;
    result = 4 * j;
    dword_A0954[j] = 0;
  }
  return result;
}
// A07C8: using guessed type int dword_A07C8[16];
// A0808: using guessed type int dword_A0808[9];
// A082C: using guessed type int dword_A082C[16];
// A086C: using guessed type int dword_A086C[16];
// A08EC: using guessed type int dword_A08EC;
// A08F0: using guessed type int dword_A08F0[16];
// A0930: using guessed type int dword_A0930[9];
// A0954: using guessed type int dword_A0954[16];

//----- (00069F93) --------------------------------------------------------
void sub_69F93()
{
  ;
}

//----- (00069FA4) --------------------------------------------------------
void sub_69FA4()
{
  ;
}

//----- (00069FB5) --------------------------------------------------------
int sub_69FB5(int a1, int a2, int a3, __int16 a4)
{
  unsigned int v4; // edx
  unsigned int v5; // edx
  int result; // eax
  unsigned int v7; // edx
  unsigned int v8; // edx
  unsigned __int8 i; // [esp+4h] [ebp-4h]

  sub_6A10E(a3);
  if ( dword_A08EC )
  {
    dword_A08EC = 0;
    word_A07AE = a4;
    dword_A07AA = a3;
    v7 = __readgsdword(*(_DWORD *)byte_A0794 + 12);
    word_A07B4 = a4;
    dword_A07B0 = v7 + a3;
    v8 = __readgsdword(*(_DWORD *)byte_A0794 + 16);
    word_A07BA = a4;
    result = v8 + a3;
    dword_A07B6 = v8 + a3;
    dword_A07BC = 1;
  }
  else
  {
    dword_A08EC = 1;
    *(_WORD *)&byte_A0794[4] = a4;
    *(_DWORD *)byte_A0794 = a3;
    dword_A078C = (__int16)__readgsword(a3 + 8);
    v4 = __readgsdword(a3 + 12);
    word_A079E = a4;
    dword_A079A = v4 + a3;
    v5 = __readgsdword(a3 + 16);
    word_A07A4 = a4;
    result = v5 + a3;
    dword_A07A0 = v5 + a3;
    dword_A07A6 = 1;
    for ( i = 0; i < 9u; ++i )
    {
      byte_A09EE = 0;
      byte_A09EF = i;
      word_A09EC = __DS__;
      dword_A09E8 = (int)&byte_A09EE;
      result = sub_7132C(i, 1000, (unsigned int)&byte_A09EE);
    }
  }
  return result;
}
// A078C: using guessed type int dword_A078C;
// A079A: using guessed type int dword_A079A;
// A079E: using guessed type __int16 word_A079E;
// A07A0: using guessed type int dword_A07A0;
// A07A4: using guessed type __int16 word_A07A4;
// A07A6: using guessed type int dword_A07A6;
// A07AA: using guessed type int dword_A07AA;
// A07AE: using guessed type __int16 word_A07AE;
// A07B0: using guessed type int dword_A07B0;
// A07B4: using guessed type __int16 word_A07B4;
// A07B6: using guessed type int dword_A07B6;
// A07BA: using guessed type __int16 word_A07BA;
// A07BC: using guessed type int dword_A07BC;
// A08EC: using guessed type int dword_A08EC;
// A09E8: using guessed type int dword_A09E8;
// A09EC: using guessed type __int16 word_A09EC;
// A09EE: using guessed type char byte_A09EE;
// A09EF: using guessed type char byte_A09EF;

//----- (0006A10E) --------------------------------------------------------
int sub_6A10E(int a1)
{
  int result; // eax
  int v2; // [esp+0h] [ebp-10h]
  unsigned __int16 i; // [esp+Ch] [ebp-4h]

  v2 = __readgsdword(a1 + 16) + a1;
  for ( i = 0; ; ++i )
  {
    result = (__int16)__readgsword(a1 + 8) - 2;
    if ( i >= result )
      break;
    __writegsbyte(
      v2 + 11,
      (32 * __readgsbyte(v2 + 7)) | (__readgsbyte(v2 + 12) << 6) | (__readgsbyte(v2 + 11) << 7) | (16
                                                                                                 * __readgsbyte(v2 + 13)) | __readgsbyte(v2 + 3));
    __writegsbyte(v2 + 2, __readgsbyte(v2 + 10) | (__readgsbyte(v2 + 2) << 6));
    __writegsbyte(v2 + 5, __readgsbyte(v2 + 8) | (16 * __readgsbyte(v2 + 5)));
    __writegsbyte(v2 + 6, __readgsbyte(v2 + 9) | (16 * __readgsbyte(v2 + 6)));
    __writegsbyte(v2 + 14, __readgsbyte(v2 + 14) | (2 * __readgsbyte(v2 + 4)));
    __writegsbyte(
      v2 + 24,
      __readgsbyte(v2 + 16) | (16 * __readgsbyte(v2 + 26)) | (32 * __readgsbyte(v2 + 20)) | (__readgsbyte(v2 + 25) << 6) | (__readgsbyte(v2 + 24) << 7));
    __writegsbyte(v2 + 15, __readgsbyte(v2 + 23) | (__readgsbyte(v2 + 15) << 6));
    __writegsbyte(v2 + 18, __readgsbyte(v2 + 21) | (16 * __readgsbyte(v2 + 18)));
    __writegsbyte(v2 + 19, __readgsbyte(v2 + 22) | (16 * __readgsbyte(v2 + 19)));
    v2 += 30;
  }
  return result;
}

//----- (0006A30E) --------------------------------------------------------
void sub_6A30E()
{
  ;
}

//----- (0006A31F) --------------------------------------------------------
void sub_6A31F()
{
  ;
}

//----- (0006A330) --------------------------------------------------------
char sub_6A330()
{
  char result; // al

  dword_A06E8 = dword_A06F0;
  sub_6A4F4((unsigned int)&dword_A06E8);
  sub_6A827();
  result = sub_6AB1E();
  dword_A0788 = 0;
  return result;
}
// A06E8: using guessed type int dword_A06E8;
// A06F0: using guessed type int dword_A06F0;
// A0788: using guessed type int dword_A0788;

//----- (0006A373) --------------------------------------------------------
void sub_6A373()
{
  ;
}

//----- (0006A384) --------------------------------------------------------
void sub_6A384()
{
  ;
}

//----- (0006A395) --------------------------------------------------------
char sub_6A395(int a1, int a2, unsigned int a3)
{
  char result; // al

  dword_A06EC = __readgsdword(a3);
  sub_6A4F4((unsigned int)&dword_A06EC);
  result = sub_6A62B();
  dword_A0788 = 1;
  return result;
}
// A06EC: using guessed type int dword_A06EC;
// A0788: using guessed type int dword_A0788;

//----- (0006A3DB) --------------------------------------------------------
void sub_6A3DB()
{
  ;
}

//----- (0006A3EC) --------------------------------------------------------
void sub_6A3EC()
{
  ;
}

//----- (0006A3FD) --------------------------------------------------------
int sub_6A3FD(unsigned int a1, __int16 a2, int a3, int a4)
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  sub_69CD0(a4, a3, a1);
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (0006A42C) --------------------------------------------------------
int sub_6A42C(int a1, int a2, int a3, int a4)
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  dword_131ADC = a4;
  sub_6A395(a4, a4, (unsigned int)&dword_131ADC);
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}
// 131ADC: using guessed type int dword_131ADC;

//----- (0006A467) --------------------------------------------------------
int sub_6A467()
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  sub_6A330();
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (0006A485) --------------------------------------------------------
int sub_6A485()
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  sub_69ECD();
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (0006A4A3) --------------------------------------------------------
int sub_6A4A3(int a1, __int16 a2, int a3, int a4)
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  sub_69FB5(a4, a4, a1, a2);
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (0006A4D2) --------------------------------------------------------
void sub_6A4D2()
{
  ;
}

//----- (0006A4E3) --------------------------------------------------------
void sub_6A4E3()
{
  ;
}

//----- (0006A4F4) --------------------------------------------------------
char sub_6A4F4(unsigned int a1)
{
  if ( __readgsdword(a1) != 904 && __readgsdword(a1) != 896 )
    return 1;
  dword_A076F = __readgsdword(a1);
  dword_A06F0 = __readgsdword(a1);
  sub_6AB50(1u, 0x20u);
  byte_A0758 = 0;
  sub_6A62B();
  byte_A0773 = 1;
  return 0;
}
// A06F0: using guessed type int dword_A06F0;
// A0758: using guessed type char byte_A0758;
// A076F: using guessed type int dword_A076F;
// A0773: using guessed type char byte_A0773;

//----- (0006A573) --------------------------------------------------------
void sub_6A573()
{
  ;
}

//----- (0006A584) --------------------------------------------------------
void sub_6A584()
{
  ;
}

//----- (0006A595) --------------------------------------------------------
char sub_6A595(unsigned __int8 a1, __int16 a2)
{
  byte_A0734[a1] = a2;
  byte_A073D[a1] = HIBYTE(a2) | 0x20;
  sub_6AB50(a1 - 96, byte_A0734[a1]);
  sub_6AB50(a1 - 80, byte_A073D[a1]);
  return 0;
}

//----- (0006A609) --------------------------------------------------------
void sub_6A609()
{
  ;
}

//----- (0006A61A) --------------------------------------------------------
void sub_6A61A()
{
  ;
}

//----- (0006A62B) --------------------------------------------------------
char sub_6A62B()
{
  unsigned int i; // [esp+0h] [ebp-8h]
  unsigned int j; // [esp+0h] [ebp-8h]

  for ( i = 0; i < 9; ++i )
  {
    byte_A073D[i] = 0;
    sub_6AB50(i - 80, byte_A073D[i]);
  }
  for ( j = 0; j < 0xB; ++j )
    byte_A0759[j] = 0;
  byte_A0774 = 0;
  byte_A0758 &= 0xC0u;
  sub_6AB50(0xBDu, byte_A0758);
  return 0;
}
// A0758: using guessed type char byte_A0758;
// A0774: using guessed type char byte_A0774;

//----- (0006A6C3) --------------------------------------------------------
void sub_6A6C3()
{
  ;
}

//----- (0006A6D4) --------------------------------------------------------
void sub_6A6D4()
{
  ;
}

//----- (0006A6E5) --------------------------------------------------------
char sub_6A6E5(unsigned __int8 a1, __int16 a2)
{
  byte_A0734[a1] = a2;
  byte_A073D[a1] = HIBYTE(a2) | 0x20;
  sub_6AB50(a1 - 96, byte_A0734[a1]);
  sub_6AB50(a1 - 80, byte_A073D[a1] & 0xDF);
  sub_6AB50(a1 - 80, byte_A073D[a1]);
  byte_A0764[a1] = 1;
  return 0;
}

//----- (0006A785) --------------------------------------------------------
void sub_6A785()
{
  ;
}

//----- (0006A796) --------------------------------------------------------
void sub_6A796()
{
  ;
}

//----- (0006A7A7) --------------------------------------------------------
char sub_6A7A7(unsigned __int8 a1)
{
  if ( !byte_A0764[a1] )
    return 6;
  byte_A073D[a1] &= ~0x20u;
  sub_6AB50(a1 - 80, byte_A073D[a1]);
  byte_A0764[a1] = 0;
  return 0;
}

//----- (0006A805) --------------------------------------------------------
void sub_6A805()
{
  ;
}

//----- (0006A816) --------------------------------------------------------
void sub_6A816()
{
  ;
}

//----- (0006A827) --------------------------------------------------------
char sub_6A827()
{
  unsigned __int8 i; // [esp+4h] [ebp-4h]
  unsigned __int8 j; // [esp+4h] [ebp-4h]
  unsigned __int8 k; // [esp+4h] [ebp-4h]

  if ( !byte_A0773 )
    return 2;
  byte_A0758 = 0;
  sub_6AB50(0xBDu, 0);
  for ( i = 0; i < 9u; ++i )
    sub_6AB50(i - 80, byte_A073D[i] & 0xDF);
  for ( j = 0; j < 9u; ++j )
    sub_6AB50(byte_A0776[2 * j] + 64, 0xFFu);
  for ( k = 0; k < 0xBu; ++k )
    byte_A0759[k] = 0;
  return 0;
}
// A0758: using guessed type char byte_A0758;
// A0773: using guessed type char byte_A0773;

//----- (0006A8F3) --------------------------------------------------------
void sub_6A8F3()
{
  ;
}

//----- (0006A904) --------------------------------------------------------
void sub_6A904()
{
  ;
}

//----- (0006A915) --------------------------------------------------------
char sub_6A915(int a1, int a2, unsigned __int8 a3)
{
  unsigned __int8 v4; // [esp+0h] [ebp-38h]
  unsigned __int8 v5; // [esp+4h] [ebp-34h]
  unsigned __int8 v6; // [esp+8h] [ebp-30h]
  unsigned __int8 v7; // [esp+Ch] [ebp-2Ch]
  unsigned __int8 v8; // [esp+10h] [ebp-28h]
  unsigned __int8 v9; // [esp+14h] [ebp-24h]
  unsigned __int8 v10; // [esp+18h] [ebp-20h]
  unsigned __int8 v11; // [esp+1Ch] [ebp-1Ch]
  int v12; // [esp+20h] [ebp-18h]
  int v13; // [esp+20h] [ebp-18h]
  unsigned __int8 v14; // [esp+24h] [ebp-14h]
  unsigned __int8 v15; // [esp+28h] [ebp-10h]
  unsigned __int8 v16; // [esp+2Ch] [ebp-Ch]

  v12 = (unsigned __int8)byte_A0775[2 * a3];
  v15 = __readgsbyte(a1 + 11);
  v16 = __readgsbyte(a1 + 2);
  v5 = __readgsbyte(a1 + 5);
  v14 = __readgsbyte(a1 + 6);
  v4 = __readgsbyte(a1 + 14);
  v11 = __readgsbyte(a1 + 28);
  v10 = __readgsbyte(a1 + 24);
  v9 = __readgsbyte(a1 + 15);
  v8 = __readgsbyte(a1 + 18);
  v7 = __readgsbyte(a1 + 19);
  v6 = __readgsbyte(a1 + 29);
  byte_A0724[(unsigned __int8)byte_A0776[2 * a3]] = v7;
  byte_A0724[(unsigned __int8)byte_A0775[2 * a3]] = v14;
  sub_6AB50(v12 + 32, v15);
  sub_6AB50(v12 + 64, v16);
  byte_A0704[v12] = v16;
  sub_6AB50(v12 + 96, v5);
  sub_6AB50(v12 + 0x80, v14);
  sub_6AB50(a3 - 64, v4);
  sub_6AB50(v12 - 32, v11);
  v13 = (unsigned __int8)byte_A0776[2 * a3];
  sub_6AB50(v13 + 32, v10);
  byte_A0704[v13] = v9;
  sub_6AB50(v13 + 96, v8);
  sub_6AB50(v13 + 0x80, v7);
  sub_6AB50(v13 - 32, v6);
  byte_A0759[a3] = 1;
  return 0;
}
// 6A915: using guessed type _DWORD arg_0;

//----- (0006AAFC) --------------------------------------------------------
void sub_6AAFC()
{
  ;
}

//----- (0006AB0D) --------------------------------------------------------
void sub_6AB0D()
{
  ;
}

//----- (0006AB1E) --------------------------------------------------------
char sub_6AB1E()
{
  byte_A0773 = 0;
  return 0;
}
// A0773: using guessed type char byte_A0773;

//----- (0006AB3D) --------------------------------------------------------
void sub_6AB3D()
{
  ;
}

//----- (0006AB50) --------------------------------------------------------
unsigned __int8 sub_6AB50(unsigned __int8 a1, unsigned __int8 a2)
{
  unsigned __int16 v2; // dx

  v2 = dword_A06F0;
  __outbyte(dword_A06F0, a1);
  __inbyte(++v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __outbyte(v2--, a2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  return __inbyte(v2);
}
// A06F0: using guessed type int dword_A06F0;

//----- (0006AC47) --------------------------------------------------------
__int16 sub_6AC47(void (*a1)(_DWORD), unsigned int a2, int a3, int a4, __int16 a5)
{
  int v7; // ecx
  int v8; // edi
  __int16 result; // ax

  //fix
  result = 0;
  //fix

  a1((uint32)a1);
  v7 = 5;
  do
  {
      //fix *MK_FP(a5, a4) = (char *)a1 + __readfsdword(a2);
    v8 = a4 + 4;
    //fix result = __CS__;
    //fix *MK_FP(a5, v8) = __CS__;
    a4 = v8 + 2;
    a2 += 8;
    --v7;
  }
  while ( v7 );
  return result;
}
// 6AC47: using guessed type unsigned int arg_4;

//----- (0006B770) --------------------------------------------------------
int sub_6B770(__int16 a1, __int16 a2, __int16 a3, __int16 a4, unsigned __int16 a5, __int16 a6)
{
  __int16 v6; // bx
  __int16 v7; // cx
  __int16 v8; // dx
  _BYTE *v10; // edi
  int v11; // eax
  unsigned int v12; // ecx
  int v13; // ecx
  int v14; // esi
  int v15; // esi
  int v16; // [esp+4h] [ebp-4h]

  //fix
  v16 = 0;
  //fix

  v6 = 2 * dword_12F024_12F014;
  v7 = 2 * dword_12F018_12F008;
  v8 = 2 * dword_12F000;
  if ( a1 < (__int16)(2 * dword_12F008_12EFF8) )
    a1 = 2 * dword_12F008_12EFF8;
  if ( a3 < (__int16)(2 * dword_12F008_12EFF8) )
    return v16;
  if ( a1 >= v6 )
    return v16;
  if ( a3 >= v6 )
    a3 = 2 * dword_12F024_12F014;
  if ( a2 < v7 )
    a2 = 2 * dword_12F018_12F008;
  if ( a4 < v7 )
    return v16;
  if ( a2 >= v8 )
    return v16;
  if ( a4 >= v8 )
    a4 = 2 * dword_12F000;
  v10 = (_BYTE *)(320 * ((unsigned __int16)a2 >> 1) + begWscreen_2ECFF4_2ECFE4 + ((unsigned __int16)a1 >> 1));
  v11 = a5;
  v12 = (unsigned __int16)a3;
  if ( a3 == a1 )
  {
    v13 = (unsigned __int16)a4;
    LOWORD(v13) = (unsigned __int16)(a4 - a2) >> 1;
    if ( (a6 & 4) != 0 )
    {
      v14 = dword_9AFA0;
      do
      {
        BYTE1(v11) = *v10;
        *v10 = *(_BYTE *)(v11 + v14);
        v10 += 320;
        --v13;
      }
      while ( v13 );
    }
    else
    {
      do
      {
        *v10 = a5;
        v10 += 320;
        --v13;
      }
      while ( v13 );
    }
  }
  else
  {
    LOWORD(v12) = (unsigned __int16)(a3 - a1) >> 1;
    if ( (a6 & 4) != 0 )
    {
      v15 = dword_9AFA0;
      do
      {
        BYTE1(v11) = *v10;
        *v10++ = *(_BYTE *)(v11 + v15);
        --v12;
      }
      while ( v12 );
    }
    else
    {
      memset(v10, a5, v12);
    }
  }
  return v16;
}
// 6B7B5: variable 'v16' is possibly undefined
// 9AFA0: using guessed type int dword_9AFA0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12EFF8: using guessed type int dword_12F008_12EFF8;
// 12F000: using guessed type int dword_12F000;
// 12F008: using guessed type int dword_12F018_12F008;
// 12F014: using guessed type int dword_12F024_12F014;

//----- (0006B888) --------------------------------------------------------
int sub_6B888(__int16 a1, __int16 a2, __int16 a3, __int16 a4, unsigned __int16 a5, __int16 a6)
{
  _BYTE *v7; // edi
  int v8; // eax
  unsigned int v9; // ecx
  int v10; // ecx
  int v11; // esi
  int v12; // esi
  int v13; // [esp+4h] [ebp-4h]

  //fix
  v13 = 0;
  //fix

  if ( a1 < (__int16)dword_12F008_12EFF8 )
    a1 = dword_12F008_12EFF8;
  if ( a3 < (__int16)dword_12F008_12EFF8 )
    return v13;
  if ( a1 >= (__int16)dword_12F024_12F014 )
    return v13;
  if ( a3 >= (__int16)dword_12F024_12F014 )
    a3 = dword_12F024_12F014;
  if ( a2 < (__int16)dword_12F018_12F008 )
    a2 = dword_12F018_12F008;
  if ( a4 < (__int16)dword_12F018_12F008 )
    return v13;
  if ( a2 >= (__int16)dword_12F000 )
    return v13;
  if ( a4 >= (__int16)dword_12F000 )
    a4 = dword_12F000;
  v7 = (_BYTE *)(640 * (unsigned __int16)a2 + begWscreen_2ECFF4_2ECFE4 + (unsigned __int16)a1);
  v8 = a5;
  v9 = (unsigned __int16)a3;
  LOWORD(v9) = a3 - a1;
  if ( a3 == a1 )
  {
    v10 = (unsigned __int16)a4;
    LOWORD(v10) = a4 - a2;
    if ( (a6 & 4) != 0 )
    {
      v11 = dword_9AFA0;
      do
      {
        BYTE1(v8) = *v7;
        *v7 = *(_BYTE *)(v8 + v11);
        v7 += 640;
        --v10;
      }
      while ( v10 );
    }
    else
    {
      do
      {
        *v7 = a5;
        v7 += 640;
        --v10;
      }
      while ( v10 );
    }
  }
  else if ( (a6 & 4) != 0 )
  {
    v12 = dword_9AFA0;
    do
    {
      BYTE1(v8) = *v7;
      *v7++ = *(_BYTE *)(v8 + v12);
      --v9;
    }
    while ( v9 );
  }
  else
  {
    memset(v7, a5, v9);
  }
  return v13;
}
// 6B8C1: variable 'v13' is possibly undefined
// 9AFA0: using guessed type int dword_9AFA0;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;
// 12EFF8: using guessed type int dword_12F008_12EFF8;
// 12F000: using guessed type int dword_12F000;
// 12F008: using guessed type int dword_12F018_12F008;
// 12F014: using guessed type int dword_12F024_12F014;

//----- (0006B98C) --------------------------------------------------------
void sub_6B47C_6B98C(TColor* palette)
{
    FixPerifery((char*)"port0x3C7");
    //VGA_Set_Palette(a1);
    memcpy((uint8_t*)palette, VGA_Get_Palette(), 768);
    /*
  int v3; // [esp+4h] [ebp-4h]

  //fix
  v3 = 0;
  //fix

  __outbyte(0x3C7u, 0);
  __inbytestring(0x3C9u, (int)a1, 0x300u);
  return v3;
  */
}
// 6B9AD: variable 'v3' is possibly undefined

//----- (0006BD8A) --------------------------------------------------------
int sub_6BD8A()
{
  return dword_A0CA4;
}
// A0CA4: using guessed type int dword_A0CA4;

//----- (0006C1B3) --------------------------------------------------------
int sub_6C1B3(int a1, unsigned __int8 *a2, int *a3)
{
  int *v3; // edi
  int v4; // ebp
  unsigned __int8 *v5; // ebx
  unsigned __int8 *v6; // ecx
  int v7; // ebx
  int v8; // eax
  unsigned __int8 *v9; // eax
  unsigned int v10; // ebx
  int v11; // eax
  int v13; // [esp-4h] [ebp-18h]
  int v14; // [esp+0h] [ebp-14h]

  v3 = a3;
  v4 = 0;
  v14 = 0;
  *(_BYTE *)(a1 + 16) &= ~2u;
  while ( 1 )
  {
    v5 = a2;
    v6 = ++a2;
    v7 = *v5;
    if ( !v7 )
      break;
    if ( (IsTable[(unsigned __int8)(v7 + 1)] & 2) != 0 )
    {
      v4 += sub_6C4A8(a1);
    }
    else if ( v7 == 37 )
    {
      v9 = sub_6C3CB(v6, a1);
      a2 = v9;
      v10 = *v9;
      if ( *v9 )
        a2 = v9 + 1;
      if ( v10 < 0x65 )
      {
        if ( v10 < 0x58 )
        {
          if ( v10 < 0x45 )
          {
            if ( v10 == 37 )
            {
              v8 = (*(int (**)(int))a1)(a1);
              if ( v8 != 37 )
              {
LABEL_7:
                if ( (*(_BYTE *)(a1 + 16) & 2) == 0 )
                  (*(void (**)(int, int))(a1 + 4))(v8, a1);
                break;
              }
            }
          }
          else if ( v10 <= 0x45 || v10 == 71 )
          {
LABEL_45:
            sub_6C83A(a1, v3);
            goto LABEL_50;
          }
        }
        else
        {
          if ( v10 <= 0x58 )
          {
LABEL_44:
            sub_6CB7D(a1, v3, 16, 1);
            goto LABEL_50;
          }
          if ( v10 >= 0x63 )
          {
            if ( v10 <= 0x63 )
            {
              v11 = sub_6BFCF_6C4DF((_WORD *)a1, a1, v3);
              goto LABEL_50;
            }
            v13 = 1;
LABEL_40:
            sub_6CB7D(a1, v3, 10, v13);
            goto LABEL_50;
          }
          if ( v10 == 91 )
          {
            sub_6C224_6C734((_BYTE *)a1, a1, v3, &a2);
            goto LABEL_50;
          }
        }
      }
      else
      {
        if ( v10 <= 0x67 )
          goto LABEL_45;
        if ( v10 < 0x70 )
        {
          if ( v10 < 0x6E )
          {
            if ( v10 == 105 )
            {
              sub_6CB7D(a1, v3, 0, 1);
              goto LABEL_50;
            }
          }
          else
          {
            if ( v10 > 0x6E )
            {
              sub_6CB7D(a1, v3, 8, 1);
LABEL_50:
              if ( v11 <= 0 )
                break;
              v4 += v11;
              if ( (*(_BYTE *)(a1 + 16) & 1) != 0 )
                ++v14;
              goto LABEL_55;
            }
            sub_6C685(a1, v3, v4);
          }
        }
        else
        {
          if ( v10 <= 0x70 )
            goto LABEL_44;
          if ( v10 < 0x75 )
          {
            if ( v10 == 115 )
            {
              sub_6C05C_6C56C((_BYTE *)a1, a1, v3);
              goto LABEL_50;
            }
          }
          else
          {
            if ( v10 <= 0x75 )
            {
              v13 = 0;
              goto LABEL_40;
            }
            if ( v10 == 120 )
              goto LABEL_44;
          }
        }
      }
    }
    else
    {
      v8 = (*(int (**)(int))a1)(a1);
      if ( v8 != v7 )
        goto LABEL_7;
      ++v4;
    }
LABEL_55:
    if ( (*(_BYTE *)(a1 + 16) & 2) != 0 )
    {
      if ( *a2 == 37 )
      {
        ++a2;
        a2 = sub_6C3CB(a2, a1);
        if ( *a2 == 110 )
          sub_6C685(a1, v3, v4);
      }
      break;
    }
  }
  if ( v14 || (*(_BYTE *)(a1 + 16) & 2) == 0 )
    return v14;
  else
    return -1;
}
// 6C349: variable 'v11' is possibly undefined

//----- (0006C3CB) --------------------------------------------------------
unsigned __int8 *sub_6C3CB(unsigned __int8 *a1, int a2)
{
  unsigned __int8 *result; // eax
  char v3; // dl
  int v4; // edx
  unsigned __int8 v5; // cl
  int v6; // [esp+0h] [ebp-Ch]

  result = a1;
  v3 = *(_BYTE *)(a2 + 16) | 1;
  *(_DWORD *)(a2 + 12) = -1;
  *(_BYTE *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 16) = v3 & 3;
  if ( *a1 == 42 )
  {
    result = a1 + 1;
    *(_BYTE *)(a2 + 16) &= ~1u;
  }
  v6 = *result;
  if ( (IsTable[(unsigned __int8)(v6 + 1)] & 0x20) != 0 )
  {
    v4 = 0;
    do
    {
      ++result;
      v4 = v6 - 48 + 10 * v4;
      v6 = *result;
    }
    while ( (IsTable[(unsigned __int8)(v6 + 1)] & 0x20) != 0 );
    *(_DWORD *)(a2 + 12) = v4;
  }
  if ( *result == 78 )
  {
    *(_BYTE *)(a2 + 16) |= 8u;
  }
  else
  {
    if ( *result != 70 )
      goto LABEL_12;
    *(_BYTE *)(a2 + 16) |= 4u;
  }
  ++result;
LABEL_12:
  v5 = *result;
  if ( *result < 0x68u )
  {
    if ( v5 == 76 )
    {
      ++result;
      *(_BYTE *)(a2 + 16) |= 0x40u;
    }
  }
  else if ( *result <= 0x68u )
  {
    ++result;
    *(_BYTE *)(a2 + 16) |= 0x10u;
  }
  else if ( v5 >= 0x6Cu && (v5 <= 0x6Cu || v5 == 119) )
  {
    ++result;
    *(_BYTE *)(a2 + 16) |= 0x20u;
  }
  return result;
}

//----- (0006C4A8) --------------------------------------------------------
int sub_6C4A8(int a1)
{
  int i; // esi
  int v2; // eax

  for ( i = 0; ; ++i )
  {
    v2 = (*(int (**)(int))a1)(a1);
    if ( (IsTable[(unsigned __int8)(v2 + 1)] & 2) == 0 )
      break;
  }
  if ( (*(_BYTE *)(a1 + 16) & 2) == 0 )
    (*(void (**)(int, int))(a1 + 4))(v2, a1);
  return i;
}

//----- (0006C4DF) --------------------------------------------------------
int sub_6BFCF_6C4DF(_WORD *a1, int a2, int *a3)
{
  char v3; // dl
  int v4; // esi
  int v5; // eoff
  int v6; // ecx
  int v7; // edx
  int v8; // edi
  int v9; // ebp
  __int16 v10; // ax
  char v11; // ch

  v3 = *(_BYTE *)(a2 + 16);
  if ( (v3 & 1) != 0 )
  {
    if ( (v3 & 4) != 0 )
    {
      v4 = *a3 + 8;
      *a3 = v4;
      v5 = v4 - 8;
      a1 = *(_WORD **)(v4 - 8);
      __ES__ = *(_WORD *)(v5 + 4);
    }
    else if ( (v3 & 8) != 0 )
    {
      v6 = *a3 + 4;
      *a3 = v6;
      __ES__ = __DS__;
      a1 = *(_WORD **)(v6 - 4);
    }
    else
    {
      v7 = *a3 + 4;
      *a3 = v7;
      __ES__ = __DS__;
      a1 = *(_WORD **)(v7 - 4);
    }
  }
  v8 = *(_DWORD *)(a2 + 12);
  v9 = 0;
  if ( v8 == -1 )
    v8 = 1;
  while ( v8 > 0 )
  {
    v10 = (*(int (**)(int))a2)(a2);
    v11 = *(_BYTE *)(a2 + 16);
    if ( (v11 & 2) != 0 )
      break;
    ++v9;
    --v8;
    if ( (v11 & 1) != 0 )
    {
      if ( (v11 & 0x20) != 0 )
      {
        *a1++ = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
        a1 = (_WORD *)((char *)a1 + 1);
      }
    }
  }
  return v9;
}

//----- (0006C56C) --------------------------------------------------------
void sub_6C05C_6C56C(_BYTE *a1, int a2, int *a3)
{
  char v3; // dh
  int v4; // esi
  int v5; // eoff
  int v6; // ecx
  int v7; // edx
  int i; // edi
  int v9; // eax
  int v10; // [esp+0h] [ebp-1Ch]
  unsigned __int8 v11; // [esp+4h] [ebp-18h]

  if ( (*(_BYTE *)(a2 + 16) & 0x20) != 0 )
    v11 = 2;
  else
    v11 = 1;
  v3 = *(_BYTE *)(a2 + 16);
  if ( (v3 & 1) != 0 )
  {
    if ( (v3 & 4) != 0 )
    {
      v4 = *a3 + 8;
      *a3 = v4;
      v5 = v4 - 8;
      a1 = *(_BYTE **)(v4 - 8);
      __ES__ = *(_WORD *)(v5 + 4);
    }
    else if ( (v3 & 8) != 0 )
    {
      v6 = *a3 + 4;
      *a3 = v6;
      __ES__ = __DS__;
      a1 = *(_BYTE **)(v6 - 4);
    }
    else
    {
      v7 = *a3 + 4;
      *a3 = v7;
      __ES__ = __DS__;
      a1 = *(_BYTE **)(v7 - 4);
    }
  }
  for ( i = 0; ; ++i )
  {
    v10 = (*(int (**)(int))a2)(a2);
    if ( (IsTable[(unsigned __int8)(v10 + 1)] & 2) == 0 )
      break;
  }
  if ( (*(_BYTE *)(a2 + 16) & 2) != 0 )
  {
    i = 0;
  }
  else
  {
    v9 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = v9 - 1;
    if ( v9 )
    {
      while ( 1 )
      {
        ++i;
        if ( (*(_BYTE *)(a2 + 16) & 1) != 0 )
        {
          if ( v11 == 1 )
            *a1 = v10;
          else
            *(_WORD *)a1 = v10;
          a1 += v11;
        }
        v10 = sub_6CDD5(a2);
        if ( v10 == -1 )
          break;
        if ( (IsTable[(unsigned __int8)(v10 + 1)] & 2) != 0 )
          goto LABEL_23;
      }
    }
    else
    {
LABEL_23:
      (*(void (**)(int, int))(a2 + 4))(v10, a2);
    }
  }
  if ( (*(_BYTE *)(a2 + 16) & 1) != 0 && i > 0 )
  {
    if ( v11 == 1 )
      *a1 = 0;
    else
      *(_WORD *)a1 = 0;
  }
  JUMPOUT(0x6C566);
}
// 6C680: control flows out of bounds to 6C566

//----- (0006C685) --------------------------------------------------------
int *sub_6C685(int a1, int *a2, int a3)
{
  int *result; // eax
  char v4; // bl
  int v5; // esi
  int v6; // ecx
  int v7; // ebx

  result = a2;
  v4 = *(_BYTE *)(a1 + 16);
  if ( (v4 & 1) != 0 )
  {
    if ( (v4 & 4) != 0 )
    {
      v5 = *a2 + 8;
      *a2 = v5;
      result = *(int **)(v5 - 8);
      __ES__ = *(_WORD *)(v5 - 8 + 4);
    }
    else if ( (v4 & 8) != 0 )
    {
      v6 = *a2 + 4;
      *a2 = v6;
      __ES__ = __DS__;
      result = *(int **)(v6 - 4);
    }
    else
    {
      v7 = *a2 + 4;
      *a2 = v7;
      __ES__ = __DS__;
      result = *(int **)(v7 - 4);
    }
    if ( (*(_BYTE *)(a1 + 16) & 0x10) != 0 )
      *(_WORD *)result = a3;
    else
      *result = a3;
  }
  return result;
}

//----- (0006C6F0) --------------------------------------------------------
_BYTE *sub_6C6F0(_BYTE *a1, int a2)
{
  int v2; // eax
  _BYTE *v3; // ebx

  memset((void*)a2, 0, 32);
  v2 = (unsigned __int8)*a1;
  v3 = a1 + 1;
  if ( *a1 )
  {
    do
    {
      *(_BYTE *)((v2 >> 3) + a2) |= byte_AC168[v2 & 7];
      v2 = (unsigned __int8)*v3;
      if ( !*v3 )
        break;
      ++v3;
    }
    while ( v2 != 93 );
  }
  return v3;
}
// 5D140: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);

//----- (0006C734) --------------------------------------------------------
void sub_6C224_6C734(_BYTE *a1, int a2, int *a3, _BYTE **a4)
{
  _BYTE *v4; // eax
  _BOOL1 v5; // zf
  char v6; // cl
  int v7; // ebp
  int v8; // esi
  int v9; // ecx
  int v10; // edi
  int i; // ebp
  int v12; // eax
  char v13; // dl
  char v14[32]; // [esp+0h] [ebp-40h] BYREF
  int v15; // [esp+20h] [ebp-20h]
  bool v16; // [esp+24h] [ebp-1Ch]
  int v17; // [esp+28h] [ebp-18h]

  v4 = *a4;
  v5 = **a4 != 94;
  v16 = **a4 == 94;
  if ( !v5 )
    *a4 = v4 + 1;
  *a4 = sub_6C6F0(*a4, (int)v14);
  v6 = *(_BYTE *)(a2 + 16);
  if ( (v6 & 1) != 0 )
  {
    if ( (v6 & 4) != 0 )
    {
      v7 = *a3 + 8;
      *a3 = v7;
      a1 = *(_BYTE **)(v7 - 8);
      __ES__ = *(_WORD *)(v7 - 8 + 4);
    }
    else if ( (v6 & 8) != 0 )
    {
      v8 = *a3 + 4;
      *a3 = v8;
      __ES__ = __DS__;
      a1 = *(_BYTE **)(v8 - 4);
    }
    else
    {
      v9 = *a3 + 4;
      *a3 = v9;
      __ES__ = __DS__;
      a1 = *(_BYTE **)(v9 - 4);
    }
  }
  v10 = *(_DWORD *)(a2 + 12);
  for ( i = 0; ; ++i )
  {
    if ( !v10 )
      goto LABEL_16;
    v12 = (*(int (**)(int))a2)(a2);
    v13 = *(_BYTE *)(a2 + 16);
    v17 = v12;
    if ( (v13 & 2) != 0 )
      goto LABEL_16;
    v15 = (unsigned __int8)v14[v12 >> 3];
    if ( ((unsigned __int8)(v15 & byte_AC168[v12 & 7]) == 0) != v16 )
      break;
    --v10;
    if ( (*(_BYTE *)(a2 + 16) & 1) != 0 )
      *a1++ = v17;
  }
  (*(void (**)(int, int))(a2 + 4))(v12, a2);
LABEL_16:
  if ( (*(_BYTE *)(a2 + 16) & 1) != 0 && i > 0 )
    *a1 = 0;
  JUMPOUT(0x6C566);
}
// 6C835: control flows out of bounds to 6C566
// 6C734: using guessed type char var_40[32];

//----- (0006C83A) --------------------------------------------------------
void sub_6C83A(int a1, int *a2)
{
  char *v2; // ebx
  int v3; // edi
  int i; // ebp
  int v5; // eax
  int v6; // ecx
  char *v7; // ecx
  char v8; // al
  int v9; // eax
  char v10; // ah
  int v11; // ecx
  int *v12; // ebx
  int v13; // ebx
  int v14; // edx
  char v15; // dh
  int v16; // eax
  char v17; // [esp+0h] [ebp-80h] BYREF
  _BYTE v18[3]; // [esp+1h] [ebp-7Fh] BYREF
  int v19[2]; // [esp+50h] [ebp-30h] BYREF
  int v20; // [esp+58h] [ebp-28h]
  unsigned int j; // [esp+5Ch] [ebp-24h]
  int v22; // [esp+60h] [ebp-20h]
  int v23; // [esp+64h] [ebp-1Ch]
  int v24; // [esp+68h] [ebp-18h]

  v2 = &v17;
  v3 = 0;
  for ( i = 0; ; ++i )
  {
    v5 = (*(int (**)(int))a1)(a1);
    v22 = v5;
    if ( (IsTable[(unsigned __int8)(v5 + 1)] & 2) == 0 )
      break;
  }
  if ( (*(_BYTE *)(a1 + 16) & 2) != 0 )
    goto LABEL_42;
  v6 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v6 - 1;
  if ( v6 )
  {
    if ( v5 == 43 || v5 == 45 )
    {
      v17 = v22;
      v2 = (char*)v18;
      v22 = sub_6CDD5(a1);
      if ( v22 == -1 )
        goto LABEL_42;
    }
    if ( (IsTable[(unsigned __int8)(v22 + 1)] & 0x20) != 0 || v22 == 46 )
    {
      v20 = 0;
      v23 = 0;
      if ( (IsTable[(unsigned __int8)(v22 + 1)] & 0x20) != 0 )
      {
        v23 = 1;
        while ( 1 )
        {
          *v2++ = v22;
          if ( (*(_BYTE *)(a1 + 16) & 0x10) != 0 )
            HIWORD(v20) = v22 + 10 * HIWORD(v20) - 48;
          ++v3;
          v22 = sub_6CDD5(a1);
          if ( v22 == -1 )
            break;
          if ( (IsTable[(unsigned __int8)(v22 + 1)] & 0x20) == 0 )
            goto LABEL_17;
        }
LABEL_42:
        if ( v3 > 0 && (*(_BYTE *)(a1 + 16) & 1) != 0 )
        {
          *v2 = 0;
          if ( (*(_BYTE *)(a1 + 16) & 0x10) != 0 )
          {
            if ( v17 == 45 )
              v20 = -v20;
          }
          else
          {
            off_A6368((uint32)&v17, (uint32)v19);
          }
          v10 = *(_BYTE *)(a1 + 16);
          if ( (v10 & 4) != 0 )
          {
            v11 = *a2 + 8;
            *a2 = v11;
            v12 = *(int **)(v11 - 8);
            __ES__ = *(_WORD *)(v11 - 8 + 4);
          }
          else if ( (v10 & 8) != 0 )
          {
            v13 = *a2 + 4;
            *a2 = v13;
            __ES__ = __DS__;
            v12 = *(int **)(v13 - 4);
          }
          else
          {
            v14 = *a2 + 4;
            *a2 = v14;
            __ES__ = __DS__;
            v12 = *(int **)(v14 - 4);
          }
          v15 = *(_BYTE *)(a1 + 16);
          if ( (v15 & 0x10) != 0 )
          {
            v16 = v20;
          }
          else
          {
            if ( (v15 & 0x20) != 0 || (v15 & 0x40) != 0 )
            {
              *v12 = v19[0];
              v12[1] = v19[1];
              goto LABEL_60;
            }
            v16 = _FDFS();
          }
          *v12 = v16;
        }
LABEL_60:
        JUMPOUT(0x6C566);
      }
LABEL_17:
      if ( v22 == 46 )
      {
        *v2++ = 46;
        v22 = sub_6CDD5(a1);
        if ( v22 == -1 )
          goto LABEL_42;
        if ( !v23 && (IsTable[(unsigned __int8)(v22 + 1)] & 0x20) == 0 )
          goto LABEL_41;
        ++v3;
        do
        {
          if ( (IsTable[(unsigned __int8)(v22 + 1)] & 0x20) == 0 )
            break;
          ++v3;
          *v2++ = v22;
          v22 = sub_6CDD5(a1);
        }
        while ( v22 != -1 );
        if ( (*(_BYTE *)(a1 + 16) & 0x10) != 0 )
        {
          v7 = v2;
          for ( j = 0; ; j /= 0xAu )
          {
            v8 = *--v7;
            if ( *v7 == 46 )
              break;
            v24 = 10;
            BYTE2(j) = v8 - 48;
          }
          LOWORD(v20) = j;
        }
        if ( v22 == -1 )
          goto LABEL_42;
      }
      if ( (*(_BYTE *)(a1 + 16) & 0x10) == 0 && (v22 == 101 || v22 == 69) )
      {
        ++v3;
        *v2 = v22;
        v9 = sub_6CDD5(a1);
        ++v2;
        v22 = v9;
        if ( v9 == -1 )
          goto LABEL_42;
        if ( v9 == 43 || v9 == 45 )
        {
          ++v3;
          *v2++ = v22;
          v22 = sub_6CDD5(a1);
          if ( v22 == -1 )
            goto LABEL_42;
        }
        if ( (IsTable[(unsigned __int8)(v22 + 1)] & 0x20) != 0 )
        {
          while ( 1 )
          {
            ++v3;
            *v2++ = v22;
            v22 = sub_6CDD5(a1);
            if ( v22 == -1 )
              goto LABEL_42;
            if ( (IsTable[(unsigned __int8)(v22 + 1)] & 0x20) == 0 )
              goto LABEL_41;
          }
        }
        v3 = 0;
      }
    }
  }
LABEL_41:
  (*(void (**)(int, int))(a1 + 4))(v22, a1);
  goto LABEL_42;
}
// 6CB78: control flows out of bounds to 6C566
// 7190A: using guessed type int _FDFS(void);
// A6368: using guessed type int (*off_A6368)(_DWORD, _DWORD);

//----- (0006CB7D) --------------------------------------------------------
void sub_6CB7D(int a1, int *a2, int a3, int a4)
{
  int v4; // ebp
  int v5; // edi
  int v6; // esi
  int v7; // eax
  int v8; // edx
  int v9; // eax
  int v10; // eax
  int v11; // eax
  int v12; // eax
  int v13; // eax
  int v14; // eax
  char v15; // ah
  int v16; // edx
  _WORD *v17; // eax
  int v18; // ebp
  int v19; // ecx
  int v20; // [esp+0h] [ebp-20h]
  int v21; // [esp+4h] [ebp-1Ch]
  int i; // [esp+8h] [ebp-18h]

  v4 = a3;
  v5 = 0;
  v6 = 0;
  for ( i = 0; ; ++i )
  {
    v7 = (*(int (**)(int))a1)(a1);
    v21 = v7;
    if ( (IsTable[(unsigned __int8)(v7 + 1)] & 2) == 0 )
      break;
  }
  if ( (*(_BYTE *)(a1 + 16) & 2) != 0 )
    goto LABEL_34;
  v8 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v8 - 1;
  if ( v8 )
  {
    v20 = 43;
    if ( a4 && (v7 == 43 || v7 == 45) )
    {
      v20 = v7;
      v21 = sub_6CDD5(a1);
      if ( v21 == -1 )
        goto LABEL_34;
    }
    if ( !a3 )
    {
      if ( v21 != 48 )
      {
        v4 = 10;
        goto LABEL_26;
      }
      v9 = sub_6CDD5(a1);
      v6 = 1;
      v21 = v9;
      if ( v9 != -1 )
      {
        if ( v9 != 120 && v9 != 88 )
        {
          v4 = 8;
          goto LABEL_26;
        }
        v6 = 0;
        v21 = sub_6CDD5(a1);
        if ( v21 != -1 )
        {
          v4 = 16;
          goto LABEL_26;
        }
      }
      goto LABEL_34;
    }
    if ( a3 != 16 || v21 != 48 )
      goto LABEL_26;
    v10 = sub_6CDD5(a1);
    v6 = 1;
    v21 = v10;
    if ( v10 == -1 )
    {
LABEL_34:
      if ( v20 == 45 )
        v5 = -v5;
      if ( v6 > 0 )
      {
        v15 = *(_BYTE *)(a1 + 16);
        if ( (v15 & 1) != 0 )
        {
          if ( (v15 & 4) != 0 )
          {
            v16 = *a2 + 8;
            *a2 = v16;
            v17 = *(_WORD **)(v16 - 8);
            __ES__ = *(_WORD *)(v16 - 8 + 4);
          }
          else if ( (v15 & 8) != 0 )
          {
            v18 = *a2 + 4;
            *a2 = v18;
            __ES__ = __DS__;
            v17 = *(_WORD **)(v18 - 4);
          }
          else
          {
            v19 = *a2 + 4;
            *a2 = v19;
            __ES__ = __DS__;
            v17 = *(_WORD **)(v19 - 4);
          }
          if ( (*(_BYTE *)(a1 + 16) & 0x10) != 0 )
            *v17 = v5;
          else
            *(_DWORD *)v17 = v5;
        }
      }
      JUMPOUT(0x6C566);
    }
    if ( v10 == 120 || v10 == 88 )
    {
      v11 = sub_6CDD5(a1);
      v6 = 0;
      goto LABEL_25;
    }
LABEL_26:
    while ( 1 )
    {
      v12 = sub_6CDA6(v21);
      if ( v12 >= v4 )
        break;
      v5 = v12 + v4 * v5;
      v11 = sub_6CDD5(a1);
      ++v6;
LABEL_25:
      v21 = v11;
      if ( v11 == -1 )
        goto LABEL_34;
    }
    if ( v21 == 58 && *(char *)(a1 + 16) < 0 )
    {
      while ( 1 )
      {
        v13 = sub_6CDD5(a1);
        ++v6;
        v21 = v13;
        if ( v13 == -1 )
          goto LABEL_34;
        v14 = sub_6CDA6(v13);
        if ( v14 >= v4 )
          break;
        v5 = v14 + v4 * v5;
      }
    }
  }
  (*(void (**)(int, int))(a1 + 4))(v21, a1);
  goto LABEL_34;
}
// 6CDA1: control flows out of bounds to 6C566
// 6CD32: variable 'v20' is possibly undefined

//----- (0006CDA6) --------------------------------------------------------
int sub_6CDA6(int a1)
{
  int v2; // eax

  if ( a1 >= 48 && a1 <= 57 )
    return a1 - 48;
  v2 = tolower(a1);
  if ( v2 < 97 || v2 > 102 )
    return 16;
  else
    return v2 - 87;
}
// 6BAB3: using guessed type _DWORD tolower(_DWORD);

//----- (0006CDD5) --------------------------------------------------------
int sub_6CDD5(int a1)
{
  int v1; // eax
  int result; // eax

  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( !v1 )
    return -1;
  result = (*(int (**)(int))a1)(a1);
  if ( (*(_BYTE *)(a1 + 16) & 2) != 0 )
    return -1;
  return result;
}

//----- (0006D86C) --------------------------------------------------------
int sub_6D35C_6D86C(unsigned __int16 a1)
{
  int result; // eax
  char v2[28]; // [esp+0h] [ebp-38h] BYREF
  int v3[7]; // [esp+1Ch] [ebp-1Ch] BYREF

  //fix
  result = 0;
  //fix

  if ( a1 )
  {
    v3[0] = 257;
    v3[3] = a1;
    return int386(49, (uint32)v3, (uint32)v2);
  }
  return result;
}
// 63488: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 6D86C: using guessed type char var_38[28];

//----- (0006DAFC) --------------------------------------------------------
int sub_6DAFC(int a1, int a2)
{
  return *(_DWORD *)a2;
}

//----- (0006E27C) --------------------------------------------------------
void sub_6E27C()
{
  ;
}

//----- (0006E28D) --------------------------------------------------------
int sub_6E28D(int a1, int a2, __int16 a3)
{
  if ( !*(int *)((char *)&dword_A01CC + 6 * a1) && !word_A01D0[3 * a1] )
    return 1;
  if ( !a2 && !a3 )
    return 2;
  sub_67BC0(
    6 * a1,
    (int (*)(_DWORD))dword_A01EA[a1],
    *(int *)((char *)&dword_A01CC + 6 * a1),
    word_A01D0[3 * a1],
    a2,
    a3);
  return 0;
}
// A01CC: using guessed type int dword_A01CC;
// A01D0: using guessed type __int16 word_A01D0[13];
// A01EA: using guessed type int dword_A01EA[5];

//----- (0006E322) --------------------------------------------------------
void sub_6E322()
{
  ;
}

//----- (0006E333) --------------------------------------------------------
void sub_6E333()
{
  ;
}

//----- (0006E344) --------------------------------------------------------
int sub_6DE34_6E344(
        __int16 a1,
        int a2,
        unsigned int a3,
        unsigned int a4,
        int *a5,
        unsigned int a6)
{
  int v7; // [esp+0h] [ebp-30h]
  unsigned __int16 v8; // [esp+4h] [ebp-2Ch]
  int v10; // [esp+10h] [ebp-20h]
  unsigned int v11; // [esp+18h] [ebp-18h]
  int v12; // [esp+1Ch] [ebp-14h]
  int v13; // [esp+28h] [ebp-8h]
  int v14; // [esp+2Ch] [ebp-4h]

  v12 = 0;
  v11 = 0;
  if ( a4 > 5 )
    return 10;
  if ( dword_A0230[a4] )
    return 9;
  if ( a3 < 0xE000 || a3 > 0xE200 )
    return 6;
  strcpy(&unk_A05D1, &byte_A04D2);
  strcat(&unk_A05D1, aHmidrv386);
  v14 = open((uint32)&unk_A05D1, 512);
  if ( v14 != -1 )
  {
    read(v14, (uint32)&unk_131BA0, 44);
    while ( 1 )
    {
      if ( v11 > dword_131BC0 || v12 )
      {
        close(v14);
        dword_A02C6[a4] = dword_131B98;
        dword_A0230[a4] = 1;
        __writegsword(a6 + 4, v8);
        __writegsdword(a6, v7);
        return 0;
      }
      read(v14, (uint32)&unk_131B70, 48);
      v13 = dword_131B94;
      if ( dword_131B98 == a3 && byte_131B9D < 0 )
      {
        v12 = 1;
        v10 = (int)malloc(dword_131B94);
        if ( !v10 )
          return 5;
        sub_679DD();
        sub_67557_67A67(a1, a2, v10);
        v8 = a1;
        v7 = sub_67A92();
        read(v14, v10, v13);
        a2 = (int)a5;
        *a5 = v10;
      }
      else
      {
        lseek(v14, dword_131B94, 1);
      }
      ++v11;
    }
  }
  return 15;
}
// 6E522: variable 'v8' is possibly undefined
// 6E52E: variable 'v7' is possibly undefined
// 66E2E: using guessed type _DWORD close(_DWORD);
// 66E3C: using guessed type _DWORD read(_DWORD, _DWORD, _DWORD);
// 6BEA2: using guessed type _DWORD lseek(_DWORD, _DWORD, char);
// 6D071: using guessed type _DWORD malloc(_DWORD);
// 6E21E: using guessed type _DWORD strcpy(_DWORD, _DWORD);
// 6E243: using guessed type _DWORD strcat(_DWORD, _DWORD);
// A0230: using guessed type int dword_A0230[5];
// A02C6: using guessed type int dword_A02C6[5];
// A04D2: using guessed type char byte_A04D2;
// 131B94: using guessed type int dword_131B94;
// 131B98: using guessed type int dword_131B98;
// 131B9D: using guessed type char byte_131B9D;
// 131BC0: using guessed type int dword_131BC0;

//----- (0006E540) --------------------------------------------------------
int sub_6E540(unsigned int a1)
{
  if ( a1 > 5 )
    return 10;
  if ( !dword_A0230[a1] )
    return 10;
  dword_A0230[a1] = 0;
  return 0;
}
// A0230: using guessed type int dword_A0230[5];

//----- (0006E5AA) --------------------------------------------------------
int sub_6E09A_6E5AA(__int16 a1, int a2, unsigned int a3, int *a4, unsigned int a5)
{
  int v6; // [esp+0h] [ebp-30h]
  unsigned __int16 v7; // [esp+4h] [ebp-2Ch]
  int v9; // [esp+10h] [ebp-20h]
  unsigned int v10; // [esp+18h] [ebp-18h]
  int v11; // [esp+1Ch] [ebp-14h]
  int v12; // [esp+28h] [ebp-8h]
  int v13; // [esp+2Ch] [ebp-4h]

  v11 = 0;
  v10 = 0;
  if ( a3 < 0x1000 || a3 > 0x1023 )
    return 6;
  strcpy(&unk_A05D1, &byte_A04D2);
  strcat(&unk_A05D1, aHmidrv386);
  v13 = open((uint32)&unk_A05D1, 512);
  if ( v13 != -1 )
  {
    read(v13, (uint32)&unk_131BA0, 44);
    while ( 1 )
    {
      if ( v10 > dword_131BC0 || v11 )
      {
        close(v13);
        __writegsword(a5 + 4, v7);
        __writegsdword(a5, v6);
        return 0;
      }
      read(v13, (uint32)&unk_131B70, 48);
      v12 = dword_131B94;
      if ( dword_131B98 == a3 )
      {
        v11 = 1;
        v9 = (int)malloc(dword_131B94);
        if ( !v9 )
          return 5;
        sub_679DD();
        sub_67557_67A67(a1, a2, v9);
        v7 = a1;
        v6 = sub_67A92();
        read(v13, v9, v12);
        a2 = (int)a4;
        *a4 = v9;
      }
      else
      {
        lseek(v13, dword_131B94, 1);
      }
      ++v10;
    }
  }
  return 15;
}
// 6E72E: variable 'v7' is possibly undefined
// 6E73A: variable 'v6' is possibly undefined
// 66E2E: using guessed type _DWORD close(_DWORD);
// 66E3C: using guessed type _DWORD read(_DWORD, _DWORD, _DWORD);
// 6BEA2: using guessed type _DWORD lseek(_DWORD, _DWORD, char);
// 6D071: using guessed type _DWORD malloc(_DWORD);
// 6E21E: using guessed type _DWORD strcpy(_DWORD, _DWORD);
// 6E243: using guessed type _DWORD strcat(_DWORD, _DWORD);
// A04D2: using guessed type char byte_A04D2;
// 131B94: using guessed type int dword_131B94;
// 131B98: using guessed type int dword_131B98;
// 131BC0: using guessed type int dword_131BC0;

//----- (0006E74C) --------------------------------------------------------
int sub_6E74C(int a1, __int16 a2)
{
  if ( a1 || a2 )
    return 0;
  else
    return 2;
}

//----- (0006E7A5) --------------------------------------------------------
void sub_6E7A5()
{
  ;
}

//----- (0006E7B6) --------------------------------------------------------
void sub_6E7B6()
{
  ;
}

//----- (0006E84D) --------------------------------------------------------
void sub_6E84D()
{
  ;
}

//----- (0006E85E) --------------------------------------------------------
void sub_6E85E()
{
  ;
}

//----- (0006E8C9) --------------------------------------------------------
void sub_6E8C9()
{
  ;
}

//----- (0006EAB0) --------------------------------------------------------
void *sub_6EAB0()
{
  return &unk_131BD0;
}

//----- (0006EAB6) --------------------------------------------------------
void *sub_6EAB6()
{
  return &unk_131BCC;
}

//----- (0006EAC2) --------------------------------------------------------
int sub_6EAC2()
{
  unsigned __int16 i; // si
  int v1; // eax

  if ( dword_A1F24 )
    dword_A1734[0] = (int)&dword_A1F24;
  for ( i = 0; i < 0x10u; ++i )
  {
    v1 = 15 * i;
    byte_A1B39[v1 * 2] = 0x80;
    byte_A1B36[v1 * 2] = 0;
    byte_A1B3A[v1 * 2] = 127;
    byte_A1B3B[v1 * 2] = 100;
    word_A1B3C[v1] = 0;
    word_A1B3E[v1] = 0;
    word_A1B40[v1] = 512;
    word_A1B4C[v1] = -1;
    word_A1B4E[v1] = -1;
    word_A1B4A[v1] = 0;
    word_A1B42[v1] = 0;
    word_A1B44[v1] = 0;
    word_A1B46[v1] = 0;
    word_A1B48[v1] = -1;
    sub_70154(0, i);
  }
  return 0;
}
// A1734: using guessed type int dword_A1734[64];
// A1B3C: using guessed type __int16 word_A1B3C[];
// A1B3E: using guessed type __int16 word_A1B3E[];
// A1B40: using guessed type __int16 word_A1B40[];
// A1B42: using guessed type __int16 word_A1B42[];
// A1B44: using guessed type __int16 word_A1B44[];
// A1B46: using guessed type __int16 word_A1B46[];
// A1B48: using guessed type __int16 word_A1B48[];
// A1B4A: using guessed type __int16 word_A1B4A[];
// A1B4C: using guessed type __int16 word_A1B4C[];
// A1B4E: using guessed type __int16 word_A1B4E[];
// A1F24: using guessed type int dword_A1F24;

//----- (0006EB6B) --------------------------------------------------------
unsigned int __stdcall sub_6EB6B(unsigned __int16 a1, unsigned __int16 a2)
{
  unsigned int v2; // kr00_4
  int v3; // ebx
  unsigned int result; // eax

  v2 = __readeflags();
  if ( (v2 & 0x200) != 0 )
    _disable();
  v3 = a2;
  __outword(word_A160A + 2050, ((int)a2 >> 7) & 0xE0 | a2 & 0x1F);
  __outword((a2 & 0xC00) + ((v3 >> 8) & 2 | word_A160A), a1);
  result = v2;
  if ( (v2 & 0x200) != 0 )
    _enable();
  return result;
}
// A160A: using guessed type __int16 word_A160A;

//----- (0006EBCF) --------------------------------------------------------
int __stdcall sub_6EBCF(unsigned __int16 a1)
{
  unsigned int v1; // kr00_4
  int v2; // ebx
  int result; // eax

  v1 = __readeflags();
  if ( (v1 & 0x200) != 0 )
    _disable();
  v2 = a1;
  __outword(word_A160A + 2050, ((int)a1 >> 7) & 0xE0 | a1 & 0x1F);
  LOWORD(result) = __inword((word_A160A | (v2 >> 8) & 2) + (a1 & 0xC00));
  if ( (v1 & 0x200) != 0 )
    _enable();
  return (unsigned __int16)result;
}
// A160A: using guessed type __int16 word_A160A;

//----- (0006EC37) --------------------------------------------------------
void __stdcall sub_6EC37(unsigned __int16 a1, unsigned __int16 a2)
{
  unsigned int v2; // kr00_4
  int v3; // ebx

  v2 = __readeflags();
  if ( (v2 & 0x200) != 0 )
    _disable();
  v3 = a2;
  __outword(word_A160A + 2050, a2 & 0x1F | ((int)a2 >> 7) & 0xE0);
  __outword((a2 & 0xC00) + ((v3 >> 8) & 2 | word_A160A), a1);
  JUMPOUT(0x6EBC2);
}
// 6ECAB: control flows out of bounds to 6EBC2
// A160A: using guessed type __int16 word_A160A;

//----- (0006ECB0) --------------------------------------------------------
int __stdcall sub_6ECB0(unsigned __int16 a1)
{
  unsigned int v1; // kr00_4
  int v2; // ebx
  int v3; // ecx
  __int16 v4; // si
  unsigned __int16 v5; // ax
  int v6; // ebx
  unsigned __int16 v7; // ax
  int v8; // ebx

  v1 = __readeflags();
  if ( (v1 & 0x200) != 0 )
    _disable();
  v2 = a1;
  __outword(word_A160A + 2050, ((int)a1 >> 7) & 0xE0 | a1 & 0x1F);
  v3 = (v2 >> 8) & 2;
  v4 = a1 & 0xC00;
  v5 = __inword((a1 & 0xC00) + (v3 | word_A160A));
  v6 = v5;
  v7 = __inword(v4 + (v3 | word_A160A) + 2);
  v8 = (v7 << 16) | v6;
  if ( (v1 & 0x200) != 0 )
    _enable();
  return v8;
}
// A160A: using guessed type __int16 word_A160A;

//----- (0006ED32) --------------------------------------------------------
void __stdcall sub_6ED32(int a1, __int16 a2, __int16 a3)
{
  unsigned int v3; // kr00_4
  unsigned __int16 j; // di
  unsigned int v5; // esi
  unsigned int v6; // eax
  unsigned __int16 v7; // ax
  unsigned int v8; // esi
  unsigned int v9; // [esp+4h] [ebp-14h]
  unsigned int v10; // [esp+8h] [ebp-10h]
  __int16 v11; // [esp+Ch] [ebp-Ch]
  unsigned __int16 i; // [esp+10h] [ebp-8h]
  unsigned __int16 v13; // [esp+14h] [ebp-4h]

  v3 = __readeflags();
  if ( (v3 & 0x200) != 0 )
    _disable();
  v10 = -1;
  v13 = word_A1608 - 1;
  for ( i = 0; i < 3u; ++i )
  {
    for ( j = i; j < (unsigned __int16)word_A1608; j += 3 )
    {
      v11 = word_A18B4[10 * j];
      if ( (unsigned __int16)v11 < 0xFF00u )
      {
        v9 = sub_6ECB0(j | 0x7000) & 0xFFFFFF;
        v5 = sub_6ECB0(j | 0x6000) & 0xFFFFFF;
        if ( v5 + 10 > v9 )
        {
          v6 = sub_6ECB0(j | 0x400) & 0xFFFFFF;
          if ( v6 >= v5 && v6 <= v9 )
          {
            v13 = j;
            goto LABEL_22;
          }
        }
      }
      if ( v11 == -1 || (unsigned __int16)v11 < 0x1000u )
      {
        v7 = (unsigned int)sub_6ECB0(j | 0x3000) >> 16;
        v8 = v7;
        if ( v11 != -1 )
          v8 = v7 + 1280;
        if ( (((unsigned __int16)sub_6EBCF(j | 0x5400) >> 8) & 0x80u) == 0 )
          v8 += 2688;
        if ( v8 < v10 )
        {
          v10 = v8;
          v13 = j;
        }
      }
    }
  }
LABEL_22:
  word_A18B4[10 * v13] = a2 | (a3 << 8);
  sub_6EB6B(0x807Fu, v13 | 0x5400);
  if ( (v3 & 0x200) != 0 )
    _enable();
  JUMPOUT(0x6F8BD);
}
// 6EE81: control flows out of bounds to 6F8BD
// A1608: using guessed type __int16 word_A1608;
// A18B4: using guessed type __int16 word_A18B4[];

//----- (0006EE86) --------------------------------------------------------
int __stdcall sub_6EE86(unsigned __int16 a1, unsigned __int16 a2)
{
  if ( (unsigned __int8)a1 > a2 || (unsigned __int16)((int)a1 >> 8) < a2 )
    JUMPOUT(0x6FD5A);
  return 1;
}
// 6EE9B: control flows out of bounds to 6FD5A

//----- (0006EEB4) --------------------------------------------------------
int __stdcall sub_6EEB4(int a1, unsigned __int16 a2, unsigned __int16 a3)
{
  int result; // eax

  if ( a2 <= 3u )
  {
    result = (int)&unk_A1D34 + 124 * a3 + 4 * a2;
    *(_DWORD *)result += a1;
  }
  else if ( a2 == 4 )
  {
    result = 124 * a3;
    *(__int16 *)((char *)&word_A1D44 + result) += a1;
  }
  else
  {
    result = (int)&unk_A1D34 + 124 * a3 + 2 * a2 + 8;
    *(_WORD *)result = a1;
  }
  return result;
}
// A1D44: using guessed type __int16 word_A1D44;

//----- (0006EF1F) --------------------------------------------------------
int __stdcall sub_6EF1F(unsigned __int16 a1, unsigned __int16 a2, unsigned __int16 a3, unsigned __int16 a4)
{
  int v5; // esi
  int v6; // esi
  int v7; // esi
  int v8; // eax
  __int16 v9; // di
  unsigned __int16 v10; // ax
  unsigned __int16 *v11; // esi
  int v12; // esi
  unsigned __int16 v13; // dx
  int v14; // esi
  int v15; // eax
  unsigned __int16 v16; // ax
  __int16 k; // di
  int v18; // edx
  int v19; // [esp+4h] [ebp-38h]
  unsigned __int16 v20; // [esp+8h] [ebp-34h]
  unsigned __int16 v21; // [esp+Ch] [ebp-30h]
  int v22; // [esp+10h] [ebp-2Ch]
  unsigned __int16 v23; // [esp+18h] [ebp-24h]
  int v24; // [esp+1Ch] [ebp-20h]
  unsigned __int16 v25; // [esp+20h] [ebp-1Ch]
  unsigned __int16 i; // [esp+24h] [ebp-18h]
  unsigned __int16 j; // [esp+28h] [ebp-14h]
  unsigned __int16 v28; // [esp+2Ch] [ebp-10h]
  int v29; // [esp+30h] [ebp-Ch]
  signed __int16 v30; // [esp+34h] [ebp-8h]
  int v31; // [esp+38h] [ebp-4h]

  if ( !dword_A1734[a4] )
    return 0;
  v29 = 0;
  v31 = 0;
  v5 = 4 * a3 + *(_DWORD *)dword_A1734[a4];
  v21 = *(_WORD *)(v5 + 6);
  v25 = *(_WORD *)(v5 + 2);
LABEL_35:
  if ( v25 < v21 )
  {
    v19 = 0;
    v22 = v31;
    v6 = *(_DWORD *)(dword_A1734[a4] + 4);
    v23 = *(_WORD *)(v6 + 2 * v25 + 2);
    for ( i = *(_WORD *)(v6 + 2 * v25); ; ++i )
    {
      if ( i >= v23 )
        goto LABEL_34;
      v7 = 3 * i;
      v8 = *(_DWORD *)(dword_A1734[a4] + 8);
      v9 = *(unsigned __int8 *)(v7 + v8);
      v10 = *(_WORD *)(v7 + v8 + 1);
      v30 = v10;
      if ( v9 == 43 && !sub_6EE86(v10, a2) )
        goto LABEL_34;
      if ( v9 == 44 && !sub_6EE86(v30, a1) )
        goto LABEL_34;
      word_A1834[2 * (__int16)v31] = v9;
      word_A1836[2 * (__int16)v31++] = v30;
LABEL_10:
      if ( v19 )
      {
LABEL_34:
        ++v25;
        goto LABEL_35;
      }
      if ( v9 == 41 )
      {
        v11 = (unsigned __int16 *)(*(_DWORD *)(dword_A1734[a4] + 12) + 2 * v30);
        v20 = v11[1];
        v28 = *v11;
        while ( 2 )
        {
          if ( v28 < v20 )
          {
            v24 = v31;
            v12 = *(_DWORD *)(dword_A1734[a4] + 16);
            v13 = *(_WORD *)(v12 + 2 * v28 + 2);
            for ( j = *(_WORD *)(v12 + 2 * v28); ; ++j )
            {
              if ( j >= v13 )
                goto LABEL_29;
              v14 = 3 * j;
              v15 = *(_DWORD *)(dword_A1734[a4] + 20);
              v9 = *(unsigned __int8 *)(v14 + v15);
              v16 = *(_WORD *)(v14 + v15 + 1);
              v30 = v16;
              if ( v9 == 41 )
                goto LABEL_10;
              if ( v9 == 53 )
                break;
              if ( v9 == 43 && !sub_6EE86(v16, a2) || v9 == 44 && !sub_6EE86(v30, a1) )
                goto LABEL_29;
              word_A1834[2 * (__int16)v31] = v9;
              word_A1836[2 * (__int16)v31++] = v30;
            }
            v19 = 1;
            qmemcpy((char *)&unk_A1D34 + 124 * (__int16)v29, &unk_A0E84, 0x7Cu);
            sub_6EEB4(a2, 0x2Eu, v29);
            sub_6EEB4(a1, 0x2Fu, v29);
            for ( k = 0; k < (__int16)v31; ++k )
              sub_6EEB4(word_A1836[2 * k], word_A1834[2 * k], v29);
            v18 = 16 * v30;
            sub_6EEB4(*(_DWORD *)(v18 + *(_DWORD *)(dword_A1734[a4] + 24)), 0, v29);
            sub_6EEB4(*(_DWORD *)(v18 + *(_DWORD *)(dword_A1734[a4] + 24) + 4), 1u, v29);
            sub_6EEB4(*(_DWORD *)(v18 + *(_DWORD *)(dword_A1734[a4] + 24) + 8), 2u, v29);
            sub_6EEB4(*(_DWORD *)(v18 + *(_DWORD *)(dword_A1734[a4] + 24) + 12), 3u, v29);
            if ( dword_A1728 )
              dword_A1728((unsigned __int16)v29 | 0x8000);
            if ( (_WORD)++v29 != 4 )
            {
              v31 = v24;
LABEL_29:
              ++v28;
              continue;
            }
            return v29;
          }
          break;
        }
        v31 = v22;
      }
    }
  }
  return v29;
}
// A1728: using guessed type int (__stdcall *dword_A1728)(_DWORD);
// A1734: using guessed type int dword_A1734[64];
// A1834: using guessed type __int16 word_A1834[];
// A1836: using guessed type __int16 word_A1836[63];

//----- (0006F257) --------------------------------------------------------
int __stdcall sub_6F257(unsigned __int16 a1)
{
  int i; // edx

  for ( i = 0; (__int16)i < 128; ++i )
  {
    if ( a1 > (unsigned __int16)word_A0F00[(__int16)i] )
      return i;
  }
  return 127;
}
// A0F00: using guessed type __int16 word_A0F00[128];

//----- (0006F285) --------------------------------------------------------
int __stdcall sub_6F285(__int16 a1)
{
  __int16 v1; // si
  int v2; // ebx

  v1 = a1;
  v2 = 0;
  if ( a1 < 0 )
  {
    while ( v1 < 0 )
    {
      --v2;
      v1 += 1200;
    }
  }
  else
  {
    v2 = a1 / 1200;
  }
  if ( (__int16)v2 > 1 )
    v2 = 1;
  return ((v2 + 14) << 12) | (((v1 % 1200) << 12) / 1200);
}

//----- (0006F2E0) --------------------------------------------------------
int sub_6F2E0(int a1, int a2, int a3, int a4, unsigned __int16 a5, int a6, int a7)
{
  __int16 *v7; // edi
  __int16 i; // si
  __int16 v10; // eax^2
  char v11; // al
  int v12; // eax
  int v13; // edx
  char *v14; // esi
  unsigned int v15; // eax
  __int16 v16; // ax
  int v17; // et2
  int v18; // eax
  int v19; // eax
  int v20; // ebx
  int v21; // edx
  int v22; // eax
  unsigned __int16 v23; // cx
  __int64 v24; // rax
  int v25; // ebx
  int v26; // eax
  __int16 v27; // ax
  unsigned __int16 v28; // ax
  _BYTE v29[4]; // [esp+4h] [ebp-3Ch]
  int v30; // [esp+8h] [ebp-38h]
  int v31; // [esp+Ch] [ebp-34h]
  int v32; // [esp+10h] [ebp-30h]
  int v33; // [esp+14h] [ebp-2Ch]
  int v34; // [esp+18h] [ebp-28h]
  int v35; // [esp+1Ch] [ebp-24h]
  int v36; // [esp+20h] [ebp-20h]
  int v37; // [esp+24h] [ebp-1Ch]
  int v38; // [esp+28h] [ebp-18h]
  int v39; // [esp+2Ch] [ebp-14h]
  int v40; // [esp+30h] [ebp-10h]
  int v41; // [esp+34h] [ebp-Ch]
  int v42; // [esp+38h] [ebp-8h]
  int v43; // [esp+3Ch] [ebp-4h]

  //fix
  v10 = 0;
  v11 = 0;
  //fix

  v7 = &word_A1B34[15 * (a7 & 0xF)];
  v36 = sub_6EF1F(a5, a6, *v7, v7[8]);
  if ( !(_WORD)v36 )
    return 1;
  for ( i = 0; i < (__int16)v36; ++i )
  {
    sub_6ED32(0, 254, 255);
    HIWORD(a2) = v10;
    v29[i] = v11;
  }
  v38 = 0;
  v35 = a7 << 8;
  HIWORD(v12) = HIWORD(a7);
  LOWORD(v12) = a7 & 0xF;
  v37 = v12;
  while ( (__int16)v38 < (__int16)v36 )
  {
    LOWORD(a2) = (unsigned __int8)v29[(__int16)v38];
    v41 = a2;
    v13 = 20 * (unsigned __int16)a2;
    v33 = (int)word_A18B4 + v13;
    v14 = (char *)&unk_A1D34 + 124 * (__int16)v38;
    v15 = sub_6EB6B(0xE000u, v41 | 0x800);
    if ( (_WORD)v37 == 9 )
    {
      if ( *((_WORD *)v14 + 30) == 127 )
        *((_WORD *)v14 + 29) = -18433;
      if ( *((_WORD *)v14 + 38) == 127 )
        *((_WORD *)v14 + 37) = -18433;
    }
    else if ( *((__int16 *)v14 + 38) < 125 )
    {
      v16 = *((_WORD *)v14 + 51);
      if ( (unsigned __int16)v16 < 0x46u )
        v16 = 70;
      v17 = (*((__int16 *)v14 + 12) * v16 + 64) % 127;
      v15 = (*((__int16 *)v14 + 12) * v16 + 64) / 127;
      HIWORD(v13) = HIWORD(v17);
      *((_WORD *)v14 + 12) = v15;
    }
    LOWORD(v15) = *((_WORD *)v14 + 55) + *((_WORD *)v14 + 50);
    v18 = 100 * v15;
    LOWORD(v13) = *((_WORD *)v14 + 56);
    v39 = v18 + v13;
    LOWORD(v18) = *((_WORD *)v14 + 59);
    v39 -= v18;
    if ( *((_WORD *)v14 + 60) == 1 )
    {
      HIWORD(v19) = HIWORD(v39);
      LOWORD(v19) = (__int16)v39 / 2;
      v39 = v19;
    }
    v31 = *((unsigned __int16 *)v14 + 40);
    if ( (_WORD)v37 != 9 )
    {
      *((_WORD *)v14 + 39) -= *((_WORD *)v14 + 43) * (*((_WORD *)v14 + 50) - 60);
      if ( *((__int16 *)v14 + 39) < 0 )
        *((_WORD *)v14 + 39) = 0;
      v31 -= *((__int16 *)v14 + 44) * (*((__int16 *)v14 + 50) - 60);
      if ( v31 < 0 )
        v31 = 0;
      if ( v31 > 0xFFFF )
        v31 = 0xFFFF;
    }
    *((_WORD *)v14 + 39) = 127 - *((__int16 *)v14 + 39) / 92;
    *((_WORD *)v14 + 40) = sub_6F257(v31);
    v34 = *(_DWORD *)v14 - 46;
    if ( (v14[116] & 1) != 0 )
    {
      v32 = *((_DWORD *)v14 + 2);
      v30 = *((_DWORD *)v14 + 3) + 1;
      if ( *((_DWORD *)v14 + 1) - *((_DWORD *)v14 + 3) >= 10 )
      {
        *(_DWORD *)(v33 + 16) = *((_DWORD *)v14 + 1) + 1;
        goto LABEL_30;
      }
    }
    else
    {
      v32 = *((_DWORD *)v14 + 3) + 6;
      v30 = *((_DWORD *)v14 + 3) + 10;
    }
    *(_DWORD *)(v33 + 16) = 0;
LABEL_30:
    v20 = sub_6F285(*((_WORD *)v14 + 8) + v39);
    v42 = v20;
    *(_WORD *)(v33 + 12) = v20;
    v21 = v33;
    *(_BYTE *)(v33 + 2) = *((_BYTE *)v7 + 18);
    *(_BYTE *)(v21 + 3) = *(_BYTE *)v7;
    *(_WORD *)(v21 + 6) = *((_WORD *)v14 + 52);
    *(_WORD *)(v21 + 4) = *((_WORD *)v14 + 51);
    *(_WORD *)(v21 + 14) = *((_WORD *)v14 + 9);
    *(_WORD *)(v21 + 8) = *((_WORD *)v14 + 42);
    *(_WORD *)(v21 + 10) = *((_WORD *)v14 + 34);
    if ( v7[7] )
    {
      v22 = v7[7] + (unsigned __int16)v20;
      if ( v22 <= 0xFFFF )
      {
        LOWORD(v22) = v7[7];
        v42 = v20 + v22;
      }
      else
      {
        v42 = 0xFFFF;
      }
    }
    v23 = (unsigned __int8)byte_A1000[(unsigned __int8)v14[102]];
    v43 = (unsigned __int8)byte_A1080[*((unsigned __int8 *)v7 + 7)];
    v24 = 3 * (127 - *((__int16 *)v14 + 52));
    v25 = (int)(v24 - (__CFSHL__(HIDWORD(v24), 3) + 8 * HIDWORD(v24))) >> 3;
    v40 = 8 * (unsigned __int16)(v25 + v23 + v43) / 3;
    if ( (unsigned __int16)v40 < 0xFFu && v23 < 0x32u && (unsigned __int16)v25 < 0x2Fu )
    {
      v43 = (unsigned __int8)byte_A1100[*((unsigned __int8 *)v7 + 6)];
      v40 = (unsigned __int16)v40 + (unsigned __int16)v43 * (255 - (unsigned __int16)v40) / 127;
    }
    else
    {
      v40 = 255;
    }
    sub_6EB6B(0x80u, v41 | 0x5400);
    sub_6EC37(0xFFFFu, v41 | 0x3000);
    sub_6EB6B(*((_WORD *)v14 + 37), v41 | 0x4400);
    sub_6EB6B((*((_WORD *)v14 + 38) | (*((_WORD *)v14 + 39) << 8)) & 0x7F7F, v41 | 0x4600);
    sub_6EB6B(*((_WORD *)v14 + 29), v41 | 0x6400);
    sub_6EB6B(*((_WORD *)v14 + 30) | (*((_WORD *)v14 + 31) << 8), v41 | 0x6600);
    sub_6EB6B(*((_WORD *)v14 + 32) | (*((_WORD *)v14 + 33) << 8), v41 | 0x7400);
    sub_6EB6B(v42, v41 | 0x800);
    sub_6EB6B(v40 | (*((_WORD *)v14 + 12) << 8), v41 | 0x1800);
    sub_6EB6B(*((_WORD *)v14 + 25), v41 | 0x5600);
    sub_6EB6B(*((_WORD *)v14 + 27), v41 | 0x7600);
    sub_6EB6B(*((_WORD *)v14 + 15) | (*((_WORD *)v14 + 11) << 8), v41 | 0x2800);
    v31 = v7[5] + v7[4] + *((__int16 *)v14 + 9);
    if ( v31 > 127 )
      v31 = 127;
    sub_6EB6B(*((_WORD *)v14 + 14) | ((_WORD)v31 << 8), v41 | 0x3800);
    sub_6EB6B(*((_WORD *)v14 + 26) | (*((_WORD *)v14 + 17) << 8), v41 | 0x4800);
    sub_6EB6B(*((_WORD *)v14 + 28) | (*((_WORD *)v14 + 10) << 8), v41 | 0x5800);
    v26 = sub_6ECB0(v41 | 0x1000);
    BYTE1(v26) = 0;
    v31 = v26;
    v27 = *((_WORD *)v14 + 20) + *((unsigned __int8 *)v7 + 3);
    if ( (unsigned __int16)v27 > 0xFFu )
      v27 = 255;
    sub_6EC37(v31 | (v27 << 8), v41 | 0x1000);
    v31 = *((unsigned __int8 *)v7 + 5) + 255 - 2 * *((__int16 *)v14 + 21) - 129;
    if ( v31 > 255 )
      v31 = 255;
    if ( v31 < 0 )
      v31 = 0;
    v32 |= v31 << 24;
    sub_6EC37(v32, v41 | 0x6000);
    v28 = *((_WORD *)v14 + 19) + *((unsigned __int8 *)v7 + 4);
    if ( v28 > 0xFFu )
      v28 = 255;
    v30 |= v28 << 24;
    sub_6EC37(v30, v41 | 0x7000);
    v34 |= *((__int16 *)v14 + 13) << 28;
    sub_6EC37(v34, v41 | 0x400);
    sub_6EB6B(*((_WORD *)v14 + 40) | (*((_WORD *)v14 + 41) << 8), v41 | 0x5400);
    HIWORD(a2) = HIWORD(a6) | HIWORD(v35);
    *(_WORD *)v33 = a6 | v35;
    ++v38;
  }
  return 0;
}
// 6F339: variable 'v10' is possibly undefined
// 6F33E: variable 'v11' is possibly undefined
// A18B4: using guessed type __int16 word_A18B4[];
// A1B34: using guessed type __int16 word_A1B34[];

//----- (0006F8C3) --------------------------------------------------------
void __stdcall sub_6F8C3(int a1, __int16 a2, unsigned __int16 a3)
{
  unsigned __int16 i; // di
  unsigned __int16 v4; // ax
  unsigned __int16 v5; // ax
  unsigned __int16 v6; // ax

  for ( i = 0; i < (unsigned __int16)word_A1608; ++i )
  {
    if ( (int)(unsigned __int16)word_A18B4[10 * i] >> 8 != 255 )
    {
      v4 = word_A18B4[10 * i];
      HIBYTE(v4) &= 0xFu;
      if ( v4 == (unsigned __int16)((a3 << 8) | a2) )
      {
        if ( byte_A1B36[30 * a3] )
        {
          LOBYTE(word_A18B4[10 * i]) = -1;
        }
        else
        {
          word_A18B4[10 * i] = -1;
          v5 = word_A18BC[10 * i];
          HIBYTE(v5) |= 0x80u;
          sub_6EB6B(v5, i | 0x5400);
          v6 = word_A18BE[10 * i];
          HIBYTE(v6) |= 0x80u;
          sub_6EB6B(v6, i | 0x7400);
          if ( dword_A18C4[5 * i] )
          {
            sub_6ECB0(i | 0x7000);
            sub_6EC37(LOWORD(dword_A18C4[5 * i]) + 4, i | 0x7000);
            sub_6ECB0(i | 0x6000);
            sub_6EC37(dword_A18C4[5 * i], i | 0x6000);
          }
        }
      }
    }
  }
  JUMPOUT(0x6F8BB);
}
// 6F9D6: control flows out of bounds to 6F8BB
// A1608: using guessed type __int16 word_A1608;
// A18B4: using guessed type __int16 word_A18B4[];
// A18BC: using guessed type __int16 word_A18BC[];
// A18BE: using guessed type __int16 word_A18BE[];
// A18C4: using guessed type int dword_A18C4[156];

//----- (0006F9DB) --------------------------------------------------------
void sub_6F9DB(
        int a1,
        int a2,
        int a3,
        int a4,
        unsigned __int16 a5,
        unsigned __int16 a6,
        unsigned __int16 a7)
{
  if ( a5 )
    sub_6F2E0(a5, a2, a3, a4, a5, a6, a7);
  else
    sub_6F8C3(0, a6, a7);
}

//----- (0006FA12) --------------------------------------------------------
void __stdcall sub_6FA12(__int16 a1, unsigned __int16 a2)
{
  if ( word_A1B48[15 * a2] == -1 )
    word_A1B46[15 * a2] = a1;
  word_A1B48[15 * a2] = a1;
  JUMPOUT(0x6FD5A);
}
// 6FA41: control flows out of bounds to 6FD5A
// A1B46: using guessed type __int16 word_A1B46[];
// A1B48: using guessed type __int16 word_A1B48[];

//----- (0006FA46) --------------------------------------------------------
void __stdcall sub_6FA46(__int16 a1, unsigned __int16 a2)
{
  byte_A1B37[30 * a2] = 2 * ((unsigned __int16)(45 * a1) / 0x64u);
  JUMPOUT(0x6FD5A);
}
// 6FA6A: control flows out of bounds to 6FD5A

//----- (0006FA6F) --------------------------------------------------------
void __stdcall sub_6FA6F(__int16 a1, unsigned __int16 a2)
{
  byte_A1B38[30 * a2] = 2 * ((unsigned __int16)(45 * a1) / 0x64u);
  JUMPOUT(0x6FD5A);
}
// 6FA93: control flows out of bounds to 6FD5A

//----- (0006FA98) --------------------------------------------------------
void __stdcall sub_6FA98(char a1, unsigned __int16 a2)
{
  byte_A1B39[30 * a2] = -1 - 2 * a1 - 1;
  JUMPOUT(0x6FD5A);
}
// 6FAB3: control flows out of bounds to 6FD5A

//----- (0006FAB8) --------------------------------------------------------
int __stdcall sub_6FAB8(unsigned __int8 a1, unsigned __int16 a2)
{
  unsigned __int16 i; // di
  __int64 v3; // rax
  int v4; // ecx
  int v5; // esi
  __int16 v6; // si
  int v7; // eax
  unsigned __int16 v9; // [esp+4h] [ebp-4h]

  byte_A1B3B[30 * a2] = a1;
  for ( i = 0; i < (unsigned __int16)word_A1608; ++i )
  {
    if ( (int)(unsigned __int16)word_A18B4[10 * i] >> 8 == a2 )
    {
      v9 = (unsigned __int8)byte_A1000[(unsigned __int8)byte_A18B8[20 * i]];
      v3 = 3 * (127 - (unsigned __int16)word_A18BA[10 * i]);
      v4 = (int)(v3 - (__CFSHL__(HIDWORD(v3), 3) + 8 * HIDWORD(v3))) >> 3;
      v5 = 8 * (unsigned __int16)(v4 + v9 + (unsigned __int8)byte_A1080[a1]) / 3;
      if ( (unsigned __int16)v5 < 0xFFu && v9 < 0x32u && (unsigned __int16)v4 < 0x2Fu )
        v6 = v5 + (255 - (unsigned __int16)v5) * (unsigned __int8)byte_A1100[(unsigned __int8)byte_A1B3A[30 * a2]] / 127;
      else
        v6 = 255;
      v7 = sub_6EBCF(i | 0x1800);
      LOBYTE(v7) = 0;
      sub_6EB6B(v7 | v6, i | 0x1800);
    }
  }
  return 0;
}
// A1608: using guessed type __int16 word_A1608;
// A18B4: using guessed type __int16 word_A18B4[];
// A18BA: using guessed type __int16 word_A18BA[];

//----- (0006FBBF) --------------------------------------------------------
int __stdcall sub_6FBBF(char a1, unsigned __int16 a2)
{
  int v2; // eax

  v2 = 30 * a2;
  byte_A1B3A[v2] = a1;
  return sub_6FAB8(byte_A1B3B[v2], a2);
}

//----- (0006FBE8) --------------------------------------------------------
int __stdcall sub_6FBE8(unsigned __int16 a1, unsigned __int16 a2)
{
  unsigned __int16 i; // si
  unsigned __int16 v3; // bx
  unsigned __int16 v4; // ax

  if ( a1 >= 0x40u )
  {
    byte_A1B36[30 * a2] = 1;
  }
  else
  {
    byte_A1B36[30 * (a2 & 0xF)] = 0;
    for ( i = 0; i < (unsigned __int16)word_A1608; ++i )
    {
      v3 = word_A18B4[10 * i];
      if ( (unsigned __int8)v3 == 255 && (int)v3 >> 8 != 255 && (HIBYTE(v3) & 0xF) == a2 )
      {
        word_A18B4[10 * i] = -1;
        v4 = word_A18BC[10 * i];
        HIBYTE(v4) |= 0x80u;
        sub_6EB6B(v4, i | 0x5400);
      }
    }
  }
  return 0;
}
// A1608: using guessed type __int16 word_A1608;
// A18B4: using guessed type __int16 word_A18B4[];
// A18BC: using guessed type __int16 word_A18BC[];

//----- (0006FC8A) --------------------------------------------------------
void __stdcall sub_6FC8A(unsigned __int16 a1, unsigned __int16 a2)
{
  int v2; // edx
  __int16 v3; // si
  unsigned __int8 v4; // al
  unsigned __int16 i; // [esp+0h] [ebp-4h]
  __int16 v6; // [esp+14h] [ebp+10h]

  v6 = a1 / 0x1Eu;
  word_A1B3C[15 * a2] = v6;
  for ( i = 0; i < (unsigned __int16)word_A1608; ++i )
  {
    v2 = (int)(unsigned __int16)word_A18B4[10 * i] >> 8;
    if ( (_WORD)v2 != 255 && (v2 & 0xF) == a2 )
    {
      v3 = word_A18C2[10 * i] + word_A1B3E[15 * a2] + v6;
      if ( v3 > 127 )
        v3 = 127;
      v4 = sub_6EBCF(i | 0x3800);
      sub_6EB6B(v4 | (unsigned __int16)(v3 << 8), i | 0x3800);
    }
  }
  JUMPOUT(0x6FBB7);
}
// 6FD2F: control flows out of bounds to 6FBB7
// A1608: using guessed type __int16 word_A1608;
// A18B4: using guessed type __int16 word_A18B4[];
// A18C2: using guessed type __int16 word_A18C2[];
// A1B3C: using guessed type __int16 word_A1B3C[];
// A1B3E: using guessed type __int16 word_A1B3E[];

//----- (0006FD34) --------------------------------------------------------
int __stdcall sub_6FD34(unsigned __int8 a1, unsigned __int16 a2)
{
  int v2; // eax

  v2 = 15 * a2;
  word_A1B4A[v2] = 256;
  LOBYTE(word_A1B4C[v2]) = 0;
  word_A1B4C[v2] |= a1;
  return 0;
}
// A1B4A: using guessed type __int16 word_A1B4A[];
// A1B4C: using guessed type __int16 word_A1B4C[];

//----- (0006FD60) --------------------------------------------------------
void __stdcall sub_6FD60(int a1, unsigned __int16 a2)
{
  int v2; // eax

  v2 = 15 * a2;
  word_A1B4A[v2] = 256;
  HIBYTE(word_A1B4C[v2]) = 0;
  JUMPOUT(0x6FD53);
}
// 6FD80: control flows out of bounds to 6FD53
// A1B4A: using guessed type __int16 word_A1B4A[];
// A1B4C: using guessed type __int16 word_A1B4C[];

//----- (0006FD82) --------------------------------------------------------
int __stdcall sub_6FD82(__int16 a1, unsigned __int16 a2)
{
  __int16 v2; // bx

  v2 = word_A1B4A[15 * a2];
  if ( (unsigned __int16)v2 >= 0x100u )
  {
    if ( (unsigned __int16)v2 <= 0x100u )
    {
      if ( !word_A1B4C[15 * a2] )
      {
        HIBYTE(word_A1B40[15 * a2]) = 0;
        word_A1B40[15 * a2] |= a1 << 8;
        return 0;
      }
    }
    else if ( v2 == 512 && dword_A1728 )
    {
      HIBYTE(word_A1B50[15 * a2]) = 0;
      LOBYTE(word_A1B50[15 * a2]) &= ~0x80u;
      word_A1B50[15 * a2] |= a1 << 7;
      return dword_A1728(a2);
    }
  }
  return 1;
}
// A1728: using guessed type int (__stdcall *dword_A1728)(_DWORD);
// A1B40: using guessed type __int16 word_A1B40[];
// A1B4A: using guessed type __int16 word_A1B4A[];
// A1B4C: using guessed type __int16 word_A1B4C[];
// A1B50: using guessed type __int16 word_A1B50[];

//----- (0006FE01) --------------------------------------------------------
int __stdcall sub_6FE01(__int16 a1, unsigned __int16 a2)
{
  __int16 v2; // bx

  v2 = word_A1B4A[15 * a2];
  if ( (unsigned __int16)v2 >= 0x100u )
  {
    if ( (unsigned __int16)v2 <= 0x100u )
    {
      if ( !word_A1B4C[15 * a2] )
      {
        LOBYTE(word_A1B40[15 * a2]) = 0;
        word_A1B40[15 * a2] |= a1;
        return 0;
      }
    }
    else if ( v2 == 512 && dword_A1728 )
    {
      LOBYTE(word_A1B50[15 * a2]) &= 0x80u;
      word_A1B50[15 * a2] |= a1;
      return dword_A1728(a2);
    }
  }
  return 1;
}
// A1728: using guessed type int (__stdcall *dword_A1728)(_DWORD);
// A1B40: using guessed type __int16 word_A1B40[];
// A1B4A: using guessed type __int16 word_A1B4A[];
// A1B4C: using guessed type __int16 word_A1B4C[];
// A1B50: using guessed type __int16 word_A1B50[];

//----- (0006FE73) --------------------------------------------------------
void __stdcall sub_6FE73(int a1, __int16 a2)
{
  int v2; // edx
  int v3; // eax
  int savedregs; // [esp+0h] [ebp+0h]

  //fix
  savedregs = 0;
  //fix

  v2 = a2 & 0xF;
  v3 = 15 * v2;
  byte_A1B37[v3 * 2] = 0;
  byte_A1B38[v3 * 2] = 0;
  byte_A1B39[v3 * 2] = 0x80;
  byte_A1B3A[v3 * 2] = 127;
  byte_A1B3B[v3 * 2] = 100;
  word_A1B3C[v3] = 0;
  byte_A1B36[v3 * 2] = 0;
  word_A1B42[v3] = 0;
  word_A1B40[v3] = 512;
  word_A1B4C[v3] = -1;
  word_A1B4E[v3] = -1;
  word_A1B46[v3] = 0;
  word_A1B48[v3] = -1;
  if ( dword_A1730 )
    dword_A1730(0, v2, savedregs);
  JUMPOUT(0x6FD5A);
}
// 6FF04: control flows out of bounds to 6FD5A
// 6FEFE: variable 'savedregs' is possibly undefined
// A1730: using guessed type int (__stdcall *dword_A1730)(_DWORD, _DWORD, _DWORD);
// A1B3C: using guessed type __int16 word_A1B3C[];
// A1B40: using guessed type __int16 word_A1B40[];
// A1B42: using guessed type __int16 word_A1B42[];
// A1B46: using guessed type __int16 word_A1B46[];
// A1B48: using guessed type __int16 word_A1B48[];
// A1B4C: using guessed type __int16 word_A1B4C[];
// A1B4E: using guessed type __int16 word_A1B4E[];

//----- (0006FF09) --------------------------------------------------------
void __stdcall sub_6FF09(int a1, __int16 a2)
{
  unsigned __int16 i; // si
  int v3; // edx

  for ( i = 0; i < (unsigned __int16)word_A1608; ++i )
  {
    v3 = (int)(unsigned __int16)word_A18B4[10 * i] >> 8;
    if ( (_WORD)v3 != 255 && (v3 & 0xF) == a2 )
    {
      word_A18B4[10 * i] = -1;
      sub_6EB6B(0x807Fu, i | 0x5400);
    }
  }
  JUMPOUT(0x6FC83);
}
// 6FF5E: control flows out of bounds to 6FC83
// A1608: using guessed type __int16 word_A1608;
// A18B4: using guessed type __int16 word_A18B4[];

//----- (0006FF63) --------------------------------------------------------
int __stdcall sub_6FF63(unsigned __int16 a1, unsigned __int16 a2, unsigned __int16 a3)
{
  int savedregs; // [esp+0h] [ebp+0h]

  //fix
  savedregs = 0;
  //fix

  if ( a2 < 0x40u )
  {
    if ( a2 < 7u )
    {
      if ( a2 )
      {
        if ( a2 <= 1u )
        {
          sub_6FC8A(a1, a3);
        }
        else
        {
          if ( a2 != 6 )
            return 1;
          sub_6FD82(a1, a3);
        }
      }
      else
      {
        sub_6FA12(a1, a3);
      }
    }
    else if ( a2 <= 7u )
    {
      sub_6FAB8(a1, a3);
    }
    else if ( a2 < 0xBu )
    {
      if ( a2 != 10 )
        return 1;
      sub_6FA98(a1, a3);
    }
    else if ( a2 <= 0xBu )
    {
      sub_6FBBF(a1, a3);
    }
    else
    {
      if ( a2 != 38 )
        return 1;
      sub_6FE01(a1, a3);
    }
    return 0;
  }
  if ( a2 <= 0x40u )
  {
    sub_6FBE8(a1, a3);
    return 0;
  }
  if ( a2 < 0x63u )
  {
    if ( a2 < 0x5Du )
    {
      if ( a2 != 91 )
        return 1;
      sub_6FA46(a1, a3);
    }
    else
    {
      if ( a2 > 0x5Du )
      {
        if ( a2 == 98 && dword_A172C )
          return dword_A172C(a1, a3);
        return 1;
      }
      sub_6FA6F(a1, a3);
    }
    return 0;
  }
  if ( a2 > 0x63u )
  {
    if ( a2 < 0x65u )
    {
      sub_6FD34(a1, a3);
      return 0;
    }
    if ( a2 <= 0x65u )
    {
      sub_6FD60(a1, a3);
      return 0;
    }
    if ( a2 >= 0x79u )
    {
      if ( a2 <= 0x79u )
      {
        sub_6FE73(a1, a3);
      }
      else
      {
        if ( a2 != 123 )
          return 1;
        sub_6FF09(a1, a3);
      }
      return 0;
    }
    return 1;
  }
  if ( !dword_A1730 )
    return 1;
  return dword_A1730(a1, a3, savedregs);
}
// 7014A: variable 'savedregs' is possibly undefined
// A172C: using guessed type int (__stdcall *dword_A172C)(_DWORD, _DWORD);
// A1730: using guessed type int (__stdcall *dword_A1730)(_DWORD, _DWORD, _DWORD);

//----- (00070154) --------------------------------------------------------
void __stdcall sub_70154(unsigned __int16 a1, __int16 a2)
{
  __int16 v2; // cx
  int v3; // eax
  unsigned __int16 i; // dx
  unsigned __int16 j; // si
  int v6; // ebx
  unsigned __int8 *v7; // eax
  _BOOL1 k; // zf
  unsigned __int16 m; // dx
  unsigned __int16 n; // si
  int v11; // eax
  unsigned __int8 *v12; // eax
  __int16 v13; // [esp+0h] [ebp-8h]
  unsigned __int16 v14; // [esp+4h] [ebp-4h]
  unsigned __int16 v15; // [esp+1Ch] [ebp+14h]

  v2 = 1;
  v15 = a2 & 0xF;
  if ( word_A1B48[15 * v15] != -1 )
    word_A1B46[15 * v15] = word_A1B48[15 * v15];
  v3 = 15 * v15;
  word_A1B44[v3] = 0;
  word_A1B34[v3] = 0;
  if ( v15 == 9 )
  {
    v14 = 0;
    for ( i = 0; i < 0x40u; ++i )
    {
      if ( dword_A1734[i] )
      {
        for ( j = 0; ; ++j )
        {
          v7 = (unsigned __int8 *)(4 * j + *(_DWORD *)dword_A1734[i]);
          if ( v7[1] == 0xFF )
            break;
          if ( v7[1] == 0x80 )
          {
            v6 = *v7;
            if ( v6 <= a1 && v6 >= v14 )
            {
              v2 = 0;
              v14 = *v7;
              word_A1B44[135] = i;
              word_A1B34[135] = j;
            }
          }
        }
      }
    }
    for ( k = v2 == 0; ; k = v13 == 0 )
    {
      if ( k )
        goto LABEL_29;
      v13 = 0;
LABEL_17:
      for ( m = 0; m < 0x40u; ++m )
      {
        if ( dword_A1734[m] )
        {
          for ( n = 0; ; ++n )
          {
            v12 = (unsigned __int8 *)(4 * n + *(_DWORD *)dword_A1734[m]);
            if ( v12[1] == 0xFF )
              goto LABEL_26;
            if ( v12[1] == v13 && *v12 == a1 )
              break;
          }
          v11 = 15 * v15;
          word_A1B44[v11] = m;
          word_A1B34[v11] = n;
LABEL_29:
          JUMPOUT(0x6FBB9);
        }
LABEL_26:
        ;
      }
    }
  }
  v13 = word_A1B46[15 * v15];
  goto LABEL_17;
}
// 702AF: control flows out of bounds to 6FBB9
// A1734: using guessed type int dword_A1734[64];
// A1B34: using guessed type __int16 word_A1B34[];
// A1B44: using guessed type __int16 word_A1B44[];
// A1B46: using guessed type __int16 word_A1B46[];
// A1B48: using guessed type __int16 word_A1B48[];

//----- (000702B4) --------------------------------------------------------
void __stdcall sub_702B4(int a1, int a2, int a3)
{
  JUMPOUT(0x70085);
}
// 702B7: control flows out of bounds to 70085

//----- (000702BC) --------------------------------------------------------
void __stdcall sub_702BC(unsigned __int16 a1, __int16 a2)
{
  int v2; // eax
  unsigned __int16 v3; // [esp+Ch] [ebp+Ch]

  v3 = a2 & 0xF;
  v2 = 15 * v3;
  word_A1B3E[v2] = a1 / 0x1Eu;
  sub_6FC8A(30 * word_A1B3C[v2], v3);
}
// A1B3C: using guessed type __int16 word_A1B3C[];
// A1B3E: using guessed type __int16 word_A1B3E[];

//----- (000702FC) --------------------------------------------------------
int __stdcall sub_702FC(unsigned __int8 a1, unsigned __int8 a2, __int16 a3)
{
  unsigned __int8 v3; // al
  __int64 v4; // rax
  int v5; // edi
  unsigned __int16 i; // si
  int v7; // edx
  int v8; // eax

  v3 = HIBYTE(word_A1B40[15 * (a3 & 0xF)]);
  if ( !v3 )
    v3 = 2;
  v4 = (__int16)(a2 + (a1 << 7) - 0x2000) * (__int16)(341 * v3);
  v5 = (int)(v4 - (__CFSHL__(HIDWORD(v4), 13) + (HIDWORD(v4) << 13))) >> 13;
  word_A1B42[15 * (a3 & 0xF)] = v5;
  for ( i = 0; i < (unsigned __int16)word_A1608; ++i )
  {
    v7 = (int)(unsigned __int16)word_A18B4[10 * i] >> 8;
    if ( (_WORD)v7 != 255 && (v7 & 0xF) == a3 )
    {
      v8 = (__int16)v5 + (unsigned __int16)word_A18C0[10 * i];
      if ( v8 >= 0xFFFF )
        LOWORD(v8) = -1;
      sub_6EB6B(v8, i | 0x800);
    }
  }
  return 0;
}
// A1608: using guessed type __int16 word_A1608;
// A18B4: using guessed type __int16 word_A18B4[];
// A18C0: using guessed type __int16 word_A18C0[];
// A1B40: using guessed type __int16 word_A1B40[];
// A1B42: using guessed type __int16 word_A1B42[];

//----- (000703CF) --------------------------------------------------------
int __stdcall sub_703CF(unsigned __int16 a1)
{
  int v2; // esi

  if ( a1 >= 8u )
    return 1;
  v2 = 7 * a1;
  sub_6EB6B(word_A1180[v2], 0x3409u);
  sub_6EB6B(word_A1182[v2], 0x340Cu);
  sub_6EB6B(word_A1184[v2], 0x3603u);
  sub_6EC37(*(int *)((char *)&dword_A1186 + v2 * 2), 0x1409u);
  sub_6EC37(*(int *)((char *)&dword_A118A + v2 * 2), 0x140Au);
  sub_6EC37(0x8000u, 0x140Du);
  sub_6EC37(0, 0x140Eu);
  return 0;
}
// A1180: using guessed type __int16 word_A1180[];
// A1182: using guessed type __int16 word_A1182[];
// A1184: using guessed type __int16 word_A1184[];
// A1186: using guessed type int dword_A1186;
// A118A: using guessed type int dword_A118A;

//----- (00070463) --------------------------------------------------------
int __stdcall sub_70463(unsigned __int16 a1)
{
  __int16 i; // si
  __int16 v3[4]; // [esp+0h] [ebp-8h]

  if ( a1 >= 8u )
    return 1;
  v3[0] = 9216;
  v3[1] = 9728;
  v3[2] = 13312;
  v3[3] = 13824;
  for ( i = 0; i < 28; ++i )
    sub_6EB6B(
      word_A120C[28 * a1 + i],
      v3[(int)(unsigned __int8)byte_A11F0[i] >> 5] | ((unsigned __int8)byte_A11F0[i] % 32));
  return 0;
}
// A120C: using guessed type __int16 word_A120C[224];

//----- (00070554) --------------------------------------------------------
char __stdcall sub_70554(__int16 a1)
{
  __int16 v1; // si
  __int16 v2; // ax

  v1 = word_A160A;
  word_A160A = a1;
  if ( (unsigned __int16)a1 < 0x300u || (LOBYTE(v2) = sub_7059A(), v2) )
  {
    HIBYTE(word_A160A) += 4;
    LOBYTE(v2) = sub_7059A();
    if ( v2 )
    {
      word_A160A = v1;
      LOBYTE(v2) = 1;
    }
  }
  return v2;
}
// 70576: variable 'v2' is possibly undefined
// A160A: using guessed type __int16 word_A160A;

//----- (0007059A) --------------------------------------------------------
_BOOL1 sub_7059A()
{
  return (unsigned __int16)sub_6EBCF(0x7800u) == 0xFFFF
      || (unsigned __int16)sub_6EBCF(0x141Du) == 0xFFFF
      || (unsigned __int16)sub_6EBCF(0x141Eu) == 0xFFFF
      || (unsigned __int16)sub_6EBCF(0x141Fu) == 0xFFFF
      || (sub_6EBCF(0x7800u) & 0xC) != 12
      || (sub_6EBCF(0x141Du) & 0x58) != 88
      || (sub_6EBCF(0x141Eu) & 3) != 3;
}

//----- (00070623) --------------------------------------------------------
unsigned int __stdcall sub_70623(__int16 a1)
{
  unsigned int v1; // esi
  __int16 v2; // di
  unsigned int result; // eax

  v1 = 0;
  v2 = sub_6EBCF(0x161Bu) + a1;
  do
  {
    result = sub_6EBCF(0x161Bu);
    if ( (_WORD)result == v2 )
      break;
    result = v1++;
  }
  while ( result < 0x7FFF );
  return result;
}

//----- (00070658) --------------------------------------------------------
unsigned int sub_70658()
{
  unsigned __int16 i; // si
  unsigned int result; // eax

  for ( i = 0; i < 0x20u; ++i )
  {
    sub_6EB6B(0x80u, i | 0x5400);
    sub_6EB6B(0, i | 0x6600);
    sub_6EB6B(0, i | 0x7400);
    sub_6EB6B(0, i | 0x800);
    sub_6EB6B(0xFF00u, i | 0x1800);
    sub_6EB6B(0, i | 0x2800);
    sub_6EB6B(0, i | 0x3800);
    sub_6EB6B(0x18u, i | 0x4800);
    sub_6EB6B(0x18u, i | 0x5800);
    sub_6EB6B(0, i | 0x6800);
    sub_6EB6B(0, i | 0x7600);
    sub_6EB6B(0, i | 0x5600);
    sub_6EB6B(0, i | 0x4600);
    sub_6EB6B(0, i | 0x4400);
    result = sub_6EB6B(0, i | 0x6400);
  }
  return result;
}

//----- (0007075E) --------------------------------------------------------
void sub_7075E()
{
  unsigned __int16 i; // si

  sub_70623(2);
  for ( i = 0; i < 0x20u; ++i )
  {
    sub_6EC37(0, i | 0x1000);
    sub_6EC37(0xFFFFu, i | 0x3000);
    sub_6EC37(0, i | 0x6000);
    sub_6EC37(0, i | 0x7000);
    sub_6EC37(0, i);
    sub_6EC37(0xFFFFu, i | 0x2000);
    sub_6EC37(0, i | 0x400);
    sub_6EC37(0, i | 0x5000);
    sub_6EC37(0, i | 0x4000);
  }
}

//----- (00070806) --------------------------------------------------------
unsigned int sub_70806()
{
  int v0; // esi
  unsigned __int16 i; // di
  unsigned __int16 j; // di
  unsigned __int16 k; // di
  unsigned __int16 m; // di
  int v5; // esi
  unsigned __int16 n; // di
  __int16 v7; // ax
  unsigned __int16 ii; // di
  __int16 v9; // ax
  unsigned __int16 jj; // di
  __int16 v11; // ax
  unsigned __int16 kk; // di
  __int16 v13; // ax
  unsigned __int16 mm; // si
  int v15; // esi
  unsigned __int16 nn; // di
  __int16 v17; // ax
  unsigned __int16 i1; // di
  __int16 v19; // ax
  unsigned __int16 i2; // di
  __int16 v21; // ax
  unsigned __int16 i3; // di
  __int16 v23; // ax
  int v24; // esi
  unsigned __int16 i4; // di
  unsigned __int16 i5; // di
  unsigned __int16 i6; // di
  unsigned __int16 i7; // di
  unsigned int result; // eax
  unsigned __int16 v30; // [esp-8h] [ebp-10h]
  unsigned __int16 v31; // [esp-8h] [ebp-10h]
  unsigned __int16 v32; // [esp-8h] [ebp-10h]
  unsigned __int16 v33; // [esp-8h] [ebp-10h]
  unsigned __int16 v34; // [esp-8h] [ebp-10h]
  unsigned __int16 v35; // [esp-8h] [ebp-10h]
  unsigned __int16 v36; // [esp-8h] [ebp-10h]
  unsigned __int16 v37; // [esp-8h] [ebp-10h]
  unsigned __int16 v38; // [esp-8h] [ebp-10h]
  unsigned __int16 v39; // [esp-8h] [ebp-10h]
  unsigned __int16 v40; // [esp-8h] [ebp-10h]
  unsigned __int16 v41; // [esp-8h] [ebp-10h]
  unsigned __int16 v42; // [esp-8h] [ebp-10h]
  unsigned __int16 v43; // [esp-8h] [ebp-10h]
  unsigned __int16 v44; // [esp-8h] [ebp-10h]
  unsigned __int16 v45; // [esp-8h] [ebp-10h]

  sub_6EB6B(0, 0x1414u);
  sub_6EB6B(0, 0x1415u);
  sub_6EB6B(0, 0x1416u);
  sub_6EB6B(0, 0x1415u);
  v0 = 0;
  for ( i = 0; i < 0x20u; ++i )
  {
    v30 = word_A1400[(unsigned __int16)v0++];
    sub_6EB6B(v30, i | 0x2400);
  }
  for ( j = 0; j < 0x20u; ++j )
  {
    v31 = word_A1400[(unsigned __int16)v0++];
    sub_6EB6B(v31, j | 0x2600);
  }
  for ( k = 0; k < 0x20u; ++k )
  {
    v32 = word_A1400[(unsigned __int16)v0++];
    sub_6EB6B(v32, k | 0x3400);
  }
  for ( m = 0; m < 0x20u; ++m )
  {
    v33 = word_A1400[(unsigned __int16)v0++];
    sub_6EB6B(v33, m | 0x3600);
  }
  sub_70623(1024);
  v5 = 0;
  for ( n = 0; n < 0x20u; ++n )
  {
    if ( n % 2 )
      v7 = 0x8000;
    else
      v7 = 0;
    v34 = v7 | word_A1400[(unsigned __int16)v5++];
    sub_6EB6B(v34, n | 0x2400);
  }
  for ( ii = 0; ii < 0x20u; ++ii )
  {
    if ( ii % 2 )
      v9 = 0x8000;
    else
      v9 = 0;
    v35 = word_A1400[(unsigned __int16)v5++] | v9;
    sub_6EB6B(v35, ii | 0x2600);
  }
  for ( jj = 0; jj < 0x20u; ++jj )
  {
    if ( jj % 2 )
      v11 = 0x8000;
    else
      v11 = 0;
    v36 = v11 | word_A1400[(unsigned __int16)v5++];
    sub_6EB6B(v36, jj | 0x3400);
  }
  for ( kk = 0; kk < 0x20u; ++kk )
  {
    if ( kk % 2 )
      v13 = 0x8000;
    else
      v13 = 0;
    v37 = v13 | word_A1400[(unsigned __int16)v5++];
    sub_6EB6B(v37, kk | 0x3600);
  }
  for ( mm = 0; mm < 0x14u; ++mm )
    sub_6EC37(0, mm | 0x1400);
  v15 = 0;
  for ( nn = 0; nn < 0x20u; ++nn )
  {
    if ( nn % 2 )
      v17 = 0x8000;
    else
      v17 = 0;
    v38 = v17 | word_A1500[(unsigned __int16)v15++];
    sub_6EB6B(v38, nn | 0x2400);
  }
  for ( i1 = 0; i1 < 0x20u; ++i1 )
  {
    if ( i1 % 2 )
      v19 = 0x8000;
    else
      v19 = 0;
    v39 = v19 | word_A1500[(unsigned __int16)v15++];
    sub_6EB6B(v39, i1 | 0x2600);
  }
  for ( i2 = 0; i2 < 0x20u; ++i2 )
  {
    if ( i2 % 2 )
      v21 = 0x8000;
    else
      v21 = 0;
    v40 = word_A1500[(unsigned __int16)v15++] | v21;
    sub_6EB6B(v40, i2 | 0x3400);
  }
  for ( i3 = 0; i3 < 0x20u; ++i3 )
  {
    if ( i3 % 2 )
      v23 = 0x8000;
    else
      v23 = 0;
    v41 = word_A1500[(unsigned __int16)v15++] | v23;
    sub_6EB6B(v41, i3 | 0x3600);
  }
  sub_6EC37(0, 0x1409u);
  sub_6EC37(0x83u, 0x140Au);
  sub_6EC37(0x8000u, 0x140Du);
  sub_6EC37(0, 0x140Eu);
  v24 = 0;
  for ( i4 = 0; i4 < 0x20u; ++i4 )
  {
    v42 = word_A1500[(unsigned __int16)v24++];
    sub_6EB6B(v42, i4 | 0x2400);
  }
  for ( i5 = 0; i5 < 0x20u; ++i5 )
  {
    v43 = word_A1500[(unsigned __int16)v24++];
    sub_6EB6B(v43, i5 | 0x2600);
  }
  for ( i6 = 0; i6 < 0x20u; ++i6 )
  {
    v44 = word_A1500[(unsigned __int16)v24++];
    sub_6EB6B(v44, i6 | 0x3400);
  }
  for ( i7 = 0; i7 < 0x20u; ++i7 )
  {
    v45 = word_A1500[(unsigned __int16)v24++];
    result = sub_6EB6B(v45, i7 | 0x3600);
  }
  return result;
}
// A1400: using guessed type __int16 word_A1400[128];
// A1500: using guessed type __int16 word_A1500[128];

//----- (00070BDC) --------------------------------------------------------
void sub_70BDC()
{
  unsigned __int16 v0; // si
  unsigned int v1; // kr00_4
  unsigned __int16 v2; // ax
  unsigned __int16 v3; // ax

  sub_6EB6B(0x80u, 0x541Eu);
  sub_6EC37(0xFFE0u, 0x601Eu);
  sub_6EC37(0xFFE8u, 0x701Eu);
  sub_6EC37(0, 0x101Eu);
  sub_6EC37(0, 0x1Eu);
  sub_6EC37(0xFFE3u, 0x41Eu);
  sub_6EB6B(0x80u, 0x541Fu);
  sub_6EC37(0xFFF0u, 0x601Fu);
  sub_6EC37(0xFFF8u, 0x701Fu);
  sub_6EC37(0xFFu, 0x101Fu);
  sub_6EC37(0x8000u, 0x1Fu);
  sub_6EC37(0xFFF3u, 0x41Fu);
  v0 = word_A160A + 2050;
  v1 = __readeflags();
  if ( (v1 & 0x200) != 0 )
    _disable();
  __outword(v0, 0x3Eu);
  __outword(word_A160A, 0);
  do
    v2 = __inword(v0);
  while ( (v2 & 0x1000) == 0 );
  do
    v3 = __inword(v0);
  while ( (v3 & 0x1000) != 0 );
  __outword(word_A160A + 2, 0x4828u);
  __outword(v0, 0x3Cu);
  __outword(word_A160A + 1024, 0);
  if ( (v1 & 0x200) != 0 )
    _enable();
  sub_6EC37(0xFFFFu, 0x301Eu);
  sub_6EC37(0xFFFFu, 0x301Fu);
}
// A160A: using guessed type __int16 word_A160A;

//----- (00070D22) --------------------------------------------------------
void sub_70D22()
{
  unsigned int v0; // esi
  unsigned __int16 i; // di
  unsigned __int16 j; // si

  v0 = 0x200000;
  sub_6EB6B(0x20u, 0x141Eu);
  for ( i = 0; i < 0x1Eu; ++i )
  {
    sub_6EB6B(0x80u, i | 0x5400);
    sub_6EC37(0, i | 0x3000);
    sub_6EC37(0, i | 0x2000);
    sub_6EC37(0, i | 0x6000);
    sub_6EC37(0, i | 0x7000);
    sub_6EC37(0, i | 0x1000);
    sub_6EC37(0, i);
    sub_6EC37(0, i | 0x400);
  }
  sub_6EC37(0, 0x1416u);
  sub_6EB6B(0xFFFFu, 0x141Au);
  sub_6EB6B(0xAAAAu, 0x141Au);
  sub_6EB6B(0x5555u, 0x141Au);
  sub_6EB6B(0xDDDDu, 0x141Au);
  sub_70623(2);
  sub_6EC37(0, 0x1414u);
  sub_6EBCF(0x141Au);
  if ( (unsigned __int16)sub_6EBCF(0x141Au) == 0xFFFF
    && (unsigned __int16)sub_6EBCF(0x141Au) == 0xAAAA
    && (unsigned __int16)sub_6EBCF(0x141Au) == 21845
    && (unsigned __int16)sub_6EBCF(0x141Au) == 0xDDDD )
  {
    do
    {
      if ( v0 > 0xFF8000 )
        break;
      v0 += 0x8000;
      sub_6EC37(v0, 0x1416u);
      sub_6EB6B(0x1234u, 0x141Au);
      sub_6EB6B(0x1234u, 0x141Au);
      sub_6EB6B(0x1234u, 0x141Au);
      sub_6EB6B(0x1234u, 0x141Au);
      sub_70623(2);
      sub_6EC37(0, 0x1414u);
      sub_6EBCF(0x141Au);
      if ( (unsigned __int16)sub_6EBCF(0x141Au) == 4660 )
        break;
      sub_6EC37(v0, 0x1414u);
      sub_6EBCF(0x141Au);
      if ( (unsigned __int16)sub_6EBCF(0x141Au) != 4660 )
        break;
    }
    while ( (unsigned __int16)sub_6EBCF(0x141Au) == 4660
         && (unsigned __int16)sub_6EBCF(0x141Au) == 4660
         && (unsigned __int16)sub_6EBCF(0x141Au) == 4660 );
  }
  dword_A160C = v0 - 0x200000;
  for ( j = 0; j < 0x1Eu; ++j )
    sub_6EC37(0, j | 0x400);
}
// A160C: using guessed type int dword_A160C;

//----- (00070FB0) --------------------------------------------------------
int sub_70FB0()
{
  unsigned __int16 i; // dx
  int v1; // eax

  if ( (unsigned __int16)sub_6EBCF(0x7800u) == 12 )
  {
    sub_6EB6B(0x59u, 0x141Du);
    sub_6EB6B(0x20u, 0x141Eu);
    sub_6EB6B(0, 0x141Fu);
    sub_70658();
    sub_7075E();
    sub_70806();
    if ( (unsigned __int16)word_A1608 <= 0x1Eu )
      sub_70BDC();
    sub_70D22();
    sub_6EB6B(4u, 0x141Fu);
    if ( (sub_6EBCF(0x141Eu) & 0x40) != 0 )
    {
      for ( i = 0; i < (unsigned __int16)word_A1608; ++i )
      {
        v1 = 10 * i;
        word_A18B4[v1] = -1;
        word_A18C2[v1] = 0;
      }
    }
  }
  return 0;
}
// A1608: using guessed type __int16 word_A1608;
// A18B4: using guessed type __int16 word_A18B4[];
// A18C2: using guessed type __int16 word_A18C2[];

//----- (0007104E) --------------------------------------------------------
int sub_7104E()
{
  __int16 i; // si

  for ( i = 32; i--; sub_6EB6B(0x807Fu, i | 0x5400) )
    ;
  sub_70623(128);
  sub_70BDC();
  return 0;
}

//----- (0007109B) --------------------------------------------------------
char sub_7109B(unsigned int a1, unsigned __int8 a2)
{
  int v2; // eax
  unsigned int v4; // [esp+4h] [ebp-Ch]
  unsigned int i; // [esp+8h] [ebp-8h]

  if ( a1 < 0x10 )
  {
    dword_A08F0[a1] = a2;
    LOBYTE(v2) = 4 * a1;
    dword_A0954[a1] = 1;
    for ( i = 0; i < 9; ++i )
    {
      LOBYTE(v2) = i;
      if ( byte_A0764[i] )
      {
        v2 = dword_A0808[i];
        if ( v2 == a1 )
        {
          v4 = (0x2000
              - (64 - (byte_A0704[(unsigned __int8)byte_A0776[2 * i]] & 0x3F))
              * ((2
                * (64
                 - (unsigned __int8)byte_A0A24[(int)(unsigned __int8)((dword_A0930[i] * ((a2 << 7) / 0x7Fu)) >> 7) >> 1])) & 0x3FFFFFFu)) >> 7;
          if ( !__readgsbyte(dword_A07A0 + 30 * dword_A07C8[dword_A0808[i]] + 14) )
            sub_6AB50(byte_A0775[2 * i] + 64, byte_A0704[(unsigned __int8)byte_A0775[2 * i]] & 0xC0 | v4);
          LOBYTE(v2) = sub_6AB50(byte_A0776[2 * i] + 64, byte_A0704[(unsigned __int8)byte_A0776[2 * i]] & 0xC0 | v4);
        }
      }
    }
  }
  return v2;
}
// 7123E: variable 'v2' is possibly undefined
// A07A0: using guessed type int dword_A07A0;
// A07C8: using guessed type int dword_A07C8[16];
// A0808: using guessed type int dword_A0808[9];
// A08F0: using guessed type int dword_A08F0[16];
// A0930: using guessed type int dword_A0930[9];
// A0954: using guessed type int dword_A0954[16];

//----- (00071265) --------------------------------------------------------
unsigned __int8 sub_71265(unsigned __int8 a1)
{
  unsigned int k; // [esp+0h] [ebp-Ch]
  unsigned int i; // [esp+4h] [ebp-8h]
  unsigned int j; // [esp+4h] [ebp-8h]

  for ( i = 0; i < 9; ++i )
  {
    if ( !byte_A0764[i] )
      return i;
  }
  for ( j = 0; j < 0x10; ++j )
  {
    if ( !dword_A086C[j] )
    {
      for ( k = 0; k < 9; ++k )
      {
        if ( dword_A0808[k] == j )
          return k;
      }
    }
  }
  if ( a1 >= 9u )
    a1 -= 9;
  return a1;
}
// A0808: using guessed type int dword_A0808[9];
// A086C: using guessed type int dword_A086C[16];

//----- (0007132C) --------------------------------------------------------
int sub_7132C(int a1, int a2, unsigned int a3)
{
  int result; // eax

  result = __readgsbyte(a3 + 1);
  dword_A07C8[result] = __readgsbyte(a3);
  return result * 4;
}
// A07C8: using guessed type int dword_A07C8[];

//----- (00071522) --------------------------------------------------------
char *sub_71522()
{
  void *retaddr; // [esp+0h] [ebp+0h] BYREF

  return (char *)&retaddr - dword_A0CA8;
}
// 71524: returning address of temporary local variable '%" r"'
// A0CA8: using guessed type int dword_A0CA8;

//----- (0007152B) --------------------------------------------------------
void sub_7152B()
{
  dword_A8874 = 0x8000;
}
// A8874: using guessed type int dword_A8874;

//----- (00071A34) --------------------------------------------------------
void sub_71A34()
{
    //fix word_A636C = __SS__;
}
// A636C: using guessed type __int16 word_A636C;

//----- (00072063) --------------------------------------------------------
int sub_72063()
{
  return 0;
}

//----- (000720D9) --------------------------------------------------------
void sub_720D9(int a1, const void *a2, void *a3)
{
  if ( byte_A0CC6 == 9 )
  {
    //fix __asm { int     21h; DOS - GET DISK TRANSFER AREA ADDRESS }
    qmemcpy(a3, a2, 0x2Bu);
  }
}
// A0CC6: using guessed type char byte_A0CC6;

//SYNCHRONIZED WITH REMC1
int sub_724C0_729D0(uint16_t inX, uint16_t inY)
{
    uint8_t point1;
    uint8_t point2;
    int finalComp;
    int result;

    uaxis_2d tempAxis;
    uaxis_2d tempInX;
    uaxis_2d tempInY;
    tempInX.word = inX;
    tempInY.word = inY;
    tempAxis._axis_2d.x = tempInX._axis_2d.y;
    tempAxis._axis_2d.y = tempInY._axis_2d.y;

    if ((tempInX._axis_2d.y + tempInY._axis_2d.y) & 1)
    {
        //if ( __CFADD__((_BYTE)inY, (_BYTE)inX) )
        if (tempInY._axis_2d.x > (tempInY._axis_2d.x + tempInX._axis_2d.x) % 256)
        {
            tempAxis._axis_2d.y++;
            point1 = mapHeightmap_DC1E0_DC1D0[tempAxis.word];
            tempAxis._axis_2d.x++;
            point2 = mapHeightmap_DC1E0_DC1D0[tempAxis.word];
            tempInY._axis_2d.x = 255 - tempInY._axis_2d.x;
            tempAxis._axis_2d.y--;
            finalComp = tempInY._axis_2d.x * (mapHeightmap_DC1E0_DC1D0[tempAxis.word] - point2) + tempInX._axis_2d.x * (point2 - point1);
        }
        else
        {
            point1 = mapHeightmap_DC1E0_DC1D0[tempAxis.word];
            tempAxis._axis_2d.x++;
            point2 = mapHeightmap_DC1E0_DC1D0[tempAxis.word];
            tempAxis._axis_2d.x--;
            tempAxis._axis_2d.y++;
            finalComp = tempInY._axis_2d.x * (mapHeightmap_DC1E0_DC1D0[tempAxis.word] - point1) + tempInX._axis_2d.x * (point2 - point1);
        }
        return (finalComp >> 3) + 32 * point1;
    }
    else
    {
        if (tempInX._axis_2d.x <= tempInY._axis_2d.x)
        {
            point1 = mapHeightmap_DC1E0_DC1D0[tempAxis.word];
            tempAxis._axis_2d.y++;
            point2 = mapHeightmap_DC1E0_DC1D0[tempAxis.word];
            tempAxis._axis_2d.x++;
            finalComp = tempInY._axis_2d.x * (point2 - point1) + tempInX._axis_2d.x * (mapHeightmap_DC1E0_DC1D0[tempAxis.word] - point2);
        }
        else
        {
            point1 = mapHeightmap_DC1E0_DC1D0[tempAxis.word];
            tempAxis._axis_2d.x++;
            point2 = mapHeightmap_DC1E0_DC1D0[tempAxis.word];
            tempAxis._axis_2d.y++;
            finalComp = tempInY._axis_2d.x * (mapHeightmap_DC1E0_DC1D0[tempAxis.word] - point2) + tempInX._axis_2d.x * (point2 - point1);
        }
        return (finalComp >> 3) + 32 * point1;
    }
}

//----- (00072AD8) --------------------------------------------------------
void sub_72AD8(__int16 a1, unsigned __int16 a2, __int16 a3)
{
  int v3; // ebx
  __int16 v4; // cx
  char v6; // [esp+1h] [ebp-3h]
  char v7; // [esp+1h] [ebp-3h]
  char v8; // [esp+2h] [ebp-2h]
  char v9; // [esp+2h] [ebp-2h]
  char v10; // [esp+3h] [ebp-1h]
  int savedregs; // [esp+4h] [ebp+0h] BYREF

  mapEntityIndex_10C1E0_10C1D0[a2] = a3;
  v10 = 7;
  do
  {
    v3 = a2;
    v4 = (unsigned __int8)(1 << v10);
    v6 = 1 << (7 - v10);
    do
    {
      v8 = 1 << (7 - v10);
      do
      {
        sub_72652_72B62(v4, v3, (int)&savedregs, a1);
        --v8;
      }
      while ( v8 );
      BYTE1(v3) += v4 + v4;
      --v6;
    }
    while ( v6 );
    v7 = 1 << (7 - v10);
    do
    {
      v9 = 1 << (7 - v10);
      do
      {
        sub_726E7_72BF7(v4, v3, (int)&savedregs, a1);
        --v9;
      }
      while ( v9 );
      BYTE1(v3) += v4 + v4;
      --v7;
    }
    while ( v7 );
  }
  while ( v10-- >= 1 );
}
// 10C1D0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7961];

//----- (00072B62) --------------------------------------------------------
__int16 sub_72652_72B62(__int16 a1, int a2, int a3, __int16 a4)
{
  __int16 v4; // di
  __int16 v5; // di
  __int16 v6; // di
  __int16 v7; // di
  __int16 v8; // di
  __int16 result; // ax

  v4 = mapEntityIndex_10C1E0_10C1D0[a2];
  LOBYTE(a2) = a1 + a1 + a2;
  v5 = mapEntityIndex_10C1E0_10C1D0[a2] + v4;
  BYTE1(a2) += a1 + a1;
  v6 = mapEntityIndex_10C1E0_10C1D0[a2] + v5;
  LOBYTE(a2) = a2 - a1 - a1;
  v7 = mapEntityIndex_10C1E0_10C1D0[a2] + v6;
  LOBYTE(a2) = a1 + a2;
  BYTE1(a2) -= a1;
  v8 = (unsigned __int16)(9377 * a4 + 9439) % (unsigned __int16)(2 * *(_WORD *)(a3 + 20) + 1)
     + (unsigned __int16)(9377 * a4 + 9439) % (unsigned __int16)((a1 << 6) + 1)
     + (v7 >> 2)
     - 32 * a1
     - *(_WORD *)(a3 + 20);
  result = v8;
  if ( !mapEntityIndex_10C1E0_10C1D0[a2] )
    mapEntityIndex_10C1E0_10C1D0[a2] = v8;
  return result;
}
// 10C1D0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7961];

//----- (00072BF7) --------------------------------------------------------
__int16 sub_726E7_72BF7(__int16 a1, int a2, int a3, __int16 a4)
{
  __int16 v4; // di
  __int16 v5; // di
  unsigned __int16 v6; // si
  __int16 v7; // ax
  __int16 v8; // di
  __int16 v9; // di
  __int16 v10; // di
  __int16 v11; // di
  __int16 result; // ax
  __int16 v13; // [esp-2h] [ebp-2h]

  v13 = mapEntityIndex_10C1E0_10C1D0[a2];
  LOBYTE(a2) = a1 + a2;
  BYTE1(a2) -= a1;
  v4 = mapEntityIndex_10C1E0_10C1D0[a2] + v13;
  LOBYTE(a2) = a1 + a2;
  BYTE1(a2) += a1;
  v5 = mapEntityIndex_10C1E0_10C1D0[a2] + v4;
  LOBYTE(a2) = a2 - a1;
  BYTE1(a2) += a1;
  v6 = 9377 * a4 + 9439;
  v7 = v6 % (unsigned __int16)(2 * *(_WORD *)(a3 + 20) + 1)
     + v6 % (unsigned __int16)((a1 << 6) + 1)
     + ((__int16)(mapEntityIndex_10C1E0_10C1D0[a2] + v5) >> 2)
     - 32 * a1
     - *(_WORD *)(a3 + 20);
  v8 = mapEntityIndex_10C1E0_10C1D0[a2];
  BYTE1(a2) -= a1;
  if ( !mapEntityIndex_10C1E0_10C1D0[a2] )
    mapEntityIndex_10C1E0_10C1D0[a2] = v7;
  LOBYTE(a2) = a2 - a1 - a1;
  BYTE1(a2) += a1;
  v9 = mapEntityIndex_10C1E0_10C1D0[a2] + v13 + v8;
  LOBYTE(a2) = a1 + a2;
  BYTE1(a2) += a1;
  v10 = mapEntityIndex_10C1E0_10C1D0[a2] + v9;
  BYTE1(a2) -= a1;
  v11 = (unsigned __int16)(9377 * v6 + 9439) % (unsigned __int16)(2 * *(_WORD *)(a3 + 20) + 1)
      + (unsigned __int16)(9377 * v6 + 9439) % (unsigned __int16)((a1 << 6) + 1)
      + (v10 >> 2)
      - 32 * a1
      - *(_WORD *)(a3 + 20);
  result = v11;
  if ( !mapEntityIndex_10C1E0_10C1D0[a2] )
    mapEntityIndex_10C1E0_10C1D0[a2] = v11;
  return result;
}
// 10C1D0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7961];

//----- (00072D17) --------------------------------------------------------
char sub_72807_72D17(unsigned __int8 *a1, _BYTE *a2)
{
  unsigned __int8 *v2; // edi
  unsigned int v3; // ebx
  unsigned int v4; // ecx
  unsigned int v5; // edx
  int v6; // eax
  unsigned __int8 *v7; // esi
  unsigned int v8; // ebx
  unsigned int v9; // ecx
  unsigned int v10; // edx
  unsigned __int8 *v11; // esi
  __int16 v12; // di
  char result; // al
  char v14; // [esp+6h] [ebp-Ah]
  char v15; // [esp+7h] [ebp-9h]
  char v16; // [esp+8h] [ebp-8h]
  char v17; // [esp+8h] [ebp-8h]
  char v18; // [esp+9h] [ebp-7h]
  __int16 v19; // [esp+Ah] [ebp-6h]
  int *v20; // [esp+Ch] [ebp-4h]

  v18 = 0;
  v20 = (int*)&dword_9334C;
  do
  {
    v2 = (unsigned __int8 *)*v20;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v15 = 32;
    do
    {
      v16 = 32;
      do
      {
        v7 = &a1[3 * *v2];
        LOBYTE(v6) = *v7++;
        v3 += v6;
        LOBYTE(v6) = *v7;
        v4 += v6;
        LOBYTE(v6) = v7[1];
        v5 += v6;
        ++v2;
        --v16;
      }
      while ( v16 );
      v2 += 224;
      --v15;
    }
    while ( v15 );
    v8 = v3 >> 10;
    v9 = v4 >> 10;
    v10 = v5 >> 10;
    v19 = 0x7FFF;
    v14 = 0;
    v11 = a1;
    v17 = 0;
    do
    {
      v12 = (v11[2] - (_WORD)v10) * (v11[2] - (_WORD)v10);
      if ( (__int16)(v12 + (v11[1] - (_WORD)v9) * (v11[1] - (_WORD)v9) + (*v11 - (_WORD)v8) * (*v11 - (_WORD)v8)) < v19 )
      {
        v19 = v12 + (v11[1] - (_WORD)v9) * (v11[1] - (_WORD)v9) + (*v11 - (_WORD)v8) * (*v11 - (_WORD)v8);
        v14 = v17;
      }
      v11 += 3;
      ++v17;
    }
    while ( v17 );
    result = v14;
    *a2 = v14;
    a2[128] = v14;
    ++a2;
    ++v20;
    --v18;
  }
  while ( v18 );
  return result;
}
// 9334C: using guessed type int dword_9334C;

int compare_index_729A7 = 0;
int compare_index_245FFB = 0;
int compare_index_24674B = 0;
int compare_index_24629B = 0;

//SYNCHRONIZED WITH REMC2
void DrawTriangle_729A3_72EB3(_DWORD *a1, _DWORD *a2, _DWORD *a3)//2439A3_ // draw textured triangle
{
  int32* v3; // esi
  int32* v4; // edi
  int32* v5; // ecx
  int32 v6; // eax
  int32 v7; // ebx
  int32 v8; // edx
  int v9; // eax
  int v10; // ebx
  int v11; // ebx
  int v12; // ebx
  int v13; // eax
  int v14; // ebx
  _BOOL1 v15; // zf
  char v16; // cc
  int v17; // ebx
  int v18; // ebx
  int v19; // eax
  int v20; // ebx
  int v21; // ecx
  int v22; // edx
  int v23; // esi
  int v24; // ebx
  _DWORD *v25; // edi
  int v26; // edi
  _BOOL1 v27; // of
  int v28; // edi
  unsigned int v29; // eax
  int v30; // eax
  int v31; // ebx
  _BOOL1 v32; // zf
  int v33; // ebx
  int v34; // ebx
  int v35; // eax
  int v36; // ebx
  int v37; // ecx
  int v38; // edx
  int v39; // ebx
  _DWORD *v40; // edi
  int v41; // edi
  int v42; // edi
  int v43; // eax
  int v44; // ebx
  _BOOL1 v45; // zf
  int v46; // ebx
  int v47; // eax
  int v48; // ebx
  int v49; // esi
  int v50; // ebx
  _DWORD *v51; // edi
  int v52; // edi
  int v53; // edi
  int v54; // eax
  int v55; // ebx
  int v56; // ebx
  _DWORD *v57; // edi
  int v58; // edi
  int v59; // edi
  int v60; // eax
  int v61; // ebx
  int v62; // ebx
  int v63; // ebx
  int v64; // eax
  int v65; // ebx
  _BOOL1 v66; // zf
  int v67; // ebx
  int v68; // ebx
  int v69; // eax
  int v70; // ebx
  int v71; // ecx
  int v72; // edx
  int v73; // esi
  int v74; // eax
  _DWORD *v75; // edi
  int v76; // edi
  int v77; // edi
  int v78; // eax
  int v79; // ebx
  _BOOL1 v80; // zf
  int v81; // ebx
  int v82; // ebx
  int v83; // eax
  int v84; // ebx
  int v85; // ecx
  int v86; // edx
  int v87; // eax
  _DWORD *v88; // edi
  int v89; // edi
  int v90; // edi
  int v91; // eax
  int v92; // ebx
  _BOOL1 v93; // zf
  int v94; // ebx
  int v95; // eax
  int v96; // ebx
  int v97; // esi
  int v98; // eax
  _DWORD *v99; // edi
  int v100; // edi
  int v101; // edi
  int v102; // eax
  int v103; // ebx
  int v104; // eax
  _DWORD *v105; // edi
  int v106; // edi
  int v107; // edi
  int v108; // eax
  int v109; // ebx
  int v110; // ebx
  int v111; // eax
  int v112; // ebx
  int v113; // ecx
  int v114; // edx
  int v115; // esi
  int v116; // edi
  _DWORD *v117; // edi
  int v118; // ebx
  int v119; // eax
  int v120; // ebx
  int v121; // ecx
  int v122; // edx
  int v123; // edi
  _DWORD *v124; // edi
  int v125; // eax
  int v126; // ebx
  int v127; // esi
  int v128; // edi
  _DWORD *v129; // edi
  int v130; // eax
  int v131; // ebx
  int v132; // edi
  _DWORD *v133; // edi
  int v134; // eax
  int v135; // ebx
  int v136; // ebx
  int v137; // eax
  int v138; // ebx
  int v139; // ecx
  int v140; // edx
  int v141; // esi
  int v142; // edi
  _DWORD *v143; // edi
  int v144; // ebx
  int v145; // eax
  int v146; // ebx
  int v147; // ecx
  int v148; // edx
  int v149; // edi
  _DWORD *v150; // edi
  int v151; // eax
  int v152; // ebx
  int v153; // esi
  int v154; // edi
  _DWORD *v155; // edi
  int v156; // eax
  int v157; // ebx
  int v158; // edi
  _DWORD *v159; // edi
  unsigned __int16 *v160; // esi
  char *v161; // edx
  char v162; // al
  int v163; // ebx
  signed int v164; // ecx
  char *v165; // edi
  _WORD *i; // esi
  int v167; // ecx
  _BYTE *v168; // edi
  unsigned int v169; // eax
  __int16 v170; // bx
  _BOOL1 v171; // cf
  __int16 v172; // bx
  __int16 v173; // bx
  char v174; // ah
  __int16 v175; // cx
  __int16 v176; // bx
  char v177; // ah
  __int16 v178; // cx
  __int16 v179; // bx
  char v180; // ah
  __int16 v181; // cx
  __int16 v182; // bx
  char v183; // ah
  __int16 v184; // cx
  __int16 v185; // bx
  char v186; // ah
  __int16 v187; // cx
  __int16 v188; // bx
  char v189; // ah
  __int16 v190; // cx
  __int16 v191; // bx
  char v192; // ah
  __int16 v193; // cx
  __int16 v194; // bx
  char v195; // ah
  __int16 v196; // cx
  __int16 v197; // bx
  char v198; // ah
  __int16 v199; // cx
  __int16 v200; // bx
  char v201; // ah
  __int16 v202; // cx
  __int16 v203; // bx
  char v204; // ah
  __int16 v205; // cx
  __int16 v206; // bx
  char v207; // ah
  __int16 v208; // cx
  __int16 v209; // bx
  char v210; // ah
  __int16 v211; // cx
  __int16 v212; // bx
  char v213; // ah
  __int16 v214; // cx
  __int16 v215; // bx
  char v216; // ah
  __int16 v217; // cx
  unsigned __int16 *v218; // esi
  int v219; // eax
  int v220; // ebx
  int v221; // ecx
  _BYTE *v222; // edi
  int v223; // eax
  unsigned int v224; // eax
  int v225; // edx
  unsigned int v226; // eax
  int v227; // esi
  char v228; // al
  int v229; // edx
  __int16 v230; // cx
  char v231; // al
  int v232; // edx
  __int16 v233; // cx
  char v234; // al
  int v235; // edx
  __int16 v236; // cx
  char v237; // al
  int v238; // edx
  __int16 v239; // cx
  char v240; // al
  int v241; // edx
  __int16 v242; // cx
  char v243; // al
  int v244; // edx
  __int16 v245; // cx
  char v246; // al
  int v247; // edx
  __int16 v248; // cx
  char v249; // al
  int v250; // edx
  __int16 v251; // cx
  char v252; // al
  int v253; // edx
  __int16 v254; // cx
  char v255; // al
  int v256; // edx
  __int16 v257; // cx
  char v258; // al
  int v259; // edx
  __int16 v260; // cx
  char v261; // al
  int v262; // edx
  __int16 v263; // cx
  char v264; // al
  int v265; // edx
  __int16 v266; // cx
  char v267; // al
  int v268; // edx
  __int16 v269; // cx
  char v270; // al
  int v271; // edx
  __int16 v272; // cx
  char v273; // al
  unsigned __int16 *v274; // esi
  int v275; // eax
  int v276; // ebx
  int v277; // ecx
  _BYTE *v278; // edi
  int v279; // eax
  unsigned int v280; // eax
  int v281; // edx
  unsigned int v282; // eax
  int v283; // esi
  char v284; // al
  int v285; // edx
  __int16 v286; // cx
  char v287; // al
  int v288; // edx
  __int16 v289; // cx
  char v290; // al
  int v291; // edx
  __int16 v292; // cx
  char v293; // al
  int v294; // edx
  __int16 v295; // cx
  char v296; // al
  int v297; // edx
  __int16 v298; // cx
  char v299; // al
  int v300; // edx
  __int16 v301; // cx
  char v302; // al
  int v303; // edx
  __int16 v304; // cx
  char v305; // al
  int v306; // edx
  __int16 v307; // cx
  char v308; // al
  int v309; // edx
  __int16 v310; // cx
  char v311; // al
  int v312; // edx
  __int16 v313; // cx
  char v314; // al
  int v315; // edx
  __int16 v316; // cx
  char v317; // al
  int v318; // edx
  __int16 v319; // cx
  char v320; // al
  int v321; // edx
  __int16 v322; // cx
  char v323; // al
  int v324; // edx
  __int16 v325; // cx
  char v326; // al
  int v327; // edx
  __int16 v328; // cx
  char v329; // al
  _WORD *j; // esi
  int v331; // ecx
  _BYTE *v332; // edi
  unsigned int v333; // eax
  __int16 v334; // bx
  __int16 v335; // bx
  __int16 v336; // bx
  __int16 v337; // cx
  __int16 v338; // bx
  __int16 v339; // cx
  __int16 v340; // bx
  __int16 v341; // cx
  __int16 v342; // bx
  __int16 v343; // cx
  __int16 v344; // bx
  __int16 v345; // cx
  __int16 v346; // bx
  __int16 v347; // cx
  __int16 v348; // bx
  __int16 v349; // cx
  __int16 v350; // bx
  __int16 v351; // cx
  __int16 v352; // bx
  __int16 v353; // cx
  __int16 v354; // bx
  __int16 v355; // cx
  __int16 v356; // bx
  __int16 v357; // cx
  __int16 v358; // bx
  __int16 v359; // cx
  __int16 v360; // bx
  __int16 v361; // cx
  __int16 v362; // bx
  __int16 v363; // cx
  __int16 v364; // bx
  __int16 v365; // cx
  unsigned int v366; // eax
  int v367; // ebx
  char *v368; // esi
  int v369; // ecx
  uint8* v370; // edi
  int v371; // ecx
  int v372; // edx
  int v373; // ecx
  __int16 v374; // cx
  __int16 v375; // bp
  _BYTE *v376; // edi
  int v377; // ebp
  unsigned int v378; // eax
  int v379; // ebx
  char *v380; // esi
  int v381; // ecx
  uint8* v382; // edi
  int v383; // ecx
  int v384; // edx
  int v385; // ecx
  __int16 v386; // cx
  __int16 v387; // bp
  _BYTE *v388; // edi
  int v389; // ebp
  unsigned __int16 *v390; // esi
  int v391; // eax
  int v392; // ebx
  int v393; // ecx
  _BYTE *v394; // edi
  int v395; // eax
  unsigned int v396; // eax
  int v397; // edx
  unsigned int v398; // eax
  int v399; // esi
  int v400; // edx
  __int16 v401; // cx
  int v402; // edx
  __int16 v403; // cx
  int v404; // edx
  __int16 v405; // cx
  int v406; // edx
  __int16 v407; // cx
  int v408; // edx
  __int16 v409; // cx
  int v410; // edx
  __int16 v411; // cx
  int v412; // edx
  __int16 v413; // cx
  int v414; // edx
  __int16 v415; // cx
  int v416; // edx
  __int16 v417; // cx
  int v418; // edx
  __int16 v419; // cx
  int v420; // edx
  __int16 v421; // cx
  int v422; // edx
  __int16 v423; // cx
  int v424; // edx
  __int16 v425; // cx
  int v426; // edx
  __int16 v427; // cx
  int v428; // edx
  __int16 v429; // cx
  unsigned __int16 *v430; // esi
  int v431; // eax
  int v432; // ebx
  int v433; // ecx
  _BYTE *v434; // edi
  int v435; // eax
  unsigned int v436; // eax
  int v437; // edx
  unsigned int v438; // eax
  int v439; // esi
  int v440; // edx
  __int16 v441; // cx
  int v442; // edx
  __int16 v443; // cx
  int v444; // edx
  __int16 v445; // cx
  int v446; // edx
  __int16 v447; // cx
  int v448; // edx
  __int16 v449; // cx
  int v450; // edx
  __int16 v451; // cx
  int v452; // edx
  __int16 v453; // cx
  int v454; // edx
  __int16 v455; // cx
  int v456; // edx
  __int16 v457; // cx
  int v458; // edx
  __int16 v459; // cx
  int v460; // edx
  __int16 v461; // cx
  int v462; // edx
  __int16 v463; // cx
  int v464; // edx
  __int16 v465; // cx
  int v466; // edx
  __int16 v467; // cx
  int v468; // edx
  __int16 v469; // cx
  unsigned __int16 *v470; // esi
  int v471; // eax
  int v472; // ebx
  int v473; // ecx
  _BYTE *v474; // edi
  int v475; // eax
  unsigned int v476; // eax
  int v477; // edx
  unsigned int v478; // eax
  int v479; // esi
  int v480; // edx
  __int16 v481; // cx
  int v482; // edx
  __int16 v483; // cx
  int v484; // edx
  __int16 v485; // cx
  int v486; // edx
  __int16 v487; // cx
  int v488; // edx
  __int16 v489; // cx
  int v490; // edx
  __int16 v491; // cx
  int v492; // edx
  __int16 v493; // cx
  int v494; // edx
  __int16 v495; // cx
  int v496; // edx
  __int16 v497; // cx
  int v498; // edx
  __int16 v499; // cx
  int v500; // edx
  __int16 v501; // cx
  int v502; // edx
  __int16 v503; // cx
  int v504; // edx
  __int16 v505; // cx
  int v506; // edx
  __int16 v507; // cx
  int v508; // edx
  __int16 v509; // cx
  unsigned __int16 *v510; // esi
  int v511; // eax
  int v512; // ebx
  int v513; // ecx
  _BYTE *v514; // edi
  int v515; // eax
  unsigned int v516; // eax
  int v517; // edx
  unsigned int v518; // eax
  int v519; // esi
  int v520; // edx
  __int16 v521; // cx
  int v522; // edx
  __int16 v523; // cx
  int v524; // edx
  __int16 v525; // cx
  int v526; // edx
  __int16 v527; // cx
  int v528; // edx
  __int16 v529; // cx
  int v530; // edx
  __int16 v531; // cx
  int v532; // edx
  __int16 v533; // cx
  int v534; // edx
  __int16 v535; // cx
  int v536; // edx
  __int16 v537; // cx
  int v538; // edx
  __int16 v539; // cx
  int v540; // edx
  __int16 v541; // cx
  int v542; // edx
  __int16 v543; // cx
  int v544; // edx
  __int16 v545; // cx
  int v546; // edx
  __int16 v547; // cx
  int v548; // edx
  __int16 v549; // cx
  unsigned __int16 *v550; // esi
  int v551; // eax
  int v552; // ebx
  int v553; // ecx
  _BYTE *v554; // edi
  int v555; // eax
  unsigned int v556; // eax
  int v557; // edx
  unsigned int v558; // eax
  int v559; // esi
  int v560; // edx
  __int16 v561; // cx
  int v562; // edx
  __int16 v563; // cx
  int v564; // edx
  __int16 v565; // cx
  int v566; // edx
  __int16 v567; // cx
  int v568; // edx
  __int16 v569; // cx
  int v570; // edx
  __int16 v571; // cx
  int v572; // edx
  __int16 v573; // cx
  int v574; // edx
  __int16 v575; // cx
  int v576; // edx
  __int16 v577; // cx
  int v578; // edx
  __int16 v579; // cx
  int v580; // edx
  __int16 v581; // cx
  int v582; // edx
  __int16 v583; // cx
  int v584; // edx
  __int16 v585; // cx
  int v586; // edx
  __int16 v587; // cx
  int v588; // edx
  __int16 v589; // cx
  unsigned __int16 *v590; // esi
  _BYTE *v591; // edx
  int v592; // eax
  int v593; // ebx
  int v594; // ecx
  _BYTE *k; // edi
  __int16 v596; // cx
  __int16 v597; // cx
  __int16 v598; // cx
  __int16 v599; // cx
  __int16 v600; // cx
  __int16 v601; // cx
  __int16 v602; // cx
  __int16 v603; // cx
  __int16 v604; // cx
  __int16 v605; // cx
  __int16 v606; // cx
  __int16 v607; // cx
  __int16 v608; // cx
  __int16 v609; // cx
  __int16 v610; // cx
  unsigned __int16 *v611; // esi
  _BYTE *v612; // edx
  int v613; // eax
  int v614; // ebx
  int v615; // ecx
  _BYTE *m; // edi
  __int16 v617; // cx
  __int16 v618; // cx
  __int16 v619; // cx
  __int16 v620; // cx
  __int16 v621; // cx
  __int16 v622; // cx
  __int16 v623; // cx
  __int16 v624; // cx
  __int16 v625; // cx
  __int16 v626; // cx
  __int16 v627; // cx
  __int16 v628; // cx
  __int16 v629; // cx
  __int16 v630; // cx
  __int16 v631; // cx
  unsigned __int16 *v632; // esi
  int v633; // edx
  int v634; // ecx
  _BYTE *v635; // edi
  unsigned int v636; // eax
  __int16 v637; // bx
  unsigned __int16 v638; // bx
  __int16 v639; // bx
  __int16 v640; // cx
  __int16 v641; // bx
  __int16 v642; // cx
  __int16 v643; // bx
  __int16 v644; // cx
  __int16 v645; // bx
  __int16 v646; // cx
  __int16 v647; // bx
  __int16 v648; // cx
  __int16 v649; // bx
  __int16 v650; // cx
  __int16 v651; // bx
  __int16 v652; // cx
  __int16 v653; // bx
  __int16 v654; // cx
  __int16 v655; // bx
  __int16 v656; // cx
  __int16 v657; // bx
  __int16 v658; // cx
  __int16 v659; // bx
  __int16 v660; // cx
  __int16 v661; // bx
  __int16 v662; // cx
  __int16 v663; // bx
  __int16 v664; // cx
  __int16 v665; // bx
  __int16 v666; // cx
  __int16 v667; // bx
  __int16 v668; // cx
  unsigned __int16 *v669; // esi
  int v670; // edx
  int v671; // ecx
  _BYTE *v672; // edi
  unsigned int v673; // eax
  __int16 v674; // bx
  unsigned __int16 v675; // bx
  __int16 v676; // bx
  __int16 v677; // cx
  __int16 v678; // bx
  __int16 v679; // cx
  __int16 v680; // bx
  __int16 v681; // cx
  __int16 v682; // bx
  __int16 v683; // cx
  __int16 v684; // bx
  __int16 v685; // cx
  __int16 v686; // bx
  __int16 v687; // cx
  __int16 v688; // bx
  __int16 v689; // cx
  __int16 v690; // bx
  __int16 v691; // cx
  __int16 v692; // bx
  __int16 v693; // cx
  __int16 v694; // bx
  __int16 v695; // cx
  __int16 v696; // bx
  __int16 v697; // cx
  __int16 v698; // bx
  __int16 v699; // cx
  __int16 v700; // bx
  __int16 v701; // cx
  __int16 v702; // bx
  __int16 v703; // cx
  __int16 v704; // bx
  __int16 v705; // cx
  unsigned __int16 *v706; // esi
  int v707; // eax
  int v708; // ebx
  int v709; // ecx
  _BYTE *v710; // edi
  int v711; // eax
  unsigned int v712; // eax
  int v713; // edx
  unsigned int v714; // eax
  int v715; // esi
  int v716; // edx
  __int16 v717; // cx
  int v718; // edx
  __int16 v719; // cx
  int v720; // edx
  __int16 v721; // cx
  int v722; // edx
  __int16 v723; // cx
  int v724; // edx
  __int16 v725; // cx
  int v726; // edx
  __int16 v727; // cx
  int v728; // edx
  __int16 v729; // cx
  int v730; // edx
  __int16 v731; // cx
  int v732; // edx
  __int16 v733; // cx
  int v734; // edx
  __int16 v735; // cx
  int v736; // edx
  __int16 v737; // cx
  int v738; // edx
  __int16 v739; // cx
  int v740; // edx
  __int16 v741; // cx
  int v742; // edx
  __int16 v743; // cx
  int v744; // edx
  __int16 v745; // cx
  unsigned __int16 *v746; // esi
  int v747; // eax
  int v748; // ebx
  int v749; // ecx
  _BYTE *v750; // edi
  int v751; // eax
  unsigned int v752; // eax
  int v753; // edx
  unsigned int v754; // eax
  int v755; // esi
  int v756; // edx
  __int16 v757; // cx
  int v758; // edx
  __int16 v759; // cx
  int v760; // edx
  __int16 v761; // cx
  int v762; // edx
  __int16 v763; // cx
  int v764; // edx
  __int16 v765; // cx
  int v766; // edx
  __int16 v767; // cx
  int v768; // edx
  __int16 v769; // cx
  int v770; // edx
  __int16 v771; // cx
  int v772; // edx
  __int16 v773; // cx
  int v774; // edx
  __int16 v775; // cx
  int v776; // edx
  __int16 v777; // cx
  int v778; // edx
  __int16 v779; // cx
  int v780; // edx
  __int16 v781; // cx
  int v782; // edx
  __int16 v783; // cx
  int v784; // edx
  __int16 v785; // cx
  unsigned __int16 *v786; // esi
  unsigned int v787; // eax
  int v788; // ebx
  int v789; // ecx
  _BYTE *v790; // edi
  int v791; // ecx
  int v792; // edx
  int v793; // ecx
  int v794; // esi
  int v795; // edx
  int v796; // ecx
  int v797; // edx
  int v798; // ecx
  int v799; // edx
  int v800; // ecx
  int v801; // edx
  int v802; // ecx
  int v803; // edx
  int v804; // ecx
  int v805; // edx
  int v806; // ecx
  int v807; // edx
  int v808; // ecx
  int v809; // edx
  int v810; // ecx
  int v811; // edx
  int v812; // ecx
  int v813; // edx
  int v814; // ecx
  int v815; // edx
  int v816; // ecx
  int v817; // edx
  int v818; // ecx
  int v819; // edx
  int v820; // ecx
  int v821; // edx
  int v822; // ecx
  int v823; // edx
  int v824; // ecx
  unsigned __int16 *v825; // esi
  unsigned int v826; // eax
  int v827; // ebx
  int v828; // ecx
  _BYTE *v829; // edi
  int v830; // ecx
  int v831; // edx
  int v832; // ecx
  int v833; // esi
  int v834; // edx
  int v835; // ecx
  int v836; // edx
  int v837; // ecx
  int v838; // edx
  int v839; // ecx
  int v840; // edx
  int v841; // ecx
  int v842; // edx
  int v843; // ecx
  int v844; // edx
  int v845; // ecx
  int v846; // edx
  int v847; // ecx
  int v848; // edx
  int v849; // ecx
  int v850; // edx
  int v851; // ecx
  int v852; // edx
  int v853; // ecx
  int v854; // edx
  int v855; // ecx
  int v856; // edx
  int v857; // ecx
  int v858; // edx
  int v859; // ecx
  int v860; // edx
  int v861; // ecx
  int v862; // edx
  int v863; // ecx
  unsigned __int16 *v864; // esi
  int v865; // eax
  int v866; // ebx
  int v867; // ecx
  _BYTE *v868; // edi
  int v869; // eax
  unsigned int v870; // eax
  int v871; // edx
  unsigned int v872; // eax
  int v873; // esi
  int v874; // edx
  __int16 v875; // cx
  int v876; // edx
  __int16 v877; // cx
  int v878; // edx
  __int16 v879; // cx
  int v880; // edx
  __int16 v881; // cx
  int v882; // edx
  __int16 v883; // cx
  int v884; // edx
  __int16 v885; // cx
  int v886; // edx
  __int16 v887; // cx
  int v888; // edx
  __int16 v889; // cx
  int v890; // edx
  __int16 v891; // cx
  int v892; // edx
  __int16 v893; // cx
  int v894; // edx
  __int16 v895; // cx
  int v896; // edx
  __int16 v897; // cx
  int v898; // edx
  __int16 v899; // cx
  int v900; // edx
  __int16 v901; // cx
  int v902; // edx
  __int16 v903; // cx
  unsigned __int16 *v904; // esi
  int v905; // eax
  int v906; // ebx
  int v907; // ecx
  _BYTE *v908; // edi
  int v909; // eax
  unsigned int v910; // eax
  int v911; // edx
  unsigned int v912; // eax
  int v913; // esi
  int v914; // edx
  __int16 v915; // cx
  int v916; // edx
  __int16 v917; // cx
  int v918; // edx
  __int16 v919; // cx
  int v920; // edx
  __int16 v921; // cx
  int v922; // edx
  __int16 v923; // cx
  int v924; // edx
  __int16 v925; // cx
  int v926; // edx
  __int16 v927; // cx
  int v928; // edx
  __int16 v929; // cx
  int v930; // edx
  __int16 v931; // cx
  int v932; // edx
  __int16 v933; // cx
  int v934; // edx
  __int16 v935; // cx
  int v936; // edx
  __int16 v937; // cx
  int v938; // edx
  __int16 v939; // cx
  int v940; // edx
  __int16 v941; // cx
  int v942; // edx
  __int16 v943; // cx
  unsigned __int16 *v944; // esi
  unsigned int v945; // eax
  int v946; // ebx
  int v947; // ecx
  _BYTE *v948; // edi
  int v949; // ecx
  int v950; // edx
  int v951; // ecx
  int v952; // esi
  int v953; // edx
  int v954; // ecx
  int v955; // edx
  int v956; // ecx
  int v957; // edx
  int v958; // ecx
  int v959; // edx
  int v960; // ecx
  int v961; // edx
  int v962; // ecx
  int v963; // edx
  int v964; // ecx
  int v965; // edx
  int v966; // ecx
  int v967; // edx
  int v968; // ecx
  int v969; // edx
  int v970; // ecx
  int v971; // edx
  int v972; // ecx
  int v973; // edx
  int v974; // ecx
  int v975; // edx
  int v976; // ecx
  int v977; // edx
  int v978; // ecx
  int v979; // edx
  int v980; // ecx
  int v981; // edx
  int v982; // ecx
  unsigned __int16 *v983; // esi
  unsigned int v984; // eax
  int v985; // ebx
  int v986; // ecx
  _BYTE *v987; // edi
  int v988; // ecx
  int v989; // edx
  int v990; // ecx
  int v991; // esi
  int v992; // edx
  int v993; // ecx
  int v994; // edx
  int v995; // ecx
  int v996; // edx
  int v997; // ecx
  int v998; // edx
  int v999; // ecx
  int v1000; // edx
  int v1001; // ecx
  int v1002; // edx
  int v1003; // ecx
  int v1004; // edx
  int v1005; // ecx
  int v1006; // edx
  int v1007; // ecx
  int v1008; // edx
  int v1009; // ecx
  int v1010; // edx
  int v1011; // ecx
  int v1012; // edx
  int v1013; // ecx
  int v1014; // edx
  int v1015; // ecx
  int v1016; // edx
  int v1017; // ecx
  int v1018; // edx
  int v1019; // ecx
  int v1020; // edx
  int v1021; // ecx
  unsigned __int16 *v1022; // esi
  unsigned int v1023; // eax
  int v1024; // ebx
  int v1025; // ecx
  char *v1026; // edi
  int v1027; // ecx
  int v1028; // edx
  int v1029; // ecx
  int v1030; // esi
  char v1031; // al
  int v1032; // edx
  int v1033; // ecx
  char v1034; // al
  int v1035; // edx
  int v1036; // ecx
  char v1037; // al
  int v1038; // edx
  int v1039; // ecx
  char v1040; // al
  int v1041; // edx
  int v1042; // ecx
  char v1043; // al
  int v1044; // edx
  int v1045; // ecx
  char v1046; // al
  int v1047; // edx
  int v1048; // ecx
  char v1049; // al
  int v1050; // edx
  int v1051; // ecx
  char v1052; // al
  int v1053; // edx
  int v1054; // ecx
  char v1055; // al
  int v1056; // edx
  int v1057; // ecx
  char v1058; // al
  int v1059; // edx
  int v1060; // ecx
  char v1061; // al
  int v1062; // edx
  int v1063; // ecx
  char v1064; // al
  int v1065; // edx
  int v1066; // ecx
  char v1067; // al
  int v1068; // edx
  int v1069; // ecx
  char v1070; // al
  int v1071; // edx
  int v1072; // ecx
  char v1073; // al
  int v1074; // edx
  int v1075; // ecx
  char v1076; // al
  uint8* v1077; // [esp+0h] [ebp-88h]
  int v1078; // [esp+4h] [ebp-84h]
  int v1079; // [esp+4h] [ebp-84h]
  int v1080; // [esp+4h] [ebp-84h]
  int v1081; // [esp+4h] [ebp-84h]
  int v1082; // [esp+8h] [ebp-80h]
  int v1083; // [esp+8h] [ebp-80h]
  int v1084; // [esp+8h] [ebp-80h]
  int v1085; // [esp+8h] [ebp-80h]
  int v1086; // [esp+Ch] [ebp-7Ch]
  int v1087; // [esp+Ch] [ebp-7Ch]
  int v1088; // [esp+10h] [ebp-78h]
  int v1089; // [esp+10h] [ebp-78h]
  int v1090; // [esp+10h] [ebp-78h]
  int v1091; // [esp+10h] [ebp-78h]
  int v1092; // [esp+14h] [ebp-74h]
  int v1093; // [esp+14h] [ebp-74h]
  int v1094; // [esp+18h] [ebp-70h]
  int v1095; // [esp+18h] [ebp-70h]
  int v1096; // [esp+1Ch] [ebp-6Ch]
  int v1097; // [esp+1Ch] [ebp-6Ch]
  int v1098; // [esp+20h] [ebp-68h]
  int v1099; // [esp+24h] [ebp-64h]
  int v1100; // [esp+28h] [ebp-60h]
  int v1101; // [esp+28h] [ebp-60h]
  int v1102; // [esp+28h] [ebp-60h]
  int v1103; // [esp+28h] [ebp-60h]
  int v1104; // [esp+28h] [ebp-60h]
  int v1105; // [esp+28h] [ebp-60h]
  int v1106; // [esp+28h] [ebp-60h]
  int v1107; // [esp+28h] [ebp-60h]
  int v1108; // [esp+2Ch] [ebp-5Ch]
  int v1109; // [esp+2Ch] [ebp-5Ch]
  int v1110; // [esp+30h] [ebp-58h]
  int v1111; // [esp+34h] [ebp-54h]
  int v1112; // [esp+34h] [ebp-54h]
  int v1113; // [esp+34h] [ebp-54h]
  int v1114; // [esp+34h] [ebp-54h]
  int v1115; // [esp+34h] [ebp-54h]
  int v1116; // [esp+34h] [ebp-54h]
  int v1117; // [esp+34h] [ebp-54h]
  int v1118; // [esp+34h] [ebp-54h]
  int v1119; // [esp+38h] [ebp-50h]
  int v1120; // [esp+38h] [ebp-50h]
  int v1121; // [esp+3Ch] [ebp-4Ch]
  int v1122; // [esp+40h] [ebp-48h]
  int v1123; // [esp+40h] [ebp-48h]
  int v1124; // [esp+40h] [ebp-48h]
  int v1125; // [esp+40h] [ebp-48h]
  int v1126; // [esp+40h] [ebp-48h]
  int v1127; // [esp+40h] [ebp-48h]
  int v1128; // [esp+40h] [ebp-48h]
  int v1129; // [esp+40h] [ebp-48h]
  int v1130; // [esp+44h] [ebp-44h]
  int v1131; // [esp+44h] [ebp-44h]
  int v1132; // [esp+48h] [ebp-40h]
  int v1133; // [esp+48h] [ebp-40h]
  int v1134; // [esp+48h] [ebp-40h]
  int v1135; // [esp+48h] [ebp-40h]
  int v1136; // [esp+48h] [ebp-40h]
  int v1137; // [esp+48h] [ebp-40h]
  int v1138; // [esp+48h] [ebp-40h]
  int v1139; // [esp+48h] [ebp-40h]
  int v1140; // [esp+48h] [ebp-40h]
  int v1141; // [esp+48h] [ebp-40h]
  int v1142; // [esp+48h] [ebp-40h]
  int v1143; // [esp+48h] [ebp-40h]
  int v1144; // [esp+48h] [ebp-40h]
  int v1145; // [esp+48h] [ebp-40h]
  int v1146; // [esp+48h] [ebp-40h]
  int v1147; // [esp+48h] [ebp-40h]
  int v1148; // [esp+4Ch] [ebp-3Ch]
  int v1149; // [esp+4Ch] [ebp-3Ch]
  int v1150; // [esp+4Ch] [ebp-3Ch]
  int v1151; // [esp+4Ch] [ebp-3Ch]
  int v1152; // [esp+4Ch] [ebp-3Ch]
  int v1153; // [esp+4Ch] [ebp-3Ch]
  int v1154; // [esp+4Ch] [ebp-3Ch]
  int v1155; // [esp+4Ch] [ebp-3Ch]
  int v1156; // [esp+4Ch] [ebp-3Ch]
  int v1157; // [esp+4Ch] [ebp-3Ch]
  int v1158; // [esp+4Ch] [ebp-3Ch]
  int v1159; // [esp+4Ch] [ebp-3Ch]
  int v1160; // [esp+4Ch] [ebp-3Ch]
  int v1161; // [esp+4Ch] [ebp-3Ch]
  int v1162; // [esp+4Ch] [ebp-3Ch]
  int v1163; // [esp+4Ch] [ebp-3Ch]
  int v1164; // [esp+4Ch] [ebp-3Ch]
  int v1165; // [esp+4Ch] [ebp-3Ch]
  int v1166; // [esp+50h] [ebp-38h]
  int v1167; // [esp+50h] [ebp-38h]
  int v1168; // [esp+50h] [ebp-38h]
  int v1169; // [esp+50h] [ebp-38h]
  int v1170; // [esp+50h] [ebp-38h]
  int v1171; // [esp+50h] [ebp-38h]
  int v1172; // [esp+50h] [ebp-38h]
  int v1173; // [esp+54h] [ebp-34h]
  int v1174; // [esp+54h] [ebp-34h]
  int v1175; // [esp+54h] [ebp-34h]
  int v1176; // [esp+54h] [ebp-34h]
  int v1177; // [esp+58h] [ebp-30h]
  int v1178; // [esp+58h] [ebp-30h]
  int v1179; // [esp+58h] [ebp-30h]
  int v1180; // [esp+58h] [ebp-30h]
  int v1181; // [esp+58h] [ebp-30h]
  int v1182; // [esp+58h] [ebp-30h]
  int v1183; // [esp+58h] [ebp-30h]
  int v1184; // [esp+58h] [ebp-30h]
  int v1185; // [esp+58h] [ebp-30h]
  int v1186; // [esp+58h] [ebp-30h]
  int v1187; // [esp+58h] [ebp-30h]
  int v1188; // [esp+58h] [ebp-30h]
  int v1189; // [esp+58h] [ebp-30h]
  int v1190; // [esp+58h] [ebp-30h]
  int v1191; // [esp+58h] [ebp-30h]
  int v1192; // [esp+58h] [ebp-30h]
  int v1193; // [esp+58h] [ebp-30h]
  int v1194; // [esp+58h] [ebp-30h]
  int v1195; // [esp+58h] [ebp-30h]
  int v1196; // [esp+58h] [ebp-30h]
  int v1197; // [esp+58h] [ebp-30h]
  int v1198; // [esp+58h] [ebp-30h]
  int v1199; // [esp+58h] [ebp-30h]
  int v1200; // [esp+58h] [ebp-30h]
  int v1201; // [esp+58h] [ebp-30h]
  int v1202; // [esp+58h] [ebp-30h]
  int v1203; // [esp+58h] [ebp-30h]
  int v1204; // [esp+58h] [ebp-30h]
  int v1205; // [esp+58h] [ebp-30h]
  int v1206; // [esp+58h] [ebp-30h]
  int v1207; // [esp+58h] [ebp-30h]
  int v1208; // [esp+58h] [ebp-30h]
  int v1209; // [esp+58h] [ebp-30h]
  int v1210; // [esp+58h] [ebp-30h]
  int v1211; // [esp+58h] [ebp-30h]
  int v1212; // [esp+58h] [ebp-30h]
  int v1213; // [esp+58h] [ebp-30h]
  int v1214; // [esp+58h] [ebp-30h]
  int v1215; // [esp+58h] [ebp-30h]
  int v1216; // [esp+58h] [ebp-30h]
  int v1217; // [esp+58h] [ebp-30h]
  int v1218; // [esp+58h] [ebp-30h]
  int v1219; // [esp+58h] [ebp-30h]
  int v1220; // [esp+58h] [ebp-30h]
  int v1221; // [esp+58h] [ebp-30h]
  int v1222; // [esp+58h] [ebp-30h]
  int v1223; // [esp+58h] [ebp-30h]
  int v1224; // [esp+58h] [ebp-30h]
  int v1225; // [esp+58h] [ebp-30h]
  int v1226; // [esp+58h] [ebp-30h]
  int v1227; // [esp+58h] [ebp-30h]
  int v1228; // [esp+58h] [ebp-30h]
  int v1229; // [esp+58h] [ebp-30h]
  int v1230; // [esp+58h] [ebp-30h]
  int v1231; // [esp+58h] [ebp-30h]
  int v1232; // [esp+58h] [ebp-30h]
  int v1233; // [esp+58h] [ebp-30h]
  int v1234; // [esp+58h] [ebp-30h]
  int v1235; // [esp+58h] [ebp-30h]
  int v1236; // [esp+58h] [ebp-30h]
  int v1237; // [esp+58h] [ebp-30h]
  int v1238; // [esp+58h] [ebp-30h]
  int v1239; // [esp+58h] [ebp-30h]
  int v1240; // [esp+58h] [ebp-30h]
  int v1241; // [esp+58h] [ebp-30h]
  int v1242; // [esp+58h] [ebp-30h]
  int v1243; // [esp+58h] [ebp-30h]
  int v1244; // [esp+58h] [ebp-30h]
  int v1245; // [esp+58h] [ebp-30h]
  int v1246; // [esp+58h] [ebp-30h]
  int v1247; // [esp+58h] [ebp-30h]
  int v1248; // [esp+58h] [ebp-30h]
  int v1249; // [esp+58h] [ebp-30h]
  int v1250; // [esp+58h] [ebp-30h]
  int v1251; // [esp+58h] [ebp-30h]
  int v1252; // [esp+58h] [ebp-30h]
  int v1253; // [esp+58h] [ebp-30h]
  int v1254; // [esp+58h] [ebp-30h]
  int v1255; // [esp+58h] [ebp-30h]
  int v1256; // [esp+58h] [ebp-30h]
  unsigned __int16 *v1257; // [esp+5Ch] [ebp-2Ch]
  unsigned __int16 *v1258; // [esp+5Ch] [ebp-2Ch]
  char *v1259; // [esp+5Ch] [ebp-2Ch]
  char *v1260; // [esp+5Ch] [ebp-2Ch]
  unsigned __int16 *v1261; // [esp+5Ch] [ebp-2Ch]
  unsigned __int16 *v1262; // [esp+5Ch] [ebp-2Ch]
  unsigned __int16 *v1263; // [esp+5Ch] [ebp-2Ch]
  unsigned __int16 *v1264; // [esp+5Ch] [ebp-2Ch]
  unsigned __int16 *v1265; // [esp+5Ch] [ebp-2Ch]
  unsigned __int16 *v1266; // [esp+5Ch] [ebp-2Ch]
  unsigned __int16 *v1267; // [esp+5Ch] [ebp-2Ch]
  unsigned __int16 *v1268; // [esp+5Ch] [ebp-2Ch]
  unsigned __int16 *v1269; // [esp+5Ch] [ebp-2Ch]
  unsigned __int16 *v1270; // [esp+5Ch] [ebp-2Ch]
  unsigned __int16 *v1271; // [esp+5Ch] [ebp-2Ch]
  unsigned __int16 *v1272; // [esp+5Ch] [ebp-2Ch]
  unsigned __int16 *v1273; // [esp+5Ch] [ebp-2Ch]
  unsigned __int16 *v1274; // [esp+5Ch] [ebp-2Ch]
  char v1275; // [esp+62h] [ebp-26h]
  char v1276; // [esp+62h] [ebp-26h]
  char v1277; // [esp+62h] [ebp-26h]
  char v1278; // [esp+62h] [ebp-26h]
  char v1279; // [esp+63h] [ebp-25h]
  char v1280; // [esp+63h] [ebp-25h]
  _BOOL1 v1281; // [esp+63h] [ebp-25h]
  _BOOL1 v1282; // [esp+63h] [ebp-25h]
  _BOOL1 v1283; // [esp+64h] [ebp-24h]
  _BOOL1 v1284; // [esp+64h] [ebp-24h]

//  adress 2439A3_
//debug
#ifdef debug1
  /*if (compare_index_729A7 == 0x240c)
  {
      compare_index_729A7++;
      compare_index_729A7--;
  }
  //add_compare(0x2439A7, true, true);
  add_compare(0x2439A7, true, true, -1, false, 1000000, 0x2400);
  uint8 origbyte20;
  uint8 remakebyte20;
  int comp20 = compare_with_sequence("002439C2-FFFFFFF4", (uint8_t*)&a1[1], 0x28A1E0, compare_index_729A7, 0x4, 0x4, &origbyte20, &remakebyte20, 0, 0);
  compare_index_729A7++;*/
#endif debug1
  //debug

  //fix
  v16 = 0;
  v27 = 0;
  v1022 = 0;
  v1099 = 0;
  v1110 = 0;
  //fix

  v3 = (int32*)a1;
  v4 = (int32*)a2;
  v5 = (int32*)a3;
  v6 = a1[1];
  v7 = a2[1];
  v8 = a3[1];
  if ( v6 == v7 )
  {
    if ( v6 == v8 )
      return;
    if ( v6 >= v8 )
    {
      if ( *(int32*)a1 <= *(int32*)a2 )
        return;
      v3 = (int32*)a3;
      v4 = (int32*)a1;
      v5 = (int32*)a2;
      goto LABEL_225;
    }
    if ( *(int32*)a2 <= *(int32*)a1 )
      return;
    goto LABEL_268;
  }
  if ( v6 <= v7 )
  {
    if ( v6 != v8 )
    {
      if ( v6 >= v8 )
      {
        v3 = (int32*)a3;
        v4 = (int32*)a1;
        v5 = (int32*)a2;
LABEL_24:
        v9 = v3[1];
        v1173 = v9;
        if ( v9 >= 0 )
        {
          if ( v9 >= heightViewPort_93ADC )
            return;
          v1077 = beginPrevLineFrame_93AC8 + pitchViewPort_93AD4 * v9;
          v1275 = 0;
        }
        else
        {
          v1077 = beginPrevLineFrame_93AC8;
          v1275 = 1;
        }
        v10 = v5[1];
        v1283 = v10 > heightViewPort_93ADC;
        v1088 = v10 - v9;
        v1098 = v10 - v9;
        v11 = v4[1];
        v1279 = v11 > heightViewPort_93ADC;
        v12 = v11 - v9;
        v1092 = v12;
        v1078 = ((*v5 - *v3) << 16) / v1088;
        if ( ((*v4 - *v3) << 16) / v12 > v1078 )
        {
          v1082 = ((*v4 - *v3) << 16) / v12;
          v1086 = ((*v5 - *v4) << 16) / (v5[1] - v4[1]);
          v1094 = v5[1] - v4[1];
          v1096 = *v4 << 16;
          switch ( byte_967E1 )
          {
            case 0:
            case 14:
            case 15:
              v54 = *v3 << 16;
              v55 = v54;
              if ( !v1275 )
              {
                if ( v1283 )
                {
                  v58 = heightViewPort_93ADC - v1173;
                  v1098 = heightViewPort_93ADC - v1173;
                  if ( v1279 )
                  {
                    v1092 = heightViewPort_93ADC - v1173;
                  }
                  else
                  {
                    v27 = __OFSUB__(v58, v1092);
                    v59 = v58 - v1092;
                    v1279 = (v59 < 0) ^ v27 | (v59 == 0);
                    v1094 = v59;
                  }
                }
                goto LABEL_116;
              }
              v16 = v1098 <= -v1173;
              v1098 += v1173;
              if ( !v16 )
              {
                v1138 = -v1173;
                if ( -v1173 - v1092 >= 0 )
                {
                  v1094 -= v1138 - v1092;
                  v1139 = v1138 - v1092;
                  v54 += v1078 * v1139 + v1092 * v1078;
                  v56 = v1086 * v1139 + v1096;
                  if ( v1283 )
                  {
                    v1094 = heightViewPort_93ADC;
                    v1098 = heightViewPort_93ADC;
                  }
                  v57 = (uint32*)&unk_93AE0;
LABEL_119:
                  if ( v1279 )
                  {
                    v29 = (unsigned __int8)byte_967E1;
                    switch ( byte_967E1 )
                    {
                      case 0:
                        goto LABEL_309;
                      case 1:
                        goto LABEL_322;
                      case 2:
                        goto LABEL_351;
                      case 3:
                        goto LABEL_382;
                      case 4:
                        goto LABEL_445;
                      case 5:
                        goto LABEL_474;
                      case 6:
                        goto LABEL_503;
                      case 7:
                      case 11:
                        goto LABEL_564;
                      case 8:
                        goto LABEL_595;
                      case 9:
                      case 10:
                        goto LABEL_658;
                      case 12:
                        goto LABEL_721;
                      case 13:
                        goto LABEL_752;
                      case 14:
                        goto LABEL_783;
                      case 15:
                        goto LABEL_812;
                      case 16:
                        goto LABEL_841;
                      case 17:
                        goto LABEL_870;
                      case 18:
                        goto LABEL_899;
                      case 19:
                        goto LABEL_930;
                      case 20:
                        goto LABEL_961;
                      case 21:
                        goto LABEL_992;
                      case 22:
                        goto LABEL_1023;
                      case 23:
                        goto LABEL_1086;
                      case 24:
                        goto LABEL_1149;
                      case 25:
                        goto LABEL_1212;
                      case 26:
                        goto LABEL_1275;
                    }
                  }
                  do
                  {
                    *v57 = v54;
                    v54 += v1078;
                    v57[1] = v56;
                    v56 += v1086;
                    v57 += 5;
                    --v1094;
                  }
                  while ( v1094 );
                  v29 = (unsigned __int8)byte_967E1;
                  switch ( byte_967E1 )
                  {
                    case 0:
                      goto LABEL_309;
                    case 1:
                      goto LABEL_322;
                    case 2:
                      goto LABEL_351;
                    case 3:
                      goto LABEL_382;
                    case 4:
                      goto LABEL_445;
                    case 5:
                      goto LABEL_474;
                    case 6:
                      goto LABEL_503;
                    case 7:
                    case 11:
                      goto LABEL_564;
                    case 8:
                      goto LABEL_595;
                    case 9:
                    case 10:
                      goto LABEL_658;
                    case 12:
                      goto LABEL_721;
                    case 13:
                      goto LABEL_752;
                    case 14:
                      goto LABEL_783;
                    case 15:
                      goto LABEL_812;
                    case 16:
                      goto LABEL_841;
                    case 17:
                      goto LABEL_870;
                    case 18:
                      goto LABEL_899;
                    case 19:
                      goto LABEL_930;
                    case 20:
                      goto LABEL_961;
                    case 21:
                      goto LABEL_992;
                    case 22:
                      goto LABEL_1023;
                    case 23:
                      goto LABEL_1086;
                    case 24:
                      goto LABEL_1149;
                    case 25:
                      goto LABEL_1212;
                    case 26:
                      goto LABEL_1275;
                  }
                }
                v1092 += v1173;
                v54 += v1078 * v1138;
                v55 += v1138 * v1082;
                if ( v1283 )
                {
                  v1098 = heightViewPort_93ADC;
                  if ( v1279 )
                  {
                    v1092 = heightViewPort_93ADC;
                  }
                  else
                  {
                    v1279 = heightViewPort_93ADC <= v1092;
                    v1094 = heightViewPort_93ADC - v1092;
                  }
                }
LABEL_116:
                v57 = (uint32*)&unk_93AE0;
                do
                {
                  *v57 = v54;
                  v54 += v1078;
                  v57[1] = v55;
                  v55 += v1082;
                  v57 += 5;
                  --v1092;
                }
                while ( v1092 );
                v56 = v1096;
                goto LABEL_119;
              }
              return;
            case 1:
            case 4:
            case 16:
            case 17:
              v43 = v12 * (__int64)(*v3 - *v5) / v1088;
              v44 = *v4 - *v3;
              v45 = v43 + v44 == 0;
              v16 = (v43 + v44 < 0) ^ __OFADD__(v43, v44);
              v46 = v43 + v44;
              if ( v16 )
                return;
              if ( !v45 )
                v1121 = (int)(v4[4] + v1092 * (__int64)(v3[4] - v5[4]) / v1088 - v3[4]) / (v46 + 1);
              v1123 = (v5[4] - v3[4]) / v1088;
              v47 = *v3 << 16;
              v48 = v47;
              v49 = v3[4];
              if ( !v1275 )
              {
                if ( v1283 )
                {
                  v52 = heightViewPort_93ADC - v1173;
                  v1098 = heightViewPort_93ADC - v1173;
                  if ( v1279 )
                  {
                    v1092 = heightViewPort_93ADC - v1173;
                  }
                  else
                  {
                    v27 = __OFSUB__(v52, v1092);
                    v53 = v52 - v1092;
                    v1279 = (v53 < 0) ^ v27 | (v53 == 0);
                    v1094 = v53;
                  }
                }
                goto LABEL_95;
              }
              v16 = v1098 <= -v1173;
              v1098 += v1173;
              if ( !v16 )
              {
                v1136 = -v1173;
                if ( -v1173 - v1092 >= 0 )
                {
                  v1094 -= v1136 - v1092;
                  v1137 = v1136 - v1092;
                  v47 += v1078 * v1137 + v1092 * v1078;
                  v50 = v1086 * v1137 + v1096;
                  v49 += v1137 * v1123 + v1092 * v1123;
                  if ( v1283 )
                  {
                    v1094 = heightViewPort_93ADC;
                    v1098 = heightViewPort_93ADC;
                  }
                  v51 = (uint32*)&unk_93AE0;
LABEL_98:
                  if ( v1279 )
                  {
                    v29 = (unsigned __int8)byte_967E1;
                    switch ( byte_967E1 )
                    {
                      case 0:
                        goto LABEL_309;
                      case 1:
                        goto LABEL_322;
                      case 2:
                        goto LABEL_351;
                      case 3:
                        goto LABEL_382;
                      case 4:
                        goto LABEL_445;
                      case 5:
                        goto LABEL_474;
                      case 6:
                        goto LABEL_503;
                      case 7:
                      case 11:
                        goto LABEL_564;
                      case 8:
                        goto LABEL_595;
                      case 9:
                      case 10:
                        goto LABEL_658;
                      case 12:
                        goto LABEL_721;
                      case 13:
                        goto LABEL_752;
                      case 14:
                        goto LABEL_783;
                      case 15:
                        goto LABEL_812;
                      case 16:
                        goto LABEL_841;
                      case 17:
                        goto LABEL_870;
                      case 18:
                        goto LABEL_899;
                      case 19:
                        goto LABEL_930;
                      case 20:
                        goto LABEL_961;
                      case 21:
                        goto LABEL_992;
                      case 22:
                        goto LABEL_1023;
                      case 23:
                        goto LABEL_1086;
                      case 24:
                        goto LABEL_1149;
                      case 25:
                        goto LABEL_1212;
                      case 26:
                        goto LABEL_1275;
                    }
                  }
                  do
                  {
                    *v51 = v47;
                    v47 += v1078;
                    v51[1] = v50;
                    v50 += v1086;
                    v51[4] = v49;
                    v49 += v1123;
                    v51 += 5;
                    --v1094;
                  }
                  while ( v1094 );
                  v29 = (unsigned __int8)byte_967E1;
                  switch ( byte_967E1 )
                  {
                    case 0:
                      goto LABEL_309;
                    case 1:
                      goto LABEL_322;
                    case 2:
                      goto LABEL_351;
                    case 3:
                      goto LABEL_382;
                    case 4:
                      goto LABEL_445;
                    case 5:
                      goto LABEL_474;
                    case 6:
                      goto LABEL_503;
                    case 7:
                    case 11:
                      goto LABEL_564;
                    case 8:
                      goto LABEL_595;
                    case 9:
                    case 10:
                      goto LABEL_658;
                    case 12:
                      goto LABEL_721;
                    case 13:
                      goto LABEL_752;
                    case 14:
                      goto LABEL_783;
                    case 15:
                      goto LABEL_812;
                    case 16:
                      goto LABEL_841;
                    case 17:
                      goto LABEL_870;
                    case 18:
                      goto LABEL_899;
                    case 19:
                      goto LABEL_930;
                    case 20:
                      goto LABEL_961;
                    case 21:
                      goto LABEL_992;
                    case 22:
                      goto LABEL_1023;
                    case 23:
                      goto LABEL_1086;
                    case 24:
                      goto LABEL_1149;
                    case 25:
                      goto LABEL_1212;
                    case 26:
                      goto LABEL_1275;
                  }
                }
                v1092 += v1173;
                v47 += v1078 * v1136;
                v48 += v1136 * v1082;
                v49 += v1136 * v1123;
                if ( v1283 )
                {
                  v1098 = heightViewPort_93ADC;
                  if ( v1279 )
                  {
                    v1092 = heightViewPort_93ADC;
                  }
                  else
                  {
                    v1279 = heightViewPort_93ADC <= v1092;
                    v1094 = heightViewPort_93ADC - v1092;
                  }
                }
LABEL_95:
                v51 = (uint32*)&unk_93AE0;
                do
                {
                  *v51 = v47;
                  v47 += v1078;
                  v51[1] = v48;
                  v48 += v1082;
                  v51[4] = v49;
                  v49 += v1123;
                  v51 += 5;
                  --v1092;
                }
                while ( v1092 );
                v50 = v1096;
                goto LABEL_98;
              }
              return;
            case 2:
            case 3:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 18:
            case 19:
            case 22:
            case 23:
              v30 = v12 * (__int64)(*v3 - *v5) / v1088;
              v31 = *v4 - *v3;
              v32 = v30 + v31 == 0;
              v16 = (v30 + v31 < 0) ^ __OFADD__(v30, v31);
              v33 = v30 + v31;
              if ( v16 )
                return;
              if ( !v32 )
              {
                v34 = v33 + 1;
                v1099 = (int)(v4[2] + v1092 * (__int64)(v3[2] - v5[2]) / v1088 - v3[2]) / v34;
                v1110 = (int)(v4[3] + v1092 * (__int64)(v3[3] - v5[3]) / v1088 - v3[3]) / v34;
              }
              v1101 = (v5[2] - v3[2]) / v1088;
              v1112 = (v5[3] - v3[3]) / v1088;
              v35 = *v3 << 16;
              v36 = v35;
              v37 = v3[2];
              v38 = v3[3];
              if ( !v1275 )
              {
                if ( v1283 )
                {
                  v41 = heightViewPort_93ADC - v1173;
                  v1098 = heightViewPort_93ADC - v1173;
                  if ( v1279 )
                  {
                    v1092 = heightViewPort_93ADC - v1173;
                  }
                  else
                  {
                    v27 = __OFSUB__(v41, v1092);
                    v42 = v41 - v1092;
                    v1279 = (v42 < 0) ^ v27 | (v42 == 0);
                    v1094 = v42;
                  }
                }
                goto LABEL_71;
              }
              v16 = v1098 <= -v1173;
              v1098 += v1173;
              if ( !v16 )
              {
                v1134 = -v1173;
                if ( -v1173 - v1092 >= 0 )
                {
                  v1094 -= v1134 - v1092;
                  v1135 = v1134 - v1092;
                  v35 += v1078 * v1135 + v1092 * v1078;
                  v39 = v1086 * v1135 + v1096;
                  v37 += v1135 * v1101 + v1092 * v1101;
                  v38 += v1135 * v1112 + v1092 * v1112;
                  if ( v1283 )
                  {
                    v1094 = heightViewPort_93ADC;
                    v1098 = heightViewPort_93ADC;
                  }
                  v40 = (uint32*)&unk_93AE0;
LABEL_74:
                  if ( v1279 )
                  {
                    v29 = (unsigned __int8)byte_967E1;
                    switch ( byte_967E1 )
                    {
                      case 0:
                        goto LABEL_309;
                      case 1:
                        goto LABEL_322;
                      case 2:
                        goto LABEL_351;
                      case 3:
                        goto LABEL_382;
                      case 4:
                        goto LABEL_445;
                      case 5:
                        goto LABEL_474;
                      case 6:
                        goto LABEL_503;
                      case 7:
                      case 11:
                        goto LABEL_564;
                      case 8:
                        goto LABEL_595;
                      case 9:
                      case 10:
                        goto LABEL_658;
                      case 12:
                        goto LABEL_721;
                      case 13:
                        goto LABEL_752;
                      case 14:
                        goto LABEL_783;
                      case 15:
                        goto LABEL_812;
                      case 16:
                        goto LABEL_841;
                      case 17:
                        goto LABEL_870;
                      case 18:
                        goto LABEL_899;
                      case 19:
                        goto LABEL_930;
                      case 20:
                        goto LABEL_961;
                      case 21:
                        goto LABEL_992;
                      case 22:
                        goto LABEL_1023;
                      case 23:
                        goto LABEL_1086;
                      case 24:
                        goto LABEL_1149;
                      case 25:
                        goto LABEL_1212;
                      case 26:
                        goto LABEL_1275;
                    }
                  }
                  do
                  {
                    *v40 = v35;
                    v35 += v1078;
                    v40[1] = v39;
                    v39 += v1086;
                    v40[2] = v37;
                    v37 += v1101;
                    v40[3] = v38;
                    v38 += v1112;
                    v40 += 5;
                    --v1094;
                  }
                  while ( v1094 );
                  v29 = (unsigned __int8)byte_967E1;
                  switch ( byte_967E1 )
                  {
                    case 0:
                      goto LABEL_309;
                    case 1:
                      goto LABEL_322;
                    case 2:
                      goto LABEL_351;
                    case 3:
                      goto LABEL_382;
                    case 4:
                      goto LABEL_445;
                    case 5:
                      goto LABEL_474;
                    case 6:
                      goto LABEL_503;
                    case 7:
                    case 11:
                      goto LABEL_564;
                    case 8:
                      goto LABEL_595;
                    case 9:
                    case 10:
                      goto LABEL_658;
                    case 12:
                      goto LABEL_721;
                    case 13:
                      goto LABEL_752;
                    case 14:
                      goto LABEL_783;
                    case 15:
                      goto LABEL_812;
                    case 16:
                      goto LABEL_841;
                    case 17:
                      goto LABEL_870;
                    case 18:
                      goto LABEL_899;
                    case 19:
                      goto LABEL_930;
                    case 20:
                      goto LABEL_961;
                    case 21:
                      goto LABEL_992;
                    case 22:
                      goto LABEL_1023;
                    case 23:
                      goto LABEL_1086;
                    case 24:
                      goto LABEL_1149;
                    case 25:
                      goto LABEL_1212;
                    case 26:
                      goto LABEL_1275;
                  }
                }
                v1092 += v1173;
                v35 += v1078 * v1134;
                v36 += v1134 * v1082;
                v37 += v1134 * v1101;
                v38 += v1134 * v1112;
                if ( v1283 )
                {
                  v1098 = heightViewPort_93ADC;
                  if ( v1279 )
                  {
                    v1092 = heightViewPort_93ADC;
                  }
                  else
                  {
                    v1279 = heightViewPort_93ADC <= v1092;
                    v1094 = heightViewPort_93ADC - v1092;
                  }
                }
LABEL_71:
                v40 = (uint32*)&unk_93AE0;
                do
                {
                  *v40 = v35;
                  v35 += v1078;
                  v40[1] = v36;
                  v36 += v1082;
                  v40[2] = v37;
                  v37 += v1101;
                  v40[3] = v38;
                  v38 += v1112;
                  v40 += 5;
                  --v1092;
                }
                while ( v1092 );
                v39 = v1096;
                goto LABEL_74;
              }
              return;
            case 5:
            case 6:
            case 20:
            case 21:
            case 24:
            case 25:
            case 26:
              v13 = v12 * (__int64)(*v3 - *v5) / v1088;
              v14 = *v4 - *v3;
              v15 = v13 + v14 == 0;
              v16 = (v13 + v14 < 0) ^ __OFADD__(v13, v14);
              v17 = v13 + v14;
              if ( v16 )
                return;
              if ( !v15 )
              {
                v18 = v17 + 1;
                v1099 = (int)(v4[2] + v1092 * (__int64)(v3[2] - v5[2]) / v1088 - v3[2]) / v18;
                v1110 = (int)(v4[3] + v1092 * (__int64)(v3[3] - v5[3]) / v1088 - v3[3]) / v18;
                v1121 = (int)(v4[4] + v1092 * (__int64)(v3[4] - v5[4]) / v1088 - v3[4]) / v18;
              }
              v1100 = (v5[2] - v3[2]) / v1088;
              v1111 = (v5[3] - v3[3]) / v1088;
              v1122 = (v5[4] - v3[4]) / v1088;
              v19 = *v3 << 16;
              v20 = v19;
              v21 = v3[2];
              v22 = v3[3];
              v23 = v3[4];
              if ( !v1275 )
              {
                if ( v1283 )
                {
                  v26 = heightViewPort_93ADC - v1173;
                  v1098 = heightViewPort_93ADC - v1173;
                  if ( v1279 )
                  {
                    v1092 = heightViewPort_93ADC - v1173;
                  }
                  else
                  {
                    v27 = __OFSUB__(v26, v1092);
                    v28 = v26 - v1092;
                    v1279 = (v28 < 0) ^ v27 | (v28 == 0);
                    v1094 = v28;
                  }
                }
                goto LABEL_47;
              }
              v16 = v1098 <= -v1173;
              v1098 += v1173;
              if ( !v16 )
              {
                v1132 = -v1173;
                if ( -v1173 - v1092 >= 0 )
                {
                  v1094 -= v1132 - v1092;
                  v1133 = v1132 - v1092;
                  v19 += v1078 * v1133 + v1092 * v1078;
                  v24 = v1086 * v1133 + v1096;
                  v21 += v1133 * v1100 + v1092 * v1100;
                  v22 += v1133 * v1111 + v1092 * v1111;
                  v23 += v1133 * v1122 + v1092 * v1122;
                  if ( v1283 )
                  {
                    v1094 = heightViewPort_93ADC;
                    v1098 = heightViewPort_93ADC;
                  }
                  v25 = (uint32*)&unk_93AE0;
LABEL_50:
                  if ( v1279 )
                  {
                    v29 = (unsigned __int8)byte_967E1;
                    switch ( byte_967E1 )
                    {
                      case 0:
                        goto LABEL_309;
                      case 1:
                        goto LABEL_322;
                      case 2:
                        goto LABEL_351;
                      case 3:
                        goto LABEL_382;
                      case 4:
                        goto LABEL_445;
                      case 5:
                        goto LABEL_474;
                      case 6:
                        goto LABEL_503;
                      case 7:
                      case 11:
                        goto LABEL_564;
                      case 8:
                        goto LABEL_595;
                      case 9:
                      case 10:
                        goto LABEL_658;
                      case 12:
                        goto LABEL_721;
                      case 13:
                        goto LABEL_752;
                      case 14:
                        goto LABEL_783;
                      case 15:
                        goto LABEL_812;
                      case 16:
                        goto LABEL_841;
                      case 17:
                        goto LABEL_870;
                      case 18:
                        goto LABEL_899;
                      case 19:
                        goto LABEL_930;
                      case 20:
                        goto LABEL_961;
                      case 21:
                        goto LABEL_992;
                      case 22:
                        goto LABEL_1023;
                      case 23:
                        goto LABEL_1086;
                      case 24:
                        goto LABEL_1149;
                      case 25:
                        goto LABEL_1212;
                      case 26:
                        goto LABEL_1275;
                    }
                  }
                  do
                  {
                    *v25 = v19;
                    v19 += v1078;
                    v25[1] = v24;
                    v24 += v1086;
                    v25[2] = v21;
                    v21 += v1100;
                    v25[3] = v22;
                    v22 += v1111;
                    v25[4] = v23;
                    v23 += v1122;
                    v25 += 5;
                    --v1094;
                  }
                  while ( v1094 );
                  v29 = (unsigned __int8)byte_967E1;
                  switch ( byte_967E1 )
                  {
                    case 0:
                      goto LABEL_309;
                    case 1:
                      goto LABEL_322;
                    case 2:
                      goto LABEL_351;
                    case 3:
                      goto LABEL_382;
                    case 4:
                      goto LABEL_445;
                    case 5:
                      goto LABEL_474;
                    case 6:
                      goto LABEL_503;
                    case 7:
                    case 11:
                      goto LABEL_564;
                    case 8:
                      goto LABEL_595;
                    case 9:
                    case 10:
                      goto LABEL_658;
                    case 12:
                      goto LABEL_721;
                    case 13:
                      goto LABEL_752;
                    case 14:
                      goto LABEL_783;
                    case 15:
                      goto LABEL_812;
                    case 16:
                      goto LABEL_841;
                    case 17:
                      goto LABEL_870;
                    case 18:
                      goto LABEL_899;
                    case 19:
                      goto LABEL_930;
                    case 20:
                      goto LABEL_961;
                    case 21:
                      goto LABEL_992;
                    case 22:
                      goto LABEL_1023;
                    case 23:
                      goto LABEL_1086;
                    case 24:
                      goto LABEL_1149;
                    case 25:
                      goto LABEL_1212;
                    case 26:
                      goto LABEL_1275;
                  }
                }
                v1092 += v1173;
                v19 += v1078 * v1132;
                v20 += v1132 * v1082;
                v21 += v1132 * v1100;
                v22 += v1132 * v1111;
                v23 += v1132 * v1122;
                if ( v1283 )
                {
                  v1098 = heightViewPort_93ADC;
                  if ( v1279 )
                  {
                    v1092 = heightViewPort_93ADC;
                  }
                  else
                  {
                    v1279 = heightViewPort_93ADC <= v1092;
                    v1094 = heightViewPort_93ADC - v1092;
                  }
                }
LABEL_47:
                v25 = (uint32*)&unk_93AE0;
                do
                {
                  *v25 = v19;
                  v19 += v1078;
                  v25[1] = v20;
                  v20 += v1082;
                  v25[2] = v21;
                  v21 += v1100;
                  v25[3] = v22;
                  v22 += v1111;
                  v25[4] = v23;
                  v23 += v1122;
                  v25 += 5;
                  --v1092;
                }
                while ( v1092 );
                v24 = v1096;
                goto LABEL_50;
              }
              break;
          }
        }
        return;
      }
      if ( v7 != v8 )
      {
        if ( v7 <= v8 )
          goto LABEL_24;
        goto LABEL_124;
      }
      if ( *(int32*)a2 <= *(int32*)a3 )
        return;
LABEL_225:
      v108 = v3[1];
      v1175 = v108;
      if ( v108 >= 0 )
      {
        if ( v108 >= heightViewPort_93ADC )
          return;
        v1077 = beginPrevLineFrame_93AC8 + pitchViewPort_93AD4 * v108;
        v1277 = 0;
      }
      else
      {
        v1077 = beginPrevLineFrame_93AC8;
        v1277 = 1;
      }
      v109 = v5[1];
      v1281 = v109 > heightViewPort_93ADC;
      v1090 = v109 - v108;
      v1098 = v109 - v108;
      v1080 = ((*v5 - *v3) << 16) / (v109 - v108);
      v1084 = ((*v4 - *v3) << 16) / (v109 - v108);
      switch ( byte_967E1 )
      {
        case 0:
        case 14:
        case 15:
          v130 = *v3 << 16;
          v131 = v130;
          if ( v1277 )
          {
            v132 = -v1175;
            v1090 += v1175;
            v16 = v1098 <= -v1175;
            v1098 += v1175;
            if ( v16 )
              return;
            v130 += v1080 * v132;
            v131 += v132 * v1084;
            if ( v1281 )
            {
              v1098 = heightViewPort_93ADC;
              v1090 = heightViewPort_93ADC;
            }
          }
          else if ( v1281 )
          {
            v1098 = heightViewPort_93ADC - v1175;
            v1090 = heightViewPort_93ADC - v1175;
          }
          v133 = (uint32*)&unk_93AE0;
          do
          {
            *v133 = v130;
            v130 += v1080;
            v133[1] = v131;
            v131 += v1084;
            v133 += 5;
            --v1090;
          }
          while ( v1090 );
          v29 = (unsigned __int8)byte_967E1;
          switch ( byte_967E1 )
          {
            case 0:
              goto LABEL_309;
            case 1:
              goto LABEL_322;
            case 2:
              goto LABEL_351;
            case 3:
              goto LABEL_382;
            case 4:
              goto LABEL_445;
            case 5:
              goto LABEL_474;
            case 6:
              goto LABEL_503;
            case 7:
            case 11:
              goto LABEL_564;
            case 8:
              goto LABEL_595;
            case 9:
            case 10:
              goto LABEL_658;
            case 12:
              goto LABEL_721;
            case 13:
              goto LABEL_752;
            case 14:
              goto LABEL_783;
            case 15:
              goto LABEL_812;
            case 16:
              goto LABEL_841;
            case 17:
              goto LABEL_870;
            case 18:
              goto LABEL_899;
            case 19:
              goto LABEL_930;
            case 20:
              goto LABEL_961;
            case 21:
              goto LABEL_992;
            case 22:
              goto LABEL_1023;
            case 23:
              goto LABEL_1086;
            case 24:
              goto LABEL_1149;
            case 25:
              goto LABEL_1212;
            case 26:
              goto LABEL_1275;
          }
        case 1:
        case 4:
        case 16:
        case 17:
          v1121 = (v4[4] - v5[4]) / (*v4 - *v5);
          v1127 = (v5[4] - v3[4]) / v1098;
          v125 = *v3 << 16;
          v126 = v125;
          v127 = v3[4];
          if ( v1277 )
          {
            v128 = -v1175;
            v1090 += v1175;
            v16 = v1098 <= -v1175;
            v1098 += v1175;
            if ( v16 )
              return;
            v125 += v1080 * v128;
            v126 += v128 * v1084;
            v127 += v128 * v1127;
            if ( v1281 )
            {
              v1098 = heightViewPort_93ADC;
              v1090 = heightViewPort_93ADC;
            }
          }
          else if ( v1281 )
          {
            v1098 = heightViewPort_93ADC - v1175;
            v1090 = heightViewPort_93ADC - v1175;
          }
          v129 = (uint32*)&unk_93AE0;
          do
          {
            *v129 = v125;
            v125 += v1080;
            v129[1] = v126;
            v126 += v1084;
            v129[4] = v127;
            v127 += v1127;
            v129 += 5;
            --v1090;
          }
          while ( v1090 );
          v29 = (unsigned __int8)byte_967E1;
          switch ( byte_967E1 )
          {
            case 0:
              goto LABEL_309;
            case 1:
              goto LABEL_322;
            case 2:
              goto LABEL_351;
            case 3:
              goto LABEL_382;
            case 4:
              goto LABEL_445;
            case 5:
              goto LABEL_474;
            case 6:
              goto LABEL_503;
            case 7:
            case 11:
              goto LABEL_564;
            case 8:
              goto LABEL_595;
            case 9:
            case 10:
              goto LABEL_658;
            case 12:
              goto LABEL_721;
            case 13:
              goto LABEL_752;
            case 14:
              goto LABEL_783;
            case 15:
              goto LABEL_812;
            case 16:
              goto LABEL_841;
            case 17:
              goto LABEL_870;
            case 18:
              goto LABEL_899;
            case 19:
              goto LABEL_930;
            case 20:
              goto LABEL_961;
            case 21:
              goto LABEL_992;
            case 22:
              goto LABEL_1023;
            case 23:
              goto LABEL_1086;
            case 24:
              goto LABEL_1149;
            case 25:
              goto LABEL_1212;
            case 26:
              goto LABEL_1275;
          }
        case 2:
        case 3:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 18:
        case 19:
        case 22:
        case 23:
          v118 = *v4 - *v5;
          v1099 = (v4[2] - v5[2]) / v118;
          v1110 = (v4[3] - v5[3]) / v118;
          v1105 = (v5[2] - v3[2]) / v1098;
          v1116 = (v5[3] - v3[3]) / v1098;
          v119 = *v3 << 16;
          v120 = v119;
          v121 = v3[2];
          v122 = v3[3];
          if ( v1277 )
          {
            v123 = -v1175;
            v1090 += v1175;
            v16 = v1098 <= -v1175;
            v1098 += v1175;
            if ( v16 )
              return;
            v119 += v1080 * v123;
            v120 += v123 * v1084;
            v121 += v123 * v1105;
            v122 += v123 * v1116;
            if ( v1281 )
            {
              v1098 = heightViewPort_93ADC;
              v1090 = heightViewPort_93ADC;
            }
          }
          else if ( v1281 )
          {
            v1098 = heightViewPort_93ADC - v1175;
            v1090 = heightViewPort_93ADC - v1175;
          }
          v124 = (uint32*)&unk_93AE0;
          do
          {
            *v124 = v119;
            v119 += v1080;
            v124[1] = v120;
            v120 += v1084;
            v124[2] = v121;
            v121 += v1105;
            v124[3] = v122;
            v122 += v1116;
            v124 += 5;
            --v1090;
          }
          while ( v1090 );
          v29 = (unsigned __int8)byte_967E1;
          switch ( byte_967E1 )
          {
            case 0:
              goto LABEL_309;
            case 1:
              goto LABEL_322;
            case 2:
              goto LABEL_351;
            case 3:
              goto LABEL_382;
            case 4:
              goto LABEL_445;
            case 5:
              goto LABEL_474;
            case 6:
              goto LABEL_503;
            case 7:
            case 11:
              goto LABEL_564;
            case 8:
              goto LABEL_595;
            case 9:
            case 10:
              goto LABEL_658;
            case 12:
              goto LABEL_721;
            case 13:
              goto LABEL_752;
            case 14:
              goto LABEL_783;
            case 15:
              goto LABEL_812;
            case 16:
              goto LABEL_841;
            case 17:
              goto LABEL_870;
            case 18:
              goto LABEL_899;
            case 19:
              goto LABEL_930;
            case 20:
              goto LABEL_961;
            case 21:
              goto LABEL_992;
            case 22:
              goto LABEL_1023;
            case 23:
              goto LABEL_1086;
            case 24:
              goto LABEL_1149;
            case 25:
              goto LABEL_1212;
            case 26:
              goto LABEL_1275;
          }
        case 5:
        case 6:
        case 20:
        case 21:
        case 24:
        case 25:
        case 26:
          v110 = *v4 - *v5;
          v1099 = (v4[2] - v5[2]) / v110;
          v1110 = (v4[3] - v5[3]) / v110;
          v1121 = (v4[4] - v5[4]) / v110;
          v1104 = (v5[2] - v3[2]) / v1098;
          v1115 = (v5[3] - v3[3]) / v1098;
          v1126 = (v5[4] - v3[4]) / v1098;
          v111 = *v3 << 16;
          v112 = v111;
          v113 = v3[2];
          v114 = v3[3];
          v115 = v3[4];
          if ( v1277 )
          {
            v116 = -v1175;
            v1090 += v1175;
            v16 = v1098 <= -v1175;
            v1098 += v1175;
            if ( v16 )
              return;
            v111 += v1080 * v116;
            v112 += v116 * v1084;
            v113 += v116 * v1104;
            v114 += v116 * v1115;
            v115 += v116 * v1126;
            if ( v1281 )
            {
              v1098 = heightViewPort_93ADC;
              v1090 = heightViewPort_93ADC;
            }
          }
          else if ( v1281 )
          {
            v1098 = heightViewPort_93ADC - v1175;
            v1090 = heightViewPort_93ADC - v1175;
          }
          v117 = (uint32*)&unk_93AE0;
          do
          {
            *v117 = v111;
            v111 += v1080;
            v117[1] = v112;
            v112 += v1084;
            v117[2] = v113;
            v113 += v1104;
            v117[3] = v114;
            v114 += v1115;
            v117[4] = v115;
            v115 += v1126;
            v117 += 5;
            --v1090;
          }
          while ( v1090 );
          v29 = (unsigned __int8)byte_967E1;
          switch ( byte_967E1 )
          {
            case 0:
              goto LABEL_309;
            case 1:
              goto LABEL_322;
            case 2:
              goto LABEL_351;
            case 3:
              goto LABEL_382;
            case 4:
              goto LABEL_445;
            case 5:
              goto LABEL_474;
            case 6:
              goto LABEL_503;
            case 7:
            case 11:
              goto LABEL_564;
            case 8:
              goto LABEL_595;
            case 9:
            case 10:
              goto LABEL_658;
            case 12:
              goto LABEL_721;
            case 13:
              goto LABEL_752;
            case 14:
              goto LABEL_783;
            case 15:
              goto LABEL_812;
            case 16:
              goto LABEL_841;
            case 17:
              goto LABEL_870;
            case 18:
              goto LABEL_899;
            case 19:
              goto LABEL_930;
            case 20:
              goto LABEL_961;
            case 21:
              goto LABEL_992;
            case 22:
              goto LABEL_1023;
            case 23:
              goto LABEL_1086;
            case 24:
              goto LABEL_1149;
            case 25:
              goto LABEL_1212;
            case 26:
              goto LABEL_1275;
          }
      }
    }
    if ( *(int32*)a1 <= *(int32*)a3 )
      return;
    v3 = (int32*)a3;
    v4 = (int32*)a1;
    v5 = (int32*)a2;
LABEL_268:
    v134 = v3[1];
    v1176 = v134;
    if ( v134 >= 0 )
    {
      if ( v134 >= heightViewPort_93ADC )
        return;
      v1077 = beginPrevLineFrame_93AC8 + pitchViewPort_93AD4 * v134;
      v1278 = 0;
    }
    else
    {
      v1077 = beginPrevLineFrame_93AC8;
      v1278 = 1;
    }
    v135 = v5[1];
    v1282 = v135 > heightViewPort_93ADC;
    v1091 = v135 - v134;
    v1098 = v135 - v134;
    v1081 = ((*v5 - *v3) << 16) / (v135 - v134);
    v1085 = ((*v5 - *v4) << 16) / (v135 - v134);
    switch ( byte_967E1 )
    {
      case 0:
      case 14:
      case 15:
        v156 = *v3 << 16;
        v157 = *v4 << 16;
        if ( v1278 )
        {
          v158 = -v1176;
          v1091 += v1176;
          v16 = v1098 <= -v1176;
          v1098 += v1176;
          if ( v16 )
            return;
          v156 += v1081 * v158;
          v157 += v158 * v1085;
          if ( v1282 )
          {
            v1098 = heightViewPort_93ADC;
            v1091 = heightViewPort_93ADC;
          }
        }
        else if ( v1282 )
        {
          v1098 = heightViewPort_93ADC - v1176;
          v1091 = heightViewPort_93ADC - v1176;
        }
        v159 = (uint32*)&unk_93AE0;
        do
        {
          *v159 = v156;
          v156 += v1081;
          v159[1] = v157;
          v157 += v1085;
          v159 += 5;
          --v1091;
        }
        while ( v1091 );
        v29 = (unsigned __int8)byte_967E1;
        switch ( byte_967E1 )
        {
          case 0:
            goto LABEL_309;
          case 1:
            goto LABEL_322;
          case 2:
            goto LABEL_351;
          case 3:
            goto LABEL_382;
          case 4:
            goto LABEL_445;
          case 5:
            goto LABEL_474;
          case 6:
            goto LABEL_503;
          case 7:
          case 11:
            goto LABEL_564;
          case 8:
            goto LABEL_595;
          case 9:
          case 10:
            goto LABEL_658;
          case 12:
            goto LABEL_721;
          case 13:
            goto LABEL_752;
          case 14:
            goto LABEL_783;
          case 15:
            goto LABEL_812;
          case 16:
            goto LABEL_841;
          case 17:
            goto LABEL_870;
          case 18:
            goto LABEL_899;
          case 19:
            goto LABEL_930;
          case 20:
            goto LABEL_961;
          case 21:
            goto LABEL_992;
          case 22:
            goto LABEL_1023;
          case 23:
            goto LABEL_1086;
          case 24:
            goto LABEL_1149;
          case 25:
            goto LABEL_1212;
          case 26:
            goto LABEL_1275;
        }
      case 1:
      case 4:
      case 16:
      case 17:
        v1121 = (v4[4] - v3[4]) / (*v4 - *v3);
        v1129 = (v5[4] - v3[4]) / v1098;
        v151 = *v3 << 16;
        v152 = *v4 << 16;
        v153 = v3[4];
        if ( v1278 )
        {
          v154 = -v1176;
          v1091 += v1176;
          v16 = v1098 <= -v1176;
          v1098 += v1176;
          if ( v16 )
            return;
          v151 += v1081 * v154;
          v152 += v154 * v1085;
          v153 += v154 * v1129;
          if ( v1282 )
          {
            v1098 = heightViewPort_93ADC;
            v1091 = heightViewPort_93ADC;
          }
        }
        else if ( v1282 )
        {
          v1098 = heightViewPort_93ADC - v1176;
          v1091 = heightViewPort_93ADC - v1176;
        }
        v155 = (uint32*)&unk_93AE0;
        do
        {
          *v155 = v151;
          v151 += v1081;
          v155[1] = v152;
          v152 += v1085;
          v155[4] = v153;
          v153 += v1129;
          v155 += 5;
          --v1091;
        }
        while ( v1091 );
        v29 = (unsigned __int8)byte_967E1;
        switch ( byte_967E1 )
        {
          case 0:
            goto LABEL_309;
          case 1:
            goto LABEL_322;
          case 2:
            goto LABEL_351;
          case 3:
            goto LABEL_382;
          case 4:
            goto LABEL_445;
          case 5:
            goto LABEL_474;
          case 6:
            goto LABEL_503;
          case 7:
          case 11:
            goto LABEL_564;
          case 8:
            goto LABEL_595;
          case 9:
          case 10:
            goto LABEL_658;
          case 12:
            goto LABEL_721;
          case 13:
            goto LABEL_752;
          case 14:
            goto LABEL_783;
          case 15:
            goto LABEL_812;
          case 16:
            goto LABEL_841;
          case 17:
            goto LABEL_870;
          case 18:
            goto LABEL_899;
          case 19:
            goto LABEL_930;
          case 20:
            goto LABEL_961;
          case 21:
            goto LABEL_992;
          case 22:
            goto LABEL_1023;
          case 23:
            goto LABEL_1086;
          case 24:
            goto LABEL_1149;
          case 25:
            goto LABEL_1212;
          case 26:
            goto LABEL_1275;
        }
      case 2:
      case 3:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 18:
      case 19:
      case 22:
      case 23:
        v144 = *v4 - *v3;
        v1099 = (v4[2] - v3[2]) / v144;
        v1110 = (v4[3] - v3[3]) / v144;
        v1107 = (v5[2] - v3[2]) / v1098;
        v1118 = (v5[3] - v3[3]) / v1098;
        v145 = *v3 << 16;
        v146 = *v4 << 16;
        v147 = v3[2];
        v148 = v3[3];
        if ( v1278 )
        {
          v149 = -v1176;
          v1091 += v1176;
          v16 = v1098 <= -v1176;
          v1098 += v1176;
          if ( v16 )
            return;
          v145 += v1081 * v149;
          v146 += v149 * v1085;
          v147 += v149 * v1107;
          v148 += v149 * v1118;
          if ( v1282 )
          {
            v1098 = heightViewPort_93ADC;
            v1091 = heightViewPort_93ADC;
          }
        }
        else if ( v1282 )
        {
          v1098 = heightViewPort_93ADC - v1176;
          v1091 = heightViewPort_93ADC - v1176;
        }
        v150 = (uint32*)&unk_93AE0;
        do
        {
          *v150 = v145;
          v145 += v1081;
          v150[1] = v146;
          v146 += v1085;
          v150[2] = v147;
          v147 += v1107;
          v150[3] = v148;
          v148 += v1118;
          v150 += 5;
          --v1091;
        }
        while ( v1091 );
        v29 = (unsigned __int8)byte_967E1;
        switch ( byte_967E1 )
        {
          case 0:
            goto LABEL_309;
          case 1:
            goto LABEL_322;
          case 2:
            goto LABEL_351;
          case 3:
            goto LABEL_382;
          case 4:
            goto LABEL_445;
          case 5:
            goto LABEL_474;
          case 6:
            goto LABEL_503;
          case 7:
          case 11:
            goto LABEL_564;
          case 8:
            goto LABEL_595;
          case 9:
          case 10:
            goto LABEL_658;
          case 12:
            goto LABEL_721;
          case 13:
            goto LABEL_752;
          case 14:
            goto LABEL_783;
          case 15:
            goto LABEL_812;
          case 16:
            goto LABEL_841;
          case 17:
            goto LABEL_870;
          case 18:
            goto LABEL_899;
          case 19:
            goto LABEL_930;
          case 20:
            goto LABEL_961;
          case 21:
            goto LABEL_992;
          case 22:
            goto LABEL_1023;
          case 23:
            goto LABEL_1086;
          case 24:
            goto LABEL_1149;
          case 25:
            goto LABEL_1212;
          case 26:
            goto LABEL_1275;
        }
      case 5:
      case 6:
      case 20:
      case 21:
      case 24:
      case 25:
      case 26:
        v136 = *v4 - *v3;
        v1099 = (v4[2] - v3[2]) / v136;
        v1110 = (v4[3] - v3[3]) / v136;
        v1121 = (v4[4] - v3[4]) / v136;
        v1106 = (v5[2] - v3[2]) / v1098;
        v1117 = (v5[3] - v3[3]) / v1098;
        v1128 = (v5[4] - v3[4]) / v1098;
        v137 = *v3 << 16;
        v138 = *v4 << 16;
        v139 = v3[2];
        v140 = v3[3];
        v141 = v3[4];
        if ( v1278 )
        {
          v142 = -v1176;
          v1091 += v1176;
          v16 = v1098 <= -v1176;
          v1098 += v1176;
          if ( v16 )
            return;
          v137 += v1081 * v142;
          v138 += v142 * v1085;
          v139 += v142 * v1106;
          v140 += v142 * v1117;
          v141 += v142 * v1128;
          if ( v1282 )
          {
            v1098 = heightViewPort_93ADC;
            v1091 = heightViewPort_93ADC;
          }
        }
        else if ( v1282 )
        {
          v1098 = heightViewPort_93ADC - v1176;
          v1091 = heightViewPort_93ADC - v1176;
        }
        v143 = (uint32*)&unk_93AE0;
        do
        {
          *v143 = v137;
          v137 += v1081;
          v143[1] = v138;
          v138 += v1085;
          v143[2] = v139;
          v139 += v1106;
          v143[3] = v140;
          v140 += v1117;
          v143[4] = v141;
          v141 += v1128;
          v143 += 5;
          --v1091;
        }
        while ( v1091 );
        break;
    }
    v29 = (unsigned __int8)byte_967E1;
    switch ( byte_967E1 )
    {
      case 0:
LABEL_309:
        v160 = (unsigned __int16 *)&unk_93AE0;
        v161 = (char *)v1077;
        v162 = byte_967E0;
        HIWORD(v163) = 0;
        while ( 1 )
        {
          LOWORD(v163) = v160[1];
          v164 = v160[3];
          v161 += pitchViewPort_93AD4;
          if ( (v163 & 0x8000u) == 0 )
            break;
          if ( (__int16)v164 > 0 )
          {
            if ( v164 > widthViewPort_93AD8 )
              v164 = widthViewPort_93AD8;
            v165 = v161;
LABEL_319:
            memset(v165, v162, v164);
          }
LABEL_320:
          v160 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v164 > widthViewPort_93AD8 )
          v164 = widthViewPort_93AD8;
        v16 = (__int16)v164 <= (__int16)v163;
        LOWORD(v164) = v164 - v163;
        if ( v16 )
          goto LABEL_320;
        v165 = &v161[v163];
        goto LABEL_319;
      case 1:
LABEL_322:
        for ( i = (uint16*)&unk_93AE0; ; i += 10 )
        {
          LOWORD(v29) = i[1];
          v167 = (unsigned __int16)i[3];
          v168 = (_BYTE *)(pitchViewPort_93AD4 + v1077);
          v1077 += pitchViewPort_93AD4;
          if ( (v29 & 0x8000u) == 0 )
            break;
          if ( (__int16)v167 > 0 )
          {
            v169 = v1121 * (unsigned __int16)-(__int16)v29;
            v170 = v169;
            v29 = v169 >> 8;
            v171 = __CFADD__(i[8], v170);
            v172 = i[8] + v170;
            BYTE1(v29) += *((_BYTE *)i + 18) + v171;
            if ( v167 > widthViewPort_93AD8 )
              LOWORD(v167) = widthViewPort_93AD8;
            v29 = (unsigned __int16)v29;
LABEL_332:
            while ( 1 )
            {
              *v168 = BYTE1(v29);
              v171 = __CFADD__((_WORD)v1121, v172);
              v173 = v1121 + v172;
              v174 = BYTE2(v1121) + v171 + BYTE1(v29);
              v175 = v167 - 1;
              if ( !v175 )
                break;
              v168[1] = v174;
              v171 = __CFADD__((_WORD)v1121, v173);
              v176 = v1121 + v173;
              v177 = BYTE2(v1121) + v171 + v174;
              v178 = v175 - 1;
              if ( !v178 )
                break;
              v168[2] = v177;
              v171 = __CFADD__((_WORD)v1121, v176);
              v179 = v1121 + v176;
              v180 = BYTE2(v1121) + v171 + v177;
              v181 = v178 - 1;
              if ( !v181 )
                break;
              v168[3] = v180;
              v171 = __CFADD__((_WORD)v1121, v179);
              v182 = v1121 + v179;
              v183 = BYTE2(v1121) + v171 + v180;
              v184 = v181 - 1;
              if ( !v184 )
                break;
              v168[4] = v183;
              v171 = __CFADD__((_WORD)v1121, v182);
              v185 = v1121 + v182;
              v186 = BYTE2(v1121) + v171 + v183;
              v187 = v184 - 1;
              if ( !v187 )
                break;
              v168[5] = v186;
              v171 = __CFADD__((_WORD)v1121, v185);
              v188 = v1121 + v185;
              v189 = BYTE2(v1121) + v171 + v186;
              v190 = v187 - 1;
              if ( !v190 )
                break;
              v168[6] = v189;
              v171 = __CFADD__((_WORD)v1121, v188);
              v191 = v1121 + v188;
              v192 = BYTE2(v1121) + v171 + v189;
              v193 = v190 - 1;
              if ( !v193 )
                break;
              v168[7] = v192;
              v171 = __CFADD__((_WORD)v1121, v191);
              v194 = v1121 + v191;
              v195 = BYTE2(v1121) + v171 + v192;
              v196 = v193 - 1;
              if ( !v196 )
                break;
              v168[8] = v195;
              v171 = __CFADD__((_WORD)v1121, v194);
              v197 = v1121 + v194;
              v198 = BYTE2(v1121) + v171 + v195;
              v199 = v196 - 1;
              if ( !v199 )
                break;
              v168[9] = v198;
              v171 = __CFADD__((_WORD)v1121, v197);
              v200 = v1121 + v197;
              v201 = BYTE2(v1121) + v171 + v198;
              v202 = v199 - 1;
              if ( !v202 )
                break;
              v168[10] = v201;
              v171 = __CFADD__((_WORD)v1121, v200);
              v203 = v1121 + v200;
              v204 = BYTE2(v1121) + v171 + v201;
              v205 = v202 - 1;
              if ( !v205 )
                break;
              v168[11] = v204;
              v171 = __CFADD__((_WORD)v1121, v203);
              v206 = v1121 + v203;
              v207 = BYTE2(v1121) + v171 + v204;
              v208 = v205 - 1;
              if ( !v208 )
                break;
              v168[12] = v207;
              v171 = __CFADD__((_WORD)v1121, v206);
              v209 = v1121 + v206;
              v210 = BYTE2(v1121) + v171 + v207;
              v211 = v208 - 1;
              if ( !v211 )
                break;
              v168[13] = v210;
              v171 = __CFADD__((_WORD)v1121, v209);
              v212 = v1121 + v209;
              v213 = BYTE2(v1121) + v171 + v210;
              v214 = v211 - 1;
              if ( !v214 )
                break;
              v168[14] = v213;
              v171 = __CFADD__((_WORD)v1121, v212);
              v215 = v1121 + v212;
              v216 = BYTE2(v1121) + v171 + v213;
              v217 = v214 - 1;
              if ( !v217 )
                break;
              v168[15] = v216;
              v171 = __CFADD__((_WORD)v1121, v215);
              v172 = v1121 + v215;
              BYTE1(v29) = BYTE2(v1121) + v171 + v216;
              LOWORD(v167) = v217 - 1;
              if ( !(_WORD)v167 )
                break;
              v168 += 16;
            }
          }
LABEL_349:
          if ( !--v1098 )
            return;
        }
        if ( v167 > widthViewPort_93AD8 )
          LOWORD(v167) = widthViewPort_93AD8;
        v16 = (__int16)v167 <= (__int16)v29;
        LOWORD(v167) = v167 - v29;
        if ( v16 )
          goto LABEL_349;
        v168 += v29;
        v29 = (unsigned __int8)byte_967E0;
        v172 = i[8];
        BYTE1(v29) = *((_BYTE *)i + 18);
        goto LABEL_332;
      case 2:
LABEL_351:
        v218 = (unsigned __int16 *)&unk_93AE0;
        v1148 = v1110 << 16;
        HIWORD(v219) = 0;
        HIWORD(v220) = 0;
        while ( 1 )
        {
          LOWORD(v219) = v218[1];
          v221 = v218[3];
          v222 = (_BYTE *)(pitchViewPort_93AD4 + v1077);
          v1077 += pitchViewPort_93AD4;
          if ( (v219 & 0x8000u) == 0 )
            break;
          if ( (__int16)v221 > 0 )
          {
            v223 = (unsigned __int16)-(__int16)v219;
            v225 = __ROL4__(*((_DWORD *)v218 + 3) + v1110 * v223, 16);
            BYTE1(v220) = v225;
            v224 = *((_DWORD *)v218 + 2) + v1099 * v223;
            LOWORD(v225) = v224;
            v226 = v224 >> 8;
            LOBYTE(v220) = BYTE1(v226);
            if ( v221 > widthViewPort_93AD8 )
              LOWORD(v221) = widthViewPort_93AD8;
            v219 = (unsigned __int16)v226;
LABEL_361:
            v1257 = v218;
            v227 = dword_93AD0;
            while ( 1 )
            {
              v228 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v225);
              LOWORD(v225) = v1099 + v225;
              LOBYTE(v220) = BYTE2(v1099) + v171 + v220;
              *v222 = v228;
              v171 = __CFADD__(v1148, v225);
              v229 = v1148 + v225;
              BYTE1(v220) += BYTE2(v1110) + v171;
              v230 = v221 - 1;
              if ( !v230 )
                break;
              v231 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v229);
              LOWORD(v229) = v1099 + v229;
              LOBYTE(v220) = BYTE2(v1099) + v171 + v220;
              v222[1] = v231;
              v171 = __CFADD__(v1148, v229);
              v232 = v1148 + v229;
              BYTE1(v220) += BYTE2(v1110) + v171;
              v233 = v230 - 1;
              if ( !v233 )
                break;
              v234 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v232);
              LOWORD(v232) = v1099 + v232;
              LOBYTE(v220) = BYTE2(v1099) + v171 + v220;
              v222[2] = v234;
              v171 = __CFADD__(v1148, v232);
              v235 = v1148 + v232;
              BYTE1(v220) += BYTE2(v1110) + v171;
              v236 = v233 - 1;
              if ( !v236 )
                break;
              v237 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v235);
              LOWORD(v235) = v1099 + v235;
              LOBYTE(v220) = BYTE2(v1099) + v171 + v220;
              v222[3] = v237;
              v171 = __CFADD__(v1148, v235);
              v238 = v1148 + v235;
              BYTE1(v220) += BYTE2(v1110) + v171;
              v239 = v236 - 1;
              if ( !v239 )
                break;
              v240 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v238);
              LOWORD(v238) = v1099 + v238;
              LOBYTE(v220) = BYTE2(v1099) + v171 + v220;
              v222[4] = v240;
              v171 = __CFADD__(v1148, v238);
              v241 = v1148 + v238;
              BYTE1(v220) += BYTE2(v1110) + v171;
              v242 = v239 - 1;
              if ( !v242 )
                break;
              v243 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v241);
              LOWORD(v241) = v1099 + v241;
              LOBYTE(v220) = BYTE2(v1099) + v171 + v220;
              v222[5] = v243;
              v171 = __CFADD__(v1148, v241);
              v244 = v1148 + v241;
              BYTE1(v220) += BYTE2(v1110) + v171;
              v245 = v242 - 1;
              if ( !v245 )
                break;
              v246 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v244);
              LOWORD(v244) = v1099 + v244;
              LOBYTE(v220) = BYTE2(v1099) + v171 + v220;
              v222[6] = v246;
              v171 = __CFADD__(v1148, v244);
              v247 = v1148 + v244;
              BYTE1(v220) += BYTE2(v1110) + v171;
              v248 = v245 - 1;
              if ( !v248 )
                break;
              v249 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v247);
              LOWORD(v247) = v1099 + v247;
              LOBYTE(v220) = BYTE2(v1099) + v171 + v220;
              v222[7] = v249;
              v171 = __CFADD__(v1148, v247);
              v250 = v1148 + v247;
              BYTE1(v220) += BYTE2(v1110) + v171;
              v251 = v248 - 1;
              if ( !v251 )
                break;
              v252 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v250);
              LOWORD(v250) = v1099 + v250;
              LOBYTE(v220) = BYTE2(v1099) + v171 + v220;
              v222[8] = v252;
              v171 = __CFADD__(v1148, v250);
              v253 = v1148 + v250;
              BYTE1(v220) += BYTE2(v1110) + v171;
              v254 = v251 - 1;
              if ( !v254 )
                break;
              v255 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v253);
              LOWORD(v253) = v1099 + v253;
              LOBYTE(v220) = BYTE2(v1099) + v171 + v220;
              v222[9] = v255;
              v171 = __CFADD__(v1148, v253);
              v256 = v1148 + v253;
              BYTE1(v220) += BYTE2(v1110) + v171;
              v257 = v254 - 1;
              if ( !v257 )
                break;
              v258 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v256);
              LOWORD(v256) = v1099 + v256;
              LOBYTE(v220) = BYTE2(v1099) + v171 + v220;
              v222[10] = v258;
              v171 = __CFADD__(v1148, v256);
              v259 = v1148 + v256;
              BYTE1(v220) += BYTE2(v1110) + v171;
              v260 = v257 - 1;
              if ( !v260 )
                break;
              v261 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v259);
              LOWORD(v259) = v1099 + v259;
              LOBYTE(v220) = BYTE2(v1099) + v171 + v220;
              v222[11] = v261;
              v171 = __CFADD__(v1148, v259);
              v262 = v1148 + v259;
              BYTE1(v220) += BYTE2(v1110) + v171;
              v263 = v260 - 1;
              if ( !v263 )
                break;
              v264 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v262);
              LOWORD(v262) = v1099 + v262;
              LOBYTE(v220) = BYTE2(v1099) + v171 + v220;
              v222[12] = v264;
              v171 = __CFADD__(v1148, v262);
              v265 = v1148 + v262;
              BYTE1(v220) += BYTE2(v1110) + v171;
              v266 = v263 - 1;
              if ( !v266 )
                break;
              v267 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v265);
              LOWORD(v265) = v1099 + v265;
              LOBYTE(v220) = BYTE2(v1099) + v171 + v220;
              v222[13] = v267;
              v171 = __CFADD__(v1148, v265);
              v268 = v1148 + v265;
              BYTE1(v220) += BYTE2(v1110) + v171;
              v269 = v266 - 1;
              if ( !v269 )
                break;
              v270 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v268);
              LOWORD(v268) = v1099 + v268;
              LOBYTE(v220) = BYTE2(v1099) + v171 + v220;
              v222[14] = v270;
              v171 = __CFADD__(v1148, v268);
              v271 = v1148 + v268;
              BYTE1(v220) += BYTE2(v1110) + v171;
              v272 = v269 - 1;
              if ( !v272 )
                break;
              v273 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v271);
              LOWORD(v271) = v1099 + v271;
              LOBYTE(v220) = BYTE2(v1099) + v171 + v220;
              v222[15] = v273;
              v171 = __CFADD__(v1148, v271);
              v225 = v1148 + v271;
              BYTE1(v220) += BYTE2(v1110) + v171;
              LOWORD(v221) = v272 - 1;
              if ( !(_WORD)v221 )
                break;
              v222 += 16;
            }
            v218 = v1257;
          }
LABEL_380:
          v218 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v221 > widthViewPort_93AD8 )
          LOWORD(v221) = widthViewPort_93AD8;
        v16 = (__int16)v221 <= (__int16)v219;
        LOWORD(v221) = v221 - v219;
        if ( v16 )
          goto LABEL_380;
        v222 += v219;
        v225 = __ROL4__(*((_DWORD *)v218 + 3), 16);
        BYTE1(v220) = v225;
        LOWORD(v225) = v218[4];
        LOBYTE(v220) = *((_BYTE *)v218 + 10);
        goto LABEL_361;
      case 3:
LABEL_382:
        v274 = (unsigned __int16 *)&unk_93AE0;
        v1149 = v1110 << 16;
        HIWORD(v275) = 0;
        HIWORD(v276) = 0;
        while ( 1 )
        {
          LOWORD(v275) = v274[1];
          v277 = v274[3];
          v278 = (_BYTE *)(pitchViewPort_93AD4 + v1077);
          v1077 += pitchViewPort_93AD4;
          if ( (v275 & 0x8000u) == 0 )
            break;
          if ( (__int16)v277 > 0 )
          {
            v279 = (unsigned __int16)-(__int16)v275;
            v281 = __ROL4__(*((_DWORD *)v274 + 3) + v1110 * v279, 16);
            BYTE1(v276) = v281;
            v280 = *((_DWORD *)v274 + 2) + v1099 * v279;
            LOWORD(v281) = v280;
            v282 = v280 >> 8;
            LOBYTE(v276) = BYTE1(v282);
            if ( v277 > widthViewPort_93AD8 )
              LOWORD(v277) = widthViewPort_93AD8;
            v275 = (unsigned __int16)v282;
LABEL_392:
            v1258 = v274;
            v283 = dword_93AD0;
            while ( 1 )
            {
              v284 = *(_BYTE *)(v276 + v283);
              if ( v284 )
                *v278 = v284;
              v171 = __CFADD__((_WORD)v1099, (_WORD)v281);
              LOWORD(v281) = v1099 + v281;
              LOBYTE(v276) = BYTE2(v1099) + v171 + v276;
              v171 = __CFADD__(v1149, v281);
              v285 = v1149 + v281;
              BYTE1(v276) += BYTE2(v1110) + v171;
              v286 = v277 - 1;
              if ( !v286 )
                break;
              v287 = *(_BYTE *)(v276 + v283);
              if ( v287 )
                v278[1] = v287;
              v171 = __CFADD__((_WORD)v1099, (_WORD)v285);
              LOWORD(v285) = v1099 + v285;
              LOBYTE(v276) = BYTE2(v1099) + v171 + v276;
              v171 = __CFADD__(v1149, v285);
              v288 = v1149 + v285;
              BYTE1(v276) += BYTE2(v1110) + v171;
              v289 = v286 - 1;
              if ( !v289 )
                break;
              v290 = *(_BYTE *)(v276 + v283);
              if ( v290 )
                v278[2] = v290;
              v171 = __CFADD__((_WORD)v1099, (_WORD)v288);
              LOWORD(v288) = v1099 + v288;
              LOBYTE(v276) = BYTE2(v1099) + v171 + v276;
              v171 = __CFADD__(v1149, v288);
              v291 = v1149 + v288;
              BYTE1(v276) += BYTE2(v1110) + v171;
              v292 = v289 - 1;
              if ( !v292 )
                break;
              v293 = *(_BYTE *)(v276 + v283);
              if ( v293 )
                v278[3] = v293;
              v171 = __CFADD__((_WORD)v1099, (_WORD)v291);
              LOWORD(v291) = v1099 + v291;
              LOBYTE(v276) = BYTE2(v1099) + v171 + v276;
              v171 = __CFADD__(v1149, v291);
              v294 = v1149 + v291;
              BYTE1(v276) += BYTE2(v1110) + v171;
              v295 = v292 - 1;
              if ( !v295 )
                break;
              v296 = *(_BYTE *)(v276 + v283);
              if ( v296 )
                v278[4] = v296;
              v171 = __CFADD__((_WORD)v1099, (_WORD)v294);
              LOWORD(v294) = v1099 + v294;
              LOBYTE(v276) = BYTE2(v1099) + v171 + v276;
              v171 = __CFADD__(v1149, v294);
              v297 = v1149 + v294;
              BYTE1(v276) += BYTE2(v1110) + v171;
              v298 = v295 - 1;
              if ( !v298 )
                break;
              v299 = *(_BYTE *)(v276 + v283);
              if ( v299 )
                v278[5] = v299;
              v171 = __CFADD__((_WORD)v1099, (_WORD)v297);
              LOWORD(v297) = v1099 + v297;
              LOBYTE(v276) = BYTE2(v1099) + v171 + v276;
              v171 = __CFADD__(v1149, v297);
              v300 = v1149 + v297;
              BYTE1(v276) += BYTE2(v1110) + v171;
              v301 = v298 - 1;
              if ( !v301 )
                break;
              v302 = *(_BYTE *)(v276 + v283);
              if ( v302 )
                v278[6] = v302;
              v171 = __CFADD__((_WORD)v1099, (_WORD)v300);
              LOWORD(v300) = v1099 + v300;
              LOBYTE(v276) = BYTE2(v1099) + v171 + v276;
              v171 = __CFADD__(v1149, v300);
              v303 = v1149 + v300;
              BYTE1(v276) += BYTE2(v1110) + v171;
              v304 = v301 - 1;
              if ( !v304 )
                break;
              v305 = *(_BYTE *)(v276 + v283);
              if ( v305 )
                v278[7] = v305;
              v171 = __CFADD__((_WORD)v1099, (_WORD)v303);
              LOWORD(v303) = v1099 + v303;
              LOBYTE(v276) = BYTE2(v1099) + v171 + v276;
              v171 = __CFADD__(v1149, v303);
              v306 = v1149 + v303;
              BYTE1(v276) += BYTE2(v1110) + v171;
              v307 = v304 - 1;
              if ( !v307 )
                break;
              v308 = *(_BYTE *)(v276 + v283);
              if ( v308 )
                v278[8] = v308;
              v171 = __CFADD__((_WORD)v1099, (_WORD)v306);
              LOWORD(v306) = v1099 + v306;
              LOBYTE(v276) = BYTE2(v1099) + v171 + v276;
              v171 = __CFADD__(v1149, v306);
              v309 = v1149 + v306;
              BYTE1(v276) += BYTE2(v1110) + v171;
              v310 = v307 - 1;
              if ( !v310 )
                break;
              v311 = *(_BYTE *)(v276 + v283);
              if ( v311 )
                v278[9] = v311;
              v171 = __CFADD__((_WORD)v1099, (_WORD)v309);
              LOWORD(v309) = v1099 + v309;
              LOBYTE(v276) = BYTE2(v1099) + v171 + v276;
              v171 = __CFADD__(v1149, v309);
              v312 = v1149 + v309;
              BYTE1(v276) += BYTE2(v1110) + v171;
              v313 = v310 - 1;
              if ( !v313 )
                break;
              v314 = *(_BYTE *)(v276 + v283);
              if ( v314 )
                v278[10] = v314;
              v171 = __CFADD__((_WORD)v1099, (_WORD)v312);
              LOWORD(v312) = v1099 + v312;
              LOBYTE(v276) = BYTE2(v1099) + v171 + v276;
              v171 = __CFADD__(v1149, v312);
              v315 = v1149 + v312;
              BYTE1(v276) += BYTE2(v1110) + v171;
              v316 = v313 - 1;
              if ( !v316 )
                break;
              v317 = *(_BYTE *)(v276 + v283);
              if ( v317 )
                v278[11] = v317;
              v171 = __CFADD__((_WORD)v1099, (_WORD)v315);
              LOWORD(v315) = v1099 + v315;
              LOBYTE(v276) = BYTE2(v1099) + v171 + v276;
              v171 = __CFADD__(v1149, v315);
              v318 = v1149 + v315;
              BYTE1(v276) += BYTE2(v1110) + v171;
              v319 = v316 - 1;
              if ( !v319 )
                break;
              v320 = *(_BYTE *)(v276 + v283);
              if ( v320 )
                v278[12] = v320;
              v171 = __CFADD__((_WORD)v1099, (_WORD)v318);
              LOWORD(v318) = v1099 + v318;
              LOBYTE(v276) = BYTE2(v1099) + v171 + v276;
              v171 = __CFADD__(v1149, v318);
              v321 = v1149 + v318;
              BYTE1(v276) += BYTE2(v1110) + v171;
              v322 = v319 - 1;
              if ( !v322 )
                break;
              v323 = *(_BYTE *)(v276 + v283);
              if ( v323 )
                v278[13] = v323;
              v171 = __CFADD__((_WORD)v1099, (_WORD)v321);
              LOWORD(v321) = v1099 + v321;
              LOBYTE(v276) = BYTE2(v1099) + v171 + v276;
              v171 = __CFADD__(v1149, v321);
              v324 = v1149 + v321;
              BYTE1(v276) += BYTE2(v1110) + v171;
              v325 = v322 - 1;
              if ( !v325 )
                break;
              v326 = *(_BYTE *)(v276 + v283);
              if ( v326 )
                v278[14] = v326;
              v171 = __CFADD__((_WORD)v1099, (_WORD)v324);
              LOWORD(v324) = v1099 + v324;
              LOBYTE(v276) = BYTE2(v1099) + v171 + v276;
              v171 = __CFADD__(v1149, v324);
              v327 = v1149 + v324;
              BYTE1(v276) += BYTE2(v1110) + v171;
              v328 = v325 - 1;
              if ( !v328 )
                break;
              v329 = *(_BYTE *)(v276 + v283);
              if ( v329 )
                v278[15] = v329;
              v171 = __CFADD__((_WORD)v1099, (_WORD)v327);
              LOWORD(v327) = v1099 + v327;
              LOBYTE(v276) = BYTE2(v1099) + v171 + v276;
              v171 = __CFADD__(v1149, v327);
              v281 = v1149 + v327;
              BYTE1(v276) += BYTE2(v1110) + v171;
              LOWORD(v277) = v328 - 1;
              if ( !(_WORD)v277 )
                break;
              v278 += 16;
            }
            v274 = v1258;
          }
LABEL_443:
          v274 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v277 > widthViewPort_93AD8 )
          LOWORD(v277) = widthViewPort_93AD8;
        v16 = (__int16)v277 <= (__int16)v275;
        LOWORD(v277) = v277 - v275;
        if ( v16 )
          goto LABEL_443;
        v278 += v275;
        v281 = __ROL4__(*((_DWORD *)v274 + 3), 16);
        BYTE1(v276) = v281;
        LOWORD(v281) = v274[4];
        LOBYTE(v276) = *((_BYTE *)v274 + 10);
        goto LABEL_392;
      case 4:
LABEL_445:
        for ( j = (uint16*)&unk_93AE0; ; j += 10 )
        {
          LOWORD(v29) = j[1];
          v331 = (unsigned __int16)j[3];
          v332 = (_BYTE *)(pitchViewPort_93AD4 + v1077);
          v1077 += pitchViewPort_93AD4;
          if ( (v29 & 0x8000u) == 0 )
            break;
          if ( (__int16)v331 > 0 )
          {
            v333 = v1121 * (unsigned __int16)-(__int16)v29;
            v334 = v333;
            v29 = v333 >> 8;
            v171 = __CFADD__(j[8], v334);
            v335 = j[8] + v334;
            BYTE1(v29) += *((_BYTE *)j + 18) + v171;
            if ( v331 > widthViewPort_93AD8 )
              LOWORD(v331) = widthViewPort_93AD8;
            v29 = (unsigned __int16)v29;
            LOBYTE(v29) = byte_967E0;
LABEL_455:
            while ( 1 )
            {
              *v332 = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)v1121, v335);
              v336 = v1121 + v335;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v337 = v331 - 1;
              if ( !v337 )
                break;
              v332[1] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)v1121, v336);
              v338 = v1121 + v336;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v339 = v337 - 1;
              if ( !v339 )
                break;
              v332[2] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)v1121, v338);
              v340 = v1121 + v338;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v341 = v339 - 1;
              if ( !v341 )
                break;
              v332[3] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)v1121, v340);
              v342 = v1121 + v340;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v343 = v341 - 1;
              if ( !v343 )
                break;
              v332[4] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)v1121, v342);
              v344 = v1121 + v342;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v345 = v343 - 1;
              if ( !v345 )
                break;
              v332[5] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)v1121, v344);
              v346 = v1121 + v344;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v347 = v345 - 1;
              if ( !v347 )
                break;
              v332[6] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)v1121, v346);
              v348 = v1121 + v346;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v349 = v347 - 1;
              if ( !v349 )
                break;
              v332[7] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)v1121, v348);
              v350 = v1121 + v348;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v351 = v349 - 1;
              if ( !v351 )
                break;
              v332[8] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)v1121, v350);
              v352 = v1121 + v350;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v353 = v351 - 1;
              if ( !v353 )
                break;
              v332[9] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)v1121, v352);
              v354 = v1121 + v352;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v355 = v353 - 1;
              if ( !v355 )
                break;
              v332[10] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)v1121, v354);
              v356 = v1121 + v354;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v357 = v355 - 1;
              if ( !v357 )
                break;
              v332[11] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)v1121, v356);
              v358 = v1121 + v356;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v359 = v357 - 1;
              if ( !v359 )
                break;
              v332[12] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)v1121, v358);
              v360 = v1121 + v358;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v361 = v359 - 1;
              if ( !v361 )
                break;
              v332[13] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)v1121, v360);
              v362 = v1121 + v360;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v363 = v361 - 1;
              if ( !v363 )
                break;
              v332[14] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)v1121, v362);
              v364 = v1121 + v362;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v365 = v363 - 1;
              if ( !v365 )
                break;
              v332[15] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)v1121, v364);
              v335 = v1121 + v364;
              BYTE1(v29) += BYTE2(v1121) + v171;
              LOWORD(v331) = v365 - 1;
              if ( !(_WORD)v331 )
                break;
              v332 += 16;
            }
          }
LABEL_472:
          if ( !--v1098 )
            return;
        }
        if ( v331 > widthViewPort_93AD8 )
          LOWORD(v331) = widthViewPort_93AD8;
        v16 = (__int16)v331 <= (__int16)v29;
        LOWORD(v331) = v331 - v29;
        if ( v16 )
          goto LABEL_472;
        v332 += v29;
        v29 = (unsigned __int8)byte_967E0;
        v335 = j[8];
        BYTE1(v29) = *((_BYTE *)j + 18);
        goto LABEL_455;
      case 5:
LABEL_474:
        v1259 = (char *)&unk_93AE0;
        v1150 = v1110 << 16;
        v1166 = v1121 << 16;
        HIWORD(v366) = 0;
        HIWORD(v367) = 0;
        while ( 1 )
        {
            //adress 0x245FFB_
            //debug
#ifdef debug1
            //if (compare_index_245FFB == 0x1d3)
            /*if (compare_index_245FFB == 0x1D0)
            {
                compare_index_245FFB++;
                compare_index_245FFB--;
            }
            add_compare(0x245FFB, true, true);
            compare_index_245FFB++;*/
#endif debug1
            //debug

          v368 = v1259;
          v1259 += 20;
          LOWORD(v366) = *((_WORD *)v368 + 1);
          v369 = *((unsigned __int16 *)v368 + 3);
          v370 = pitchViewPort_93AD4 + v1077;
          v1077 += pitchViewPort_93AD4;
          if ( (v366 & 0x8000u) == 0 )
            break;
          if ( (__int16)v369 > 0 )
          {
            v371 = (unsigned __int16)-(__int16)v366;
            v372 = __ROL4__(*((_DWORD *)v368 + 3) + v1110 * v371, 16);
            BYTE1(v367) = v372;
            LOWORD(v372) = *((_WORD *)v368 + 4) + v1099 * v371;
            v366 = (unsigned int)(*((_DWORD *)v368 + 2) + v1099 * v371) >> 8;
            LOBYTE(v367) = (unsigned int)(*((_DWORD *)v368 + 2) + v1099 * v371) >> 16;
            v373 = __ROL4__(*((_DWORD *)v368 + 4) + v1121 * v371, 16);
            BYTE1(v366) = v373;
            LOWORD(v373) = *((_WORD *)v368 + 3);
            v366 = (unsigned __int16)v366;
            if ( (__int16)v373 > (__int16)widthViewPort_93AD8 )
              LOWORD(v373) = widthViewPort_93AD8;
LABEL_484:
            v376 = (_BYTE *)(dword_74F95_754A5[v373 & 0xF] + v370);
            v377 = dword_93AD0;
            switch ( v373 & 0xF )
            {
              case 0:
                goto LABEL_485;
              case 1:
                goto LABEL_500;
              case 2:
                goto LABEL_499;
              case 3:
                goto LABEL_498;
              case 4:
                goto LABEL_497;
              case 5:
                goto LABEL_496;
              case 6:
                goto LABEL_495;
              case 7:
                goto LABEL_494;
              case 8:
                goto LABEL_493;
              case 9:
                goto LABEL_492;
              case 0xA:
                goto LABEL_491;
              case 0xB:
                goto LABEL_490;
              case 0xC:
                goto LABEL_489;
              case 0xD:
                goto LABEL_488;
              case 0xE:
                goto LABEL_487;
              case 0xF:
                while ( 1 )
                {
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v372);
                  LOWORD(v372) = v1099 + v372;
                  LOBYTE(v366) = *(_BYTE *)(v367 + v377);
                  LOBYTE(v367) = BYTE2(v1099) + v171 + v367;
                  v171 = __CFADD__(v1150, v372);
                  v372 += v1150;
                  BYTE1(v367) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1166, v373);
                  v373 += v1166;
                  v376[1] = strPal.fog_B7934_B7924[v366];
                  BYTE1(v366) += BYTE2(v1121) + v171;
LABEL_487:
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v372);
                  LOWORD(v372) = v1099 + v372;
                  LOBYTE(v366) = *(_BYTE *)(v367 + v377);
                  LOBYTE(v367) = BYTE2(v1099) + v171 + v367;
                  v171 = __CFADD__(v1150, v372);
                  v372 += v1150;
                  BYTE1(v367) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1166, v373);
                  v373 += v1166;
                  v376[2] = strPal.fog_B7934_B7924[v366];
                  BYTE1(v366) += BYTE2(v1121) + v171;
LABEL_488:
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v372);
                  LOWORD(v372) = v1099 + v372;
                  LOBYTE(v366) = *(_BYTE *)(v367 + v377);
                  LOBYTE(v367) = BYTE2(v1099) + v171 + v367;
                  v171 = __CFADD__(v1150, v372);
                  v372 += v1150;
                  BYTE1(v367) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1166, v373);
                  v373 += v1166;
                  v376[3] = strPal.fog_B7934_B7924[v366];
                  BYTE1(v366) += BYTE2(v1121) + v171;
LABEL_489:
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v372);
                  LOWORD(v372) = v1099 + v372;
                  LOBYTE(v366) = *(_BYTE *)(v367 + v377);
                  LOBYTE(v367) = BYTE2(v1099) + v171 + v367;
                  v171 = __CFADD__(v1150, v372);
                  v372 += v1150;
                  BYTE1(v367) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1166, v373);
                  v373 += v1166;
                  v376[4] = strPal.fog_B7934_B7924[v366];
                  BYTE1(v366) += BYTE2(v1121) + v171;
LABEL_490:
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v372);
                  LOWORD(v372) = v1099 + v372;
                  LOBYTE(v366) = *(_BYTE *)(v367 + v377);
                  LOBYTE(v367) = BYTE2(v1099) + v171 + v367;
                  v171 = __CFADD__(v1150, v372);
                  v372 += v1150;
                  BYTE1(v367) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1166, v373);
                  v373 += v1166;
                  v376[5] = strPal.fog_B7934_B7924[v366];
                  BYTE1(v366) += BYTE2(v1121) + v171;
LABEL_491:
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v372);
                  LOWORD(v372) = v1099 + v372;
                  LOBYTE(v366) = *(_BYTE *)(v367 + v377);
                  LOBYTE(v367) = BYTE2(v1099) + v171 + v367;
                  v171 = __CFADD__(v1150, v372);
                  v372 += v1150;
                  BYTE1(v367) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1166, v373);
                  v373 += v1166;
                  v376[6] = strPal.fog_B7934_B7924[v366];
                  BYTE1(v366) += BYTE2(v1121) + v171;
LABEL_492:
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v372);
                  LOWORD(v372) = v1099 + v372;
                  LOBYTE(v366) = *(_BYTE *)(v367 + v377);
                  LOBYTE(v367) = BYTE2(v1099) + v171 + v367;
                  v171 = __CFADD__(v1150, v372);
                  v372 += v1150;
                  BYTE1(v367) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1166, v373);
                  v373 += v1166;
                  v376[7] = strPal.fog_B7934_B7924[v366];
                  BYTE1(v366) += BYTE2(v1121) + v171;
LABEL_493:
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v372);
                  LOWORD(v372) = v1099 + v372;
                  LOBYTE(v366) = *(_BYTE *)(v367 + v377);
                  LOBYTE(v367) = BYTE2(v1099) + v171 + v367;
                  v171 = __CFADD__(v1150, v372);
                  v372 += v1150;
                  BYTE1(v367) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1166, v373);
                  v373 += v1166;
                  v376[8] = strPal.fog_B7934_B7924[v366];
                  BYTE1(v366) += BYTE2(v1121) + v171;
LABEL_494:
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v372);
                  LOWORD(v372) = v1099 + v372;
                  LOBYTE(v366) = *(_BYTE *)(v367 + v377);
                  LOBYTE(v367) = BYTE2(v1099) + v171 + v367;
                  v171 = __CFADD__(v1150, v372);
                  v372 += v1150;
                  BYTE1(v367) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1166, v373);
                  v373 += v1166;
                  v376[9] = strPal.fog_B7934_B7924[v366];
                  BYTE1(v366) += BYTE2(v1121) + v171;
LABEL_495:
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v372);
                  LOWORD(v372) = v1099 + v372;
                  LOBYTE(v366) = *(_BYTE *)(v367 + v377);
                  LOBYTE(v367) = BYTE2(v1099) + v171 + v367;
                  v171 = __CFADD__(v1150, v372);
                  v372 += v1150;
                  BYTE1(v367) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1166, v373);
                  v373 += v1166;
                  v376[10] = strPal.fog_B7934_B7924[v366];
                  BYTE1(v366) += BYTE2(v1121) + v171;
LABEL_496:
//adress 0x24629B_ 
//debug
/*#ifdef debug1
                  if (compare_index_24629B == 0xa5)
                  {
                      compare_index_24629B++;
                      compare_index_24629B--;
                  }
add_compare(0x24629B, true, true);
compare_index_24629B++;
#endif debug1*/
//debug
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v372);
                  LOWORD(v372) = v1099 + v372;
                  LOBYTE(v366) = *(_BYTE *)(v367 + v377);
                  LOBYTE(v367) = BYTE2(v1099) + v171 + v367;
                  v171 = __CFADD__(v1150, v372);
                  v372 += v1150;
                  BYTE1(v367) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1166, v373);
                  v373 += v1166;
                  v376[11] = strPal.fog_B7934_B7924[v366];//here
                  BYTE1(v366) += BYTE2(v1121) + v171;
LABEL_497:
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v372);
                  LOWORD(v372) = v1099 + v372;
                  LOBYTE(v366) = *(_BYTE *)(v367 + v377);
                  LOBYTE(v367) = BYTE2(v1099) + v171 + v367;
                  v171 = __CFADD__(v1150, v372);
                  v372 += v1150;
                  BYTE1(v367) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1166, v373);
                  v373 += v1166;
                  v376[12] = strPal.fog_B7934_B7924[v366];
                  BYTE1(v366) += BYTE2(v1121) + v171;
LABEL_498:
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v372);
                  LOWORD(v372) = v1099 + v372;
                  LOBYTE(v366) = *(_BYTE *)(v367 + v377);
                  LOBYTE(v367) = BYTE2(v1099) + v171 + v367;
                  v171 = __CFADD__(v1150, v372);
                  v372 += v1150;
                  BYTE1(v367) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1166, v373);
                  v373 += v1166;
                  v376[13] = strPal.fog_B7934_B7924[v366];
                  BYTE1(v366) += BYTE2(v1121) + v171;
LABEL_499:
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v372);
                  LOWORD(v372) = v1099 + v372;
                  LOBYTE(v366) = *(_BYTE *)(v367 + v377);
                  LOBYTE(v367) = BYTE2(v1099) + v171 + v367;
                  v171 = __CFADD__(v1150, v372);
                  v372 += v1150;
                  BYTE1(v367) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1166, v373);
                  v373 += v1166;
                  v376[14] = strPal.fog_B7934_B7924[v366];
                  BYTE1(v366) += BYTE2(v1121) + v171;
LABEL_500:
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v372);
                  LOWORD(v372) = v1099 + v372;
                  LOBYTE(v366) = *(_BYTE *)(v367 + v377);
                  LOBYTE(v367) = BYTE2(v1099) + v171 + v367;
                  v171 = __CFADD__(v1150, v372);
                  v372 += v1150;
                  BYTE1(v367) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1166, v373);
                  v373 += v1166;
                  v376[15] = strPal.fog_B7934_B7924[v366];
                  BYTE1(v366) += BYTE2(v1121) + v171;
                  v376 += 16;
                  v16 = (__int16)v373 <= 16;
                  LOWORD(v373) = v373 - 16;
                  if ( v16 )
                    break;
LABEL_485:
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v372);
                  LOWORD(v372) = v1099 + v372;
                  LOBYTE(v366) = *(_BYTE *)(v367 + v377);
                  LOBYTE(v367) = BYTE2(v1099) + v171 + v367;
                  v171 = __CFADD__(v1150, v372);
                  v372 += v1150;
                  BYTE1(v367) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1166, v373);
                  v373 += v1166;
                  *v376 = strPal.fog_B7934_B7924[v366];
                  BYTE1(v366) += BYTE2(v1121) + v171;
                }
                break;
            }
          }
LABEL_501:
          if ( !--v1098 )
            return;
        }
        if ( v369 > widthViewPort_93AD8 )
          LOWORD(v369) = widthViewPort_93AD8;
        v16 = (__int16)v369 <= (__int16)v366;
        v374 = v369 - v366;
        if ( v16 )
          goto LABEL_501;
        v370 += v366;
        LOBYTE(v367) = v368[10];
        v372 = __ROL4__(*((_DWORD *)v368 + 3), 16);
        v375 = v374;
        BYTE1(v367) = v372;
        LOWORD(v372) = *((_WORD *)v368 + 4);
        v373 = __ROL4__(*((_DWORD *)v368 + 4), 16);
        BYTE1(v366) = v373;
        LOWORD(v373) = v375;
        goto LABEL_484;
      case 6:
LABEL_503:
        v1260 = (char *)&unk_93AE0;
        v1151 = v1110 << 16;
        v1167 = v1121 << 16;
        HIWORD(v378) = 0;
        HIWORD(v379) = 0;
        while ( 1 )
        {
          v380 = v1260;
          v1260 += 20;
          LOWORD(v378) = *((_WORD *)v380 + 1);
          v381 = *((unsigned __int16 *)v380 + 3);
          v382 = pitchViewPort_93AD4 + v1077;
          v1077 += pitchViewPort_93AD4;
          if ( (v378 & 0x8000u) == 0 )
            break;
          if ( (__int16)v381 > 0 )
          {
            v383 = (unsigned __int16)-(__int16)v378;
            v384 = __ROL4__(*((_DWORD *)v380 + 3) + v1110 * v383, 16);
            BYTE1(v379) = v384;
            LOWORD(v384) = *((_WORD *)v380 + 4) + v1099 * v383;
            v378 = (unsigned int)(*((_DWORD *)v380 + 2) + v1099 * v383) >> 8;
            LOBYTE(v379) = (unsigned int)(*((_DWORD *)v380 + 2) + v1099 * v383) >> 16;
            v385 = __ROL4__(*((_DWORD *)v380 + 4) + v1121 * v383, 16);
            BYTE1(v378) = v385;
            LOWORD(v385) = *((_WORD *)v380 + 3);
            v378 = (unsigned __int16)v378;
            if ( (__int16)v385 > (__int16)widthViewPort_93AD8 )
              LOWORD(v385) = widthViewPort_93AD8;
LABEL_513:
            v388 = (_BYTE *)(dword_74F95_754A5[v385 & 0xF] + v382);
            v389 = dword_93AD0;
            switch ( v385 & 0xF )
            {
              case 0:
                goto LABEL_514;
              case 1:
                goto LABEL_559;
              case 2:
                goto LABEL_556;
              case 3:
                goto LABEL_553;
              case 4:
                goto LABEL_550;
              case 5:
                goto LABEL_547;
              case 6:
                goto LABEL_544;
              case 7:
                goto LABEL_541;
              case 8:
                goto LABEL_538;
              case 9:
                goto LABEL_535;
              case 0xA:
                goto LABEL_532;
              case 0xB:
                goto LABEL_529;
              case 0xC:
                goto LABEL_526;
              case 0xD:
                goto LABEL_523;
              case 0xE:
                goto LABEL_520;
              case 0xF:
                while ( 1 )
                {
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                    v388[1] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v384);
                  LOWORD(v384) = v1099 + v384;
                  LOBYTE(v379) = BYTE2(v1099) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(v1121) + v171;
LABEL_520:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                    v388[2] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v384);
                  LOWORD(v384) = v1099 + v384;
                  LOBYTE(v379) = BYTE2(v1099) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(v1121) + v171;
LABEL_523:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                    v388[3] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v384);
                  LOWORD(v384) = v1099 + v384;
                  LOBYTE(v379) = BYTE2(v1099) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(v1121) + v171;
LABEL_526:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                    v388[4] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v384);
                  LOWORD(v384) = v1099 + v384;
                  LOBYTE(v379) = BYTE2(v1099) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(v1121) + v171;
LABEL_529:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                    v388[5] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v384);
                  LOWORD(v384) = v1099 + v384;
                  LOBYTE(v379) = BYTE2(v1099) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(v1121) + v171;
LABEL_532:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                    v388[6] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v384);
                  LOWORD(v384) = v1099 + v384;
                  LOBYTE(v379) = BYTE2(v1099) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(v1121) + v171;
LABEL_535:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                    v388[7] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v384);
                  LOWORD(v384) = v1099 + v384;
                  LOBYTE(v379) = BYTE2(v1099) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(v1121) + v171;
LABEL_538:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                    v388[8] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v384);
                  LOWORD(v384) = v1099 + v384;
                  LOBYTE(v379) = BYTE2(v1099) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(v1121) + v171;
LABEL_541:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                    v388[9] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v384);
                  LOWORD(v384) = v1099 + v384;
                  LOBYTE(v379) = BYTE2(v1099) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(v1121) + v171;
LABEL_544:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                    v388[10] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v384);
                  LOWORD(v384) = v1099 + v384;
                  LOBYTE(v379) = BYTE2(v1099) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(v1121) + v171;
LABEL_547:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                    v388[11] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v384);
                  LOWORD(v384) = v1099 + v384;
                  LOBYTE(v379) = BYTE2(v1099) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(v1121) + v171;
LABEL_550:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                    v388[12] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v384);
                  LOWORD(v384) = v1099 + v384;
                  LOBYTE(v379) = BYTE2(v1099) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(v1121) + v171;
LABEL_553:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                    v388[13] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v384);
                  LOWORD(v384) = v1099 + v384;
                  LOBYTE(v379) = BYTE2(v1099) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(v1121) + v171;
LABEL_556:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                    v388[14] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v384);
                  LOWORD(v384) = v1099 + v384;
                  LOBYTE(v379) = BYTE2(v1099) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(v1121) + v171;
LABEL_559:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                    v388[15] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v384);
                  LOWORD(v384) = v1099 + v384;
                  LOBYTE(v379) = BYTE2(v1099) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(v1121) + v171;
                  v388 += 16;
                  v16 = (__int16)v385 <= 16;
                  LOWORD(v385) = v385 - 16;
                  if ( v16 )
                    break;
LABEL_514:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                    *v388 = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)v1099, (_WORD)v384);
                  LOWORD(v384) = v1099 + v384;
                  LOBYTE(v379) = BYTE2(v1099) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(v1110) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(v1121) + v171;
                }
                break;
            }
          }
LABEL_562:
          if ( !--v1098 )
            return;
        }
        if ( v381 > widthViewPort_93AD8 )
          LOWORD(v381) = widthViewPort_93AD8;
        v16 = (__int16)v381 <= (__int16)v378;
        v386 = v381 - v378;
        if ( v16 )
          goto LABEL_562;
        v382 += v378;
        LOBYTE(v379) = v380[10];
        v384 = __ROL4__(*((_DWORD *)v380 + 3), 16);
        v387 = v386;
        BYTE1(v379) = v384;
        LOWORD(v384) = *((_WORD *)v380 + 4);
        v385 = __ROL4__(*((_DWORD *)v380 + 4), 16);
        BYTE1(v378) = v385;
        LOWORD(v385) = v387;
        goto LABEL_513;
      case 7:
      case 11:
LABEL_564:
//adress 0x24674B_
//debug
#ifdef debug1
          if (compare_index_24674B == 0)
          {
              compare_index_24674B++;
              compare_index_24674B--;
          }
          //add_compare(0x24674B, true, true);
          compare_index_24674B++;
#endif debug1
//debug
        v390 = (unsigned __int16 *)&unk_93AE0;
        v1152 = v1110 << 16;
        HIWORD(v391) = 0;
        HIWORD(v392) = 0;
        while ( 1 )
        {
          LOWORD(v391) = v390[1];
          v393 = v390[3];
          v394 = (_BYTE *)(pitchViewPort_93AD4 + v1077);
          v1077 += pitchViewPort_93AD4;
          if ( (v391 & 0x8000u) == 0 )
            break;
          if ( (__int16)v393 > 0 )
          {
            v395 = (unsigned __int16)-(__int16)v391;
            v397 = __ROL4__(*((_DWORD *)v390 + 3) + v1110 * v395, 16);
            BYTE1(v392) = v397;
            v396 = *((_DWORD *)v390 + 2) + v1099 * v395;
            LOWORD(v397) = v396;
            v398 = v396 >> 8;
            LOBYTE(v392) = BYTE1(v398);
            if ( v393 > widthViewPort_93AD8 )
              LOWORD(v393) = widthViewPort_93AD8;
            v391 = (unsigned __int16)v398;
LABEL_574:
            v1261 = v390;
            v399 = dword_93AD0;
            BYTE1(v391) = byte_967E0;
            while ( 1 )
            {
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v397);
              LOWORD(v397) = v1099 + v397;
              LOBYTE(v392) = BYTE2(v1099) + v171 + v392;
              v171 = __CFADD__(v1152, v397);
              v400 = v1152 + v397;
              *v394 = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(v1110) + v171;
              v401 = v393 - 1;
              if ( !v401 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v400);
              LOWORD(v400) = v1099 + v400;
              LOBYTE(v392) = BYTE2(v1099) + v171 + v392;
              v171 = __CFADD__(v1152, v400);
              v402 = v1152 + v400;
              v394[1] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(v1110) + v171;
              v403 = v401 - 1;
              if ( !v403 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v402);
              LOWORD(v402) = v1099 + v402;
              LOBYTE(v392) = BYTE2(v1099) + v171 + v392;
              v171 = __CFADD__(v1152, v402);
              v404 = v1152 + v402;
              v394[2] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(v1110) + v171;
              v405 = v403 - 1;
              if ( !v405 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v404);
              LOWORD(v404) = v1099 + v404;
              LOBYTE(v392) = BYTE2(v1099) + v171 + v392;
              v171 = __CFADD__(v1152, v404);
              v406 = v1152 + v404;
              v394[3] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(v1110) + v171;
              v407 = v405 - 1;
              if ( !v407 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v406);
              LOWORD(v406) = v1099 + v406;
              LOBYTE(v392) = BYTE2(v1099) + v171 + v392;
              v171 = __CFADD__(v1152, v406);
              v408 = v1152 + v406;
              v394[4] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(v1110) + v171;
              v409 = v407 - 1;
              if ( !v409 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v408);
              LOWORD(v408) = v1099 + v408;
              LOBYTE(v392) = BYTE2(v1099) + v171 + v392;
              v171 = __CFADD__(v1152, v408);
              v410 = v1152 + v408;
              v394[5] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(v1110) + v171;
              v411 = v409 - 1;
              if ( !v411 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v410);
              LOWORD(v410) = v1099 + v410;
              LOBYTE(v392) = BYTE2(v1099) + v171 + v392;
              v171 = __CFADD__(v1152, v410);
              v412 = v1152 + v410;
              v394[6] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(v1110) + v171;
              v413 = v411 - 1;
              if ( !v413 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v412);
              LOWORD(v412) = v1099 + v412;
              LOBYTE(v392) = BYTE2(v1099) + v171 + v392;
              v171 = __CFADD__(v1152, v412);
              v414 = v1152 + v412;
              v394[7] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(v1110) + v171;
              v415 = v413 - 1;
              if ( !v415 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v414);
              LOWORD(v414) = v1099 + v414;
              LOBYTE(v392) = BYTE2(v1099) + v171 + v392;
              v171 = __CFADD__(v1152, v414);
              v416 = v1152 + v414;
              v394[8] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(v1110) + v171;
              v417 = v415 - 1;
              if ( !v417 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v416);
              LOWORD(v416) = v1099 + v416;
              LOBYTE(v392) = BYTE2(v1099) + v171 + v392;
              v171 = __CFADD__(v1152, v416);
              v418 = v1152 + v416;
              v394[9] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(v1110) + v171;
              v419 = v417 - 1;
              if ( !v419 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v418);
              LOWORD(v418) = v1099 + v418;
              LOBYTE(v392) = BYTE2(v1099) + v171 + v392;
              v171 = __CFADD__(v1152, v418);
              v420 = v1152 + v418;
              v394[10] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(v1110) + v171;
              v421 = v419 - 1;
              if ( !v421 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v420);
              LOWORD(v420) = v1099 + v420;
              LOBYTE(v392) = BYTE2(v1099) + v171 + v392;
              v171 = __CFADD__(v1152, v420);
              v422 = v1152 + v420;
              v394[11] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(v1110) + v171;
              v423 = v421 - 1;
              if ( !v423 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v422);
              LOWORD(v422) = v1099 + v422;
              LOBYTE(v392) = BYTE2(v1099) + v171 + v392;
              v171 = __CFADD__(v1152, v422);
              v424 = v1152 + v422;
              v394[12] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(v1110) + v171;
              v425 = v423 - 1;
              if ( !v425 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v424);
              LOWORD(v424) = v1099 + v424;
              LOBYTE(v392) = BYTE2(v1099) + v171 + v392;
              v171 = __CFADD__(v1152, v424);
              v426 = v1152 + v424;
              v394[13] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(v1110) + v171;
              v427 = v425 - 1;
              if ( !v427 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v426);
              LOWORD(v426) = v1099 + v426;
              LOBYTE(v392) = BYTE2(v1099) + v171 + v392;
              v171 = __CFADD__(v1152, v426);
              v428 = v1152 + v426;
              v394[14] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(v1110) + v171;
              v429 = v427 - 1;
              if ( !v429 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v428);
              LOWORD(v428) = v1099 + v428;
              LOBYTE(v392) = BYTE2(v1099) + v171 + v392;
              v171 = __CFADD__(v1152, v428);
              v397 = v1152 + v428;
              v394[15] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(v1110) + v171;
              LOWORD(v393) = v429 - 1;
              if ( !(_WORD)v393 )
                break;
              v394 += 16;
            }
            v390 = v1261;
          }
LABEL_593:
          v390 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v393 > widthViewPort_93AD8 )
          LOWORD(v393) = widthViewPort_93AD8;
        v16 = (__int16)v393 <= (__int16)v391;
        LOWORD(v393) = v393 - v391;
        if ( v16 )
          goto LABEL_593;
        v394 += v391;
        v397 = __ROL4__(*((_DWORD *)v390 + 3), 16);
        BYTE1(v392) = v397;
        LOWORD(v397) = v390[4];
        LOBYTE(v392) = *((_BYTE *)v390 + 10);
        goto LABEL_574;
      case 8:
LABEL_595:
        v430 = (unsigned __int16 *)&unk_93AE0;
        v1153 = v1110 << 16;
        HIWORD(v431) = 0;
        HIWORD(v432) = 0;
        while ( 1 )
        {
          LOWORD(v431) = v430[1];
          v433 = v430[3];
          v434 = (_BYTE *)(pitchViewPort_93AD4 + v1077);
          v1077 += pitchViewPort_93AD4;
          if ( (v431 & 0x8000u) == 0 )
            break;
          if ( (__int16)v433 > 0 )
          {
            v435 = (unsigned __int16)-(__int16)v431;
            v437 = __ROL4__(*((_DWORD *)v430 + 3) + v1110 * v435, 16);
            BYTE1(v432) = v437;
            v436 = *((_DWORD *)v430 + 2) + v1099 * v435;
            LOWORD(v437) = v436;
            v438 = v436 >> 8;
            LOBYTE(v432) = BYTE1(v438);
            if ( v433 > widthViewPort_93AD8 )
              LOWORD(v433) = widthViewPort_93AD8;
            v431 = (unsigned __int16)v438;
LABEL_605:
            v1262 = v430;
            v439 = dword_93AD0;
            BYTE1(v431) = byte_967E0;
            while ( 1 )
            {
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v437);
              LOWORD(v437) = v1099 + v437;
              LOBYTE(v432) = BYTE2(v1099) + v171 + v432;
              if ( (_BYTE)v431 )
                *v434 = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v437);
              v440 = v1153 + v437;
              BYTE1(v432) += BYTE2(v1110) + v171;
              v441 = v433 - 1;
              if ( !v441 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v440);
              LOWORD(v440) = v1099 + v440;
              LOBYTE(v432) = BYTE2(v1099) + v171 + v432;
              if ( (_BYTE)v431 )
                v434[1] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v440);
              v442 = v1153 + v440;
              BYTE1(v432) += BYTE2(v1110) + v171;
              v443 = v441 - 1;
              if ( !v443 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v442);
              LOWORD(v442) = v1099 + v442;
              LOBYTE(v432) = BYTE2(v1099) + v171 + v432;
              if ( (_BYTE)v431 )
                v434[2] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v442);
              v444 = v1153 + v442;
              BYTE1(v432) += BYTE2(v1110) + v171;
              v445 = v443 - 1;
              if ( !v445 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v444);
              LOWORD(v444) = v1099 + v444;
              LOBYTE(v432) = BYTE2(v1099) + v171 + v432;
              if ( (_BYTE)v431 )
                v434[3] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v444);
              v446 = v1153 + v444;
              BYTE1(v432) += BYTE2(v1110) + v171;
              v447 = v445 - 1;
              if ( !v447 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v446);
              LOWORD(v446) = v1099 + v446;
              LOBYTE(v432) = BYTE2(v1099) + v171 + v432;
              if ( (_BYTE)v431 )
                v434[4] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v446);
              v448 = v1153 + v446;
              BYTE1(v432) += BYTE2(v1110) + v171;
              v449 = v447 - 1;
              if ( !v449 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v448);
              LOWORD(v448) = v1099 + v448;
              LOBYTE(v432) = BYTE2(v1099) + v171 + v432;
              if ( (_BYTE)v431 )
                v434[5] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v448);
              v450 = v1153 + v448;
              BYTE1(v432) += BYTE2(v1110) + v171;
              v451 = v449 - 1;
              if ( !v451 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v450);
              LOWORD(v450) = v1099 + v450;
              LOBYTE(v432) = BYTE2(v1099) + v171 + v432;
              if ( (_BYTE)v431 )
                v434[6] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v450);
              v452 = v1153 + v450;
              BYTE1(v432) += BYTE2(v1110) + v171;
              v453 = v451 - 1;
              if ( !v453 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v452);
              LOWORD(v452) = v1099 + v452;
              LOBYTE(v432) = BYTE2(v1099) + v171 + v432;
              if ( (_BYTE)v431 )
                v434[7] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v452);
              v454 = v1153 + v452;
              BYTE1(v432) += BYTE2(v1110) + v171;
              v455 = v453 - 1;
              if ( !v455 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v454);
              LOWORD(v454) = v1099 + v454;
              LOBYTE(v432) = BYTE2(v1099) + v171 + v432;
              if ( (_BYTE)v431 )
                v434[8] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v454);
              v456 = v1153 + v454;
              BYTE1(v432) += BYTE2(v1110) + v171;
              v457 = v455 - 1;
              if ( !v457 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v456);
              LOWORD(v456) = v1099 + v456;
              LOBYTE(v432) = BYTE2(v1099) + v171 + v432;
              if ( (_BYTE)v431 )
                v434[9] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v456);
              v458 = v1153 + v456;
              BYTE1(v432) += BYTE2(v1110) + v171;
              v459 = v457 - 1;
              if ( !v459 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v458);
              LOWORD(v458) = v1099 + v458;
              LOBYTE(v432) = BYTE2(v1099) + v171 + v432;
              if ( (_BYTE)v431 )
                v434[10] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v458);
              v460 = v1153 + v458;
              BYTE1(v432) += BYTE2(v1110) + v171;
              v461 = v459 - 1;
              if ( !v461 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v460);
              LOWORD(v460) = v1099 + v460;
              LOBYTE(v432) = BYTE2(v1099) + v171 + v432;
              if ( (_BYTE)v431 )
                v434[11] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v460);
              v462 = v1153 + v460;
              BYTE1(v432) += BYTE2(v1110) + v171;
              v463 = v461 - 1;
              if ( !v463 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v462);
              LOWORD(v462) = v1099 + v462;
              LOBYTE(v432) = BYTE2(v1099) + v171 + v432;
              if ( (_BYTE)v431 )
                v434[12] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v462);
              v464 = v1153 + v462;
              BYTE1(v432) += BYTE2(v1110) + v171;
              v465 = v463 - 1;
              if ( !v465 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v464);
              LOWORD(v464) = v1099 + v464;
              LOBYTE(v432) = BYTE2(v1099) + v171 + v432;
              if ( (_BYTE)v431 )
                v434[13] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v464);
              v466 = v1153 + v464;
              BYTE1(v432) += BYTE2(v1110) + v171;
              v467 = v465 - 1;
              if ( !v467 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v466);
              LOWORD(v466) = v1099 + v466;
              LOBYTE(v432) = BYTE2(v1099) + v171 + v432;
              if ( (_BYTE)v431 )
                v434[14] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v466);
              v468 = v1153 + v466;
              BYTE1(v432) += BYTE2(v1110) + v171;
              v469 = v467 - 1;
              if ( !v469 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v468);
              LOWORD(v468) = v1099 + v468;
              LOBYTE(v432) = BYTE2(v1099) + v171 + v432;
              if ( (_BYTE)v431 )
                v434[15] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v468);
              v437 = v1153 + v468;
              BYTE1(v432) += BYTE2(v1110) + v171;
              LOWORD(v433) = v469 - 1;
              if ( !(_WORD)v433 )
                break;
              v434 += 16;
            }
            v430 = v1262;
          }
LABEL_656:
          v430 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v433 > widthViewPort_93AD8 )
          LOWORD(v433) = widthViewPort_93AD8;
        v16 = (__int16)v433 <= (__int16)v431;
        LOWORD(v433) = v433 - v431;
        if ( v16 )
          goto LABEL_656;
        v434 += v431;
        v437 = __ROL4__(*((_DWORD *)v430 + 3), 16);
        BYTE1(v432) = v437;
        LOWORD(v437) = v430[4];
        LOBYTE(v432) = *((_BYTE *)v430 + 10);
        goto LABEL_605;
      case 9:
      case 10:
LABEL_658:
        v470 = (unsigned __int16 *)&unk_93AE0;
        v1154 = v1110 << 16;
        HIWORD(v471) = 0;
        HIWORD(v472) = 0;
        while ( 1 )
        {
          LOWORD(v471) = v470[1];
          v473 = v470[3];
          v474 = (_BYTE *)(pitchViewPort_93AD4 + v1077);
          v1077 += pitchViewPort_93AD4;
          if ( (v471 & 0x8000u) == 0 )
            break;
          if ( (__int16)v473 > 0 )
          {
            v475 = (unsigned __int16)-(__int16)v471;
            v477 = __ROL4__(*((_DWORD *)v470 + 3) + v1110 * v475, 16);
            BYTE1(v472) = v477;
            v476 = *((_DWORD *)v470 + 2) + v1099 * v475;
            LOWORD(v477) = v476;
            v478 = v476 >> 8;
            LOBYTE(v472) = BYTE1(v478);
            if ( v473 > widthViewPort_93AD8 )
              LOWORD(v473) = widthViewPort_93AD8;
            v471 = (unsigned __int16)v478;
LABEL_668:
            v1263 = v470;
            v479 = dword_93AD0;
            while ( 1 )
            {
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v477);
              LOWORD(v477) = v1099 + v477;
              LOBYTE(v472) = BYTE2(v1099) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = *v474;
                *v474 = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v477);
              v480 = v1154 + v477;
              BYTE1(v472) += BYTE2(v1110) + v171;
              v481 = v473 - 1;
              if ( !v481 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v480);
              LOWORD(v480) = v1099 + v480;
              LOBYTE(v472) = BYTE2(v1099) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = v474[1];
                v474[1] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v480);
              v482 = v1154 + v480;
              BYTE1(v472) += BYTE2(v1110) + v171;
              v483 = v481 - 1;
              if ( !v483 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v482);
              LOWORD(v482) = v1099 + v482;
              LOBYTE(v472) = BYTE2(v1099) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = v474[2];
                v474[2] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v482);
              v484 = v1154 + v482;
              BYTE1(v472) += BYTE2(v1110) + v171;
              v485 = v483 - 1;
              if ( !v485 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v484);
              LOWORD(v484) = v1099 + v484;
              LOBYTE(v472) = BYTE2(v1099) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = v474[3];
                v474[3] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v484);
              v486 = v1154 + v484;
              BYTE1(v472) += BYTE2(v1110) + v171;
              v487 = v485 - 1;
              if ( !v487 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v486);
              LOWORD(v486) = v1099 + v486;
              LOBYTE(v472) = BYTE2(v1099) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = v474[4];
                v474[4] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v486);
              v488 = v1154 + v486;
              BYTE1(v472) += BYTE2(v1110) + v171;
              v489 = v487 - 1;
              if ( !v489 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v488);
              LOWORD(v488) = v1099 + v488;
              LOBYTE(v472) = BYTE2(v1099) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = v474[5];
                v474[5] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v488);
              v490 = v1154 + v488;
              BYTE1(v472) += BYTE2(v1110) + v171;
              v491 = v489 - 1;
              if ( !v491 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v490);
              LOWORD(v490) = v1099 + v490;
              LOBYTE(v472) = BYTE2(v1099) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = v474[6];
                v474[6] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v490);
              v492 = v1154 + v490;
              BYTE1(v472) += BYTE2(v1110) + v171;
              v493 = v491 - 1;
              if ( !v493 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v492);
              LOWORD(v492) = v1099 + v492;
              LOBYTE(v472) = BYTE2(v1099) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = v474[7];
                v474[7] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v492);
              v494 = v1154 + v492;
              BYTE1(v472) += BYTE2(v1110) + v171;
              v495 = v493 - 1;
              if ( !v495 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v494);
              LOWORD(v494) = v1099 + v494;
              LOBYTE(v472) = BYTE2(v1099) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = v474[8];
                v474[8] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v494);
              v496 = v1154 + v494;
              BYTE1(v472) += BYTE2(v1110) + v171;
              v497 = v495 - 1;
              if ( !v497 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v496);
              LOWORD(v496) = v1099 + v496;
              LOBYTE(v472) = BYTE2(v1099) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = v474[9];
                v474[9] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v496);
              v498 = v1154 + v496;
              BYTE1(v472) += BYTE2(v1110) + v171;
              v499 = v497 - 1;
              if ( !v499 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v498);
              LOWORD(v498) = v1099 + v498;
              LOBYTE(v472) = BYTE2(v1099) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = v474[10];
                v474[10] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v498);
              v500 = v1154 + v498;
              BYTE1(v472) += BYTE2(v1110) + v171;
              v501 = v499 - 1;
              if ( !v501 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v500);
              LOWORD(v500) = v1099 + v500;
              LOBYTE(v472) = BYTE2(v1099) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = v474[11];
                v474[11] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v500);
              v502 = v1154 + v500;
              BYTE1(v472) += BYTE2(v1110) + v171;
              v503 = v501 - 1;
              if ( !v503 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v502);
              LOWORD(v502) = v1099 + v502;
              LOBYTE(v472) = BYTE2(v1099) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = v474[12];
                v474[12] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v502);
              v504 = v1154 + v502;
              BYTE1(v472) += BYTE2(v1110) + v171;
              v505 = v503 - 1;
              if ( !v505 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v504);
              LOWORD(v504) = v1099 + v504;
              LOBYTE(v472) = BYTE2(v1099) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = v474[13];
                v474[13] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v504);
              v506 = v1154 + v504;
              BYTE1(v472) += BYTE2(v1110) + v171;
              v507 = v505 - 1;
              if ( !v507 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v506);
              LOWORD(v506) = v1099 + v506;
              LOBYTE(v472) = BYTE2(v1099) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = v474[14];
                v474[14] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v506);
              v508 = v1154 + v506;
              BYTE1(v472) += BYTE2(v1110) + v171;
              v509 = v507 - 1;
              if ( !v509 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v508);
              LOWORD(v508) = v1099 + v508;
              LOBYTE(v472) = BYTE2(v1099) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = v474[15];
                v474[15] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v508);
              v477 = v1154 + v508;
              BYTE1(v472) += BYTE2(v1110) + v171;
              LOWORD(v473) = v509 - 1;
              if ( !(_WORD)v473 )
                break;
              v474 += 16;
            }
            v470 = v1263;
          }
LABEL_719:
          v470 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v473 > widthViewPort_93AD8 )
          LOWORD(v473) = widthViewPort_93AD8;
        v16 = (__int16)v473 <= (__int16)v471;
        LOWORD(v473) = v473 - v471;
        if ( v16 )
          goto LABEL_719;
        v474 += v471;
        v477 = __ROL4__(*((_DWORD *)v470 + 3), 16);
        BYTE1(v472) = v477;
        LOWORD(v477) = v470[4];
        LOBYTE(v472) = *((_BYTE *)v470 + 10);
        goto LABEL_668;
      case 12:
LABEL_721:
        v510 = (unsigned __int16 *)&unk_93AE0;
        v1155 = v1110 << 16;
        HIWORD(v511) = 0;
        HIWORD(v512) = 0;
        while ( 1 )
        {
          LOWORD(v511) = v510[1];
          v513 = v510[3];
          v514 = (_BYTE *)(pitchViewPort_93AD4 + v1077);
          v1077 += pitchViewPort_93AD4;
          if ( (v511 & 0x8000u) == 0 )
            break;
          if ( (__int16)v513 > 0 )
          {
            v515 = (unsigned __int16)-(__int16)v511;
            v517 = __ROL4__(*((_DWORD *)v510 + 3) + v1110 * v515, 16);
            BYTE1(v512) = v517;
            v516 = *((_DWORD *)v510 + 2) + v1099 * v515;
            LOWORD(v517) = v516;
            v518 = v516 >> 8;
            LOBYTE(v512) = BYTE1(v518);
            if ( v513 > widthViewPort_93AD8 )
              LOWORD(v513) = widthViewPort_93AD8;
            v511 = (unsigned __int16)v518;
LABEL_731:
            v1264 = v510;
            v519 = dword_93AD0;
            LOBYTE(v511) = byte_967E0;
            while ( 1 )
            {
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v517);
              LOWORD(v517) = v1099 + v517;
              LOBYTE(v512) = BYTE2(v1099) + v171 + v512;
              v171 = __CFADD__(v1155, v517);
              v520 = v1155 + v517;
              *v514 = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(v1110) + v171;
              v521 = v513 - 1;
              if ( !v521 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v520);
              LOWORD(v520) = v1099 + v520;
              LOBYTE(v512) = BYTE2(v1099) + v171 + v512;
              v171 = __CFADD__(v1155, v520);
              v522 = v1155 + v520;
              v514[1] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(v1110) + v171;
              v523 = v521 - 1;
              if ( !v523 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v522);
              LOWORD(v522) = v1099 + v522;
              LOBYTE(v512) = BYTE2(v1099) + v171 + v512;
              v171 = __CFADD__(v1155, v522);
              v524 = v1155 + v522;
              v514[2] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(v1110) + v171;
              v525 = v523 - 1;
              if ( !v525 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v524);
              LOWORD(v524) = v1099 + v524;
              LOBYTE(v512) = BYTE2(v1099) + v171 + v512;
              v171 = __CFADD__(v1155, v524);
              v526 = v1155 + v524;
              v514[3] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(v1110) + v171;
              v527 = v525 - 1;
              if ( !v527 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v526);
              LOWORD(v526) = v1099 + v526;
              LOBYTE(v512) = BYTE2(v1099) + v171 + v512;
              v171 = __CFADD__(v1155, v526);
              v528 = v1155 + v526;
              v514[4] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(v1110) + v171;
              v529 = v527 - 1;
              if ( !v529 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v528);
              LOWORD(v528) = v1099 + v528;
              LOBYTE(v512) = BYTE2(v1099) + v171 + v512;
              v171 = __CFADD__(v1155, v528);
              v530 = v1155 + v528;
              v514[5] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(v1110) + v171;
              v531 = v529 - 1;
              if ( !v531 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v530);
              LOWORD(v530) = v1099 + v530;
              LOBYTE(v512) = BYTE2(v1099) + v171 + v512;
              v171 = __CFADD__(v1155, v530);
              v532 = v1155 + v530;
              v514[6] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(v1110) + v171;
              v533 = v531 - 1;
              if ( !v533 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v532);
              LOWORD(v532) = v1099 + v532;
              LOBYTE(v512) = BYTE2(v1099) + v171 + v512;
              v171 = __CFADD__(v1155, v532);
              v534 = v1155 + v532;
              v514[7] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(v1110) + v171;
              v535 = v533 - 1;
              if ( !v535 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v534);
              LOWORD(v534) = v1099 + v534;
              LOBYTE(v512) = BYTE2(v1099) + v171 + v512;
              v171 = __CFADD__(v1155, v534);
              v536 = v1155 + v534;
              v514[8] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(v1110) + v171;
              v537 = v535 - 1;
              if ( !v537 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v536);
              LOWORD(v536) = v1099 + v536;
              LOBYTE(v512) = BYTE2(v1099) + v171 + v512;
              v171 = __CFADD__(v1155, v536);
              v538 = v1155 + v536;
              v514[9] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(v1110) + v171;
              v539 = v537 - 1;
              if ( !v539 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v538);
              LOWORD(v538) = v1099 + v538;
              LOBYTE(v512) = BYTE2(v1099) + v171 + v512;
              v171 = __CFADD__(v1155, v538);
              v540 = v1155 + v538;
              v514[10] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(v1110) + v171;
              v541 = v539 - 1;
              if ( !v541 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v540);
              LOWORD(v540) = v1099 + v540;
              LOBYTE(v512) = BYTE2(v1099) + v171 + v512;
              v171 = __CFADD__(v1155, v540);
              v542 = v1155 + v540;
              v514[11] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(v1110) + v171;
              v543 = v541 - 1;
              if ( !v543 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v542);
              LOWORD(v542) = v1099 + v542;
              LOBYTE(v512) = BYTE2(v1099) + v171 + v512;
              v171 = __CFADD__(v1155, v542);
              v544 = v1155 + v542;
              v514[12] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(v1110) + v171;
              v545 = v543 - 1;
              if ( !v545 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v544);
              LOWORD(v544) = v1099 + v544;
              LOBYTE(v512) = BYTE2(v1099) + v171 + v512;
              v171 = __CFADD__(v1155, v544);
              v546 = v1155 + v544;
              v514[13] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(v1110) + v171;
              v547 = v545 - 1;
              if ( !v547 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v546);
              LOWORD(v546) = v1099 + v546;
              LOBYTE(v512) = BYTE2(v1099) + v171 + v512;
              v171 = __CFADD__(v1155, v546);
              v548 = v1155 + v546;
              v514[14] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(v1110) + v171;
              v549 = v547 - 1;
              if ( !v549 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v548);
              LOWORD(v548) = v1099 + v548;
              LOBYTE(v512) = BYTE2(v1099) + v171 + v512;
              v171 = __CFADD__(v1155, v548);
              v517 = v1155 + v548;
              v514[15] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(v1110) + v171;
              LOWORD(v513) = v549 - 1;
              if ( !(_WORD)v513 )
                break;
              v514 += 16;
            }
            v510 = v1264;
          }
LABEL_750:
          v510 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v513 > widthViewPort_93AD8 )
          LOWORD(v513) = widthViewPort_93AD8;
        v16 = (__int16)v513 <= (__int16)v511;
        LOWORD(v513) = v513 - v511;
        if ( v16 )
          goto LABEL_750;
        v514 += v511;
        v517 = __ROL4__(*((_DWORD *)v510 + 3), 16);
        BYTE1(v512) = v517;
        LOWORD(v517) = v510[4];
        LOBYTE(v512) = *((_BYTE *)v510 + 10);
        goto LABEL_731;
      case 13:
LABEL_752:
        v550 = (unsigned __int16 *)&unk_93AE0;
        v1156 = v1110 << 16;
        HIWORD(v551) = 0;
        HIWORD(v552) = 0;
        while ( 1 )
        {
          LOWORD(v551) = v550[1];
          v553 = v550[3];
          v554 = (_BYTE *)(pitchViewPort_93AD4 + v1077);
          v1077 += pitchViewPort_93AD4;
          if ( (v551 & 0x8000u) == 0 )
            break;
          if ( (__int16)v553 > 0 )
          {
            v555 = (unsigned __int16)-(__int16)v551;
            v557 = __ROL4__(*((_DWORD *)v550 + 3) + v1110 * v555, 16);
            BYTE1(v552) = v557;
            v556 = *((_DWORD *)v550 + 2) + v1099 * v555;
            LOWORD(v557) = v556;
            v558 = v556 >> 8;
            LOBYTE(v552) = BYTE1(v558);
            if ( v553 > widthViewPort_93AD8 )
              LOWORD(v553) = widthViewPort_93AD8;
            v551 = (unsigned __int16)v558;
LABEL_762:
            v1265 = v550;
            v559 = dword_93AD0;
            BYTE1(v551) = byte_967E0;
            while ( 1 )
            {
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v557);
              LOWORD(v557) = v1099 + v557;
              LOBYTE(v552) = BYTE2(v1099) + v171 + v552;
              v171 = __CFADD__(v1156, v557);
              v560 = v1156 + v557;
              *v554 = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(v1110) + v171;
              v561 = v553 - 1;
              if ( !v561 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v560);
              LOWORD(v560) = v1099 + v560;
              LOBYTE(v552) = BYTE2(v1099) + v171 + v552;
              v171 = __CFADD__(v1156, v560);
              v562 = v1156 + v560;
              v554[1] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(v1110) + v171;
              v563 = v561 - 1;
              if ( !v563 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v562);
              LOWORD(v562) = v1099 + v562;
              LOBYTE(v552) = BYTE2(v1099) + v171 + v552;
              v171 = __CFADD__(v1156, v562);
              v564 = v1156 + v562;
              v554[2] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(v1110) + v171;
              v565 = v563 - 1;
              if ( !v565 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v564);
              LOWORD(v564) = v1099 + v564;
              LOBYTE(v552) = BYTE2(v1099) + v171 + v552;
              v171 = __CFADD__(v1156, v564);
              v566 = v1156 + v564;
              v554[3] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(v1110) + v171;
              v567 = v565 - 1;
              if ( !v567 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v566);
              LOWORD(v566) = v1099 + v566;
              LOBYTE(v552) = BYTE2(v1099) + v171 + v552;
              v171 = __CFADD__(v1156, v566);
              v568 = v1156 + v566;
              v554[4] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(v1110) + v171;
              v569 = v567 - 1;
              if ( !v569 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v568);
              LOWORD(v568) = v1099 + v568;
              LOBYTE(v552) = BYTE2(v1099) + v171 + v552;
              v171 = __CFADD__(v1156, v568);
              v570 = v1156 + v568;
              v554[5] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(v1110) + v171;
              v571 = v569 - 1;
              if ( !v571 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v570);
              LOWORD(v570) = v1099 + v570;
              LOBYTE(v552) = BYTE2(v1099) + v171 + v552;
              v171 = __CFADD__(v1156, v570);
              v572 = v1156 + v570;
              v554[6] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(v1110) + v171;
              v573 = v571 - 1;
              if ( !v573 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v572);
              LOWORD(v572) = v1099 + v572;
              LOBYTE(v552) = BYTE2(v1099) + v171 + v552;
              v171 = __CFADD__(v1156, v572);
              v574 = v1156 + v572;
              v554[7] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(v1110) + v171;
              v575 = v573 - 1;
              if ( !v575 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v574);
              LOWORD(v574) = v1099 + v574;
              LOBYTE(v552) = BYTE2(v1099) + v171 + v552;
              v171 = __CFADD__(v1156, v574);
              v576 = v1156 + v574;
              v554[8] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(v1110) + v171;
              v577 = v575 - 1;
              if ( !v577 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v576);
              LOWORD(v576) = v1099 + v576;
              LOBYTE(v552) = BYTE2(v1099) + v171 + v552;
              v171 = __CFADD__(v1156, v576);
              v578 = v1156 + v576;
              v554[9] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(v1110) + v171;
              v579 = v577 - 1;
              if ( !v579 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v578);
              LOWORD(v578) = v1099 + v578;
              LOBYTE(v552) = BYTE2(v1099) + v171 + v552;
              v171 = __CFADD__(v1156, v578);
              v580 = v1156 + v578;
              v554[10] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(v1110) + v171;
              v581 = v579 - 1;
              if ( !v581 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v580);
              LOWORD(v580) = v1099 + v580;
              LOBYTE(v552) = BYTE2(v1099) + v171 + v552;
              v171 = __CFADD__(v1156, v580);
              v582 = v1156 + v580;
              v554[11] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(v1110) + v171;
              v583 = v581 - 1;
              if ( !v583 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v582);
              LOWORD(v582) = v1099 + v582;
              LOBYTE(v552) = BYTE2(v1099) + v171 + v552;
              v171 = __CFADD__(v1156, v582);
              v584 = v1156 + v582;
              v554[12] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(v1110) + v171;
              v585 = v583 - 1;
              if ( !v585 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v584);
              LOWORD(v584) = v1099 + v584;
              LOBYTE(v552) = BYTE2(v1099) + v171 + v552;
              v171 = __CFADD__(v1156, v584);
              v586 = v1156 + v584;
              v554[13] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(v1110) + v171;
              v587 = v585 - 1;
              if ( !v587 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v586);
              LOWORD(v586) = v1099 + v586;
              LOBYTE(v552) = BYTE2(v1099) + v171 + v552;
              v171 = __CFADD__(v1156, v586);
              v588 = v1156 + v586;
              v554[14] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(v1110) + v171;
              v589 = v587 - 1;
              if ( !v589 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v588);
              LOWORD(v588) = v1099 + v588;
              LOBYTE(v552) = BYTE2(v1099) + v171 + v552;
              v171 = __CFADD__(v1156, v588);
              v557 = v1156 + v588;
              v554[15] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(v1110) + v171;
              LOWORD(v553) = v589 - 1;
              if ( !(_WORD)v553 )
                break;
              v554 += 16;
            }
            v550 = v1265;
          }
LABEL_781:
          v550 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v553 > widthViewPort_93AD8 )
          LOWORD(v553) = widthViewPort_93AD8;
        v16 = (__int16)v553 <= (__int16)v551;
        LOWORD(v553) = v553 - v551;
        if ( v16 )
          goto LABEL_781;
        v554 += v551;
        v557 = __ROL4__(*((_DWORD *)v550 + 3), 16);
        BYTE1(v552) = v557;
        LOWORD(v557) = v550[4];
        LOBYTE(v552) = *((_BYTE *)v550 + 10);
        goto LABEL_762;
      case 14:
LABEL_783:
        v590 = (unsigned __int16 *)&unk_93AE0;
        v591 = (_BYTE *)v1077;
        HIWORD(v592) = 0;
        BYTE1(v592) = byte_967E0;
        HIWORD(v593) = 0;
        while ( 1 )
        {
          LOWORD(v593) = v590[1];
          v594 = v590[3];
          v591 += pitchViewPort_93AD4;
          if ( (v593 & 0x8000u) == 0 )
            break;
          if ( (__int16)v594 > 0 )
          {
            if ( v594 > widthViewPort_93AD8 )
              LOWORD(v594) = widthViewPort_93AD8;
LABEL_793:
            for ( k = v591; ; k += 16 )
            {
              LOBYTE(v592) = *k;
              *k = strPal.byte_BB934_BB924[v592];
              v596 = v594 - 1;
              if ( !v596 )
                break;
              LOBYTE(v592) = k[1];
              k[1] = strPal.byte_BB934_BB924[v592];
              v597 = v596 - 1;
              if ( !v597 )
                break;
              LOBYTE(v592) = k[2];
              k[2] = strPal.byte_BB934_BB924[v592];
              v598 = v597 - 1;
              if ( !v598 )
                break;
              LOBYTE(v592) = k[3];
              k[3] = strPal.byte_BB934_BB924[v592];
              v599 = v598 - 1;
              if ( !v599 )
                break;
              LOBYTE(v592) = k[4];
              k[4] = strPal.byte_BB934_BB924[v592];
              v600 = v599 - 1;
              if ( !v600 )
                break;
              LOBYTE(v592) = k[5];
              k[5] = strPal.byte_BB934_BB924[v592];
              v601 = v600 - 1;
              if ( !v601 )
                break;
              LOBYTE(v592) = k[6];
              k[6] = strPal.byte_BB934_BB924[v592];
              v602 = v601 - 1;
              if ( !v602 )
                break;
              LOBYTE(v592) = k[7];
              k[7] = strPal.byte_BB934_BB924[v592];
              v603 = v602 - 1;
              if ( !v603 )
                break;
              LOBYTE(v592) = k[8];
              k[8] = strPal.byte_BB934_BB924[v592];
              v604 = v603 - 1;
              if ( !v604 )
                break;
              LOBYTE(v592) = k[9];
              k[9] = strPal.byte_BB934_BB924[v592];
              v605 = v604 - 1;
              if ( !v605 )
                break;
              LOBYTE(v592) = k[10];
              k[10] = strPal.byte_BB934_BB924[v592];
              v606 = v605 - 1;
              if ( !v606 )
                break;
              LOBYTE(v592) = k[11];
              k[11] = strPal.byte_BB934_BB924[v592];
              v607 = v606 - 1;
              if ( !v607 )
                break;
              LOBYTE(v592) = k[12];
              k[12] = strPal.byte_BB934_BB924[v592];
              v608 = v607 - 1;
              if ( !v608 )
                break;
              LOBYTE(v592) = k[13];
              k[13] = strPal.byte_BB934_BB924[v592];
              v609 = v608 - 1;
              if ( !v609 )
                break;
              LOBYTE(v592) = k[14];
              k[14] = strPal.byte_BB934_BB924[v592];
              v610 = v609 - 1;
              if ( !v610 )
                break;
              LOBYTE(v592) = k[15];
              k[15] = strPal.byte_BB934_BB924[v592];
              LOWORD(v594) = v610 - 1;
              if ( !(_WORD)v594 )
                break;
            }
          }
LABEL_810:
          v590 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v594 > widthViewPort_93AD8 )
          LOWORD(v594) = widthViewPort_93AD8;
        v16 = (__int16)v594 <= (__int16)v593;
        LOWORD(v594) = v594 - v593;
        if ( v16 )
          goto LABEL_810;
        k = &v591[v593];
        goto LABEL_793;
      case 15:
LABEL_812:
        v611 = (unsigned __int16 *)&unk_93AE0;
        v612 = (_BYTE *)v1077;
        v613 = (unsigned __int8)byte_967E0;
        HIWORD(v614) = 0;
        while ( 1 )
        {
          LOWORD(v614) = v611[1];
          v615 = v611[3];
          v612 += pitchViewPort_93AD4;
          if ( (v614 & 0x8000u) == 0 )
            break;
          if ( (__int16)v615 > 0 )
          {
            if ( v615 > widthViewPort_93AD8 )
              LOWORD(v615) = widthViewPort_93AD8;
LABEL_822:
            for ( m = v612; ; m += 16 )
            {
              BYTE1(v613) = *m;
              *m = strPal.byte_BB934_BB924[v613];
              v617 = v615 - 1;
              if ( !v617 )
                break;
              BYTE1(v613) = m[1];
              m[1] = strPal.byte_BB934_BB924[v613];
              v618 = v617 - 1;
              if ( !v618 )
                break;
              BYTE1(v613) = m[2];
              m[2] = strPal.byte_BB934_BB924[v613];
              v619 = v618 - 1;
              if ( !v619 )
                break;
              BYTE1(v613) = m[3];
              m[3] = strPal.byte_BB934_BB924[v613];
              v620 = v619 - 1;
              if ( !v620 )
                break;
              BYTE1(v613) = m[4];
              m[4] = strPal.byte_BB934_BB924[v613];
              v621 = v620 - 1;
              if ( !v621 )
                break;
              BYTE1(v613) = m[5];
              m[5] = strPal.byte_BB934_BB924[v613];
              v622 = v621 - 1;
              if ( !v622 )
                break;
              BYTE1(v613) = m[6];
              m[6] = strPal.byte_BB934_BB924[v613];
              v623 = v622 - 1;
              if ( !v623 )
                break;
              BYTE1(v613) = m[7];
              m[7] = strPal.byte_BB934_BB924[v613];
              v624 = v623 - 1;
              if ( !v624 )
                break;
              BYTE1(v613) = m[8];
              m[8] = strPal.byte_BB934_BB924[v613];
              v625 = v624 - 1;
              if ( !v625 )
                break;
              BYTE1(v613) = m[9];
              m[9] = strPal.byte_BB934_BB924[v613];
              v626 = v625 - 1;
              if ( !v626 )
                break;
              BYTE1(v613) = m[10];
              m[10] = strPal.byte_BB934_BB924[v613];
              v627 = v626 - 1;
              if ( !v627 )
                break;
              BYTE1(v613) = m[11];
              m[11] = strPal.byte_BB934_BB924[v613];
              v628 = v627 - 1;
              if ( !v628 )
                break;
              BYTE1(v613) = m[12];
              m[12] = strPal.byte_BB934_BB924[v613];
              v629 = v628 - 1;
              if ( !v629 )
                break;
              BYTE1(v613) = m[13];
              m[13] = strPal.byte_BB934_BB924[v613];
              v630 = v629 - 1;
              if ( !v630 )
                break;
              BYTE1(v613) = m[14];
              m[14] = strPal.byte_BB934_BB924[v613];
              v631 = v630 - 1;
              if ( !v631 )
                break;
              BYTE1(v613) = m[15];
              m[15] = strPal.byte_BB934_BB924[v613];
              LOWORD(v615) = v631 - 1;
              if ( !(_WORD)v615 )
                break;
            }
          }
LABEL_839:
          v611 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v615 > widthViewPort_93AD8 )
          LOWORD(v615) = widthViewPort_93AD8;
        v16 = (__int16)v615 <= (__int16)v614;
        LOWORD(v615) = v615 - v614;
        if ( v16 )
          goto LABEL_839;
        m = &v612[v614];
        goto LABEL_822;
      case 16:
LABEL_841:
        v632 = (unsigned __int16 *)&unk_93AE0;
        HIWORD(v633) = 0;
        while ( 1 )
        {
          LOWORD(v29) = v632[1];
          v634 = v632[3];
          v635 = (_BYTE *)(pitchViewPort_93AD4 + v1077);
          v1077 += pitchViewPort_93AD4;
          if ( (v29 & 0x8000u) == 0 )
            break;
          if ( (__int16)v634 > 0 )
          {
            v636 = v1121 * (unsigned __int16)-(__int16)v29;
            v637 = v636;
            v29 = v636 >> 8;
            v171 = __CFADD__(v632[8], v637);
            v638 = v632[8] + v637;
            BYTE1(v29) += *((_BYTE *)v632 + 18) + v171;
            if ( v634 > widthViewPort_93AD8 )
              LOWORD(v634) = widthViewPort_93AD8;
            v29 = (unsigned __int16)v29;
            LOBYTE(v29) = byte_967E0;
LABEL_851:
            while ( 1 )
            {
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = *v635;
              *v635 = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)v1121, v638);
              v639 = v1121 + v638;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v640 = v634 - 1;
              if ( !v640 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = v635[1];
              v635[1] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)v1121, v639);
              v641 = v1121 + v639;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v642 = v640 - 1;
              if ( !v642 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = v635[2];
              v635[2] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)v1121, v641);
              v643 = v1121 + v641;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v644 = v642 - 1;
              if ( !v644 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = v635[3];
              v635[3] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)v1121, v643);
              v645 = v1121 + v643;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v646 = v644 - 1;
              if ( !v646 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = v635[4];
              v635[4] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)v1121, v645);
              v647 = v1121 + v645;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v648 = v646 - 1;
              if ( !v648 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = v635[5];
              v635[5] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)v1121, v647);
              v649 = v1121 + v647;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v650 = v648 - 1;
              if ( !v650 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = v635[6];
              v635[6] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)v1121, v649);
              v651 = v1121 + v649;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v652 = v650 - 1;
              if ( !v652 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = v635[7];
              v635[7] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)v1121, v651);
              v653 = v1121 + v651;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v654 = v652 - 1;
              if ( !v654 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = v635[8];
              v635[8] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)v1121, v653);
              v655 = v1121 + v653;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v656 = v654 - 1;
              if ( !v656 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = v635[9];
              v635[9] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)v1121, v655);
              v657 = v1121 + v655;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v658 = v656 - 1;
              if ( !v658 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = v635[10];
              v635[10] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)v1121, v657);
              v659 = v1121 + v657;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v660 = v658 - 1;
              if ( !v660 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = v635[11];
              v635[11] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)v1121, v659);
              v661 = v1121 + v659;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v662 = v660 - 1;
              if ( !v662 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = v635[12];
              v635[12] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)v1121, v661);
              v663 = v1121 + v661;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v664 = v662 - 1;
              if ( !v664 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = v635[13];
              v635[13] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)v1121, v663);
              v665 = v1121 + v663;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v666 = v664 - 1;
              if ( !v666 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = v635[14];
              v635[14] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)v1121, v665);
              v667 = v1121 + v665;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v668 = v666 - 1;
              if ( !v668 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = v635[15];
              v635[15] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)v1121, v667);
              v638 = v1121 + v667;
              BYTE1(v29) += BYTE2(v1121) + v171;
              LOWORD(v634) = v668 - 1;
              if ( !(_WORD)v634 )
                break;
              v635 += 16;
            }
          }
LABEL_868:
          v632 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v634 > widthViewPort_93AD8 )
          LOWORD(v634) = widthViewPort_93AD8;
        v16 = (__int16)v634 <= (__int16)v29;
        LOWORD(v634) = v634 - v29;
        if ( v16 )
          goto LABEL_868;
        v635 += v29;
        v29 = (unsigned __int8)byte_967E0;
        v638 = v632[8];
        BYTE1(v29) = *((_BYTE *)v632 + 18);
        goto LABEL_851;
      case 17:
LABEL_870:
        v669 = (unsigned __int16 *)&unk_93AE0;
        HIWORD(v670) = 0;
        while ( 1 )
        {
          LOWORD(v29) = v669[1];
          v671 = v669[3];
          v672 = (_BYTE *)(pitchViewPort_93AD4 + v1077);
          v1077 += pitchViewPort_93AD4;
          if ( (v29 & 0x8000u) == 0 )
            break;
          if ( (__int16)v671 > 0 )
          {
            v673 = v1121 * (unsigned __int16)-(__int16)v29;
            v674 = v673;
            v29 = v673 >> 8;
            v171 = __CFADD__(v669[8], v674);
            v675 = v669[8] + v674;
            BYTE1(v29) += *((_BYTE *)v669 + 18) + v171;
            if ( v671 > widthViewPort_93AD8 )
              LOWORD(v671) = widthViewPort_93AD8;
            v29 = (unsigned __int16)v29;
            LOBYTE(v29) = byte_967E0;
LABEL_880:
            while ( 1 )
            {
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = *v672;
              *v672 = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)v1121, v675);
              v676 = v1121 + v675;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v677 = v671 - 1;
              if ( !v677 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = v672[1];
              v672[1] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)v1121, v676);
              v678 = v1121 + v676;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v679 = v677 - 1;
              if ( !v679 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = v672[2];
              v672[2] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)v1121, v678);
              v680 = v1121 + v678;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v681 = v679 - 1;
              if ( !v681 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = v672[3];
              v672[3] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)v1121, v680);
              v682 = v1121 + v680;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v683 = v681 - 1;
              if ( !v683 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = v672[4];
              v672[4] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)v1121, v682);
              v684 = v1121 + v682;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v685 = v683 - 1;
              if ( !v685 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = v672[5];
              v672[5] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)v1121, v684);
              v686 = v1121 + v684;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v687 = v685 - 1;
              if ( !v687 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = v672[6];
              v672[6] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)v1121, v686);
              v688 = v1121 + v686;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v689 = v687 - 1;
              if ( !v689 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = v672[7];
              v672[7] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)v1121, v688);
              v690 = v1121 + v688;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v691 = v689 - 1;
              if ( !v691 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = v672[8];
              v672[8] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)v1121, v690);
              v692 = v1121 + v690;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v693 = v691 - 1;
              if ( !v693 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = v672[9];
              v672[9] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)v1121, v692);
              v694 = v1121 + v692;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v695 = v693 - 1;
              if ( !v695 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = v672[10];
              v672[10] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)v1121, v694);
              v696 = v1121 + v694;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v697 = v695 - 1;
              if ( !v697 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = v672[11];
              v672[11] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)v1121, v696);
              v698 = v1121 + v696;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v699 = v697 - 1;
              if ( !v699 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = v672[12];
              v672[12] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)v1121, v698);
              v700 = v1121 + v698;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v701 = v699 - 1;
              if ( !v701 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = v672[13];
              v672[13] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)v1121, v700);
              v702 = v1121 + v700;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v703 = v701 - 1;
              if ( !v703 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = v672[14];
              v672[14] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)v1121, v702);
              v704 = v1121 + v702;
              BYTE1(v29) += BYTE2(v1121) + v171;
              v705 = v703 - 1;
              if ( !v705 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = v672[15];
              v672[15] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)v1121, v704);
              v675 = v1121 + v704;
              BYTE1(v29) += BYTE2(v1121) + v171;
              LOWORD(v671) = v705 - 1;
              if ( !(_WORD)v671 )
                break;
              v672 += 16;
            }
          }
LABEL_897:
          v669 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v671 > widthViewPort_93AD8 )
          LOWORD(v671) = widthViewPort_93AD8;
        v16 = (__int16)v671 <= (__int16)v29;
        LOWORD(v671) = v671 - v29;
        if ( v16 )
          goto LABEL_897;
        v672 += v29;
        v29 = (unsigned __int8)byte_967E0;
        v675 = v669[8];
        BYTE1(v29) = *((_BYTE *)v669 + 18);
        goto LABEL_880;
      case 18:
LABEL_899:
        v706 = (unsigned __int16 *)&unk_93AE0;
        v1157 = v1110 << 16;
        HIWORD(v707) = 0;
        HIWORD(v708) = 0;
        while ( 1 )
        {
          LOWORD(v707) = v706[1];
          v709 = v706[3];
          v710 = (_BYTE *)(pitchViewPort_93AD4 + v1077);
          v1077 += pitchViewPort_93AD4;
          if ( (v707 & 0x8000u) == 0 )
            break;
          if ( (__int16)v709 > 0 )
          {
            v711 = (unsigned __int16)-(__int16)v707;
            v713 = __ROL4__(*((_DWORD *)v706 + 3) + v1110 * v711, 16);
            BYTE1(v708) = v713;
            v712 = *((_DWORD *)v706 + 2) + v1099 * v711;
            LOWORD(v713) = v712;
            v714 = v712 >> 8;
            LOBYTE(v708) = BYTE1(v714);
            if ( v709 > widthViewPort_93AD8 )
              LOWORD(v709) = widthViewPort_93AD8;
            v707 = (unsigned __int16)v714;
LABEL_909:
            v1266 = v706;
            v715 = dword_93AD0;
            while ( 1 )
            {
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v713);
              LOWORD(v713) = v1099 + v713;
              LOBYTE(v707) = *v710;
              LOBYTE(v708) = BYTE2(v1099) + v171 + v708;
              v171 = __CFADD__(v1157, v713);
              v716 = v1157 + v713;
              *v710 = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(v1110) + v171;
              v717 = v709 - 1;
              if ( !v717 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v716);
              LOWORD(v716) = v1099 + v716;
              LOBYTE(v707) = v710[1];
              LOBYTE(v708) = BYTE2(v1099) + v171 + v708;
              v171 = __CFADD__(v1157, v716);
              v718 = v1157 + v716;
              v710[1] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(v1110) + v171;
              v719 = v717 - 1;
              if ( !v719 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v718);
              LOWORD(v718) = v1099 + v718;
              LOBYTE(v707) = v710[2];
              LOBYTE(v708) = BYTE2(v1099) + v171 + v708;
              v171 = __CFADD__(v1157, v718);
              v720 = v1157 + v718;
              v710[2] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(v1110) + v171;
              v721 = v719 - 1;
              if ( !v721 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v720);
              LOWORD(v720) = v1099 + v720;
              LOBYTE(v707) = v710[3];
              LOBYTE(v708) = BYTE2(v1099) + v171 + v708;
              v171 = __CFADD__(v1157, v720);
              v722 = v1157 + v720;
              v710[3] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(v1110) + v171;
              v723 = v721 - 1;
              if ( !v723 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v722);
              LOWORD(v722) = v1099 + v722;
              LOBYTE(v707) = v710[4];
              LOBYTE(v708) = BYTE2(v1099) + v171 + v708;
              v171 = __CFADD__(v1157, v722);
              v724 = v1157 + v722;
              v710[4] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(v1110) + v171;
              v725 = v723 - 1;
              if ( !v725 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v724);
              LOWORD(v724) = v1099 + v724;
              LOBYTE(v707) = v710[5];
              LOBYTE(v708) = BYTE2(v1099) + v171 + v708;
              v171 = __CFADD__(v1157, v724);
              v726 = v1157 + v724;
              v710[5] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(v1110) + v171;
              v727 = v725 - 1;
              if ( !v727 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v726);
              LOWORD(v726) = v1099 + v726;
              LOBYTE(v707) = v710[6];
              LOBYTE(v708) = BYTE2(v1099) + v171 + v708;
              v171 = __CFADD__(v1157, v726);
              v728 = v1157 + v726;
              v710[6] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(v1110) + v171;
              v729 = v727 - 1;
              if ( !v729 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v728);
              LOWORD(v728) = v1099 + v728;
              LOBYTE(v707) = v710[7];
              LOBYTE(v708) = BYTE2(v1099) + v171 + v708;
              v171 = __CFADD__(v1157, v728);
              v730 = v1157 + v728;
              v710[7] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(v1110) + v171;
              v731 = v729 - 1;
              if ( !v731 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v730);
              LOWORD(v730) = v1099 + v730;
              LOBYTE(v707) = v710[8];
              LOBYTE(v708) = BYTE2(v1099) + v171 + v708;
              v171 = __CFADD__(v1157, v730);
              v732 = v1157 + v730;
              v710[8] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(v1110) + v171;
              v733 = v731 - 1;
              if ( !v733 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v732);
              LOWORD(v732) = v1099 + v732;
              LOBYTE(v707) = v710[9];
              LOBYTE(v708) = BYTE2(v1099) + v171 + v708;
              v171 = __CFADD__(v1157, v732);
              v734 = v1157 + v732;
              v710[9] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(v1110) + v171;
              v735 = v733 - 1;
              if ( !v735 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v734);
              LOWORD(v734) = v1099 + v734;
              LOBYTE(v707) = v710[10];
              LOBYTE(v708) = BYTE2(v1099) + v171 + v708;
              v171 = __CFADD__(v1157, v734);
              v736 = v1157 + v734;
              v710[10] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(v1110) + v171;
              v737 = v735 - 1;
              if ( !v737 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v736);
              LOWORD(v736) = v1099 + v736;
              LOBYTE(v707) = v710[11];
              LOBYTE(v708) = BYTE2(v1099) + v171 + v708;
              v171 = __CFADD__(v1157, v736);
              v738 = v1157 + v736;
              v710[11] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(v1110) + v171;
              v739 = v737 - 1;
              if ( !v739 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v738);
              LOWORD(v738) = v1099 + v738;
              LOBYTE(v707) = v710[12];
              LOBYTE(v708) = BYTE2(v1099) + v171 + v708;
              v171 = __CFADD__(v1157, v738);
              v740 = v1157 + v738;
              v710[12] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(v1110) + v171;
              v741 = v739 - 1;
              if ( !v741 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v740);
              LOWORD(v740) = v1099 + v740;
              LOBYTE(v707) = v710[13];
              LOBYTE(v708) = BYTE2(v1099) + v171 + v708;
              v171 = __CFADD__(v1157, v740);
              v742 = v1157 + v740;
              v710[13] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(v1110) + v171;
              v743 = v741 - 1;
              if ( !v743 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v742);
              LOWORD(v742) = v1099 + v742;
              LOBYTE(v707) = v710[14];
              LOBYTE(v708) = BYTE2(v1099) + v171 + v708;
              v171 = __CFADD__(v1157, v742);
              v744 = v1157 + v742;
              v710[14] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(v1110) + v171;
              v745 = v743 - 1;
              if ( !v745 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v744);
              LOWORD(v744) = v1099 + v744;
              LOBYTE(v707) = v710[15];
              LOBYTE(v708) = BYTE2(v1099) + v171 + v708;
              v171 = __CFADD__(v1157, v744);
              v713 = v1157 + v744;
              v710[15] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(v1110) + v171;
              LOWORD(v709) = v745 - 1;
              if ( !(_WORD)v709 )
                break;
              v710 += 16;
            }
            v706 = v1266;
          }
LABEL_928:
          v706 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v709 > widthViewPort_93AD8 )
          LOWORD(v709) = widthViewPort_93AD8;
        v16 = (__int16)v709 <= (__int16)v707;
        LOWORD(v709) = v709 - v707;
        if ( v16 )
          goto LABEL_928;
        v710 += v707;
        v713 = __ROL4__(*((_DWORD *)v706 + 3), 16);
        BYTE1(v708) = v713;
        LOWORD(v713) = v706[4];
        LOBYTE(v708) = *((_BYTE *)v706 + 10);
        goto LABEL_909;
      case 19:
LABEL_930:
        v746 = (unsigned __int16 *)&unk_93AE0;
        v1158 = v1110 << 16;
        HIWORD(v747) = 0;
        HIWORD(v748) = 0;
        while ( 1 )
        {
          LOWORD(v747) = v746[1];
          v749 = v746[3];
          v750 = (_BYTE *)(pitchViewPort_93AD4 + v1077);
          v1077 += pitchViewPort_93AD4;
          if ( (v747 & 0x8000u) == 0 )
            break;
          if ( (__int16)v749 > 0 )
          {
            v751 = (unsigned __int16)-(__int16)v747;
            v753 = __ROL4__(*((_DWORD *)v746 + 3) + v1110 * v751, 16);
            BYTE1(v748) = v753;
            v752 = *((_DWORD *)v746 + 2) + v1099 * v751;
            LOWORD(v753) = v752;
            v754 = v752 >> 8;
            LOBYTE(v748) = BYTE1(v754);
            if ( v749 > widthViewPort_93AD8 )
              LOWORD(v749) = widthViewPort_93AD8;
            v747 = (unsigned __int16)v754;
LABEL_940:
            v1267 = v746;
            v755 = dword_93AD0;
            while ( 1 )
            {
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v753);
              LOWORD(v753) = v1099 + v753;
              BYTE1(v747) = *v750;
              LOBYTE(v748) = BYTE2(v1099) + v171 + v748;
              v171 = __CFADD__(v1158, v753);
              v756 = v1158 + v753;
              *v750 = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(v1110) + v171;
              v757 = v749 - 1;
              if ( !v757 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v756);
              LOWORD(v756) = v1099 + v756;
              BYTE1(v747) = v750[1];
              LOBYTE(v748) = BYTE2(v1099) + v171 + v748;
              v171 = __CFADD__(v1158, v756);
              v758 = v1158 + v756;
              v750[1] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(v1110) + v171;
              v759 = v757 - 1;
              if ( !v759 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v758);
              LOWORD(v758) = v1099 + v758;
              BYTE1(v747) = v750[2];
              LOBYTE(v748) = BYTE2(v1099) + v171 + v748;
              v171 = __CFADD__(v1158, v758);
              v760 = v1158 + v758;
              v750[2] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(v1110) + v171;
              v761 = v759 - 1;
              if ( !v761 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v760);
              LOWORD(v760) = v1099 + v760;
              BYTE1(v747) = v750[3];
              LOBYTE(v748) = BYTE2(v1099) + v171 + v748;
              v171 = __CFADD__(v1158, v760);
              v762 = v1158 + v760;
              v750[3] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(v1110) + v171;
              v763 = v761 - 1;
              if ( !v763 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v762);
              LOWORD(v762) = v1099 + v762;
              BYTE1(v747) = v750[4];
              LOBYTE(v748) = BYTE2(v1099) + v171 + v748;
              v171 = __CFADD__(v1158, v762);
              v764 = v1158 + v762;
              v750[4] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(v1110) + v171;
              v765 = v763 - 1;
              if ( !v765 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v764);
              LOWORD(v764) = v1099 + v764;
              BYTE1(v747) = v750[5];
              LOBYTE(v748) = BYTE2(v1099) + v171 + v748;
              v171 = __CFADD__(v1158, v764);
              v766 = v1158 + v764;
              v750[5] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(v1110) + v171;
              v767 = v765 - 1;
              if ( !v767 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v766);
              LOWORD(v766) = v1099 + v766;
              BYTE1(v747) = v750[6];
              LOBYTE(v748) = BYTE2(v1099) + v171 + v748;
              v171 = __CFADD__(v1158, v766);
              v768 = v1158 + v766;
              v750[6] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(v1110) + v171;
              v769 = v767 - 1;
              if ( !v769 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v768);
              LOWORD(v768) = v1099 + v768;
              BYTE1(v747) = v750[7];
              LOBYTE(v748) = BYTE2(v1099) + v171 + v748;
              v171 = __CFADD__(v1158, v768);
              v770 = v1158 + v768;
              v750[7] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(v1110) + v171;
              v771 = v769 - 1;
              if ( !v771 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v770);
              LOWORD(v770) = v1099 + v770;
              BYTE1(v747) = v750[8];
              LOBYTE(v748) = BYTE2(v1099) + v171 + v748;
              v171 = __CFADD__(v1158, v770);
              v772 = v1158 + v770;
              v750[8] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(v1110) + v171;
              v773 = v771 - 1;
              if ( !v773 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v772);
              LOWORD(v772) = v1099 + v772;
              BYTE1(v747) = v750[9];
              LOBYTE(v748) = BYTE2(v1099) + v171 + v748;
              v171 = __CFADD__(v1158, v772);
              v774 = v1158 + v772;
              v750[9] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(v1110) + v171;
              v775 = v773 - 1;
              if ( !v775 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v774);
              LOWORD(v774) = v1099 + v774;
              BYTE1(v747) = v750[10];
              LOBYTE(v748) = BYTE2(v1099) + v171 + v748;
              v171 = __CFADD__(v1158, v774);
              v776 = v1158 + v774;
              v750[10] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(v1110) + v171;
              v777 = v775 - 1;
              if ( !v777 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v776);
              LOWORD(v776) = v1099 + v776;
              BYTE1(v747) = v750[11];
              LOBYTE(v748) = BYTE2(v1099) + v171 + v748;
              v171 = __CFADD__(v1158, v776);
              v778 = v1158 + v776;
              v750[11] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(v1110) + v171;
              v779 = v777 - 1;
              if ( !v779 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v778);
              LOWORD(v778) = v1099 + v778;
              BYTE1(v747) = v750[12];
              LOBYTE(v748) = BYTE2(v1099) + v171 + v748;
              v171 = __CFADD__(v1158, v778);
              v780 = v1158 + v778;
              v750[12] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(v1110) + v171;
              v781 = v779 - 1;
              if ( !v781 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v780);
              LOWORD(v780) = v1099 + v780;
              BYTE1(v747) = v750[13];
              LOBYTE(v748) = BYTE2(v1099) + v171 + v748;
              v171 = __CFADD__(v1158, v780);
              v782 = v1158 + v780;
              v750[13] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(v1110) + v171;
              v783 = v781 - 1;
              if ( !v783 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v782);
              LOWORD(v782) = v1099 + v782;
              BYTE1(v747) = v750[14];
              LOBYTE(v748) = BYTE2(v1099) + v171 + v748;
              v171 = __CFADD__(v1158, v782);
              v784 = v1158 + v782;
              v750[14] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(v1110) + v171;
              v785 = v783 - 1;
              if ( !v785 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v784);
              LOWORD(v784) = v1099 + v784;
              BYTE1(v747) = v750[15];
              LOBYTE(v748) = BYTE2(v1099) + v171 + v748;
              v171 = __CFADD__(v1158, v784);
              v753 = v1158 + v784;
              v750[15] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(v1110) + v171;
              LOWORD(v749) = v785 - 1;
              if ( !(_WORD)v749 )
                break;
              v750 += 16;
            }
            v746 = v1267;
          }
LABEL_959:
          v746 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v749 > widthViewPort_93AD8 )
          LOWORD(v749) = widthViewPort_93AD8;
        v16 = (__int16)v749 <= (__int16)v747;
        LOWORD(v749) = v749 - v747;
        if ( v16 )
          goto LABEL_959;
        v750 += v747;
        v753 = __ROL4__(*((_DWORD *)v746 + 3), 16);
        BYTE1(v748) = v753;
        LOWORD(v753) = v746[4];
        LOBYTE(v748) = *((_BYTE *)v746 + 10);
        goto LABEL_940;
      case 20:
LABEL_961:
        v786 = (unsigned __int16 *)&unk_93AE0;
        v1159 = v1110 << 16;
        v1168 = v1121 << 16;
        HIWORD(v787) = 0;
        HIWORD(v788) = 0;
        while ( 1 )
        {
          LOWORD(v787) = v786[1];
          v789 = v786[3];
          v790 = (_BYTE *)(pitchViewPort_93AD4 + v1077);
          v1077 += pitchViewPort_93AD4;
          if ( (v787 & 0x8000u) == 0 )
            break;
          if ( (__int16)v789 > 0 )
          {
            if ( v789 > widthViewPort_93AD8 )
              v789 = widthViewPort_93AD8;
            v1177 = v789;
            v791 = (unsigned __int16)-(__int16)v787;
            v792 = __ROL4__(*((_DWORD *)v786 + 3) + v1110 * v791, 16);
            BYTE1(v788) = v792;
            LOWORD(v792) = v786[4] + v1099 * v791;
            v787 = (unsigned int)(*((_DWORD *)v786 + 2) + v1099 * v791) >> 8;
            LOBYTE(v788) = (unsigned int)(*((_DWORD *)v786 + 2) + v1099 * v791) >> 16;
            v793 = __ROL4__(*((_DWORD *)v786 + 4) + v1121 * v791, 16);
            v787 = (unsigned __int16)v787;
LABEL_971:
            v1268 = v786;
            v794 = dword_93AD0;
            while ( 1 )
            {
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v792);
              LOWORD(v792) = v1099 + v792;
              BYTE1(v787) = v793;
              LOBYTE(v788) = BYTE2(v1099) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v792);
              v795 = v1159 + v792;
              LOBYTE(v787) = *v790;
              BYTE1(v788) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1168, v793);
              v796 = v1168 + v793;
              *v790 = strPal.byte_BB934_BB924[v787];
              LOBYTE(v796) = BYTE2(v1121) + v171 + v796;
              v1178 = v1177 - 1;
              if ( !v1178 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v795);
              LOWORD(v795) = v1099 + v795;
              BYTE1(v787) = v796;
              LOBYTE(v788) = BYTE2(v1099) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v795);
              v797 = v1159 + v795;
              LOBYTE(v787) = v790[1];
              BYTE1(v788) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1168, v796);
              v798 = v1168 + v796;
              v790[1] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v798) = BYTE2(v1121) + v171 + v798;
              v1179 = v1178 - 1;
              if ( !v1179 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v797);
              LOWORD(v797) = v1099 + v797;
              BYTE1(v787) = v798;
              LOBYTE(v788) = BYTE2(v1099) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v797);
              v799 = v1159 + v797;
              LOBYTE(v787) = v790[2];
              BYTE1(v788) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1168, v798);
              v800 = v1168 + v798;
              v790[2] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v800) = BYTE2(v1121) + v171 + v800;
              v1180 = v1179 - 1;
              if ( !v1180 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v799);
              LOWORD(v799) = v1099 + v799;
              BYTE1(v787) = v800;
              LOBYTE(v788) = BYTE2(v1099) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v799);
              v801 = v1159 + v799;
              LOBYTE(v787) = v790[3];
              BYTE1(v788) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1168, v800);
              v802 = v1168 + v800;
              v790[3] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v802) = BYTE2(v1121) + v171 + v802;
              v1181 = v1180 - 1;
              if ( !v1181 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v801);
              LOWORD(v801) = v1099 + v801;
              BYTE1(v787) = v802;
              LOBYTE(v788) = BYTE2(v1099) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v801);
              v803 = v1159 + v801;
              LOBYTE(v787) = v790[4];
              BYTE1(v788) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1168, v802);
              v804 = v1168 + v802;
              v790[4] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v804) = BYTE2(v1121) + v171 + v804;
              v1182 = v1181 - 1;
              if ( !v1182 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v803);
              LOWORD(v803) = v1099 + v803;
              BYTE1(v787) = v804;
              LOBYTE(v788) = BYTE2(v1099) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v803);
              v805 = v1159 + v803;
              LOBYTE(v787) = v790[5];
              BYTE1(v788) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1168, v804);
              v806 = v1168 + v804;
              v790[5] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v806) = BYTE2(v1121) + v171 + v806;
              v1183 = v1182 - 1;
              if ( !v1183 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v805);
              LOWORD(v805) = v1099 + v805;
              BYTE1(v787) = v806;
              LOBYTE(v788) = BYTE2(v1099) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v805);
              v807 = v1159 + v805;
              LOBYTE(v787) = v790[6];
              BYTE1(v788) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1168, v806);
              v808 = v1168 + v806;
              v790[6] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v808) = BYTE2(v1121) + v171 + v808;
              v1184 = v1183 - 1;
              if ( !v1184 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v807);
              LOWORD(v807) = v1099 + v807;
              BYTE1(v787) = v808;
              LOBYTE(v788) = BYTE2(v1099) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v807);
              v809 = v1159 + v807;
              LOBYTE(v787) = v790[7];
              BYTE1(v788) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1168, v808);
              v810 = v1168 + v808;
              v790[7] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v810) = BYTE2(v1121) + v171 + v810;
              v1185 = v1184 - 1;
              if ( !v1185 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v809);
              LOWORD(v809) = v1099 + v809;
              BYTE1(v787) = v810;
              LOBYTE(v788) = BYTE2(v1099) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v809);
              v811 = v1159 + v809;
              LOBYTE(v787) = v790[8];
              BYTE1(v788) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1168, v810);
              v812 = v1168 + v810;
              v790[8] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v812) = BYTE2(v1121) + v171 + v812;
              v1186 = v1185 - 1;
              if ( !v1186 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v811);
              LOWORD(v811) = v1099 + v811;
              BYTE1(v787) = v812;
              LOBYTE(v788) = BYTE2(v1099) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v811);
              v813 = v1159 + v811;
              LOBYTE(v787) = v790[9];
              BYTE1(v788) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1168, v812);
              v814 = v1168 + v812;
              v790[9] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v814) = BYTE2(v1121) + v171 + v814;
              v1187 = v1186 - 1;
              if ( !v1187 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v813);
              LOWORD(v813) = v1099 + v813;
              BYTE1(v787) = v814;
              LOBYTE(v788) = BYTE2(v1099) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v813);
              v815 = v1159 + v813;
              LOBYTE(v787) = v790[10];
              BYTE1(v788) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1168, v814);
              v816 = v1168 + v814;
              v790[10] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v816) = BYTE2(v1121) + v171 + v816;
              v1188 = v1187 - 1;
              if ( !v1188 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v815);
              LOWORD(v815) = v1099 + v815;
              BYTE1(v787) = v816;
              LOBYTE(v788) = BYTE2(v1099) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v815);
              v817 = v1159 + v815;
              LOBYTE(v787) = v790[11];
              BYTE1(v788) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1168, v816);
              v818 = v1168 + v816;
              v790[11] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v818) = BYTE2(v1121) + v171 + v818;
              v1189 = v1188 - 1;
              if ( !v1189 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v817);
              LOWORD(v817) = v1099 + v817;
              BYTE1(v787) = v818;
              LOBYTE(v788) = BYTE2(v1099) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v817);
              v819 = v1159 + v817;
              LOBYTE(v787) = v790[12];
              BYTE1(v788) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1168, v818);
              v820 = v1168 + v818;
              v790[12] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v820) = BYTE2(v1121) + v171 + v820;
              v1190 = v1189 - 1;
              if ( !v1190 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v819);
              LOWORD(v819) = v1099 + v819;
              BYTE1(v787) = v820;
              LOBYTE(v788) = BYTE2(v1099) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v819);
              v821 = v1159 + v819;
              LOBYTE(v787) = v790[13];
              BYTE1(v788) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1168, v820);
              v822 = v1168 + v820;
              v790[13] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v822) = BYTE2(v1121) + v171 + v822;
              v1191 = v1190 - 1;
              if ( !v1191 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v821);
              LOWORD(v821) = v1099 + v821;
              BYTE1(v787) = v822;
              LOBYTE(v788) = BYTE2(v1099) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v821);
              v823 = v1159 + v821;
              LOBYTE(v787) = v790[14];
              BYTE1(v788) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1168, v822);
              v824 = v1168 + v822;
              v790[14] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v824) = BYTE2(v1121) + v171 + v824;
              v1192 = v1191 - 1;
              if ( !v1192 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v823);
              LOWORD(v823) = v1099 + v823;
              BYTE1(v787) = v824;
              LOBYTE(v788) = BYTE2(v1099) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v823);
              v792 = v1159 + v823;
              LOBYTE(v787) = v790[15];
              BYTE1(v788) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1168, v824);
              v793 = v1168 + v824;
              v790[15] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v793) = BYTE2(v1121) + v171 + v793;
              v1177 = v1192 - 1;
              if ( !v1177 )
                break;
              v790 += 16;
            }
            v786 = v1268;
          }
LABEL_990:
          v786 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v789 > widthViewPort_93AD8 )
          v789 = widthViewPort_93AD8;
        v16 = (__int16)v789 <= (__int16)v787;
        LOWORD(v789) = v789 - v787;
        if ( v16 )
          goto LABEL_990;
        v790 += v787;
        v792 = __ROL4__(*((_DWORD *)v786 + 3), 16);
        BYTE1(v788) = v792;
        LOWORD(v792) = v786[4];
        LOBYTE(v788) = *((_BYTE *)v786 + 10);
        v1177 = v789;
        v793 = __ROL4__(*((_DWORD *)v786 + 4), 16);
        goto LABEL_971;
      case 21:
LABEL_992:
        v825 = (unsigned __int16 *)&unk_93AE0;
        v1160 = v1110 << 16;
        v1169 = v1121 << 16;
        HIWORD(v826) = 0;
        HIWORD(v827) = 0;
        while ( 1 )
        {
          LOWORD(v826) = v825[1];
          v828 = v825[3];
          v829 = (_BYTE *)(pitchViewPort_93AD4 + v1077);
          v1077 += pitchViewPort_93AD4;
          if ( (v826 & 0x8000u) == 0 )
            break;
          if ( (__int16)v828 > 0 )
          {
            if ( v828 > widthViewPort_93AD8 )
              v828 = widthViewPort_93AD8;
            v1193 = v828;
            v830 = (unsigned __int16)-(__int16)v826;
            v831 = __ROL4__(*((_DWORD *)v825 + 3) + v1110 * v830, 16);
            BYTE1(v827) = v831;
            LOWORD(v831) = v825[4] + v1099 * v830;
            v826 = (unsigned int)(*((_DWORD *)v825 + 2) + v1099 * v830) >> 8;
            LOBYTE(v827) = (unsigned int)(*((_DWORD *)v825 + 2) + v1099 * v830) >> 16;
            v832 = __ROL4__(*((_DWORD *)v825 + 4) + v1121 * v830, 16);
            v826 = (unsigned __int16)v826;
LABEL_1002:
            v1269 = v825;
            v833 = dword_93AD0;
            while ( 1 )
            {
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v831);
              LOWORD(v831) = v1099 + v831;
              BYTE1(v826) = v832;
              LOBYTE(v827) = BYTE2(v1099) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v831);
              v834 = v1160 + v831;
              BYTE1(v826) = *v829;
              BYTE1(v827) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1169, v832);
              v835 = v1169 + v832;
              *v829 = strPal.byte_BB934_BB924[v826];
              LOBYTE(v835) = BYTE2(v1121) + v171 + v835;
              v1194 = v1193 - 1;
              if ( !v1194 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v834);
              LOWORD(v834) = v1099 + v834;
              BYTE1(v826) = v835;
              LOBYTE(v827) = BYTE2(v1099) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v834);
              v836 = v1160 + v834;
              BYTE1(v826) = v829[1];
              BYTE1(v827) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1169, v835);
              v837 = v1169 + v835;
              v829[1] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v837) = BYTE2(v1121) + v171 + v837;
              v1195 = v1194 - 1;
              if ( !v1195 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v836);
              LOWORD(v836) = v1099 + v836;
              BYTE1(v826) = v837;
              LOBYTE(v827) = BYTE2(v1099) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v836);
              v838 = v1160 + v836;
              BYTE1(v826) = v829[2];
              BYTE1(v827) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1169, v837);
              v839 = v1169 + v837;
              v829[2] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v839) = BYTE2(v1121) + v171 + v839;
              v1196 = v1195 - 1;
              if ( !v1196 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v838);
              LOWORD(v838) = v1099 + v838;
              BYTE1(v826) = v839;
              LOBYTE(v827) = BYTE2(v1099) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v838);
              v840 = v1160 + v838;
              BYTE1(v826) = v829[3];
              BYTE1(v827) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1169, v839);
              v841 = v1169 + v839;
              v829[3] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v841) = BYTE2(v1121) + v171 + v841;
              v1197 = v1196 - 1;
              if ( !v1197 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v840);
              LOWORD(v840) = v1099 + v840;
              BYTE1(v826) = v841;
              LOBYTE(v827) = BYTE2(v1099) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v840);
              v842 = v1160 + v840;
              BYTE1(v826) = v829[4];
              BYTE1(v827) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1169, v841);
              v843 = v1169 + v841;
              v829[4] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v843) = BYTE2(v1121) + v171 + v843;
              v1198 = v1197 - 1;
              if ( !v1198 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v842);
              LOWORD(v842) = v1099 + v842;
              BYTE1(v826) = v843;
              LOBYTE(v827) = BYTE2(v1099) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v842);
              v844 = v1160 + v842;
              BYTE1(v826) = v829[5];
              BYTE1(v827) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1169, v843);
              v845 = v1169 + v843;
              v829[5] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v845) = BYTE2(v1121) + v171 + v845;
              v1199 = v1198 - 1;
              if ( !v1199 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v844);
              LOWORD(v844) = v1099 + v844;
              BYTE1(v826) = v845;
              LOBYTE(v827) = BYTE2(v1099) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v844);
              v846 = v1160 + v844;
              BYTE1(v826) = v829[6];
              BYTE1(v827) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1169, v845);
              v847 = v1169 + v845;
              v829[6] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v847) = BYTE2(v1121) + v171 + v847;
              v1200 = v1199 - 1;
              if ( !v1200 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v846);
              LOWORD(v846) = v1099 + v846;
              BYTE1(v826) = v847;
              LOBYTE(v827) = BYTE2(v1099) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v846);
              v848 = v1160 + v846;
              BYTE1(v826) = v829[7];
              BYTE1(v827) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1169, v847);
              v849 = v1169 + v847;
              v829[7] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v849) = BYTE2(v1121) + v171 + v849;
              v1201 = v1200 - 1;
              if ( !v1201 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v848);
              LOWORD(v848) = v1099 + v848;
              BYTE1(v826) = v849;
              LOBYTE(v827) = BYTE2(v1099) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v848);
              v850 = v1160 + v848;
              BYTE1(v826) = v829[8];
              BYTE1(v827) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1169, v849);
              v851 = v1169 + v849;
              v829[8] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v851) = BYTE2(v1121) + v171 + v851;
              v1202 = v1201 - 1;
              if ( !v1202 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v850);
              LOWORD(v850) = v1099 + v850;
              BYTE1(v826) = v851;
              LOBYTE(v827) = BYTE2(v1099) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v850);
              v852 = v1160 + v850;
              BYTE1(v826) = v829[9];
              BYTE1(v827) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1169, v851);
              v853 = v1169 + v851;
              v829[9] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v853) = BYTE2(v1121) + v171 + v853;
              v1203 = v1202 - 1;
              if ( !v1203 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v852);
              LOWORD(v852) = v1099 + v852;
              BYTE1(v826) = v853;
              LOBYTE(v827) = BYTE2(v1099) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v852);
              v854 = v1160 + v852;
              BYTE1(v826) = v829[10];
              BYTE1(v827) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1169, v853);
              v855 = v1169 + v853;
              v829[10] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v855) = BYTE2(v1121) + v171 + v855;
              v1204 = v1203 - 1;
              if ( !v1204 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v854);
              LOWORD(v854) = v1099 + v854;
              BYTE1(v826) = v855;
              LOBYTE(v827) = BYTE2(v1099) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v854);
              v856 = v1160 + v854;
              BYTE1(v826) = v829[11];
              BYTE1(v827) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1169, v855);
              v857 = v1169 + v855;
              v829[11] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v857) = BYTE2(v1121) + v171 + v857;
              v1205 = v1204 - 1;
              if ( !v1205 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v856);
              LOWORD(v856) = v1099 + v856;
              BYTE1(v826) = v857;
              LOBYTE(v827) = BYTE2(v1099) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v856);
              v858 = v1160 + v856;
              BYTE1(v826) = v829[12];
              BYTE1(v827) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1169, v857);
              v859 = v1169 + v857;
              v829[12] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v859) = BYTE2(v1121) + v171 + v859;
              v1206 = v1205 - 1;
              if ( !v1206 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v858);
              LOWORD(v858) = v1099 + v858;
              BYTE1(v826) = v859;
              LOBYTE(v827) = BYTE2(v1099) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v858);
              v860 = v1160 + v858;
              BYTE1(v826) = v829[13];
              BYTE1(v827) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1169, v859);
              v861 = v1169 + v859;
              v829[13] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v861) = BYTE2(v1121) + v171 + v861;
              v1207 = v1206 - 1;
              if ( !v1207 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v860);
              LOWORD(v860) = v1099 + v860;
              BYTE1(v826) = v861;
              LOBYTE(v827) = BYTE2(v1099) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v860);
              v862 = v1160 + v860;
              BYTE1(v826) = v829[14];
              BYTE1(v827) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1169, v861);
              v863 = v1169 + v861;
              v829[14] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v863) = BYTE2(v1121) + v171 + v863;
              v1208 = v1207 - 1;
              if ( !v1208 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)v1099, (_WORD)v862);
              LOWORD(v862) = v1099 + v862;
              BYTE1(v826) = v863;
              LOBYTE(v827) = BYTE2(v1099) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v862);
              v831 = v1160 + v862;
              BYTE1(v826) = v829[15];
              BYTE1(v827) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1169, v863);
              v832 = v1169 + v863;
              v829[15] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v832) = BYTE2(v1121) + v171 + v832;
              v1193 = v1208 - 1;
              if ( !v1193 )
                break;
              v829 += 16;
            }
            v825 = v1269;
          }
LABEL_1021:
          v825 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v828 > widthViewPort_93AD8 )
          v828 = widthViewPort_93AD8;
        v16 = (__int16)v828 <= (__int16)v826;
        LOWORD(v828) = v828 - v826;
        if ( v16 )
          goto LABEL_1021;
        v829 += v826;
        v831 = __ROL4__(*((_DWORD *)v825 + 3), 16);
        BYTE1(v827) = v831;
        LOWORD(v831) = v825[4];
        LOBYTE(v827) = *((_BYTE *)v825 + 10);
        v1193 = v828;
        v832 = __ROL4__(*((_DWORD *)v825 + 4), 16);
        goto LABEL_1002;
      case 22:
LABEL_1023:
        v864 = (unsigned __int16 *)&unk_93AE0;
        v1161 = v1110 << 16;
        HIWORD(v865) = 0;
        HIWORD(v866) = 0;
        while ( 1 )
        {
          LOWORD(v865) = v864[1];
          v867 = v864[3];
          v868 = (_BYTE *)(pitchViewPort_93AD4 + v1077);
          v1077 += pitchViewPort_93AD4;
          if ( (v865 & 0x8000u) == 0 )
            break;
          if ( (__int16)v867 > 0 )
          {
            v869 = (unsigned __int16)-(__int16)v865;
            v871 = __ROL4__(*((_DWORD *)v864 + 3) + v1110 * v869, 16);
            BYTE1(v866) = v871;
            v870 = *((_DWORD *)v864 + 2) + v1099 * v869;
            LOWORD(v871) = v870;
            v872 = v870 >> 8;
            LOBYTE(v866) = BYTE1(v872);
            if ( v867 > widthViewPort_93AD8 )
              LOWORD(v867) = widthViewPort_93AD8;
            v865 = (unsigned __int16)v872;
LABEL_1033:
            v1270 = v864;
            v873 = dword_93AD0;
            while ( 1 )
            {
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = *v868;
                *v868 = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v871);
              LOWORD(v871) = v1099 + v871;
              LOBYTE(v866) = BYTE2(v1099) + v171 + v866;
              v171 = __CFADD__(v1161, v871);
              v874 = v1161 + v871;
              BYTE1(v866) += BYTE2(v1110) + v171;
              v875 = v867 - 1;
              if ( !v875 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = v868[1];
                v868[1] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v874);
              LOWORD(v874) = v1099 + v874;
              LOBYTE(v866) = BYTE2(v1099) + v171 + v866;
              v171 = __CFADD__(v1161, v874);
              v876 = v1161 + v874;
              BYTE1(v866) += BYTE2(v1110) + v171;
              v877 = v875 - 1;
              if ( !v877 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = v868[2];
                v868[2] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v876);
              LOWORD(v876) = v1099 + v876;
              LOBYTE(v866) = BYTE2(v1099) + v171 + v866;
              v171 = __CFADD__(v1161, v876);
              v878 = v1161 + v876;
              BYTE1(v866) += BYTE2(v1110) + v171;
              v879 = v877 - 1;
              if ( !v879 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = v868[3];
                v868[3] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v878);
              LOWORD(v878) = v1099 + v878;
              LOBYTE(v866) = BYTE2(v1099) + v171 + v866;
              v171 = __CFADD__(v1161, v878);
              v880 = v1161 + v878;
              BYTE1(v866) += BYTE2(v1110) + v171;
              v881 = v879 - 1;
              if ( !v881 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = v868[4];
                v868[4] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v880);
              LOWORD(v880) = v1099 + v880;
              LOBYTE(v866) = BYTE2(v1099) + v171 + v866;
              v171 = __CFADD__(v1161, v880);
              v882 = v1161 + v880;
              BYTE1(v866) += BYTE2(v1110) + v171;
              v883 = v881 - 1;
              if ( !v883 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = v868[5];
                v868[5] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v882);
              LOWORD(v882) = v1099 + v882;
              LOBYTE(v866) = BYTE2(v1099) + v171 + v866;
              v171 = __CFADD__(v1161, v882);
              v884 = v1161 + v882;
              BYTE1(v866) += BYTE2(v1110) + v171;
              v885 = v883 - 1;
              if ( !v885 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = v868[6];
                v868[6] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v884);
              LOWORD(v884) = v1099 + v884;
              LOBYTE(v866) = BYTE2(v1099) + v171 + v866;
              v171 = __CFADD__(v1161, v884);
              v886 = v1161 + v884;
              BYTE1(v866) += BYTE2(v1110) + v171;
              v887 = v885 - 1;
              if ( !v887 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = v868[7];
                v868[7] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v886);
              LOWORD(v886) = v1099 + v886;
              LOBYTE(v866) = BYTE2(v1099) + v171 + v866;
              v171 = __CFADD__(v1161, v886);
              v888 = v1161 + v886;
              BYTE1(v866) += BYTE2(v1110) + v171;
              v889 = v887 - 1;
              if ( !v889 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = v868[8];
                v868[8] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v888);
              LOWORD(v888) = v1099 + v888;
              LOBYTE(v866) = BYTE2(v1099) + v171 + v866;
              v171 = __CFADD__(v1161, v888);
              v890 = v1161 + v888;
              BYTE1(v866) += BYTE2(v1110) + v171;
              v891 = v889 - 1;
              if ( !v891 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = v868[9];
                v868[9] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v890);
              LOWORD(v890) = v1099 + v890;
              LOBYTE(v866) = BYTE2(v1099) + v171 + v866;
              v171 = __CFADD__(v1161, v890);
              v892 = v1161 + v890;
              BYTE1(v866) += BYTE2(v1110) + v171;
              v893 = v891 - 1;
              if ( !v893 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = v868[10];
                v868[10] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v892);
              LOWORD(v892) = v1099 + v892;
              LOBYTE(v866) = BYTE2(v1099) + v171 + v866;
              v171 = __CFADD__(v1161, v892);
              v894 = v1161 + v892;
              BYTE1(v866) += BYTE2(v1110) + v171;
              v895 = v893 - 1;
              if ( !v895 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = v868[11];
                v868[11] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v894);
              LOWORD(v894) = v1099 + v894;
              LOBYTE(v866) = BYTE2(v1099) + v171 + v866;
              v171 = __CFADD__(v1161, v894);
              v896 = v1161 + v894;
              BYTE1(v866) += BYTE2(v1110) + v171;
              v897 = v895 - 1;
              if ( !v897 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = v868[12];
                v868[12] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v896);
              LOWORD(v896) = v1099 + v896;
              LOBYTE(v866) = BYTE2(v1099) + v171 + v866;
              v171 = __CFADD__(v1161, v896);
              v898 = v1161 + v896;
              BYTE1(v866) += BYTE2(v1110) + v171;
              v899 = v897 - 1;
              if ( !v899 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = v868[13];
                v868[13] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v898);
              LOWORD(v898) = v1099 + v898;
              LOBYTE(v866) = BYTE2(v1099) + v171 + v866;
              v171 = __CFADD__(v1161, v898);
              v900 = v1161 + v898;
              BYTE1(v866) += BYTE2(v1110) + v171;
              v901 = v899 - 1;
              if ( !v901 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = v868[14];
                v868[14] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v900);
              LOWORD(v900) = v1099 + v900;
              LOBYTE(v866) = BYTE2(v1099) + v171 + v866;
              v171 = __CFADD__(v1161, v900);
              v902 = v1161 + v900;
              BYTE1(v866) += BYTE2(v1110) + v171;
              v903 = v901 - 1;
              if ( !v903 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = v868[15];
                v868[15] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v902);
              LOWORD(v902) = v1099 + v902;
              LOBYTE(v866) = BYTE2(v1099) + v171 + v866;
              v171 = __CFADD__(v1161, v902);
              v871 = v1161 + v902;
              BYTE1(v866) += BYTE2(v1110) + v171;
              LOWORD(v867) = v903 - 1;
              if ( !(_WORD)v867 )
                break;
              v868 += 16;
            }
            v864 = v1270;
          }
LABEL_1084:
          v864 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v867 > widthViewPort_93AD8 )
          LOWORD(v867) = widthViewPort_93AD8;
        v16 = (__int16)v867 <= (__int16)v865;
        LOWORD(v867) = v867 - v865;
        if ( v16 )
          goto LABEL_1084;
        v868 += v865;
        v871 = __ROL4__(*((_DWORD *)v864 + 3), 16);
        BYTE1(v866) = v871;
        LOWORD(v871) = v864[4];
        LOBYTE(v866) = *((_BYTE *)v864 + 10);
        goto LABEL_1033;
      case 23:
LABEL_1086:
        v904 = (unsigned __int16 *)&unk_93AE0;
        v1162 = v1110 << 16;
        HIWORD(v905) = 0;
        HIWORD(v906) = 0;
        while ( 1 )
        {
          LOWORD(v905) = v904[1];
          v907 = v904[3];
          v908 = (_BYTE *)(pitchViewPort_93AD4 + v1077);
          v1077 += pitchViewPort_93AD4;
          if ( (v905 & 0x8000u) == 0 )
            break;
          if ( (__int16)v907 > 0 )
          {
            v909 = (unsigned __int16)-(__int16)v905;
            v911 = __ROL4__(*((_DWORD *)v904 + 3) + v1110 * v909, 16);
            BYTE1(v906) = v911;
            v910 = *((_DWORD *)v904 + 2) + v1099 * v909;
            LOWORD(v911) = v910;
            v912 = v910 >> 8;
            LOBYTE(v906) = BYTE1(v912);
            if ( v907 > widthViewPort_93AD8 )
              LOWORD(v907) = widthViewPort_93AD8;
            v905 = (unsigned __int16)v912;
LABEL_1096:
            v1271 = v904;
            v913 = dword_93AD0;
            while ( 1 )
            {
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = *v908;
                *v908 = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v911);
              LOWORD(v911) = v1099 + v911;
              LOBYTE(v906) = BYTE2(v1099) + v171 + v906;
              v171 = __CFADD__(v1162, v911);
              v914 = v1162 + v911;
              BYTE1(v906) += BYTE2(v1110) + v171;
              v915 = v907 - 1;
              if ( !v915 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = v908[1];
                v908[1] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v914);
              LOWORD(v914) = v1099 + v914;
              LOBYTE(v906) = BYTE2(v1099) + v171 + v906;
              v171 = __CFADD__(v1162, v914);
              v916 = v1162 + v914;
              BYTE1(v906) += BYTE2(v1110) + v171;
              v917 = v915 - 1;
              if ( !v917 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = v908[2];
                v908[2] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v916);
              LOWORD(v916) = v1099 + v916;
              LOBYTE(v906) = BYTE2(v1099) + v171 + v906;
              v171 = __CFADD__(v1162, v916);
              v918 = v1162 + v916;
              BYTE1(v906) += BYTE2(v1110) + v171;
              v919 = v917 - 1;
              if ( !v919 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = v908[3];
                v908[3] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v918);
              LOWORD(v918) = v1099 + v918;
              LOBYTE(v906) = BYTE2(v1099) + v171 + v906;
              v171 = __CFADD__(v1162, v918);
              v920 = v1162 + v918;
              BYTE1(v906) += BYTE2(v1110) + v171;
              v921 = v919 - 1;
              if ( !v921 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = v908[4];
                v908[4] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v920);
              LOWORD(v920) = v1099 + v920;
              LOBYTE(v906) = BYTE2(v1099) + v171 + v906;
              v171 = __CFADD__(v1162, v920);
              v922 = v1162 + v920;
              BYTE1(v906) += BYTE2(v1110) + v171;
              v923 = v921 - 1;
              if ( !v923 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = v908[5];
                v908[5] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v922);
              LOWORD(v922) = v1099 + v922;
              LOBYTE(v906) = BYTE2(v1099) + v171 + v906;
              v171 = __CFADD__(v1162, v922);
              v924 = v1162 + v922;
              BYTE1(v906) += BYTE2(v1110) + v171;
              v925 = v923 - 1;
              if ( !v925 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = v908[6];
                v908[6] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v924);
              LOWORD(v924) = v1099 + v924;
              LOBYTE(v906) = BYTE2(v1099) + v171 + v906;
              v171 = __CFADD__(v1162, v924);
              v926 = v1162 + v924;
              BYTE1(v906) += BYTE2(v1110) + v171;
              v927 = v925 - 1;
              if ( !v927 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = v908[7];
                v908[7] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v926);
              LOWORD(v926) = v1099 + v926;
              LOBYTE(v906) = BYTE2(v1099) + v171 + v906;
              v171 = __CFADD__(v1162, v926);
              v928 = v1162 + v926;
              BYTE1(v906) += BYTE2(v1110) + v171;
              v929 = v927 - 1;
              if ( !v929 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = v908[8];
                v908[8] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v928);
              LOWORD(v928) = v1099 + v928;
              LOBYTE(v906) = BYTE2(v1099) + v171 + v906;
              v171 = __CFADD__(v1162, v928);
              v930 = v1162 + v928;
              BYTE1(v906) += BYTE2(v1110) + v171;
              v931 = v929 - 1;
              if ( !v931 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = v908[9];
                v908[9] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v930);
              LOWORD(v930) = v1099 + v930;
              LOBYTE(v906) = BYTE2(v1099) + v171 + v906;
              v171 = __CFADD__(v1162, v930);
              v932 = v1162 + v930;
              BYTE1(v906) += BYTE2(v1110) + v171;
              v933 = v931 - 1;
              if ( !v933 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = v908[10];
                v908[10] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v932);
              LOWORD(v932) = v1099 + v932;
              LOBYTE(v906) = BYTE2(v1099) + v171 + v906;
              v171 = __CFADD__(v1162, v932);
              v934 = v1162 + v932;
              BYTE1(v906) += BYTE2(v1110) + v171;
              v935 = v933 - 1;
              if ( !v935 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = v908[11];
                v908[11] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v934);
              LOWORD(v934) = v1099 + v934;
              LOBYTE(v906) = BYTE2(v1099) + v171 + v906;
              v171 = __CFADD__(v1162, v934);
              v936 = v1162 + v934;
              BYTE1(v906) += BYTE2(v1110) + v171;
              v937 = v935 - 1;
              if ( !v937 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = v908[12];
                v908[12] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v936);
              LOWORD(v936) = v1099 + v936;
              LOBYTE(v906) = BYTE2(v1099) + v171 + v906;
              v171 = __CFADD__(v1162, v936);
              v938 = v1162 + v936;
              BYTE1(v906) += BYTE2(v1110) + v171;
              v939 = v937 - 1;
              if ( !v939 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = v908[13];
                v908[13] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v938);
              LOWORD(v938) = v1099 + v938;
              LOBYTE(v906) = BYTE2(v1099) + v171 + v906;
              v171 = __CFADD__(v1162, v938);
              v940 = v1162 + v938;
              BYTE1(v906) += BYTE2(v1110) + v171;
              v941 = v939 - 1;
              if ( !v941 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = v908[14];
                v908[14] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v940);
              LOWORD(v940) = v1099 + v940;
              LOBYTE(v906) = BYTE2(v1099) + v171 + v906;
              v171 = __CFADD__(v1162, v940);
              v942 = v1162 + v940;
              BYTE1(v906) += BYTE2(v1110) + v171;
              v943 = v941 - 1;
              if ( !v943 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = v908[15];
                v908[15] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v942);
              LOWORD(v942) = v1099 + v942;
              LOBYTE(v906) = BYTE2(v1099) + v171 + v906;
              v171 = __CFADD__(v1162, v942);
              v911 = v1162 + v942;
              BYTE1(v906) += BYTE2(v1110) + v171;
              LOWORD(v907) = v943 - 1;
              if ( !(_WORD)v907 )
                break;
              v908 += 16;
            }
            v904 = v1271;
          }
LABEL_1147:
          v904 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v907 > widthViewPort_93AD8 )
          LOWORD(v907) = widthViewPort_93AD8;
        v16 = (__int16)v907 <= (__int16)v905;
        LOWORD(v907) = v907 - v905;
        if ( v16 )
          goto LABEL_1147;
        v908 += v905;
        v911 = __ROL4__(*((_DWORD *)v904 + 3), 16);
        BYTE1(v906) = v911;
        LOWORD(v911) = v904[4];
        LOBYTE(v906) = *((_BYTE *)v904 + 10);
        goto LABEL_1096;
      case 24:
LABEL_1149:
        v944 = (unsigned __int16 *)&unk_93AE0;
        v1163 = v1110 << 16;
        v1170 = v1121 << 16;
        HIWORD(v945) = 0;
        HIWORD(v946) = 0;
        while ( 1 )
        {
          LOWORD(v945) = v944[1];
          v947 = v944[3];
          v948 = (_BYTE *)(pitchViewPort_93AD4 + v1077);
          v1077 += pitchViewPort_93AD4;
          if ( (v945 & 0x8000u) == 0 )
            break;
          if ( (__int16)v947 > 0 )
          {
            if ( v947 > widthViewPort_93AD8 )
              v947 = widthViewPort_93AD8;
            v1209 = v947;
            v949 = (unsigned __int16)-(__int16)v945;
            v950 = __ROL4__(*((_DWORD *)v944 + 3) + v1110 * v949, 16);
            BYTE1(v946) = v950;
            LOWORD(v950) = v944[4] + v1099 * v949;
            v945 = (unsigned int)(*((_DWORD *)v944 + 2) + v1099 * v949) >> 8;
            LOBYTE(v946) = (unsigned int)(*((_DWORD *)v944 + 2) + v1099 * v949) >> 16;
            v951 = __ROL4__(*((_DWORD *)v944 + 4) + v1121 * v949, 16);
            v945 = (unsigned __int16)v945;
LABEL_1159:
            v1272 = v944;
            v952 = dword_93AD0;
            while ( 1 )
            {
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v951;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = *v948;
                *v948 = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v950);
              LOWORD(v950) = v1099 + v950;
              LOBYTE(v946) = BYTE2(v1099) + v171 + v946;
              v171 = __CFADD__(v1163, v950);
              v953 = v1163 + v950;
              BYTE1(v946) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1170, v951);
              v954 = v1170 + v951;
              LOBYTE(v954) = BYTE2(v1121) + v171 + v954;
              v1210 = v1209 - 1;
              if ( !v1210 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v954;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = v948[1];
                v948[1] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v953);
              LOWORD(v953) = v1099 + v953;
              LOBYTE(v946) = BYTE2(v1099) + v171 + v946;
              v171 = __CFADD__(v1163, v953);
              v955 = v1163 + v953;
              BYTE1(v946) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1170, v954);
              v956 = v1170 + v954;
              LOBYTE(v956) = BYTE2(v1121) + v171 + v956;
              v1211 = v1210 - 1;
              if ( !v1211 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v956;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = v948[2];
                v948[2] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v955);
              LOWORD(v955) = v1099 + v955;
              LOBYTE(v946) = BYTE2(v1099) + v171 + v946;
              v171 = __CFADD__(v1163, v955);
              v957 = v1163 + v955;
              BYTE1(v946) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1170, v956);
              v958 = v1170 + v956;
              LOBYTE(v958) = BYTE2(v1121) + v171 + v958;
              v1212 = v1211 - 1;
              if ( !v1212 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v958;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = v948[3];
                v948[3] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v957);
              LOWORD(v957) = v1099 + v957;
              LOBYTE(v946) = BYTE2(v1099) + v171 + v946;
              v171 = __CFADD__(v1163, v957);
              v959 = v1163 + v957;
              BYTE1(v946) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1170, v958);
              v960 = v1170 + v958;
              LOBYTE(v960) = BYTE2(v1121) + v171 + v960;
              v1213 = v1212 - 1;
              if ( !v1213 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v960;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = v948[4];
                v948[4] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v959);
              LOWORD(v959) = v1099 + v959;
              LOBYTE(v946) = BYTE2(v1099) + v171 + v946;
              v171 = __CFADD__(v1163, v959);
              v961 = v1163 + v959;
              BYTE1(v946) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1170, v960);
              v962 = v1170 + v960;
              LOBYTE(v962) = BYTE2(v1121) + v171 + v962;
              v1214 = v1213 - 1;
              if ( !v1214 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v962;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = v948[5];
                v948[5] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v961);
              LOWORD(v961) = v1099 + v961;
              LOBYTE(v946) = BYTE2(v1099) + v171 + v946;
              v171 = __CFADD__(v1163, v961);
              v963 = v1163 + v961;
              BYTE1(v946) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1170, v962);
              v964 = v1170 + v962;
              LOBYTE(v964) = BYTE2(v1121) + v171 + v964;
              v1215 = v1214 - 1;
              if ( !v1215 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v964;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = v948[6];
                v948[6] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v963);
              LOWORD(v963) = v1099 + v963;
              LOBYTE(v946) = BYTE2(v1099) + v171 + v946;
              v171 = __CFADD__(v1163, v963);
              v965 = v1163 + v963;
              BYTE1(v946) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1170, v964);
              v966 = v1170 + v964;
              LOBYTE(v966) = BYTE2(v1121) + v171 + v966;
              v1216 = v1215 - 1;
              if ( !v1216 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v966;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = v948[7];
                v948[7] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v965);
              LOWORD(v965) = v1099 + v965;
              LOBYTE(v946) = BYTE2(v1099) + v171 + v946;
              v171 = __CFADD__(v1163, v965);
              v967 = v1163 + v965;
              BYTE1(v946) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1170, v966);
              v968 = v1170 + v966;
              LOBYTE(v968) = BYTE2(v1121) + v171 + v968;
              v1217 = v1216 - 1;
              if ( !v1217 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v968;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = v948[8];
                v948[8] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v967);
              LOWORD(v967) = v1099 + v967;
              LOBYTE(v946) = BYTE2(v1099) + v171 + v946;
              v171 = __CFADD__(v1163, v967);
              v969 = v1163 + v967;
              BYTE1(v946) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1170, v968);
              v970 = v1170 + v968;
              LOBYTE(v970) = BYTE2(v1121) + v171 + v970;
              v1218 = v1217 - 1;
              if ( !v1218 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v970;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = v948[9];
                v948[9] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v969);
              LOWORD(v969) = v1099 + v969;
              LOBYTE(v946) = BYTE2(v1099) + v171 + v946;
              v171 = __CFADD__(v1163, v969);
              v971 = v1163 + v969;
              BYTE1(v946) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1170, v970);
              v972 = v1170 + v970;
              LOBYTE(v972) = BYTE2(v1121) + v171 + v972;
              v1219 = v1218 - 1;
              if ( !v1219 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v972;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = v948[10];
                v948[10] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v971);
              LOWORD(v971) = v1099 + v971;
              LOBYTE(v946) = BYTE2(v1099) + v171 + v946;
              v171 = __CFADD__(v1163, v971);
              v973 = v1163 + v971;
              BYTE1(v946) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1170, v972);
              v974 = v1170 + v972;
              LOBYTE(v974) = BYTE2(v1121) + v171 + v974;
              v1220 = v1219 - 1;
              if ( !v1220 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v974;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = v948[11];
                v948[11] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v973);
              LOWORD(v973) = v1099 + v973;
              LOBYTE(v946) = BYTE2(v1099) + v171 + v946;
              v171 = __CFADD__(v1163, v973);
              v975 = v1163 + v973;
              BYTE1(v946) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1170, v974);
              v976 = v1170 + v974;
              LOBYTE(v976) = BYTE2(v1121) + v171 + v976;
              v1221 = v1220 - 1;
              if ( !v1221 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v976;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = v948[12];
                v948[12] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v975);
              LOWORD(v975) = v1099 + v975;
              LOBYTE(v946) = BYTE2(v1099) + v171 + v946;
              v171 = __CFADD__(v1163, v975);
              v977 = v1163 + v975;
              BYTE1(v946) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1170, v976);
              v978 = v1170 + v976;
              LOBYTE(v978) = BYTE2(v1121) + v171 + v978;
              v1222 = v1221 - 1;
              if ( !v1222 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v978;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = v948[13];
                v948[13] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v977);
              LOWORD(v977) = v1099 + v977;
              LOBYTE(v946) = BYTE2(v1099) + v171 + v946;
              v171 = __CFADD__(v1163, v977);
              v979 = v1163 + v977;
              BYTE1(v946) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1170, v978);
              v980 = v1170 + v978;
              LOBYTE(v980) = BYTE2(v1121) + v171 + v980;
              v1223 = v1222 - 1;
              if ( !v1223 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v980;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = v948[14];
                v948[14] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v979);
              LOWORD(v979) = v1099 + v979;
              LOBYTE(v946) = BYTE2(v1099) + v171 + v946;
              v171 = __CFADD__(v1163, v979);
              v981 = v1163 + v979;
              BYTE1(v946) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1170, v980);
              v982 = v1170 + v980;
              LOBYTE(v982) = BYTE2(v1121) + v171 + v982;
              v1224 = v1223 - 1;
              if ( !v1224 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v982;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = v948[15];
                v948[15] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v981);
              LOWORD(v981) = v1099 + v981;
              LOBYTE(v946) = BYTE2(v1099) + v171 + v946;
              v171 = __CFADD__(v1163, v981);
              v950 = v1163 + v981;
              BYTE1(v946) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1170, v982);
              v951 = v1170 + v982;
              LOBYTE(v951) = BYTE2(v1121) + v171 + v951;
              v1209 = v1224 - 1;
              if ( !v1209 )
                break;
              v948 += 16;
            }
            v944 = v1272;
          }
LABEL_1210:
          v944 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v947 > widthViewPort_93AD8 )
          v947 = widthViewPort_93AD8;
        v16 = (__int16)v947 <= (__int16)v945;
        LOWORD(v947) = v947 - v945;
        if ( v16 )
          goto LABEL_1210;
        v948 += v945;
        v950 = __ROL4__(*((_DWORD *)v944 + 3), 16);
        BYTE1(v946) = v950;
        LOWORD(v950) = v944[4];
        LOBYTE(v946) = *((_BYTE *)v944 + 10);
        v1209 = v947;
        v951 = __ROL4__(*((_DWORD *)v944 + 4), 16);
        goto LABEL_1159;
      case 25:
LABEL_1212:
        v983 = (unsigned __int16 *)&unk_93AE0;
        v1164 = v1110 << 16;
        v1171 = v1121 << 16;
        HIWORD(v984) = 0;
        HIWORD(v985) = 0;
        while ( 1 )
        {
          LOWORD(v984) = v983[1];
          v986 = v983[3];
          v987 = (_BYTE *)(pitchViewPort_93AD4 + v1077);
          v1077 += pitchViewPort_93AD4;
          if ( (v984 & 0x8000u) == 0 )
            break;
          if ( (__int16)v986 > 0 )
          {
            if ( v986 > widthViewPort_93AD8 )
              v986 = widthViewPort_93AD8;
            v1225 = v986;
            v988 = (unsigned __int16)-(__int16)v984;
            v989 = __ROL4__(*((_DWORD *)v983 + 3) + v1110 * v988, 16);
            BYTE1(v985) = v989;
            LOWORD(v989) = v983[4] + v1099 * v988;
            v984 = (unsigned int)(*((_DWORD *)v983 + 2) + v1099 * v988) >> 8;
            LOBYTE(v985) = (unsigned int)(*((_DWORD *)v983 + 2) + v1099 * v988) >> 16;
            v990 = __ROL4__(*((_DWORD *)v983 + 4) + v1121 * v988, 16);
            v984 = (unsigned __int16)v984;
LABEL_1222:
            v1273 = v983;
            v991 = dword_93AD0;
            while ( 1 )
            {
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v990;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = *v987;
                *v987 = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v989);
              LOWORD(v989) = v1099 + v989;
              LOBYTE(v985) = BYTE2(v1099) + v171 + v985;
              v171 = __CFADD__(v1164, v989);
              v992 = v1164 + v989;
              BYTE1(v985) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1171, v990);
              v993 = v1171 + v990;
              LOBYTE(v993) = BYTE2(v1121) + v171 + v993;
              v1226 = v1225 - 1;
              if ( !v1226 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v993;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = v987[1];
                v987[1] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v992);
              LOWORD(v992) = v1099 + v992;
              LOBYTE(v985) = BYTE2(v1099) + v171 + v985;
              v171 = __CFADD__(v1164, v992);
              v994 = v1164 + v992;
              BYTE1(v985) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1171, v993);
              v995 = v1171 + v993;
              LOBYTE(v995) = BYTE2(v1121) + v171 + v995;
              v1227 = v1226 - 1;
              if ( !v1227 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v995;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = v987[2];
                v987[2] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v994);
              LOWORD(v994) = v1099 + v994;
              LOBYTE(v985) = BYTE2(v1099) + v171 + v985;
              v171 = __CFADD__(v1164, v994);
              v996 = v1164 + v994;
              BYTE1(v985) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1171, v995);
              v997 = v1171 + v995;
              LOBYTE(v997) = BYTE2(v1121) + v171 + v997;
              v1228 = v1227 - 1;
              if ( !v1228 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v997;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = v987[3];
                v987[3] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v996);
              LOWORD(v996) = v1099 + v996;
              LOBYTE(v985) = BYTE2(v1099) + v171 + v985;
              v171 = __CFADD__(v1164, v996);
              v998 = v1164 + v996;
              BYTE1(v985) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1171, v997);
              v999 = v1171 + v997;
              LOBYTE(v999) = BYTE2(v1121) + v171 + v999;
              v1229 = v1228 - 1;
              if ( !v1229 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v999;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = v987[4];
                v987[4] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v998);
              LOWORD(v998) = v1099 + v998;
              LOBYTE(v985) = BYTE2(v1099) + v171 + v985;
              v171 = __CFADD__(v1164, v998);
              v1000 = v1164 + v998;
              BYTE1(v985) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1171, v999);
              v1001 = v1171 + v999;
              LOBYTE(v1001) = BYTE2(v1121) + v171 + v1001;
              v1230 = v1229 - 1;
              if ( !v1230 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1001;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = v987[5];
                v987[5] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v1000);
              LOWORD(v1000) = v1099 + v1000;
              LOBYTE(v985) = BYTE2(v1099) + v171 + v985;
              v171 = __CFADD__(v1164, v1000);
              v1002 = v1164 + v1000;
              BYTE1(v985) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1171, v1001);
              v1003 = v1171 + v1001;
              LOBYTE(v1003) = BYTE2(v1121) + v171 + v1003;
              v1231 = v1230 - 1;
              if ( !v1231 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1003;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = v987[6];
                v987[6] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v1002);
              LOWORD(v1002) = v1099 + v1002;
              LOBYTE(v985) = BYTE2(v1099) + v171 + v985;
              v171 = __CFADD__(v1164, v1002);
              v1004 = v1164 + v1002;
              BYTE1(v985) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1171, v1003);
              v1005 = v1171 + v1003;
              LOBYTE(v1005) = BYTE2(v1121) + v171 + v1005;
              v1232 = v1231 - 1;
              if ( !v1232 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1005;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = v987[7];
                v987[7] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v1004);
              LOWORD(v1004) = v1099 + v1004;
              LOBYTE(v985) = BYTE2(v1099) + v171 + v985;
              v171 = __CFADD__(v1164, v1004);
              v1006 = v1164 + v1004;
              BYTE1(v985) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1171, v1005);
              v1007 = v1171 + v1005;
              LOBYTE(v1007) = BYTE2(v1121) + v171 + v1007;
              v1233 = v1232 - 1;
              if ( !v1233 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1007;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = v987[8];
                v987[8] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v1006);
              LOWORD(v1006) = v1099 + v1006;
              LOBYTE(v985) = BYTE2(v1099) + v171 + v985;
              v171 = __CFADD__(v1164, v1006);
              v1008 = v1164 + v1006;
              BYTE1(v985) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1171, v1007);
              v1009 = v1171 + v1007;
              LOBYTE(v1009) = BYTE2(v1121) + v171 + v1009;
              v1234 = v1233 - 1;
              if ( !v1234 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1009;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = v987[9];
                v987[9] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v1008);
              LOWORD(v1008) = v1099 + v1008;
              LOBYTE(v985) = BYTE2(v1099) + v171 + v985;
              v171 = __CFADD__(v1164, v1008);
              v1010 = v1164 + v1008;
              BYTE1(v985) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1171, v1009);
              v1011 = v1171 + v1009;
              LOBYTE(v1011) = BYTE2(v1121) + v171 + v1011;
              v1235 = v1234 - 1;
              if ( !v1235 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1011;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = v987[10];
                v987[10] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v1010);
              LOWORD(v1010) = v1099 + v1010;
              LOBYTE(v985) = BYTE2(v1099) + v171 + v985;
              v171 = __CFADD__(v1164, v1010);
              v1012 = v1164 + v1010;
              BYTE1(v985) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1171, v1011);
              v1013 = v1171 + v1011;
              LOBYTE(v1013) = BYTE2(v1121) + v171 + v1013;
              v1236 = v1235 - 1;
              if ( !v1236 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1013;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = v987[11];
                v987[11] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v1012);
              LOWORD(v1012) = v1099 + v1012;
              LOBYTE(v985) = BYTE2(v1099) + v171 + v985;
              v171 = __CFADD__(v1164, v1012);
              v1014 = v1164 + v1012;
              BYTE1(v985) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1171, v1013);
              v1015 = v1171 + v1013;
              LOBYTE(v1015) = BYTE2(v1121) + v171 + v1015;
              v1237 = v1236 - 1;
              if ( !v1237 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1015;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = v987[12];
                v987[12] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v1014);
              LOWORD(v1014) = v1099 + v1014;
              LOBYTE(v985) = BYTE2(v1099) + v171 + v985;
              v171 = __CFADD__(v1164, v1014);
              v1016 = v1164 + v1014;
              BYTE1(v985) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1171, v1015);
              v1017 = v1171 + v1015;
              LOBYTE(v1017) = BYTE2(v1121) + v171 + v1017;
              v1238 = v1237 - 1;
              if ( !v1238 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1017;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = v987[13];
                v987[13] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v1016);
              LOWORD(v1016) = v1099 + v1016;
              LOBYTE(v985) = BYTE2(v1099) + v171 + v985;
              v171 = __CFADD__(v1164, v1016);
              v1018 = v1164 + v1016;
              BYTE1(v985) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1171, v1017);
              v1019 = v1171 + v1017;
              LOBYTE(v1019) = BYTE2(v1121) + v171 + v1019;
              v1239 = v1238 - 1;
              if ( !v1239 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1019;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = v987[14];
                v987[14] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v1018);
              LOWORD(v1018) = v1099 + v1018;
              LOBYTE(v985) = BYTE2(v1099) + v171 + v985;
              v171 = __CFADD__(v1164, v1018);
              v1020 = v1164 + v1018;
              BYTE1(v985) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1171, v1019);
              v1021 = v1171 + v1019;
              LOBYTE(v1021) = BYTE2(v1121) + v171 + v1021;
              v1240 = v1239 - 1;
              if ( !v1240 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1021;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = v987[15];
                v987[15] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)v1099, (_WORD)v1020);
              LOWORD(v1020) = v1099 + v1020;
              LOBYTE(v985) = BYTE2(v1099) + v171 + v985;
              v171 = __CFADD__(v1164, v1020);
              v989 = v1164 + v1020;
              BYTE1(v985) += BYTE2(v1110) + v171;
              v171 = __CFADD__(v1171, v1021);
              v990 = v1171 + v1021;
              LOBYTE(v990) = BYTE2(v1121) + v171 + v990;
              v1225 = v1240 - 1;
              if ( !v1225 )
                break;
              v987 += 16;
            }
            v983 = v1273;
          }
LABEL_1273:
          v983 += 10;
          if ( !--v1098 )
            return;
        }
        if ( v986 > widthViewPort_93AD8 )
          v986 = widthViewPort_93AD8;
        v16 = (__int16)v986 <= (__int16)v984;
        LOWORD(v986) = v986 - v984;
        if ( v16 )
          goto LABEL_1273;
        v987 += v984;
        v989 = __ROL4__(*((_DWORD *)v983 + 3), 16);
        BYTE1(v985) = v989;
        LOWORD(v989) = v983[4];
        LOBYTE(v985) = *((_BYTE *)v983 + 10);
        v1225 = v986;
        v990 = __ROL4__(*((_DWORD *)v983 + 4), 16);
        goto LABEL_1222;
      case 26:
LABEL_1275:
        v1022 = (unsigned __int16 *)&unk_93AE0;
        v1165 = v1110 << 16;
        v1172 = v1121 << 16;
        HIWORD(v1023) = 0;
        HIWORD(v1024) = 0;
        break;
    }
    while ( 1 )
    {
      LOWORD(v1023) = v1022[1];
      v1025 = v1022[3];
      v1026 = (char *)(pitchViewPort_93AD4 + v1077);
      v1077 += pitchViewPort_93AD4;
      if ( (v1023 & 0x8000u) == 0 )
        break;
      if ( (__int16)v1025 > 0 )
      {
        if ( v1025 > widthViewPort_93AD8 )
          v1025 = widthViewPort_93AD8;
        v1241 = v1025;
        v1027 = (unsigned __int16)-(__int16)v1023;
        v1028 = __ROL4__(*((_DWORD *)v1022 + 3) + v1110 * v1027, 16);
        BYTE1(v1024) = v1028;
        LOWORD(v1028) = v1022[4] + v1099 * v1027;
        v1023 = (unsigned int)(*((_DWORD *)v1022 + 2) + v1099 * v1027) >> 8;
        LOBYTE(v1024) = (unsigned int)(*((_DWORD *)v1022 + 2) + v1099 * v1027) >> 16;
        v1029 = __ROL4__(*((_DWORD *)v1022 + 4) + v1121 * v1027, 16);
        v1023 = (unsigned __int16)v1023;
LABEL_1285:
        v1274 = v1022;
        v1030 = dword_93AD0;
        while ( 1 )
        {
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)v1099, (_WORD)v1028);
          LOWORD(v1028) = v1099 + v1028;
          BYTE1(v1023) = v1029;
          LOBYTE(v1024) = BYTE2(v1099) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1031 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = *v1026;
            v1031 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1028);
          v1032 = v1165 + v1028;
          BYTE1(v1024) += BYTE2(v1110) + v171;
          v171 = __CFADD__(v1172, v1029);
          v1033 = v1172 + v1029;
          *v1026 = v1031;
          LOBYTE(v1033) = BYTE2(v1121) + v171 + v1033;
          v1242 = v1241 - 1;
          if ( !v1242 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)v1099, (_WORD)v1032);
          LOWORD(v1032) = v1099 + v1032;
          BYTE1(v1023) = v1033;
          LOBYTE(v1024) = BYTE2(v1099) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1034 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = v1026[1];
            v1034 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1032);
          v1035 = v1165 + v1032;
          BYTE1(v1024) += BYTE2(v1110) + v171;
          v171 = __CFADD__(v1172, v1033);
          v1036 = v1172 + v1033;
          v1026[1] = v1034;
          LOBYTE(v1036) = BYTE2(v1121) + v171 + v1036;
          v1243 = v1242 - 1;
          if ( !v1243 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)v1099, (_WORD)v1035);
          LOWORD(v1035) = v1099 + v1035;
          BYTE1(v1023) = v1036;
          LOBYTE(v1024) = BYTE2(v1099) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1037 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = v1026[2];
            v1037 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1035);
          v1038 = v1165 + v1035;
          BYTE1(v1024) += BYTE2(v1110) + v171;
          v171 = __CFADD__(v1172, v1036);
          v1039 = v1172 + v1036;
          v1026[2] = v1037;
          LOBYTE(v1039) = BYTE2(v1121) + v171 + v1039;
          v1244 = v1243 - 1;
          if ( !v1244 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)v1099, (_WORD)v1038);
          LOWORD(v1038) = v1099 + v1038;
          BYTE1(v1023) = v1039;
          LOBYTE(v1024) = BYTE2(v1099) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1040 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = v1026[3];
            v1040 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1038);
          v1041 = v1165 + v1038;
          BYTE1(v1024) += BYTE2(v1110) + v171;
          v171 = __CFADD__(v1172, v1039);
          v1042 = v1172 + v1039;
          v1026[3] = v1040;
          LOBYTE(v1042) = BYTE2(v1121) + v171 + v1042;
          v1245 = v1244 - 1;
          if ( !v1245 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)v1099, (_WORD)v1041);
          LOWORD(v1041) = v1099 + v1041;
          BYTE1(v1023) = v1042;
          LOBYTE(v1024) = BYTE2(v1099) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1043 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = v1026[4];
            v1043 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1041);
          v1044 = v1165 + v1041;
          BYTE1(v1024) += BYTE2(v1110) + v171;
          v171 = __CFADD__(v1172, v1042);
          v1045 = v1172 + v1042;
          v1026[4] = v1043;
          LOBYTE(v1045) = BYTE2(v1121) + v171 + v1045;
          v1246 = v1245 - 1;
          if ( !v1246 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)v1099, (_WORD)v1044);
          LOWORD(v1044) = v1099 + v1044;
          BYTE1(v1023) = v1045;
          LOBYTE(v1024) = BYTE2(v1099) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1046 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = v1026[5];
            v1046 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1044);
          v1047 = v1165 + v1044;
          BYTE1(v1024) += BYTE2(v1110) + v171;
          v171 = __CFADD__(v1172, v1045);
          v1048 = v1172 + v1045;
          v1026[5] = v1046;
          LOBYTE(v1048) = BYTE2(v1121) + v171 + v1048;
          v1247 = v1246 - 1;
          if ( !v1247 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)v1099, (_WORD)v1047);
          LOWORD(v1047) = v1099 + v1047;
          BYTE1(v1023) = v1048;
          LOBYTE(v1024) = BYTE2(v1099) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1049 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = v1026[6];
            v1049 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1047);
          v1050 = v1165 + v1047;
          BYTE1(v1024) += BYTE2(v1110) + v171;
          v171 = __CFADD__(v1172, v1048);
          v1051 = v1172 + v1048;
          v1026[6] = v1049;
          LOBYTE(v1051) = BYTE2(v1121) + v171 + v1051;
          v1248 = v1247 - 1;
          if ( !v1248 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)v1099, (_WORD)v1050);
          LOWORD(v1050) = v1099 + v1050;
          BYTE1(v1023) = v1051;
          LOBYTE(v1024) = BYTE2(v1099) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1052 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = v1026[7];
            v1052 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1050);
          v1053 = v1165 + v1050;
          BYTE1(v1024) += BYTE2(v1110) + v171;
          v171 = __CFADD__(v1172, v1051);
          v1054 = v1172 + v1051;
          v1026[7] = v1052;
          LOBYTE(v1054) = BYTE2(v1121) + v171 + v1054;
          v1249 = v1248 - 1;
          if ( !v1249 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)v1099, (_WORD)v1053);
          LOWORD(v1053) = v1099 + v1053;
          BYTE1(v1023) = v1054;
          LOBYTE(v1024) = BYTE2(v1099) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1055 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = v1026[8];
            v1055 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1053);
          v1056 = v1165 + v1053;
          BYTE1(v1024) += BYTE2(v1110) + v171;
          v171 = __CFADD__(v1172, v1054);
          v1057 = v1172 + v1054;
          v1026[8] = v1055;
          LOBYTE(v1057) = BYTE2(v1121) + v171 + v1057;
          v1250 = v1249 - 1;
          if ( !v1250 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)v1099, (_WORD)v1056);
          LOWORD(v1056) = v1099 + v1056;
          BYTE1(v1023) = v1057;
          LOBYTE(v1024) = BYTE2(v1099) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1058 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = v1026[9];
            v1058 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1056);
          v1059 = v1165 + v1056;
          BYTE1(v1024) += BYTE2(v1110) + v171;
          v171 = __CFADD__(v1172, v1057);
          v1060 = v1172 + v1057;
          v1026[9] = v1058;
          LOBYTE(v1060) = BYTE2(v1121) + v171 + v1060;
          v1251 = v1250 - 1;
          if ( !v1251 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)v1099, (_WORD)v1059);
          LOWORD(v1059) = v1099 + v1059;
          BYTE1(v1023) = v1060;
          LOBYTE(v1024) = BYTE2(v1099) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1061 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = v1026[10];
            v1061 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1059);
          v1062 = v1165 + v1059;
          BYTE1(v1024) += BYTE2(v1110) + v171;
          v171 = __CFADD__(v1172, v1060);
          v1063 = v1172 + v1060;
          v1026[10] = v1061;
          LOBYTE(v1063) = BYTE2(v1121) + v171 + v1063;
          v1252 = v1251 - 1;
          if ( !v1252 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)v1099, (_WORD)v1062);
          LOWORD(v1062) = v1099 + v1062;
          BYTE1(v1023) = v1063;
          LOBYTE(v1024) = BYTE2(v1099) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1064 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = v1026[11];
            v1064 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1062);
          v1065 = v1165 + v1062;
          BYTE1(v1024) += BYTE2(v1110) + v171;
          v171 = __CFADD__(v1172, v1063);
          v1066 = v1172 + v1063;
          v1026[11] = v1064;
          LOBYTE(v1066) = BYTE2(v1121) + v171 + v1066;
          v1253 = v1252 - 1;
          if ( !v1253 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)v1099, (_WORD)v1065);
          LOWORD(v1065) = v1099 + v1065;
          BYTE1(v1023) = v1066;
          LOBYTE(v1024) = BYTE2(v1099) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1067 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = v1026[12];
            v1067 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1065);
          v1068 = v1165 + v1065;
          BYTE1(v1024) += BYTE2(v1110) + v171;
          v171 = __CFADD__(v1172, v1066);
          v1069 = v1172 + v1066;
          v1026[12] = v1067;
          LOBYTE(v1069) = BYTE2(v1121) + v171 + v1069;
          v1254 = v1253 - 1;
          if ( !v1254 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)v1099, (_WORD)v1068);
          LOWORD(v1068) = v1099 + v1068;
          BYTE1(v1023) = v1069;
          LOBYTE(v1024) = BYTE2(v1099) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1070 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = v1026[13];
            v1070 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1068);
          v1071 = v1165 + v1068;
          BYTE1(v1024) += BYTE2(v1110) + v171;
          v171 = __CFADD__(v1172, v1069);
          v1072 = v1172 + v1069;
          v1026[13] = v1070;
          LOBYTE(v1072) = BYTE2(v1121) + v171 + v1072;
          v1255 = v1254 - 1;
          if ( !v1255 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)v1099, (_WORD)v1071);
          LOWORD(v1071) = v1099 + v1071;
          BYTE1(v1023) = v1072;
          LOBYTE(v1024) = BYTE2(v1099) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1073 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = v1026[14];
            v1073 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1071);
          v1074 = v1165 + v1071;
          BYTE1(v1024) += BYTE2(v1110) + v171;
          v171 = __CFADD__(v1172, v1072);
          v1075 = v1172 + v1072;
          v1026[14] = v1073;
          LOBYTE(v1075) = BYTE2(v1121) + v171 + v1075;
          v1256 = v1255 - 1;
          if ( !v1256 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)v1099, (_WORD)v1074);
          LOWORD(v1074) = v1099 + v1074;
          BYTE1(v1023) = v1075;
          LOBYTE(v1024) = BYTE2(v1099) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1076 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = v1026[15];
            v1076 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1074);
          v1028 = v1165 + v1074;
          BYTE1(v1024) += BYTE2(v1110) + v171;
          v171 = __CFADD__(v1172, v1075);
          v1029 = v1172 + v1075;
          v1026[15] = v1076;
          LOBYTE(v1029) = BYTE2(v1121) + v171 + v1029;
          v1241 = v1256 - 1;
          if ( !v1241 )
            break;
          v1026 += 16;
        }
        v1022 = v1274;
      }
LABEL_1352:
      v1022 += 10;
      if ( !--v1098 )
        return;
    }
    if ( v1025 > widthViewPort_93AD8 )
      v1025 = widthViewPort_93AD8;
    v16 = (__int16)v1025 <= (__int16)v1023;
    LOWORD(v1025) = v1025 - v1023;
    if ( v16 )
      goto LABEL_1352;
    v1026 += v1023;
    v1028 = __ROL4__(*((_DWORD *)v1022 + 3), 16);
    BYTE1(v1024) = v1028;
    LOWORD(v1028) = v1022[4];
    LOBYTE(v1024) = *((_BYTE *)v1022 + 10);
    v1241 = v1025;
    v1029 = __ROL4__(*((_DWORD *)v1022 + 4), 16);
    goto LABEL_1285;
  }
  if ( v6 == v8 )
  {
    if ( *a3 <= *a1 )
      return;
    v3 = (int32*)a2;
    v4 = (int32*)a3;
    v5 = (int32*)a1;
    goto LABEL_225;
  }
  if ( v6 < v8 )
  {
    v3 = (int32*)a2;
    v4 = (int32*)a3;
    v5 = (int32*)a1;
    goto LABEL_124;
  }
  if ( v7 == v8 )
  {
    if (*(int32*)a3 <= *(int32*)a2 )
      return;
    v3 = (int32*)a2;
    v4 = (int32*)a3;
    v5 = (int32*)a1;
    goto LABEL_268;
  }
  if ( v7 < v8 )
  {
    v3 = (int32*)a2;
    v4 = (int32*)a3;
    v5 = (int32*)a1;
    goto LABEL_24;
  }
  v3 = (int32*)a3;
  v4 = (int32*)a1;
  v5 = (int32*)a2;
LABEL_124:
  v60 = v3[1];
  v1174 = v60;
  if ( v60 >= 0 )
  {
    if ( v60 >= heightViewPort_93ADC )
      return;
    v1077 = beginPrevLineFrame_93AC8 + pitchViewPort_93AD4 * v60;
    v1276 = 0;
  }
  else
  {
    v1077 = beginPrevLineFrame_93AC8;
    v1276 = 1;
  }
  v61 = v5[1];
  v1280 = v61 > heightViewPort_93ADC;
  v1089 = v61 - v60;
  v62 = v4[1];
  v1284 = v62 > heightViewPort_93ADC;
  v63 = v62 - v60;
  v1093 = v63;
  v1098 = v63;
  v1079 = ((*v5 - *v3) << 16) / v1089;
  if ( ((*v4 - *v3) << 16) / v63 > v1079 )
  {
    v1083 = ((*v4 - *v3) << 16) / v63;
    v1087 = ((*v4 - *v5) << 16) / (v4[1] - v5[1]);
    v1095 = v4[1] - v5[1];
    v1097 = *v5 << 16;
    switch ( byte_967E1 )
    {
      case 0:
      case 14:
      case 15:
        v102 = *v3 << 16;
        v103 = v102;
        if ( v1276 )
        {
          v16 = v1098 <= -v1174;
          v1098 += v1174;
          if ( v16 )
            return;
          v1146 = -v1174;
          if ( -v1174 - v1089 >= 0 )
          {
            v1147 = v1146 - v1089;
            v1095 -= v1147;
            v104 = v1087 * v1147 + v1097;
            v103 += v1147 * v1083 + v1089 * v1083;
            if ( v1284 )
            {
              v1095 = heightViewPort_93ADC;
              v1098 = heightViewPort_93ADC;
            }
            v105 = (uint32*)&unk_93AE0;
LABEL_219:
            if ( v1280 )
            {
              v29 = (unsigned __int8)byte_967E1;
              switch ( byte_967E1 )
              {
                case 0:
                  goto LABEL_309;
                case 1:
                  goto LABEL_322;
                case 2:
                  goto LABEL_351;
                case 3:
                  goto LABEL_382;
                case 4:
                  goto LABEL_445;
                case 5:
                  goto LABEL_474;
                case 6:
                  goto LABEL_503;
                case 7:
                case 11:
                  goto LABEL_564;
                case 8:
                  goto LABEL_595;
                case 9:
                case 10:
                  goto LABEL_658;
                case 12:
                  goto LABEL_721;
                case 13:
                  goto LABEL_752;
                case 14:
                  goto LABEL_783;
                case 15:
                  goto LABEL_812;
                case 16:
                  goto LABEL_841;
                case 17:
                  goto LABEL_870;
                case 18:
                  goto LABEL_899;
                case 19:
                  goto LABEL_930;
                case 20:
                  goto LABEL_961;
                case 21:
                  goto LABEL_992;
                case 22:
                  goto LABEL_1023;
                case 23:
                  goto LABEL_1086;
                case 24:
                  goto LABEL_1149;
                case 25:
                  goto LABEL_1212;
                case 26:
                  goto LABEL_1275;
              }
            }
            do
            {
              *v105 = v104;
              v104 += v1087;
              v105[1] = v103;
              v103 += v1083;
              v105 += 5;
              --v1095;
            }
            while ( v1095 );
            v29 = (unsigned __int8)byte_967E1;
            switch ( byte_967E1 )
            {
              case 0:
                goto LABEL_309;
              case 1:
                goto LABEL_322;
              case 2:
                goto LABEL_351;
              case 3:
                goto LABEL_382;
              case 4:
                goto LABEL_445;
              case 5:
                goto LABEL_474;
              case 6:
                goto LABEL_503;
              case 7:
              case 11:
                goto LABEL_564;
              case 8:
                goto LABEL_595;
              case 9:
              case 10:
                goto LABEL_658;
              case 12:
                goto LABEL_721;
              case 13:
                goto LABEL_752;
              case 14:
                goto LABEL_783;
              case 15:
                goto LABEL_812;
              case 16:
                goto LABEL_841;
              case 17:
                goto LABEL_870;
              case 18:
                goto LABEL_899;
              case 19:
                goto LABEL_930;
              case 20:
                goto LABEL_961;
              case 21:
                goto LABEL_992;
              case 22:
                goto LABEL_1023;
              case 23:
                goto LABEL_1086;
              case 24:
                goto LABEL_1149;
              case 25:
                goto LABEL_1212;
              case 26:
                goto LABEL_1275;
            }
          }
          v1089 += v1174;
          v102 += v1079 * v1146;
          v103 += v1146 * v1083;
          if ( v1284 )
          {
            v1098 = heightViewPort_93ADC;
            if ( v1280 )
            {
              v1089 = heightViewPort_93ADC;
            }
            else
            {
              v1280 = heightViewPort_93ADC <= v1089;
              v1095 = heightViewPort_93ADC - v1089;
            }
          }
        }
        else if ( v1284 )
        {
          v106 = heightViewPort_93ADC - v1174;
          v1098 = heightViewPort_93ADC - v1174;
          if ( v1280 )
          {
            v1089 = heightViewPort_93ADC - v1174;
          }
          else
          {
            v27 = __OFSUB__(v106, v1089);
            v107 = v106 - v1089;
            v1280 = (v107 < 0) ^ v27 | (v107 == 0);
            v1095 = v107;
          }
        }
        v105 = (uint32*)&unk_93AE0;
        do
        {
          *v105 = v102;
          v102 += v1079;
          v105[1] = v103;
          v103 += v1083;
          v105 += 5;
          --v1089;
        }
        while ( v1089 );
        v104 = v1097;
        goto LABEL_219;
      case 1:
      case 4:
      case 16:
      case 17:
        v91 = v1089 * (__int64)(*v4 - *v3) / v63;
        v92 = *v3 - *v5;
        v93 = v91 + v92 == 0;
        v16 = (v91 + v92 < 0) ^ __OFADD__(v91, v92);
        v94 = v91 + v92;
        if ( v16 )
          return;
        if ( !v93 )
          v1121 = (int)(v3[4] + v1089 * (__int64)(v4[4] - v3[4]) / v1093 - v5[4]) / (v94 + 1);
        v1125 = (v5[4] - v3[4]) / v1089;
        v1131 = (v4[4] - v5[4]) / v1095;
        v95 = *v3 << 16;
        v96 = v95;
        v97 = v3[4];
        if ( v1276 )
        {
          v16 = v1098 <= -v1174;
          v1098 += v1174;
          if ( v16 )
            return;
          v1144 = -v1174;
          if ( -v1174 - v1089 >= 0 )
          {
            v1145 = v1144 - v1089;
            v1095 -= v1145;
            v98 = v1087 * v1145 + v1097;
            v96 += v1145 * v1083 + v1089 * v1083;
            v97 += v1145 * v1131 + v1089 * v1125;
            if ( v1284 )
            {
              v1095 = heightViewPort_93ADC;
              v1098 = heightViewPort_93ADC;
            }
            v99 = (uint32*)&unk_93AE0;
LABEL_198:
            if ( v1280 )
            {
              v29 = (unsigned __int8)byte_967E1;
              switch ( byte_967E1 )
              {
                case 0:
                  goto LABEL_309;
                case 1:
                  goto LABEL_322;
                case 2:
                  goto LABEL_351;
                case 3:
                  goto LABEL_382;
                case 4:
                  goto LABEL_445;
                case 5:
                  goto LABEL_474;
                case 6:
                  goto LABEL_503;
                case 7:
                case 11:
                  goto LABEL_564;
                case 8:
                  goto LABEL_595;
                case 9:
                case 10:
                  goto LABEL_658;
                case 12:
                  goto LABEL_721;
                case 13:
                  goto LABEL_752;
                case 14:
                  goto LABEL_783;
                case 15:
                  goto LABEL_812;
                case 16:
                  goto LABEL_841;
                case 17:
                  goto LABEL_870;
                case 18:
                  goto LABEL_899;
                case 19:
                  goto LABEL_930;
                case 20:
                  goto LABEL_961;
                case 21:
                  goto LABEL_992;
                case 22:
                  goto LABEL_1023;
                case 23:
                  goto LABEL_1086;
                case 24:
                  goto LABEL_1149;
                case 25:
                  goto LABEL_1212;
                case 26:
                  goto LABEL_1275;
              }
            }
            do
            {
              *v99 = v98;
              v98 += v1087;
              v99[1] = v96;
              v96 += v1083;
              v99[4] = v97;
              v97 += v1131;
              v99 += 5;
              --v1095;
            }
            while ( v1095 );
            v29 = (unsigned __int8)byte_967E1;
            switch ( byte_967E1 )
            {
              case 0:
                goto LABEL_309;
              case 1:
                goto LABEL_322;
              case 2:
                goto LABEL_351;
              case 3:
                goto LABEL_382;
              case 4:
                goto LABEL_445;
              case 5:
                goto LABEL_474;
              case 6:
                goto LABEL_503;
              case 7:
              case 11:
                goto LABEL_564;
              case 8:
                goto LABEL_595;
              case 9:
              case 10:
                goto LABEL_658;
              case 12:
                goto LABEL_721;
              case 13:
                goto LABEL_752;
              case 14:
                goto LABEL_783;
              case 15:
                goto LABEL_812;
              case 16:
                goto LABEL_841;
              case 17:
                goto LABEL_870;
              case 18:
                goto LABEL_899;
              case 19:
                goto LABEL_930;
              case 20:
                goto LABEL_961;
              case 21:
                goto LABEL_992;
              case 22:
                goto LABEL_1023;
              case 23:
                goto LABEL_1086;
              case 24:
                goto LABEL_1149;
              case 25:
                goto LABEL_1212;
              case 26:
                goto LABEL_1275;
            }
          }
          v1089 += v1174;
          v95 += v1079 * v1144;
          v96 += v1144 * v1083;
          v97 += v1144 * v1125;
          if ( v1284 )
          {
            v1098 = heightViewPort_93ADC;
            if ( v1280 )
            {
              v1089 = heightViewPort_93ADC;
            }
            else
            {
              v1280 = heightViewPort_93ADC <= v1089;
              v1095 = heightViewPort_93ADC - v1089;
            }
          }
        }
        else if ( v1284 )
        {
          v100 = heightViewPort_93ADC - v1174;
          v1098 = heightViewPort_93ADC - v1174;
          if ( v1280 )
          {
            v1089 = heightViewPort_93ADC - v1174;
          }
          else
          {
            v27 = __OFSUB__(v100, v1089);
            v101 = v100 - v1089;
            v1280 = (v101 < 0) ^ v27 | (v101 == 0);
            v1095 = v101;
          }
        }
        v99 = (uint32*)&unk_93AE0;
        do
        {
          *v99 = v95;
          v95 += v1079;
          v99[1] = v96;
          v96 += v1083;
          v99[4] = v97;
          v97 += v1125;
          v99 += 5;
          --v1089;
        }
        while ( v1089 );
        v98 = v1097;
        goto LABEL_198;
      case 2:
      case 3:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 18:
      case 19:
      case 22:
      case 23:
        v78 = v1089 * (__int64)(*v4 - *v3) / v63;
        v79 = *v3 - *v5;
        v80 = v78 + v79 == 0;
        v16 = (v78 + v79 < 0) ^ __OFADD__(v78, v79);
        v81 = v78 + v79;
        if ( v16 )
          return;
        if ( !v80 )
        {
          v82 = v81 + 1;
          v1099 = (int)(v3[2] + v1089 * (__int64)(v4[2] - v3[2]) / v1093 - v5[2]) / v82;
          v1110 = (int)(v3[3] + v1089 * (__int64)(v4[3] - v3[3]) / v1093 - v5[3]) / v82;
        }
        v1103 = (v5[2] - v3[2]) / v1089;
        v1114 = (v5[3] - v3[3]) / v1089;
        v1109 = (v4[2] - v5[2]) / v1095;
        v1120 = (v4[3] - v5[3]) / v1095;
        v83 = *v3 << 16;
        v84 = v83;
        v85 = v3[2];
        v86 = v3[3];
        if ( v1276 )
        {
          v16 = v1098 <= -v1174;
          v1098 += v1174;
          if ( v16 )
            return;
          v1142 = -v1174;
          if ( -v1174 - v1089 >= 0 )
          {
            v1143 = v1142 - v1089;
            v1095 -= v1143;
            v87 = v1087 * v1143 + v1097;
            v84 += v1143 * v1083 + v1089 * v1083;
            v85 += v1143 * v1109 + v1089 * v1103;
            v86 += v1143 * v1120 + v1089 * v1114;
            if ( v1284 )
            {
              v1095 = heightViewPort_93ADC;
              v1098 = heightViewPort_93ADC;
            }
            v88 = (uint32*)&unk_93AE0;
LABEL_174:
            if ( v1280 )
            {
              v29 = (unsigned __int8)byte_967E1;
              switch ( byte_967E1 )
              {
                case 0:
                  goto LABEL_309;
                case 1:
                  goto LABEL_322;
                case 2:
                  goto LABEL_351;
                case 3:
                  goto LABEL_382;
                case 4:
                  goto LABEL_445;
                case 5:
                  goto LABEL_474;
                case 6:
                  goto LABEL_503;
                case 7:
                case 11:
                  goto LABEL_564;
                case 8:
                  goto LABEL_595;
                case 9:
                case 10:
                  goto LABEL_658;
                case 12:
                  goto LABEL_721;
                case 13:
                  goto LABEL_752;
                case 14:
                  goto LABEL_783;
                case 15:
                  goto LABEL_812;
                case 16:
                  goto LABEL_841;
                case 17:
                  goto LABEL_870;
                case 18:
                  goto LABEL_899;
                case 19:
                  goto LABEL_930;
                case 20:
                  goto LABEL_961;
                case 21:
                  goto LABEL_992;
                case 22:
                  goto LABEL_1023;
                case 23:
                  goto LABEL_1086;
                case 24:
                  goto LABEL_1149;
                case 25:
                  goto LABEL_1212;
                case 26:
                  goto LABEL_1275;
              }
            }
            do
            {
              *v88 = v87;
              v87 += v1087;
              v88[1] = v84;
              v84 += v1083;
              v88[2] = v85;
              v85 += v1109;
              v88[3] = v86;
              v86 += v1120;
              v88 += 5;
              --v1095;
            }
            while ( v1095 );
            v29 = (unsigned __int8)byte_967E1;
            switch ( byte_967E1 )
            {
              case 0:
                goto LABEL_309;
              case 1:
                goto LABEL_322;
              case 2:
                goto LABEL_351;
              case 3:
                goto LABEL_382;
              case 4:
                goto LABEL_445;
              case 5:
                goto LABEL_474;
              case 6:
                goto LABEL_503;
              case 7:
              case 11:
                goto LABEL_564;
              case 8:
                goto LABEL_595;
              case 9:
              case 10:
                goto LABEL_658;
              case 12:
                goto LABEL_721;
              case 13:
                goto LABEL_752;
              case 14:
                goto LABEL_783;
              case 15:
                goto LABEL_812;
              case 16:
                goto LABEL_841;
              case 17:
                goto LABEL_870;
              case 18:
                goto LABEL_899;
              case 19:
                goto LABEL_930;
              case 20:
                goto LABEL_961;
              case 21:
                goto LABEL_992;
              case 22:
                goto LABEL_1023;
              case 23:
                goto LABEL_1086;
              case 24:
                goto LABEL_1149;
              case 25:
                goto LABEL_1212;
              case 26:
                goto LABEL_1275;
            }
          }
          v1089 += v1174;
          v83 += v1079 * v1142;
          v84 += v1142 * v1083;
          v85 += v1142 * v1103;
          v86 += v1142 * v1114;
          if ( v1284 )
          {
            v1098 = heightViewPort_93ADC;
            if ( v1280 )
            {
              v1089 = heightViewPort_93ADC;
            }
            else
            {
              v1280 = heightViewPort_93ADC <= v1089;
              v1095 = heightViewPort_93ADC - v1089;
            }
          }
        }
        else if ( v1284 )
        {
          v89 = heightViewPort_93ADC - v1174;
          v1098 = heightViewPort_93ADC - v1174;
          if ( v1280 )
          {
            v1089 = heightViewPort_93ADC - v1174;
          }
          else
          {
            v27 = __OFSUB__(v89, v1089);
            v90 = v89 - v1089;
            v1280 = (v90 < 0) ^ v27 | (v90 == 0);
            v1095 = v90;
          }
        }
        v88 = (uint32*)&unk_93AE0;
        do
        {
          *v88 = v83;
          v83 += v1079;
          v88[1] = v84;
          v84 += v1083;
          v88[2] = v85;
          v85 += v1103;
          v88[3] = v86;
          v86 += v1114;
          v88 += 5;
          --v1089;
        }
        while ( v1089 );
        v87 = v1097;
        goto LABEL_174;
      case 5:
      case 6:
      case 20:
      case 21:
      case 24:
      case 25:
      case 26:
        v64 = v1089 * (__int64)(*v4 - *v3) / v63;
        v65 = *v3 - *v5;
        v66 = v64 + v65 == 0;
        v16 = (v64 + v65 < 0) ^ __OFADD__(v64, v65);
        v67 = v64 + v65;
        if ( v16 )
          return;
        if ( !v66 )
        {
          v68 = v67 + 1;
          v1099 = (int)(v3[2] + v1089 * (__int64)(v4[2] - v3[2]) / v1093 - v5[2]) / v68;
          v1110 = (int)(v3[3] + v1089 * (__int64)(v4[3] - v3[3]) / v1093 - v5[3]) / v68;
          v64 = (int)(v3[4] + v1089 * (__int64)(v4[4] - v3[4]) / v1093 - v5[4]) / v68;
        }
        v1121 = v64;
        v1102 = (v5[2] - v3[2]) / v1089;
        v1113 = (v5[3] - v3[3]) / v1089;
        v1124 = (v5[4] - v3[4]) / v1089;
        v1108 = (v4[2] - v5[2]) / v1095;
        v1119 = (v4[3] - v5[3]) / v1095;
        v1130 = (v4[4] - v5[4]) / v1095;
        v69 = *v3 << 16;
        v70 = v69;
        v71 = v3[2];
        v72 = v3[3];
        v73 = v3[4];
        if ( v1276 )
        {
          v16 = v1098 <= -v1174;
          v1098 += v1174;
          if ( v16 )
            return;
          v1140 = -v1174;
          if ( -v1174 - v1089 >= 0 )
          {
            v1141 = v1140 - v1089;
            v1095 -= v1141;
            v74 = v1087 * v1141 + v1097;
            v70 += v1141 * v1083 + v1089 * v1083;
            v71 += v1141 * v1108 + v1089 * v1102;
            v72 += v1141 * v1119 + v1089 * v1113;
            v73 += v1141 * v1130 + v1089 * v1124;
            if ( v1284 )
            {
              v1095 = heightViewPort_93ADC;
              v1098 = heightViewPort_93ADC;
            }
            v75 = (uint32*)&unk_93AE0;
LABEL_150:
            if ( v1280 )
            {
              v29 = (unsigned __int8)byte_967E1;
              switch ( byte_967E1 )
              {
                case 0:
                  goto LABEL_309;
                case 1:
                  goto LABEL_322;
                case 2:
                  goto LABEL_351;
                case 3:
                  goto LABEL_382;
                case 4:
                  goto LABEL_445;
                case 5:
                  goto LABEL_474;
                case 6:
                  goto LABEL_503;
                case 7:
                case 11:
                  goto LABEL_564;
                case 8:
                  goto LABEL_595;
                case 9:
                case 10:
                  goto LABEL_658;
                case 12:
                  goto LABEL_721;
                case 13:
                  goto LABEL_752;
                case 14:
                  goto LABEL_783;
                case 15:
                  goto LABEL_812;
                case 16:
                  goto LABEL_841;
                case 17:
                  goto LABEL_870;
                case 18:
                  goto LABEL_899;
                case 19:
                  goto LABEL_930;
                case 20:
                  goto LABEL_961;
                case 21:
                  goto LABEL_992;
                case 22:
                  goto LABEL_1023;
                case 23:
                  goto LABEL_1086;
                case 24:
                  goto LABEL_1149;
                case 25:
                  goto LABEL_1212;
                case 26:
                  goto LABEL_1275;
              }
            }
            do
            {
              *v75 = v74;
              v74 += v1087;
              v75[1] = v70;
              v70 += v1083;
              v75[2] = v71;
              v71 += v1108;
              v75[3] = v72;
              v72 += v1119;
              v75[4] = v73;
              v73 += v1130;
              v75 += 5;
              --v1095;
            }
            while ( v1095 );
            v29 = (unsigned __int8)byte_967E1;
            switch ( byte_967E1 )
            {
              case 0:
                goto LABEL_309;
              case 1:
                goto LABEL_322;
              case 2:
                goto LABEL_351;
              case 3:
                goto LABEL_382;
              case 4:
                goto LABEL_445;
              case 5:
                goto LABEL_474;
              case 6:
                goto LABEL_503;
              case 7:
              case 11:
                goto LABEL_564;
              case 8:
                goto LABEL_595;
              case 9:
              case 10:
                goto LABEL_658;
              case 12:
                goto LABEL_721;
              case 13:
                goto LABEL_752;
              case 14:
                goto LABEL_783;
              case 15:
                goto LABEL_812;
              case 16:
                goto LABEL_841;
              case 17:
                goto LABEL_870;
              case 18:
                goto LABEL_899;
              case 19:
                goto LABEL_930;
              case 20:
                goto LABEL_961;
              case 21:
                goto LABEL_992;
              case 22:
                goto LABEL_1023;
              case 23:
                goto LABEL_1086;
              case 24:
                goto LABEL_1149;
              case 25:
                goto LABEL_1212;
              case 26:
                goto LABEL_1275;
            }
          }
          v1089 += v1174;
          v69 += v1079 * v1140;
          v70 += v1140 * v1083;
          v71 += v1140 * v1102;
          v72 += v1140 * v1113;
          v73 += v1140 * v1124;
          if ( v1284 )
          {
            v1098 = heightViewPort_93ADC;
            if ( v1280 )
            {
              v1089 = heightViewPort_93ADC;
            }
            else
            {
              v1280 = heightViewPort_93ADC <= v1089;
              v1095 = heightViewPort_93ADC - v1089;
            }
          }
        }
        else if ( v1284 )
        {
          v76 = heightViewPort_93ADC - v1174;
          v1098 = heightViewPort_93ADC - v1174;
          if ( v1280 )
          {
            v1089 = heightViewPort_93ADC - v1174;
          }
          else
          {
            v27 = __OFSUB__(v76, v1089);
            v77 = v76 - v1089;
            v1280 = (v77 < 0) ^ v27 | (v77 == 0);
            v1095 = v77;
          }
        }
        v75 = (uint32*)&unk_93AE0;
        do
        {
          *v75 = v69;
          v69 += v1079;
          v75[1] = v70;
          v70 += v1083;
          v75[2] = v71;
          v71 += v1102;
          v75[3] = v72;
          v72 += v1113;
          v75[4] = v73;
          v73 += v1124;
          v75 += 5;
          --v1089;
        }
        while ( v1089 );
        v74 = v1097;
        goto LABEL_150;
    }
  }
}

//SYNCHRONIZED WITH REMC2
void SetViewPort2_79495_799A5(uint8* beginFrame, int a2, int pitch, int viewPortWidth, int viewPortHeight)
{
	if (pitch)
		pitchViewPort_93AD4 = pitch;
	if (beginFrame)
	{
		beginFrame_93ACC = beginFrame;
		beginPrevLineFrame_93AC8 = beginFrame - pitchViewPort_93AD4;
	}
	if (a2)
		dword_93AD0 = a2;
	if (viewPortHeight)
		heightViewPort_93ADC = viewPortHeight;
	if (viewPortWidth)
		widthViewPort_93AD8 = viewPortWidth;
}

//----- (00079E16) --------------------------------------------------------
void sub_79E16(int a1)
{
  _BYTE *v1; // ecx
  _BYTE *v2; // edx
  int v3; // [esp-30h] [ebp-3Ch]
  int v4; // [esp-30h] [ebp-3Ch]
  int v5; // [esp-30h] [ebp-3Ch]
  int v6; // [esp-30h] [ebp-3Ch]
  int v7; // [esp-30h] [ebp-3Ch]
  int v8; // [esp-30h] [ebp-3Ch]
  int v9; // [esp-30h] [ebp-3Ch]
  int v10; // [esp-30h] [ebp-3Ch]
  int v11; // [esp-30h] [ebp-3Ch]
  int savedregs; // [esp+Ch] [ebp+0h] BYREF

  sub_61A1C_61F2C(0);
  v1 = (_BYTE *)blurBuffer_AE404_AE3F4;
  v2 = (_BYTE *)begWscreen_2ECFF4_2ECFE4;
  v3 = sub_79A70_79F80(0, (_BYTE *)begWscreen_2ECFF4_2ECFE4, (_BYTE *)blurBuffer_AE404_AE3F4, 0, (int)&savedregs, a1);
  sub_61A1C_61F2C(1);
  v4 = sub_79A70_79F80(v3, v2, v1, 0, (int)&savedregs, a1);
  sub_61A1C_61F2C(2);
  v5 = sub_79A70_79F80(v4, v2, v1, 0, (int)&savedregs, a1);
  sub_61A1C_61F2C(3);
  v6 = sub_79A70_79F80(v5, v2, v1, 0, (int)&savedregs, a1);
  sub_61A1C_61F2C(4);
  v7 = sub_79A70_79F80(v6, v2, v1, 0, (int)&savedregs, a1);
  sub_61A1C_61F2C(5);
  v8 = sub_79A70_79F80(v7, v2, v1, 0, (int)&savedregs, a1);
  sub_61A1C_61F2C(6);
  v9 = sub_79A70_79F80(v8, v2, v1, 0, (int)&savedregs, a1);
  sub_61A1C_61F2C(7);
  v10 = sub_79A70_79F80(v9, v2, v1, 0, (int)&savedregs, a1);
  sub_61A1C_61F2C(8);
  v11 = sub_79A70_79F80(v10, v2, v1, 0, (int)&savedregs, a1);
  sub_61A1C_61F2C(9);
  sub_79A70_79F80(v11, v2, v1, 0, (int)&savedregs, a1);
}
// AE3F4: using guessed type int blurBuffer_AE404_AE3F4;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//----- (00079F2B) --------------------------------------------------------
void sub_79F2B(int a1)
{
  _BYTE *v1; // ecx
  _BYTE *v2; // edx
  int v3; // [esp-30h] [ebp-3Ch]
  int savedregs; // [esp+Ch] [ebp+0h] BYREF

  sub_61A1C_61F2C(0);
  v1 = (_BYTE *)blurBuffer_AE404_AE3F4;
  v2 = (_BYTE *)begWscreen_2ECFF4_2ECFE4;
  v3 = sub_79A70_79F80(0, (_BYTE *)begWscreen_2ECFF4_2ECFE4, (_BYTE *)blurBuffer_AE404_AE3F4, 0, (int)&savedregs, a1);
  sub_61A1C_61F2C(1);
  sub_79A70_79F80(v3, v2, v1, 0, (int)&savedregs, a1);
}
// AE3F4: using guessed type int blurBuffer_AE404_AE3F4;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//SYNCHRONIZED WITH REMC1
int sub_79A70_79F80(int result,_BYTE *a2,_BYTE *a3,int a4,int a5,int a6)
{
  int *v6; // edi
  int v7; // eax

  v6 = (int *)tempScreenBuffer_A0000;
  do
  {
    LOBYTE(a4) = a3[1];
    LOWORD(result) = *(_WORD *)(a6 + 2 * a4);
    LOBYTE(a4) = a2[1];
    LOWORD(result) = *(_WORD *)(a6 + 2 * a4 + 512) + result;
    v7 = result << 16;
    LOBYTE(a4) = *a3;
    LOWORD(v7) = *(_WORD *)(a6 + 2 * a4);
    LOBYTE(a4) = *a2;
    LOWORD(v7) = *(_WORD *)(a6 + 2 * a4 + 512) + v7;
    *v6 = v7;
    LOBYTE(a4) = a3[3];
    LOWORD(v7) = *(_WORD *)(a6 + 2 * a4);
    LOBYTE(a4) = a2[3];
    LOWORD(v7) = *(_WORD *)(a6 + 2 * a4 + 512) + v7;
    v7 <<= 16;
    LOBYTE(a4) = a3[2];
    LOWORD(v7) = *(_WORD *)(a6 + 2 * a4);
    LOBYTE(a4) = a2[2];
    LOWORD(v7) = *(_WORD *)(a6 + 2 * a4 + 512) + v7;
    v6[1] = v7;
    LOBYTE(a4) = a3[5];
    LOWORD(v7) = *(_WORD *)(a6 + 2 * a4);
    LOBYTE(a4) = a2[5];
    LOWORD(v7) = *(_WORD *)(a6 + 2 * a4 + 512) + v7;
    v7 <<= 16;
    LOBYTE(a4) = a3[4];
    LOWORD(v7) = *(_WORD *)(a6 + 2 * a4);
    LOBYTE(a4) = a2[4];
    LOWORD(v7) = *(_WORD *)(a6 + 2 * a4 + 512) + v7;
    v6[2] = v7;
    LOBYTE(a4) = a3[7];
    LOWORD(v7) = *(_WORD *)(a6 + 2 * a4);
    LOBYTE(a4) = a2[7];
    LOWORD(v7) = *(_WORD *)(a6 + 2 * a4 + 512) + v7;
    result = v7 << 16;
    LOBYTE(a4) = a3[6];
    LOWORD(result) = *(_WORD *)(a6 + 2 * a4);
    LOBYTE(a4) = a2[6];
    LOWORD(result) = *(_WORD *)(a6 + 2 * a4 + 512) + result;
    v6[3] = result;
    a3 += 8;
    a2 += 8;
    v6 += 4;
  }
  while ( (*(_DWORD *)(a5 - 4))-- != 1 );
  return result;
}

//----- (0007A03D) --------------------------------------------------------
void sub_7A03D()
{
  char *v0; // edi
  char *v1; // esi
  int v2; // edx
  char *v3; // esi
  char *v4; // esi
  char *v5; // edi
  int v6; // edx
  char *v7; // esi
  char *v8; // esi
  char *v9; // edi
  int v10; // edx
  char *v11; // edi
  int v12; // edx
  char *v13; // edi
  int v14; // edx

  if ( !byte_9AD96 )
    sub_5BDF8_5C308();
  sub_61A1C_61F2C(0);
  v0 = (char *)&tempScreenBuffer_A0000 + 51200;
  v1 = (char *)begWscreen_2ECFF4_2ECFE4;
  v2 = 11;
  do
  {
    qmemcpy(v0, v1, 0x280u);
    v1 += 1280;
    v0 += 1280;
    --v2;
  }
  while ( v2 );
  qmemcpy(v0, v1, 0x100u);
  v3 = v1 + 256;
  sub_61A1C_61F2C(1);
  qmemcpy(&tempScreenBuffer_A0000, v3, 0x180u);
  v4 = v3 + 1024;
  v5 = (char *)&tempScreenBuffer_A0000 + 1024;
  v6 = 50;
  do
  {
    qmemcpy(v5, v4, 0x280u);
    v4 += 1280;
    v5 += 1280;
    --v6;
  }
  while ( v6 );
  qmemcpy(v5, v4, 0x200u);
  v7 = v4 + 512;
  sub_61A1C_61F2C(2);
  qmemcpy(&tempScreenBuffer_A0000, v7, 0x80u);
  v8 = v7 + 768;
  v9 = (char *)&tempScreenBuffer_A0000 + 768;
  v10 = 51;
  do
  {
    qmemcpy(v9, v8, 0x280u);
    v8 += 1280;
    v9 += 1280;
    --v10;
  }
  while ( v10 );
  sub_61A1C_61F2C(3);
  v11 = (char *)&tempScreenBuffer_A0000 + 512;
  v12 = 51;
  do
  {
    qmemcpy(v11, v8, 0x280u);
    v8 += 1280;
    v11 += 1280;
    --v12;
  }
  while ( v12 );
  sub_61A1C_61F2C(4);
  v13 = (char *)&tempScreenBuffer_A0000 + 256;
  v14 = 34;
  do
  {
    qmemcpy(v13, v8, 0x280u);
    v8 += 1280;
    v13 += 1280;
    --v14;
  }
  while ( v14 );
  if ( !byte_9AD96 )
    sub_5BE50_5C360();
}
// 9AD96: using guessed type char byte_9AD96;
// 12EFE4: using guessed type int begWscreen_2ECFF4_2ECFE4;

//----- (0007B954) --------------------------------------------------------
int sub_7B954()
{
  return dword_A0CA8;
}
// A0CA8: using guessed type int dword_A0CA8;

// nfuncs=1666 queued=1396 decompiled=1396 lumina nreq=0 worse=0 better=0
// ALL OK, 1396 function(s) have been successfully decompiled
